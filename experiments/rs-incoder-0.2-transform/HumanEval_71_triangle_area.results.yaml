language: rs
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = \n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpgatrtkxs.rs:89:1\n\
    \   |\n89 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgatrtkxs.rs:22:12\n   |\n21 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n22 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n22 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + ((a + b + c) / 2.0);\n    area = area + ((a + b) * (b + c)\
    \ / 2.0);\n    area = area + ((a * b) * (c + a) / 2.0);\n    area = area - ((a\
    \ * b) * (b + c) / 2.0);\n    area = area - ((a + b) * (c + a) / 2.0);\n    area\
    \ = area - ((a + b + c) / 2.0);\n    area = area - ((a + c) * (b + c) / 2.0);\n\
    \    area = area - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c\
    \ + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n    area = area\
    \ - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n\
    \    area = area - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c\
    \ + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n    area = area\
    \ - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n\
    \    area = area - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c\
    \ + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n    area = area\
    \ - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n\
    \    area = area - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c\
    \ + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n    area = area\
    \ - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n\
    \    area = area - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c\
    \ + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n    area = area\
    \ - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n\
    \    area = area - ((a * b) * (c + a) / 2.0);\n    area = area - ((a * b) * (c\
    \ + a) / 2.0);\n    area = area - ((a * b) * (c + a) / 2.0);\n    area = area\
    \ - ((a * b) * (c + \n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmpmfoeajv9.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpmfoeajv9.rs:57:30\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \              - closing delimiter possibly meant for this\n...\n57 |     area\
    \ = area - ((a * b) * (c + \n   |                              ^ unclosed delimiter\n\
    58 | }\n   | ^ mismatched closing delimiter\n\nerror[E0277]: cannot divide `isize`\
    \ by `{float}`\n  --> /tmp/tmpmfoeajv9.rs:22:32\n   |\n22 |     area = area +\
    \ ((a + b + c) / 2.0);\n   |                                ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpmfoeajv9.rs:23:38\n\
    \   |\n23 |     area = area + ((a + b) * (b + c) / 2.0);\n   |               \
    \                       ^ no implementation for `isize / {float}`\n   |\n   =\
    \ help: the trait `Div<{float}>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpmfoeajv9.rs:24:38\n   |\n24 |   \
    \  area = area + ((a * b) * (c + a) / 2.0);\n   |                            \
    \          ^ no implementation for `isize / {float}`\n   |\n   = he"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        -1\n    } else {\n        (b * b) - ((a * c) - (b * a))\n   \
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprswqziju.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprswqziju.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         (b * b) - ((a * c) - (b * a))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         ((b * b) - ((a * c) - (b * a))) as f64\n   | \
    \        +                             ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a +\
    \ b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeh_yt58h.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        x => if a + b > c { -1.0 } else { 1.0 },\n\
    \        _ => if a + c > b { -1.0 } else { 1.0 },\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpy0w5jwzd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpbwxi_xtu.rs:27:12\n\
    \   |\n27 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpbwxi_xtu.rs:22:17\n\
    \   |\n22 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpbwxi_xtu.rs:23:17\n\
    \   |\n23 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpbwxi_xtu.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0\n\
    \    let mut t = 0.0\n    s = s + a\n    t = t + b\n    t = t + c\n    s = s +\
    \ t\n    if s == 0.0 {\n        return -1.0\n    }\n    s / 3.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy_vlf0ft.rs:21:20\n\
    \   |\n21 |     let mut s = 0.0\n   |                    ^ help: add `;` here\n\
    22 |     let mut t = 0.0\n   |     --- unexpected token\n\nerror: expected `;`,\
    \ found `s`\n  --> /tmp/tmpy_vlf0ft.rs:22:20\n   |\n22 |     let mut t = 0.0\n\
    \   |                    ^ help: add `;` here\n23 |     s = s + a\n   |     -\
    \ unexpected token\n\nerror: expected `;`, found `t`\n  --> /tmp/tmpy_vlf0ft.rs:23:14\n\
    \   |\n23 |     s = s + a\n   |              ^ help: add `;` here\n24 |     t\
    \ = t + b\n   |     - unexpected token\n\nerror: expected `;`, found `t`\n  -->\
    \ /tmp/tmpy_vlf0ft.rs:24:14\n   |\n24 |     t = t + b\n   |              ^ help:\
    \ add `;` here\n25 |     t = t + c\n   |     - unexpected token\n\nerror: expected\
    \ `;`, found `s`\n  --> /tmp/tmpy_vlf0ft.rs:25:14\n   |\n25 |     t = t + c\n\
    \   |              ^ help: add `;` here\n26 |     s = s + t\n   |     - unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpy_vlf0ft.rs:26:14\n\
    \   |\n26 |     s = s + t\n   |              ^ help: add `;` here\n27 |     if\
    \ s == 0.0 {\n   |     -- unexpected token\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpy_vlf0ft.rs:23:11\n   |\n23 |     s = s + a\n  \
    \ |           ^ no implementation for `{float} + isize`\n   |\n   = help: the\
    \ trait `Add<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpy_vlf0ft.rs:24:11\n   |\n24 |     t\
    \ = t + b\n   |           ^ no implementation for `{float} + isize`\n   |\n  \
    \ = help: the trait `Add<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n           "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum:\
    \ f64 = 0.0;\n    if a + b > c {\n        sum = a + b - c;\n    } else {\n   \
    \     sum = c;\n    }\n    if a + c > b {\n        sum += a + c - b;\n    } else\
    \ {\n        sum += b;\n    }\n    if b + c > a {\n        sum += b + c - a;\n\
    \    } else {\n        sum += a;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1dw4pz19.rs:14:15\n   |\n\
    12 |     let mut sum: f64 = 0.0;\n   |                  --- expected due to this\
    \ type\n13 |     if a + b > c {\n14 |         sum = a + b - c;\n   |         \
    \      ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n14 |         sum = (a + b - c) as f64;\n   |   \
    \            +         ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1dw4pz19.rs:16:15\n\
    \   |\n12 |     let mut sum: f64 = 0.0;\n   |                  --- expected due\
    \ to this type\n...\n16 |         sum = c;\n   |               ^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    16 |         sum = c as f64;\n   |                 ++++++\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `f64`\n  --> /tmp/tmp1dw4pz19.rs:19:13\n   |\n19 |   \
    \      sum += a + c - b;\n   |             ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmp1dw4pz19.rs:21:13\n\
    \   |\n21 |         sum += b;\n   |             ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as A"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut a = a as f64;\n    let mut b = b as f64;\n    let mut\
    \ c = c as f64;\n    if a + b > c {\n        let mut t = a;\n        a = b;\n\
    \        b = t;\n    }\n    if a + c > b {\n        let mut t = a;\n        a\
    \ = c;\n        c = t;\n    }\n    if b + c > a {\n        let mut t = b;\n  \
    \      b = c;\n        c = t;\n    }\n    if a + b > c {\n        let mut t =\
    \ a;\n        a = b;\n        b = t;\n    }\n    if a + c > b {\n        let mut\
    \ t = a;\n        a = c;\n        c = t;\n    }\n    if b + c > a {\n        let\
    \ mut t = b;\n        b = c;\n        c = t;\n    }\n    if a + b > c {\n    \
    \    let mut t = a;\n        a = b;\n        b = t;\n    }\n    if a + c > b {\n\
    \        let mut t = a;\n        a = c;\n        c = t;\n    }\n    if b + c >\
    \ a {\n        let mut t = b;\n        b = c;\n        c = t;\n    }\n    if a\
    \ + b > c {\n        let mut t = a;\n        a = b;\n        b = t;\n    }\n \
    \   if a + c > b {\n        let mut t = a;\n        a = c;\n        c = t;\n \
    \   }\n    if b + c > a {\n        let mut t = b;\n        b = c;\n        c =\
    \ t;\n    }\n    if a + b > c {\n        let mut t = a;\n        a = b;\n    \
    \    b = t;\n    }\n    if a + c > b {\n        let mut t = a;\n        a = c;\n\
    \        c = t;\n    }\n    if b + c > a {\n        let mut t = b;\n        b\
    \ = c;\n        c = t;\n    }\n    if a + b > c {\n        let mut t = a;\n  \
    \      a = b;\n        b = t;\n    }\n    if a + c > b {\n        let mut t =\
    \ a;\n        a = c;\n        c = t;\n    }\n    if b + c > a {\n        let mut\
    \ t = b;\n        b = c;\n        c = t;\n    }\n    if a + b > c {\n        let\
    \ mut t = a;\n        a = b;\n        b = t;\n    }\n    if a + c > b {\n    \
    \    let mut t = a;\n        a = c;\n        c = t;\n    }\n    if b + c > a {\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpkduox8q5.rs:137:3\n\
    \    |\n11  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n123 |     if b + c > a {\n    |                  - this delimiter might not\
    \ be properly closed...\n124 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n137 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpkduox8q5.rs:11:51\n   |\n11 | fn triangle_area(a: isize, b: isize, c:\
    \ isize) -> f64 {\n   |    -------------                                  ^^^\
    \ expected `f64`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut u1 = 0.0;\n    let mut v1 = 0.0;\n    let mut w1 = 0.0;\n\
    \    let mut x2 = 0.0;\n    let mut y2 = 0.0;\n    let mut z2 = 0.0;\n    let\
    \ mut u2 = 0.0;\n    let mut v2 = 0.0;\n    let mut w2 = 0.0;\n    let mut x3\
    \ = 0.0;\n    let mut y3 = 0.0;\n    let mut z3 = 0.0;\n    let mut u3 = 0.0;\n\
    \    let mut v3 = 0.0;\n    let mut w3 = 0.0;\n    let mut x4 = 0.0;\n    let\
    \ mut y4 = 0.0;\n    let mut z4 = 0.0;\n    let mut u4 = 0.0;\n    let mut v4\
    \ = 0.0;\n    let mut w4 = 0.0;\n    let mut x5 = 0.0;\n    let mut y5 = 0.0;\n\
    \    let mut z5 = 0.0;\n    let mut u5 = 0.0;\n    let mut v5 = 0.0;\n    let\
    \ mut w5 = 0.0;\n    let mut x6 = 0.0;\n    let mut y6 = 0.0;\n    let mut z6\
    \ = 0.0;\n    let mut u6 = 0.0;\n    let mut v6 = 0.0;\n    let mut w6 = 0.0;\n\
    \    let mut x7 = 0.0;\n    let mut y7 = 0.0;\n    let mut z7 = 0.0;\n    let\
    \ mut u7 = 0.0;\n    let mut v7 = 0.0;\n    let mut w7 = 0.0;\n    let mut x8\
    \ = 0.0;\n    let mut y8 = 0.0;\n    let mut z8 = 0.0;\n    let mut u8 = 0.0;\n\
    \    let mut v8 = 0.0;\n    let mut w8 = 0.0;\n    let mut x9 = 0.0;\n    let\
    \ mut y9 = 0.0;\n    let mut z9 = 0.0;\n    let mut u9 = 0.0;\n    let mut v9\
    \ = 0.0;\n    let mut w9 = 0.0;\n    let mut x10 = 0.0;\n    let mut y10 = 0.0;\n\
    \    let mut z10 = 0.0;\n    let mut u10 = 0.0;\n    let mut v10 = 0.0;\n    let\
    \ mut w10 = 0.0;\n    let mut x11\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpujev_eld.rs:77:16\n   |\n\
    77 |     let mut x11\n   |                ^ help: add `;` here\n78 | }\n   | -\
    \ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpujev_eld.rs:11:51\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = b * b - c;\n    }\n    if a + c > b\
    \ {\n        s = s + a * c;\n    }\n    if b + c > a {\n        s = s + b * c;\n\
    \    }\n    if s > 0.0 {\n        s /= 2.0;\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_q1rvgs7.rs:14:13\n   |\n\
    12 |     let mut s = 0.0;\n   |                 --- expected due to this value\n\
    13 |     if a + b > c {\n14 |         s = b * b - c;\n   |             ^^^^^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmp_q1rvgs7.rs:17:15\n   |\n17 |         s = s + a\
    \ * c;\n   |               ^ no implementation for `{float} + isize`\n   |\n \
    \  = help: the trait `Add<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp_q1rvgs7.rs:20:15\n   |\n20 |      \
    \   s = s + b * c;\n   |               ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a < b {\n        area += (b - a) * (b - c);\n    }\n  \
    \  \n    if a < c {\n        area += (b - a) * (c - b);\n    }\n    \n    if c\
    \ < b {\n        area += (c - a) * (c - b);\n    }\n    \n    area / 2.0\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpq4ei845b.rs:25:14\n\
    \   |\n25 |         area += (b - a) * (b - c);\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpq4ei845b.rs:29:14\n   |\n29 |         area += (b - a) * (c - b);\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpq4ei845b.rs:33:14\n   |\n33 |\
    \         area += (c - a) * (c - b);\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b\n    area += a * c\n    area += b * c\n    area /= 3.0\n  \
    \  area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmp3pib6de_.rs:22:18\n  \
    \ |\n22 |     area += a * b\n   |                  ^ help: add `;` here\n23 |\
    \     area += a * c\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmp3pib6de_.rs:23:18\n   |\n23 |     area += a * c\n   |\
    \                  ^ help: add `;` here\n24 |     area += b * c\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmp3pib6de_.rs:24:18\n\
    \   |\n24 |     area += b * c\n   |                  ^ help: add `;` here\n25\
    \ |     area /= 3.0\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmp3pib6de_.rs:25:16\n   |\n25 |     area /= 3.0\n   |  \
    \              ^ help: add `;` here\n26 |     area\n   |     ---- unexpected token\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp3pib6de_.rs:22:10\n\
    \   |\n22 |     area += a * b\n   |          ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp3pib6de_.rs:23:10\n\
    \   |\n23 |     area += a * c\n   |          ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isiz"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a < b {\n        area += a * b;\n    }\n    \n    if a\
    \ < c {\n        area += a * c;\n    }\n    \n    if b < c {\n        area +=\
    \ b * c;\n    }\n    \n    area / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpudkpxova.rs:25:14\n\
    \   |\n25 |         area += a * b;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpudkpxova.rs:29:14\n\
    \   |\n29 |         area += a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpudkpxova.rs:33:14\n\
    \   |\n33 |         area += b * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    (a * b + c) * 0.5\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxjtb067f.rs:21:17\n\
    \   |\n21 |     (a * b + c) * 0.5\n   |                 ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut a = a as f64;\n    let mut b = b as f64;\n \
    \   let mut c = c as f64;\n    if a + b > c {\n        s = c - (a + b);\n    \
    \    t = a;\n        w = b;\n    } else {\n        s = a + b;\n        t = c;\n\
    \        w = a;\n    }\n    if a + c > b {\n        u = c - (a + b);\n       \
    \ v = a;\n    } else {\n        u = a + b;\n        v = c;\n    }\n    if b +\
    \ c > a {\n        w = c - (a + b);\n    } else {\n        w = a + b;\n    }\n\
    \    s * (s / a) + (t / b) + (u / c) + (v / w) + (w / a)\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-0.4833333333333335`,\n right: `6.0`', /tmp/tmpvck5em7q.rs:46:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return 0.0;\n    }\n    if a > b {\n        (a, b) = (b, a);\n    }\n   \
    \ if a > c {\n        (a, c) = (c, a);\n    }\n    if b > c {\n        (b, c)\
    \ =(c, b);\n    }\n    s * s\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdza1abrk.rs:28:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n28 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n28 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\
    \    use std::cmp::Ordering;\n    use std::cmp::PartialOrd;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::Ordering::*;\n    use std::cmp::Ordering::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp6qdq0yyh.rs:60:1\n\
    \   |\n60 | }\n   | ^ expected identifier\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:15:9\n   |\n15 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:18:9\n   |\n18 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:19:9\n   |\n19 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:20:9\n   |\n20 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:21:9\n   |\n21 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:22:9\n   |\n22 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:23:9\n   |\n23 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:24:9\n   |\n24 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:25:9\n   |\n25 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:26:9\n   |\n26 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:27:9\n   |\n27 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:28:9\n   |\n28 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmp6qdq0yyh.rs:29:9\n   |\n29 |     use "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0\n\
    \    for i in 0..3 {\n        s += (a * i + b * i + c) * (i + 1)\n    }\n    s\
    \ / 6.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpm46wxx15.rs:21:20\n\
    \   |\n21 |     let mut s = 0.0\n   |                    ^ help: add `;` here\n\
    22 |     for i in 0..3 {\n   |     --- unexpected token\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpm46wxx15.rs:23:11\n   |\n23 |\
    \         s += (a * i + b * i + c) * (i + 1)\n   |           ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0;\n\
    \    if a + b > c {\n        s = s + (a - b) * (c - a);\n    }\n    if a + c >\
    \ b {\n        s = s + (a - c) * (b - a);\n    }\n    if b + c > a {\n       \
    \ s = s + (b - c) * (a - b);\n    }\n    s / 3.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpwm7v0w8x.rs:23:15\n\
    \   |\n23 |         s = s + (a - b) * (c - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpwm7v0w8x.rs:26:15\n\
    \   |\n26 |         s = s + (a - c) * (b - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpwm7v0w8x.rs:29:15\n\
    \   |\n29 |         s = s + (b - c) * (a - b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = b * b - c;\n    }\n    if a + c > b\
    \ {\n        s = s * 0.5 - c;\n    }\n    if b + c > a {\n        s = s * 0.5\
    \ - b;\n    }\n    if s > 0.0 {\n        s /= 2.0;\n    }\n    return s;\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkyptcmxk.rs:14:13\n   |\n\
    12 |     let mut s = 0.0;\n   |                 --- expected due to this value\n\
    13 |     if a + b > c {\n14 |         s = b * b - c;\n   |             ^^^^^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `{float}`\n  --> /tmp/tmpkyptcmxk.rs:17:21\n   |\n17 |        \
    \ s = s * 0.5 - c;\n   |                     ^ no implementation for `{float}\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot subtract `isize` from `{float}`\n  --> /tmp/tmpkyptcmxk.rs:20:21\n  \
    \ |\n20 |         s = s * 0.5 - b;\n   |                     ^ no implementation\
    \ for `{float} - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        -1\n    } else if a + c > b {\n        -1\n    } else if b +\
    \ c > a {\n        -1\n    } else {\n        (a * b + c) / 2.0\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpaesty91i.rs:19:21\n   |\n\
    19 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0\n\
    \    s += a * b\n    s += a * c\n    s += b * c\n    s / 3.0\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `s`\n  --> /tmp/tmpc6491u86.rs:21:20\n   |\n\
    21 |     let mut s = 0.0\n   |                    ^ help: add `;` here\n22 | \
    \    s += a * b\n   |     - unexpected token\n\nerror: expected `;`, found `s`\n\
    \  --> /tmp/tmpc6491u86.rs:22:15\n   |\n22 |     s += a * b\n   |            \
    \   ^ help: add `;` here\n23 |     s += a * c\n   |     - unexpected token\n\n\
    error: expected `;`, found `s`\n  --> /tmp/tmpc6491u86.rs:23:15\n   |\n23 |  \
    \   s += a * c\n   |               ^ help: add `;` here\n24 |     s += b * c\n\
    \   |     - unexpected token\n\nerror: expected `;`, found `s`\n  --> /tmp/tmpc6491u86.rs:24:15\n\
    \   |\n24 |     s += b * c\n   |               ^ help: add `;` here\n25 |    \
    \ s / 3.0\n   |     - unexpected token\n\nerror[E0277]: cannot add-assign `isize`\
    \ to `{float}`\n  --> /tmp/tmpc6491u86.rs:22:7\n   |\n22 |     s += a * b\n  \
    \ |       ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpc6491u86.rs:23:7\n   |\n23 |     s += a\
    \ * c\n   |       ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpc6491u86.rs:24:7\n   |\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a > b {\n        area += b * (c - a) / 2.0;\n    }\n  \
    \  \n    if a > c {\n        area += c * (b - a) / 2.0;\n    }\n    \n    if b\
    \ > c {\n        area += a * (c - b) / 2.0;\n    }\n    \n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpiaua6myp.rs:25:29\n\
    \   |\n25 |         area += b * (c - a) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpiaua6myp.rs:29:29\n   |\n29 |         area += c * (b - a) / 2.0;\n\
    \   |                             ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpiaua6myp.rs:33:29\n   |\n\
    33 |         area += a * (c - b) / 2.0;\n   |                             ^ no\
    \ implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return 0.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmppcvqqm_z.rs:19:7\n\
    \   |\n19 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        _ => if a + b > c { a / b + c / a } else\
    \ { c / a + b / c },\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6r_2m4zj.rs:14:29\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         _ => if a + b > c { a / b + c / a } else { c / a + b\
    \ / c },\n   |                             ^^^^^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n14 |      \
    \   _ => if a + b > c { (a / b + c / a) as f64 } else { c / a + b / c },\n   |\
    \                             +             ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6r_2m4zj.rs:14:52\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n14 |         _ => if\
    \ a + b > c { a / b + c / a } else { c / a + b / c },\n   |                  \
    \                                  ^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |         _ =>\
    \ if a + b > c { a / b + c / a } else { (c / a + b / c) as f64 },\n   |      \
    \                                              +             ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c * a);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = (a * b) - (c\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpqufakrat.rs:102:22\n\
    \    |\n11  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - closing delimiter possibly\
    \ meant for this\n...\n102 |     area = (a * b) - (c\n    |                  \
    \    ^ unclosed delimiter\n103 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqufakrat.rs:22:12\n   |\n21 |     let mut area:\
    \ f64 = 0.0;\n   |                   --- expected due to this type\n22 |     area\
    \ = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n22 |     area\
    \ = ((a * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqufakrat.rs:26:12\n   |\n21 |  \
    \   let mut area: f64 = 0.0;\n   |                   --- expected due to this\
    \ type\n...\n26 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n26 |     area = ((a * b) - (c * a)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqufakrat.rs:30:12\n\
    \   |\n21 |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to this type\n...\n30 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n30 |     area = ((a * b) - (c * a)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqufakrat.rs:34:12\n\
    \   |\n21 |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to this type\n...\n34 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzr7gftgj.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = (a + b\
    \ + c) / 2.0;\n    let mut area: f64 = 0.0;\n    if a > b {\n        area = s\
    \ * (s - a) * (s - b) * (s - c);\n    }\n    if a > c {\n        area = s * (s\
    \ - a) * (s - c) * (s - b);\n    }\n    if b > c {\n        area = s * (s - b)\
    \ * (s - c) * (s - a);\n    }\n    return area.round() as f64;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp2fymzhpb.rs:21:29\n\
    \   |\n21 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    (a * b + c) / 2.0\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmplu4y0lxl.rs:21:17\n\
    \   |\n21 |     (a * b + c) / 2.0\n   |                 ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return 0.0;\n    }\n    let mut area = 0.0;\n    area += a;\n    area +=\
    \ b;\n    area += c;\n    area /= s;\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmphsiktg6g.rs:20:10\n\
    \   |\n20 |     area += a;\n   |          ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmphsiktg6g.rs:21:10\n\
    \   |\n21 |     area += b;\n   |          ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmphsiktg6g.rs:22:10\n\
    \   |\n22 |     area += c;\n   |          ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide-assign `{float}` by `isize`\n  -->\
    \ /tmp/tmphsiktg6g.rs:23:10\n   |\n23 |     area /= s;\n   |          ^^ no implementation\
    \ for `{float} /= isize`"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    (a * b + c * a + b\
    \ * c) / (2.0 * a)\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp72vwqj9q.rs:21:36\n\
    \   |\n21 |     (a * b + c * a + b * c) / (2.0 * a)\n   |                    \
    \                ^ no implementation for `{float} * isize`\n   |\n   = help: the\
    \ trait `Mul<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * c);\n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    area = area / 2.0;\n    area = f64::round(area * 100.0) / 100.0;\n\
    \    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6_pdmaly.rs:22:12\n   |\n\
    21 |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n22 |     area = (a * b) - (c * c);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n22 |     area = ((a * b) - (c * c)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a +\
    \ b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeh_yt58h.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = (a + b\
    \ + c) / 2;\n    let mut area = 0.0;\n    while s > 0 {\n        area += s;\n\
    \        s /= 2;\n    }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpjqbj2_u2.rs:24:14\n\
    \   |\n24 |         area += s;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    if a + b > c {\n        s = c - (a + b);\n\
    \        t = a;\n    } else {\n        s = a;\n        t = b;\n    }\n    if a\
    \ + c > b {\n        s = s + (b - c);\n        t = b;\n    } else {\n        s\
    \ = b;\n        t = c;\n    }\n    if a + b > c {\n        s = s + (c - a);\n\
    \        t = c;\n    } else {\n        s = c;\n        t = a;\n    }\n    s /\
    \ t\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7y6ncbd0.rs:15:13\n   |\n\
    12 |     let mut s = 0.0;\n   |                 --- expected due to this value\n\
    ...\n15 |         s = c - (a + b);\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7y6ncbd0.rs:16:13\n\
    \   |\n13 |     let mut t = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n16 |         t = a;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7y6ncbd0.rs:18:13\n\
    \   |\n12 |     let mut s = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n18 |         s = a;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7y6ncbd0.rs:19:13\n\
    \   |\n13 |     let mut t = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n19 |         t = b;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmp7y6ncbd0.rs:22:15\n   |\n22 |         s = s + (b - c);\n   |       \
    \        ^ no implementation for `{float} + isize`\n   |\n   = help: the trait\
    \ `Add<isize>` is not implemented for `{float}`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7y6ncbd0.rs:23:13\n   |\n13 |     let mut t = 0.0;\n   |      \
    \           --- expected due to this value\n...\n23 |         t = b;\n   |   \
    \          ^ expected floating-point number, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7y6ncbd0.rs:25:13\n   |\n12 |     let mut s = 0.0;\n  \
    \ |                 --- expected due to this value\n...\n25 |         s = b;\n\
    \   |             ^ expected floating-point number, found "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpr187rhor.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        -1\n    } else if a + c > b {\n        -1\n    } else if b +\
    \ c > a {\n        -1\n    } else {\n        (a * b + c) / 2.0\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpaesty91i.rs:19:21\n   |\n\
    19 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ 0.0;\n    if a < b {\n        s = s + (b - a);\n    }\n    if a < c {\n    \
    \    s = s + (c - a);\n    }\n    if b < c {\n        s = s + (c - b);\n    }\n\
    \    \n    return s * 0.5\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp3mk_1jlb.rs:24:15\n\
    \   |\n24 |         s = s + (b - a);\n   |               ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp3mk_1jlb.rs:27:15\n\
    \   |\n27 |         s = s + (c - a);\n   |               ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp3mk_1jlb.rs:30:15\n\
    \   |\n30 |         s = s + (c - b);\n   |               ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\
    \    use std::cmp::Ordering;\n    use std::cmp::PartialOrd;\n    use std::cmp::Ordering::*;\n\
    \    use std::cmp::PartialOrd::*;\n\n    if a + b > c {\n        return -1.0\n\
    \    }\n    if a + c > b {\n        return -1.0\n    }\n    if b + c > a {\n \
    \       return -1.0\n    }\n    let mut area = 0.0;\n    area += a * b as f64;\n\
    \    area += a * c as f64;\n    area += b * c as f64;\n    area /= 3.0;\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: items in traits are not importable\n  --> /tmp/tmpbggirtlb.rs:16:9\n\
    \   |\n16 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nwarning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpbggirtlb.rs:13:9\n\
    \   |\n13 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nwarning: the item `PartialOrd`\
    \ is imported redundantly\n   --> /tmp/tmpbggirtlb.rs:14:9\n    |\n14  |     use\
    \ std::cmp::PartialOrd;\n    |         ^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused\
    \ import: `std::cmp::PartialOrd`\n  --> /tmp/tmpbggirtlb.rs:14:9\n   |\n14 | \
    \    use std::cmp::PartialOrd;\n   |         ^^^^^^^^^^^^^^^^^^^^\n\nwarning:\
    \ unused import: `std::cmp::Ordering::*`\n  --> /tmp/tmpbggirtlb.rs:15:9\n   |\n\
    15 |     use std::cmp::Ordering::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^\n\nwarning:\
    \ unused import: `std::cmp::PartialOrd::*`\n  --> /tmp/tmpbggirtlb.rs:16:9\n \
    \  |\n16 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmpbggirtlb.rs:28:15\n\
    \   |\n28 |     area += a * b as f64;\n   |               ^ no implementation\
    \ for `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmpbggirtlb.rs:29:15\n\
    \   |\n29 |     area += a * c as f64;\n   |               ^ no implementation\
    \ for `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzr7gftgj.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return 0.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmppcvqqm_z.rs:19:7\n\
    \   |\n19 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpr187rhor.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = b - c;\n    }\n    if a + c > b {\n        b = c - a;\n\
    \    }\n    if b + c > a {\n        c = a - b;\n    }\n    (a * b * c) / ((a *\
    \ b) + c) as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.2222222222222223`,\n right: `6.0`', /tmp/tmpa2urs3km.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        _ => if a + b > c { 1.0 } else { -1.0 },\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.0`,\n right: `6.0`', /tmp/tmpzcwb0p3d.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a < b {\n        area += a * b;\n    }\n    if a < c {\n\
    \        area += a * c;\n    }\n    if b < c {\n        area += b * c;\n    }\n\
    \    \n    area /= 2.0;\n    \n    area = area.round();\n    \n    return area;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpflkvfl2w.rs:25:14\n\
    \   |\n25 |         area += a * b;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpflkvfl2w.rs:28:14\n\
    \   |\n28 |         area += a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpflkvfl2w.rs:31:14\n\
    \   |\n31 |         area += b * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpflkvfl2w.rs:36:17\n   |\n36 |     area = area."
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a < b {\n        area += a * b\n    }\n    \n    if a <\
    \ c {\n        area += a * c\n    }\n    \n    if b < c {\n        area += b *\
    \ c\n    }\n    \n    area /= 2.0;\n    \n    area.round()\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp93k05q8t.rs:25:14\n\
    \   |\n25 |         area += a * b\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp93k05q8t.rs:29:14\n\
    \   |\n29 |         area += a * c\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp93k05q8t.rs:33:14\n\
    \   |\n33 |         area += b * c\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmp93k05q8t.rs:38:10\n   |\n38 |     area.round()\n  "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ 0.0\n    \n    if a < b {\n        s += a\n    }\n    if a < c {\n        s\
    \ += b\n    }\n    if b < c {\n        s += c\n    }\n    \n    s / (a + b + c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpopz714v5.rs:22:20\n\
    \   |\n22 |     let mut s = 0.0\n   |                    ^ help: add `;` here\n\
    23 |     \n24 |     if a < b {\n   |     -- unexpected token\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpopz714v5.rs:25:11\n  \
    \ |\n25 |         s += a\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpopz714v5.rs:28:11\n\
    \   |\n28 |         s += b\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpopz714v5.rs:31:11\n\
    \   |\n31 |         s += c\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a > b {\n        area += b * b - 4 * a * c;\n    }\n  \
    \  \n    if a > c {\n        area += a * c - 4 * a * b;\n    }\n    \n    if b\
    \ > c {\n        area += b * c - 4 * a * a;\n    }\n    \n    area /= 2.0;\n \
    \   \n    area = round(area * 100.0) / 100.0;\n    \n    return area;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp9lgg72y_.rs:38:12\n\
    \   |\n38 |     area = round(area * 100.0) / 100.0;\n   |            ^^^^^ not\
    \ found in this scope\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp9lgg72y_.rs:25:14\n   |\n25 |         area += b * b - 4 * a * c;\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp9lgg72y_.rs:29:14\n   |\n29 |\
    \         area += a * c - 4 * a * b;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp9lgg72y_.rs:33:14\n\
    \   |\n33 |         area += b * c - 4 * a * a;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \       "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum\
    \ = 0;\n    sum += a;\n    sum += b;\n    sum += c;\n    if sum > c {\n      \
    \  sum -= c;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ifa7s80.rs:19:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n19 |     sum\n   |     ^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n19 |     sum as f64\n   |      \
    \   ++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpr187rhor.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum\
    \ = a;\n    sum += b;\n    sum += c;\n    if sum > c {\n        sum -= c;\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqkompy6m.rs:18:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n18 |     sum\n   |     ^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n18 |     sum as f64\n   |      \
    \   ++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => match a + b {\n\
    \            a if a > c => 0.0,\n            b if b > c => 0.0,\n            c\
    \ if c > a => 0.0,\n            _ => 1.0,\n        },\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `6.0`', /tmp/tmpo13o52nr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a +\
    \ b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeh_yt58h.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return -1.0;\n    }\n    s *= s;\n    s /= 2;\n    s *= s;\n    s\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps465zarq.rs:22:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n22 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n22 |     s as f64\n   |       ++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum\
    \ = 0.0;\n    if a + b > c {\n        area_sum += (a + b - c) * 0.5;\n    }\n\
    \    if a + c > b {\n        area_sum += (a + c - b) * 0.5;\n    }\n    if b +\
    \ c > a {\n        area_sum += (b + c - a) * 0.5;\n    }\n    area_sum\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpvn4rzw6w.rs:14:33\n\
    \   |\n14 |         area_sum += (a + b - c) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmpvn4rzw6w.rs:17:33\n   |\n17 |         area_sum\
    \ += (a + c - b) * 0.5;\n   |                                 ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpvn4rzw6w.rs:20:33\n\
    \   |\n20 |         area_sum += (b + c - a) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0;\n\
    \    s += a * b\n    s += a * c\n    s += b * c\n    s / 3.0\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `s`\n  --> /tmp/tmpuajigzb1.rs:22:15\n   |\n\
    22 |     s += a * b\n   |               ^ help: add `;` here\n23 |     s += a\
    \ * c\n   |     - unexpected token\n\nerror: expected `;`, found `s`\n  --> /tmp/tmpuajigzb1.rs:23:15\n\
    \   |\n23 |     s += a * c\n   |               ^ help: add `;` here\n24 |    \
    \ s += b * c\n   |     - unexpected token\n\nerror: expected `;`, found `s`\n\
    \  --> /tmp/tmpuajigzb1.rs:24:15\n   |\n24 |     s += b * c\n   |            \
    \   ^ help: add `;` here\n25 |     s / 3.0\n   |     - unexpected token\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpuajigzb1.rs:22:7\n   |\n\
    22 |     s += a * b\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpuajigzb1.rs:23:7\n\
    \   |\n23 |     s += a * c\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpuajigzb1.rs:24:7\n\
    \   |\n24 |     s += b * c\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other typ"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a +\
    \ b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeh_yt58h.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = b - c;\n    }\n    if a + c > b {\n        b = c - a;\n\
    \    }\n    if b + c > a {\n        c = a - b;\n    }\n    (a * b * c) / ((a *\
    \ b) + c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.2222222222222223`,\n right: `6.0`', /tmp/tmpav25x6sz.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n    }\n\
    \    if a + c > b {\n        a = a - c;\n        c = c - a;\n        b = b + c;\n\
    \    }\n    if b + c > a {\n        b = b - c;\n        c = c - b;\n        a\
    \ = a + c;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.0`,\n right: `6.0`', /tmp/tmp0q_45ff4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpro_m3d23.rs:22:12\n   |\n\
    21 |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n22 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n22 |     area = ((a * b) - (c * a)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area +=\
    \ b * c * 0.5;\n    \n    area = area.round();\n    \n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpfvjauqcp.rs:24:19\n\
    \   |\n24 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpfvjauqcp.rs:25:19\n\
    \   |\n25 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpfvjauqcp.rs:26:19\n\
    \   |\n26 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpfvjauqcp.rs:28:17\n   |\n28 |     area = area.round();\n\
    \   |           "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpr187rhor.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        c > a && c > b => a + b + c,\n        c > a && c < b => a,\n\
    \        c < a && c > b => b,\n        c < a && c < b => c,\n        _ => -1.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `=>`, `@`, `if`, or `|`, found `>`\n  --> /tmp/tmp_g9vlm72.rs:13:11\n\
    \   |\n13 |         c > a && c > b => a + b + c,\n   |           ^ expected one\
    \ of `=>`, `@`, `if`, or `|`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ 0.0\n    \n    if a > b {\n        s += b\n    }\n    if a > c {\n        s\
    \ += c\n    }\n    if b > c {\n        s += a\n    }\n    \n    s / (a + b + c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpeqpcb2h5.rs:22:20\n\
    \   |\n22 |     let mut s = 0.0\n   |                    ^ help: add `;` here\n\
    23 |     \n24 |     if a > b {\n   |     -- unexpected token\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpeqpcb2h5.rs:25:11\n  \
    \ |\n25 |         s += b\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpeqpcb2h5.rs:28:11\n\
    \   |\n28 |         s += c\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpeqpcb2h5.rs:31:11\n\
    \   |\n31 |         s += a\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    area = round(area as f64 * 100.0) / 100.0;\n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpb4pl_7d3.rs:27:12\n\
    \   |\n27 |     area = round(area as f64 * 100.0) / 100.0;\n   |            ^^^^^\
    \ not found in this scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n \
    \ --> /tmp/tmpb4pl_7d3.rs:22:17\n   |\n22 |     area = area + (a * b) - (c * c);\n\
    \   |                 ^ no implementation for `{float} + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpb4pl_7d3.rs:23:17\n   |\n23 |     area\
    \ = area + (a * c) - (b * b);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpb4pl_7d3.rs:24:17\n   |\n24 |\
    \     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzr7gftgj.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ (a + b + c) / 2.0\n    let mut area: f64 = 4.0\n    while s > 0 {\n        area\
    \ += s * (s - a) * (s - b) * (s - c)\n        s /= 2.0\n    }\n    \n    area\
    \ /= 3.0\n    \n    area.round()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnvc1abmx.rs:22:34\n\
    \   |\n22 |     let mut s = (a + b + c) / 2.0\n   |                          \
    \        ^ help: add `;` here\n23 |     let mut area: f64 = 4.0\n   |     ---\
    \ unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpnvc1abmx.rs:23:28\n\
    \   |\n23 |     let mut area: f64 = 4.0\n   |                            ^ help:\
    \ add `;` here\n24 |     while s > 0 {\n   |     ----- unexpected token\n\nerror:\
    \ expected `;`, found `s`\n  --> /tmp/tmpnvc1abmx.rs:25:48\n   |\n25 |       \
    \  area += s * (s - a) * (s - b) * (s - c)\n   |                             \
    \                   ^ help: add `;` here\n26 |         s /= 2.0\n   |        \
    \ - unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmpnvc1abmx.rs:29:16\n\
    \   |\n29 |     area /= 3.0\n   |                ^ help: add `;` here\n30 |  \
    \   \n31 |     area.round()\n   |     ---- unexpected token\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpnvc1abmx.rs:22:29\n   |\n22 |   \
    \  let mut s = (a + b + c) / 2.0\n   |                             ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return 0.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmppcvqqm_z.rs:19:7\n\
    \   |\n19 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a > b {\n        area += b * b - 4 * a * c;\n    }\n  \
    \  \n    if a > c {\n        area += a * c - 4 * b * b;\n    }\n    \n    if b\
    \ > c {\n        area += c * c - 4 * a * a;\n    }\n    \n    area /= 2.0;\n \
    \   \n    area = round(area, 2);\n    \n    return area;\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpc2ug6nhx.rs:38:12\n\
    \   |\n38 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpc2ug6nhx.rs:25:14\n\
    \   |\n25 |         area += b * b - 4 * a * c;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpc2ug6nhx.rs:29:14\n   |\n29 |         area += a * c - 4 * b * b;\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpc2ug6nhx.rs:33:14\n   |\n33 |\
    \         area += c * c - 4 * a * a;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    area = round(area, 2);\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp4_9ki0d7.rs:27:12\n\
    \   |\n27 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:22:17\n\
    \   |\n22 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:23:17\n\
    \   |\n23 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * a);\n    area = area + (b * c) - (a * b);\n\
    \    area = area + (c * c) - (b * a);\n    area = area / 2.0;\n    area = round(area,\
    \ 2);\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp7xdf9__q.rs:26:12\n\
    \   |\n26 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7xdf9__q.rs:22:17\n\
    \   |\n22 |     area = area + (a * b) - (c * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7xdf9__q.rs:23:17\n\
    \   |\n23 |     area = area + (b * c) - (a * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7xdf9__q.rs:24:17\n\
    \   |\n24 |     area = area + (c * c) - (b * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    area = area.round();\n    area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4m73m2ka.rs:22:17\n\
    \   |\n22 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4m73m2ka.rs:23:17\n\
    \   |\n23 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4m73m2ka.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4m73m2ka.rs:25:17\n\
    \   |\n25 |     area = area + (c * b) - (a * a);\n   |              "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + ((c - b) * (a - b));\n    }\n  \
    \  if a + c > b {\n        s = s + ((b - c) * (a - c));\n    }\n    if b + c >\
    \ a {\n        s = s + ((c - a) * (b - c));\n    }\n    s * 0.5\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4cotvf_y.rs:14:15\n\
    \   |\n14 |         s = s + ((c - b) * (a - b));\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4cotvf_y.rs:17:15\n\
    \   |\n17 |         s = s + ((b - c) * (a - c));\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4cotvf_y.rs:20:15\n\
    \   |\n20 |         s = s + ((c - a) * (b - c));\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        x => if a + b > c { -1.0 } else { 1.0 },\n\
    \        y => if a + c > b { -1.0 } else { 1.0 },\n        z if a + c > b { -1.0\
    \ } else { 1.0 },\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `-`\n  --> /tmp/tmpghni18kq.rs:16:26\n\
    \   |\n16 |         z if a + c > b { -1.0 } else { 1.0 },\n   |              \
    \        -   ^ expected identifier\n   |                      |\n   |        \
    \              while parsing this struct\n\nerror: expected one of `.`, `=>`,\
    \ `?`, or an operator, found keyword `else`\n  --> /tmp/tmpghni18kq.rs:16:33\n\
    \   |\n16 |         z if a + c > b { -1.0 } else { 1.0 },\n   |              \
    \                   ^^^^ expected one of `.`, `=>`, `?`, or an operator\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = a + b - c;\n    }\n    if a + c > b {\n        b = a\
    \ + c - b;\n    }\n    if b + c > a {\n        c = b + c - a;\n    }\n    a as\
    \ f64 / b as f64 / c as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.1111111111111111`,\n right: `6.0`', /tmp/tmpwbyye7mv.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        _ => if a + b > c { \n            c / (a\
    \ + b) \n        } else { \n            a / (a + b + c) \n        },\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp2spva9w.rs:15:13\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n15 |             c / (a + b) \n   |             ^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |             (c / (a + b)) as f64 \n   |             +           ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp2spva9w.rs:17:13\n   |\n11 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    ...\n17 |             a / (a + b + c) \n   |             ^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |             (a / (a + b + c)) as f64 \n   |             +               ++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = (a + b\
    \ + c) / 2.0;\n    let mut u = (a + b) - s;\n    let mut v = (c + d) - s;\n  \
    \  if u > v {\n        s = (a + c) / 2.0;\n        u = (a + c) - s;\n        v\
    \ = (b + d) - s;\n    }\n    if u > v {\n        s = (a + b) / 2.0;\n        u\
    \ = (a + b) - s;\n        v = (c + d) - s;\n    }\n    if u > v {\n        s =\
    \ (a + c) / 2.0;\n        u = (a + c) - s;\n        v = (b + d) - s;\n    }\n\
    \    if u > v {\n        s = (a + b) / 2.0;\n        u = (a + b) - s;\n      \
    \  v = (c + d) - s;\n    }\n    if u > v {\n        s = (a + c) / 2.0;\n     \
    \   u = (a + c) - s;\n        v = (b + d) - s;\n    }\n    if u > v {\n      \
    \  s = (a + b) / 2.0;\n        u = (a + b) - s;\n        v = (c + d) - s;\n  \
    \  }\n    if u > v {\n        s = (a + c) / 2.0;\n        u = (a + c) - s;\n \
    \       v = (b + d) - s;\n    }\n    if u > v {\n        s = (a + b) / 2.0;\n\
    \        u = (a + b) - s;\n        v = (c + d) - s;\n    }\n    if u > v {\n \
    \       s = (a + c) / 2.0;\n        u = (a + c) - s;\n        v = (b + d) - s;\n\
    \    }\n    if u > v {\n        s = (a + b) / 2.0;\n        u = (a + b) - s;\n\
    \        v = (c + d) - s;\n    }\n    if u > v {\n        s = (a + c) / 2.0;\n\
    \        u = (a + c) - s;\n        v = (b + d) - s;\n    }\n    if u > v {\n \
    \       s = (a + b) / 2.0;\n        u = (a + b) - s;\n        v = (c + d) - s;\n\
    \    }\n    if u > v {\n        s = (a + c) / 2.0;\n        u = (a + c) - s;\n\
    \        v = (b + d) - s;\n    }\n    if u > v {\n        s = (a + b) / 2.0;\n\
    \        u = (a + b) - s;\n        v = (c + d) - s;\n    }\n    if u > v {\n \
    \       s = (a + c) / 2.0;\n        u = (a + \n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpydukmoed.rs:110:3\n\
    \    |\n11  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n94  |     if u > v {\n    |              - this delimiter might not be properly\
    \ closed...\n...\n97  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n110 | }\n    |   ^\n\nerror: expected expression, found `)`\n\
    \  --> /tmp/tmpydukmoed.rs:97:1\n   |\n97 | }\n   | ^ expected expression\n\n\
    error: mismatched closing delimiter: `}`\n  --> /tmp/tmpydukmoed.rs:96:13\n  \
    \ |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |      \
    \                                                 - closing delimiter possibly\
    \ meant for this\n...\n96 |         u = (a + \n   |             ^ unclosed delimiter\n\
    97 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value\
    \ `d` in this scope\n  --> /tmp/tmpydukmoed.rs:23:22\n   |\n23 |     let mut v\
    \ = (c + d) - s;\n   |                      ^ help: a local variable with a similar\
    \ name exists: `a`\n\nerror[E0425]: cannot find value `d` in this scope\n  -->\
    \ /tmp/tmpydukmoed.rs:27:18\n   |\n27 |         v = (b + d) - s;\n   |       \
    \           ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]:\
    \ cannot find value `d` in this scope\n  --> /tmp/tmpydukmoed.rs:32:18\n   |\n\
    32 |         v = (c + d) - s;\n   |                  ^ help: a local variable\
    \ with a similar name exists: `a`\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmpydukmoed.rs:37:18\n   |\n37 |         v = (b + d) - s;\n\
    \   |                  ^ help: a local variable with a similar name exists: `a`\n\
    \nerror[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmpydukmoed.rs:42:18\n\
    \   |\n42 |         v = (c + d) - s;\n   |                  ^ help: a local variable\
    \ with a similar name exists: `a`\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmpydukmoed.rs:47:18\n   |\n47 |         v = (b + d) - s;\n\
    \   |                  ^ help: a local variable with a sim"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if\
    \ a + c > b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (a + b);\n    }\n    s / (a + b + c)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1azb84z5.rs:14:15\n\
    \   |\n14 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1azb84z5.rs:17:15\n\
    \   |\n17 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1azb84z5.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (a + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmp1azb84z5.rs:22:7\n\
    \   |\n22 |     s / (a + b + c)\n   |       ^ no implementation for `{float} /"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = \n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpgatrtkxs.rs:89:1\n\
    \   |\n89 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgatrtkxs.rs:22:12\n   |\n21 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n22 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n22 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ 0.0;\n    s += a * b\n    s += a * c\n    s += b * c\n    \n    s /= 3.0\n \
    \   \n    match s {\n        0..1.0 => 0.0,\n        _ => s,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `s`\n  --> /tmp/tmp89le_36x.rs:23:15\n   |\n\
    23 |     s += a * b\n   |               ^ help: add `;` here\n24 |     s += a\
    \ * c\n   |     - unexpected token\n\nerror: expected `;`, found `s`\n  --> /tmp/tmp89le_36x.rs:24:15\n\
    \   |\n24 |     s += a * c\n   |               ^ help: add `;` here\n25 |    \
    \ s += b * c\n   |     - unexpected token\n\nerror: expected `;`, found `s`\n\
    \  --> /tmp/tmp89le_36x.rs:25:15\n   |\n25 |     s += b * c\n   |            \
    \   ^ help: add `;` here\n26 |     \n27 |     s /= 3.0\n   |     - unexpected\
    \ token\n\nerror: expected `;`, found keyword `match`\n  --> /tmp/tmp89le_36x.rs:27:13\n\
    \   |\n27 |     s /= 3.0\n   |             ^ help: add `;` here\n28 |     \n29\
    \ |     match s {\n   |     ----- unexpected token\n\nerror[E0658]: exclusive\
    \ range pattern syntax is experimental\n  --> /tmp/tmp89le_36x.rs:30:9\n   |\n\
    30 |         0..1.0 => 0.0,\n   |         ^^^^^^\n   |\n   = note: see issue #37854\
    \ <https://github.com/rust-lang/rust/issues/37854> for more information\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp89le_36x.rs:23:7\n   |\n\
    23 |     s += a * b\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp89le_36x.rs:24:7\n\
    \   |\n24 |     s += a * c\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 a"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a > b {\n        area += b * c / a;\n    }\n    if a >\
    \ c {\n        area += c * a / b;\n    }\n    if b > c {\n        area += a *\
    \ b / c;\n    }\n    \n    area += a * b;\n    \n    if area > 1.0 {\n       \
    \ area = 1.0;\n    }\n    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpf2kgkkt1.rs:25:14\n\
    \   |\n25 |         area += b * c / a;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpf2kgkkt1.rs:28:14\n   |\n28 |         area += c * a / b;\n   |\
    \              ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpf2kgkkt1.rs:31:14\n   |\n31 |         area\
    \ += a * b / c;\n   |              ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpf2kgkkt1.rs:34:10\n\
    \   |\n34 |     area += a * b;\n   |    "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = (a + b\
    \ + c) / 2.0;\n    if s > 0.0 {\n        return s * s;\n    }\n    return -1.0\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpzg4b86di.rs:21:29\n\
    \   |\n21 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        -1\n    } else if a + c > b {\n        -1\n    } else if b +\
    \ c > a {\n        -1\n    } else {\n        (a * b + c) / 2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8dqlu90t.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8dqlu90t.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8dqlu90t.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8dqlu90t.rs:19:9\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n19 |       \
    \  (a * b + c) / 2\n   |         ^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n19 |         ((a\
    \ * b + c) / 2) as f64\n   |         +               ++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return 0.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmppcvqqm_z.rs:19:7\n\
    \   |\n19 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area_sum:\
    \ f64 = 0.0;\n    area_sum += a * b;\n    area_sum += b * c;\n    area_sum +=\
    \ c * a;\n    \n    area_sum / 3.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpxn9uqfku.rs:23:14\n\
    \   |\n23 |     area_sum += a * b;\n   |              ^^ no implementation for\
    \ `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpxn9uqfku.rs:24:14\n\
    \   |\n24 |     area_sum += b * c;\n   |              ^^ no implementation for\
    \ `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpxn9uqfku.rs:25:14\n\
    \   |\n25 |     area_sum += c * a;\n   |              ^^ no implementation for\
    \ `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 2.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp03y530fc.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp03y530fc.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp03y530fc.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    area = round(area, 2);\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp4_9ki0d7.rs:27:12\n\
    \   |\n27 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:22:17\n\
    \   |\n22 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:23:17\n\
    \   |\n23 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s += (a + b - c) * 0.5;\n    }\n    if a\
    \ + c > b {\n        s += (a + c - b) * 0.5;\n    }\n    if b + c > a {\n    \
    \    s += (b + c - a) * 0.5;\n    }\n    s / (a + b + c)\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmprjq4yz9n.rs:14:26\n\
    \   |\n14 |         s += (a + b - c) * 0.5;\n   |                          ^ no\
    \ implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmprjq4yz9n.rs:17:26\n   |\n17 |         s += (a + c - b) * 0.5;\n\
    \   |                          ^ no implementation for `isize * {float}`\n   |\n\
    \   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmprjq4yz9n.rs:20:26\n   |\n20 | \
    \        s += (b + c - a) * 0.5;\n   |                          ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmprjq4yz9n.rs:22:7\n\
    \   |\n22 |     s / (a + b + c)\n   |  "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if\
    \ a + c > b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (a + b);\n    }\n    s / (a + b + c)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1azb84z5.rs:14:15\n\
    \   |\n14 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1azb84z5.rs:17:15\n\
    \   |\n17 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1azb84z5.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (a + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmp1azb84z5.rs:22:7\n\
    \   |\n22 |     s / (a + b + c)\n   |       ^ no implementation for `{float} /"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = a - b;\n        b = c - a;\n        c = a - b;\n    }\n\
    \    if a + c > b {\n        a = a - c;\n        c = c - a;\n        b = c - b;\n\
    \    }\n    if b + c > a {\n        b = b - c;\n        c = c - b;\n        a\
    \ = a - c;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.0`,\n right: `6.0`', /tmp/tmpu8k57hr0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a +\
    \ b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeh_yt58h.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a > b {\n        area += a * b\n    }\n    \n    if a >\
    \ c {\n        area += a * c\n    }\n    \n    if b > c {\n        area += b *\
    \ c\n    }\n    \n    area / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpr_ehixbs.rs:25:14\n\
    \   |\n25 |         area += a * b\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpr_ehixbs.rs:29:14\n\
    \   |\n29 |         area += a * c\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpr_ehixbs.rs:33:14\n\
    \   |\n33 |         area += b * c\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzr7gftgj.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzr7gftgj.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + (c - a) * (b - a);\n    }\n    if\
    \ a + c > b {\n        s = s + (b - a) * (c - a);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (c - b);\n    }\n    s * 0.5\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpo6wc4rzk.rs:14:15\n\
    \   |\n14 |         s = s + (c - a) * (b - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpo6wc4rzk.rs:17:15\n\
    \   |\n17 |         s = s + (b - a) * (c - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpo6wc4rzk.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (c - b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + (c - a) * (b - a);\n    }\n\
    \    if a + c > b {\n        area = area + (b - c) * (a - c);\n    }\n    if b\
    \ + c > a {\n        area = area + (a - b) * (c - b);\n    }\n    area\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpoi45k045.rs:14:21\n\
    \   |\n14 |         area = area + (c - a) * (b - a);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmpoi45k045.rs:17:21\n   |\n17 |         area = area + (b - c) * (a - c);\n\
    \   |                     ^ no implementation for `{float} + isize`\n   |\n  \
    \ = help: the trait `Add<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpoi45k045.rs:20:21\n   |\n20 |      \
    \   area = area + (a - b) * (c - b);\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= (a * b + a * c + b * c);\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpju28ggpu.rs:25:13\n\
    \   |\n25 |     area /= (a * b + a * c + b * c);\n   |             ^         \
    \            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n25 -     area /= (a * b + a * c + b * c);\n\
    25 +     area /= a * b + a * c + b * c;\n   | \n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmpju28ggpu.rs:22:19\n   |\n22 |     area +=\
    \ a * b * 0.5;\n   |                   ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpju28ggpu.rs:23:19\n   |\n\
    23 |     area += a * c * 0.5;\n   |                   ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpju28ggpu.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n      "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return 0.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmppcvqqm_z.rs:19:7\n\
    \   |\n19 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpr187rhor.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if\
    \ a + c > b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (a + c);\n    }\n    s / 2.0\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1q6rx6zi.rs:14:15\n\
    \   |\n14 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1q6rx6zi.rs:17:15\n\
    \   |\n17 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1q6rx6zi.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (a + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a + b > c {\n        area = area + (b - c) * (b + c) /\
    \ 2.0;\n    }\n    \n    if a + c > b {\n        area = area + (c - a) * (c +\
    \ a) / 2.0;\n    }\n    \n    if b + c > a {\n        area = area + (a - b) *\
    \ (a + b) / 2.0;\n    }\n    \n    area = area.round() as f64;\n    \n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmprj6o0q11.rs:25:41\n\
    \   |\n25 |         area = area + (b - c) * (b + c) / 2.0;\n   |             \
    \                            ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmprj6o0q11.rs:29:41\n   |\n29 |   \
    \      area = area + (c - a) * (c + a) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmprj6o0q11.rs:33:41\n   |\n33 |   \
    \      area = area + (a - b) * (a + b) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0689]: can't call\
    \ method "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzr7gftgj.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    let mut s = 0.0;\n    if a + b > c {\n        s = b - c;\n     \
    \   area = s * s / a;\n    } else {\n        s = a - c;\n        area = s * s\
    \ / b;\n    }\n    area = area.round() as f64;\n    area\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgktc8pym.rs:15:13\n   |\n\
    13 |     let mut s = 0.0;\n   |                 --- expected due to this value\n\
    14 |     if a + b > c {\n15 |         s = b - c;\n   |             ^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0277]: cannot divide `{float}`\
    \ by `isize`\n  --> /tmp/tmpgktc8pym.rs:16:22\n   |\n16 |         area = s * s\
    \ / a;\n   |                      ^ no implementation for `{float} / isize`\n\
    \   |\n   = help: the trait `Div<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgktc8pym.rs:18:13\n   |\n13 |     let mut s\
    \ = 0.0;\n   |                 --- expected due to this value\n...\n18 |     \
    \    s = a - c;\n   |             ^^^^^ expected floating-point number, found\
    \ `isize`\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmpgktc8pym.rs:19:22\n\
    \   |\n19 |         area = s * s / b;\n   |                      ^ no implementation\
    \ for `{float} / isize`\n   |\n   = help: the trait `Div<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpgktc8pym.rs:21:17\n   |\n21 |     area = area.round()\
    \ as f64;\n   |                 ^^^^^\n   |\nhelp: you must specify a type for\
    \ this binding, like `f32`\n   |\n12 |     let mut area: f32 = 0"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzr7gftgj.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0;\n\
    \    s += a * b\n    s += a * c\n    s += b * c\n    s / 3.0\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `s`\n  --> /tmp/tmpuajigzb1.rs:22:15\n   |\n\
    22 |     s += a * b\n   |               ^ help: add `;` here\n23 |     s += a\
    \ * c\n   |     - unexpected token\n\nerror: expected `;`, found `s`\n  --> /tmp/tmpuajigzb1.rs:23:15\n\
    \   |\n23 |     s += a * c\n   |               ^ help: add `;` here\n24 |    \
    \ s += b * c\n   |     - unexpected token\n\nerror: expected `;`, found `s`\n\
    \  --> /tmp/tmpuajigzb1.rs:24:15\n   |\n24 |     s += b * c\n   |            \
    \   ^ help: add `;` here\n25 |     s / 3.0\n   |     - unexpected token\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpuajigzb1.rs:22:7\n   |\n\
    22 |     s += a * b\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpuajigzb1.rs:23:7\n\
    \   |\n23 |     s += a * c\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpuajigzb1.rs:24:7\n\
    \   |\n24 |     s += b * c\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other typ"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return 0.0;\n    }\n    let mut area = 0.0;\n    if a > b {\n        area\
    \ += b * (s - a);\n    }\n    if b > c {\n        area += c * (s - b);\n    }\n\
    \    if c > a {\n        area += a * (s - c);\n    }\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp4x4f4rey.rs:21:14\n\
    \   |\n21 |         area += b * (s - a);\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp4x4f4rey.rs:24:14\n   |\n24 |         area += c * (s - b);\n  \
    \ |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp4x4f4rey.rs:27:14\n   |\n27 |\
    \         area += a * (s - c);\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        x => if a + b > c { -1.0 } else { 1.0 },\n\
    \        y => if a + c > b { -1.0 } else { 1.0 },\n        z if a + c > b && b\
    \ > c { -1.0 } else { 1.0 },\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `-`\n  --> /tmp/tmpykpn01ut.rs:16:35\n\
    \   |\n16 |         z if a + c > b && b > c { -1.0 } else { 1.0 },\n   |     \
    \                          -   ^ expected identifier\n   |                   \
    \            |\n   |                               while parsing this struct\n\
    \nerror: expected one of `.`, `=>`, `?`, or an operator, found keyword `else`\n\
    \  --> /tmp/tmpykpn01ut.rs:16:42\n   |\n16 |         z if a + c > b && b > c {\
    \ -1.0 } else { 1.0 },\n   |                                          ^^^^ expected\
    \ one of `.`, `=>`, `?`, or an operator\n\nerror: aborting due to 2 previous errors\n\
    \n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = (a + b\
    \ + c) / 2;\n    if s == 0 {\n        return 0.0\n    }\n    s *= s;\n    s /\
    \ 2\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwb1v2phl.rs:26:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n26 |     s / 2\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n26 |     (s / 2)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a +\
    \ b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeh_yt58h.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area_sum:\
    \ f64 = 0.0;\n    area_sum += a * b\n    area_sum += a * c\n    area_sum += b\
    \ * c\n    \n    area_sum / 3.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area_sum`\n  --> /tmp/tmppa3y9fdv.rs:23:22\n\
    \   |\n23 |     area_sum += a * b\n   |                      ^ help: add `;` here\n\
    24 |     area_sum += a * c\n   |     -------- unexpected token\n\nerror: expected\
    \ `;`, found `area_sum`\n  --> /tmp/tmppa3y9fdv.rs:24:22\n   |\n24 |     area_sum\
    \ += a * c\n   |                      ^ help: add `;` here\n25 |     area_sum\
    \ += b * c\n   |     -------- unexpected token\n\nerror: expected `;`, found `area_sum`\n\
    \  --> /tmp/tmppa3y9fdv.rs:25:22\n   |\n25 |     area_sum += b * c\n   |     \
    \                 ^ help: add `;` here\n26 |     \n27 |     area_sum / 3.0\n \
    \  |     -------- unexpected token\n\nerror[E0277]: cannot add-assign `isize`\
    \ to `f64`\n  --> /tmp/tmppa3y9fdv.rs:23:14\n   |\n23 |     area_sum += a * b\n\
    \   |              ^^ no implementation for `f64 += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `f64`\n  --> /tmp/tmppa3y9fdv.rs:24:14\n   |\n24 |     area_sum +=\
    \ a * c\n   |              ^^ no implementation for `f64 += isize`\n   |\n   =\
    \ help: the trait `AddAssign<isize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `f64`\n  --> /tmp/tmppa3y9fdv.rs:25:14\n   |\n25 |   \
    \  area_sum += b * c\n   |              ^^ no implementation for"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + (a - c) * (b - c);\n    }\n    if\
    \ a + c > b {\n        s = s + (a - b) * (c - b);\n    }\n    if b + c > a {\n\
    \        s = s + (b - a) * (c - a);\n    }\n    s / 2.0\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp5_qiz9pz.rs:14:15\n\
    \   |\n14 |         s = s + (a - c) * (b - c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp5_qiz9pz.rs:17:15\n\
    \   |\n17 |         s = s + (a - b) * (c - b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp5_qiz9pz.rs:20:15\n\
    \   |\n20 |         s = s + (b - a) * (c - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + b * c / a;\n    }\n    if\
    \ a + c > b {\n        area = area + c * a / b;\n    }\n    if b + c > a {\n \
    \       area = area + c * b / a;\n    }\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpo0z96_j0.rs:14:21\n\
    \   |\n14 |         area = area + b * c / a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpo0z96_j0.rs:17:21\n\
    \   |\n17 |         area = area + c * a / b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpo0z96_j0.rs:20:21\n\
    \   |\n20 |         area = area + c * b / a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area:\
    \ f64 = 0.0;\n    \n    if a > b {\n        area = (a * b) / c;\n    } else {\n\
    \        area = ((b * c) - (a * b)) / a;\n    }\n    \n    area = area.round();\n\
    \    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3_7jc3jt.rs:25:16\n   |\n\
    22 |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n...\n25 |         area = (a * b) / c;\n   |                ^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n25 |         area = ((a * b) / c) as f64;\n   |           \
    \     +           ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3_7jc3jt.rs:27:16\n\
    \   |\n22 |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to this type\n...\n27 |         area = ((b * c) - (a * b)) / a;\n   |  \
    \              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n27 |         area = (((b * c) -\
    \ (a * b)) / a) as f64;\n   |                +                       ++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = \n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpgatrtkxs.rs:89:1\n\
    \   |\n89 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgatrtkxs.rs:22:12\n   |\n21 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n22 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n22 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + (c - b) * (b - a);\n    }\n\
    \    if a + c > b {\n        area = area + (b - c) * (c - a);\n    }\n    if b\
    \ + c > a {\n        area = area + (a - b) * (a - c);\n    }\n    area\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpxkm7dcdm.rs:14:21\n\
    \   |\n14 |         area = area + (c - b) * (b - a);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmpxkm7dcdm.rs:17:21\n   |\n17 |         area = area + (b - c) * (c - a);\n\
    \   |                     ^ no implementation for `{float} + isize`\n   |\n  \
    \ = help: the trait `Add<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpxkm7dcdm.rs:20:21\n   |\n20 |      \
    \   area = area + (a - b) * (a - c);\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpr187rhor.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = a + b - c;\n    }\n    if a + c > b {\n        b = a\
    \ + c - b;\n    }\n    if b + c > a {\n        c = b + c - a;\n    }\n    a as\
    \ f64 / b as f64 as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.6666666666666666`,\n right: `6.0`', /tmp/tmpom4agdzy.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + b - c;\n    }\n    if a +\
    \ c > b {\n        area = area + c - b;\n    }\n    if b + c > a {\n        area\
    \ = area + c - a;\n    }\n    area = area / 2.0;\n    area = area.round();\n \
    \   area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptfb5ow2g.rs:14:21\n\
    \   |\n14 |         area = area + b - c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptfb5ow2g.rs:17:21\n\
    \   |\n17 |         area = area + c - b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptfb5ow2g.rs:20:21\n\
    \   |\n20 |         area = area + c - a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmptfb5ow2g.rs:23:17\n   |\n23 |     area = area.round();\n\
    \   |        "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ 0.0;\n    \n    if a > b {\n        s += a;\n    }\n    if b > c {\n       \
    \ s += b;\n    }\n    if c > a {\n        s += c;\n    }\n    \n    if s > 0.0\
    \ {\n        return s / 3.0;\n    }\n    return -1.0;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpiclvizel.rs:25:11\n\
    \   |\n25 |         s += a;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpiclvizel.rs:28:11\n\
    \   |\n28 |         s += b;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpiclvizel.rs:31:11\n\
    \   |\n31 |         s += c;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    area = round(area, 2);\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp4_9ki0d7.rs:27:12\n\
    \   |\n27 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:22:17\n\
    \   |\n22 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:23:17\n\
    \   |\n23 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 2.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp03y530fc.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp03y530fc.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp03y530fc.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ (a + b + c) / 2.0;\n    let mut area = 0.0;\n    \n    if a > b {\n        area\
    \ += s;\n    }\n    if a > c {\n        area += s;\n    }\n    if b > c {\n  \
    \      area += s;\n    }\n    \n    if area > 0.0 {\n        area = area / 2.0;\n\
    \    }\n    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpw77bgn_n.rs:22:29\n\
    \   |\n22 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = a + b - c;\n    }\n    if a + c > b {\n        b = a\
    \ + c - b;\n    }\n    if b + c > a {\n        c = b + c - a;\n    }\n    a +\
    \ b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11.0`,\n right: `6.0`', /tmp/tmpx7l2fms2.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = a + b - c;\n    }\n    if a + c > b {\n        b = a\
    \ + c - b;\n    }\n    if b + c > a {\n        c = b + c - a;\n    }\n    (a *\
    \ b * c).round() as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36.0`,\n right: `6.0`', /tmp/tmpykkb10_0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + (b - c) * (b + c) / 2.0;\n\
    \    }\n    if a + c > b {\n        area = area + (c - b) * (c + b) / 2.0;\n \
    \   }\n    if b + c > a {\n        area = area + (a - b) * (a + b) / 2.0;\n  \
    \  }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpsny9ag9q.rs:14:41\n\
    \   |\n14 |         area = area + (b - c) * (b + c) / 2.0;\n   |             \
    \                            ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpsny9ag9q.rs:17:41\n   |\n17 |   \
    \      area = area + (c - b) * (c + b) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpsny9ag9q.rs:20:41\n   |\n20 |   \
    \      area = area + (a - b) * (a + b) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 3 previou"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        -1\n    } else {\n        (a * b) / (a + b + c)\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgbqwr3w8.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgbqwr3w8.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         (a * b) / (a + b + c)\n   |         ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         ((a * b) / (a + b + c)) as f64\n   |         +\
    \                     ++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::cmp::Ordering;\n\
    \    let mut a = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n\
    \    if a + b > c {\n        a = a as f64;\n        b = b as f64;\n        c =\
    \ c as f64;\n    }\n    if a + c > b {\n        a = a as f64;\n        c = c as\
    \ f64;\n    }\n    if b + c > a {\n        b = b as f64;\n        c = c as f64;\n\
    \    }\n    a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12.0`,\n right: `6.0`', /tmp/tmps6kbkydq.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= (a * b + a * c + b * c);\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpju28ggpu.rs:25:13\n\
    \   |\n25 |     area /= (a * b + a * c + b * c);\n   |             ^         \
    \            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n25 -     area /= (a * b + a * c + b * c);\n\
    25 +     area /= a * b + a * c + b * c;\n   | \n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmpju28ggpu.rs:22:19\n   |\n22 |     area +=\
    \ a * b * 0.5;\n   |                   ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpju28ggpu.rs:23:19\n   |\n\
    23 |     area += a * c * 0.5;\n   |                   ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpju28ggpu.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n      "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = (a + b\
    \ + c) / 2;\n    if s > 0 {\n        return s * s\n    }\n    return -1.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm7ozymjy.rs:23:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n23 |         return s * s\n   |                ^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    23 |         return (s * s) as f64\n   |                +     ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a +\
    \ b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeh_yt58h.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0;\n\
    \    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut\
    \ w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n\
    \    let mut a = 0.0;\n    let mut b = 0.0;\n    let mut c = 0.0;\n    let mut\
    \ d = 0.0;\n    let mut e = 0.0;\n    let mut f = 0.0;\n    let mut g = 0.0;\n\
    \    let mut h = 0.0;\n    let mut i = 0.0;\n    let mut j = 0.0;\n    let mut\
    \ k = 0.0;\n    let mut l = 0.0;\n    let mut m = 0.0;\n    let mut n = 0.0;\n\
    \    let mut o = 0.0;\n    let mut p = 0.0;\n    let mut q = 0.0;\n    let mut\
    \ r = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n\
    \    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut\
    \ y = 0.0;\n    let mut z = 0.0;\n    let mut a = 0.0;\n    let mut b = 0.0;\n\
    \    let mut c = 0.0;\n    let mut d = 0.0;\n    let mut e = 0.0;\n    let mut\
    \ f = 0.0;\n    let mut g = 0.0;\n    let mut h = 0.0;\n    let mut i = 0.0;\n\
    \    let mut j = 0.0;\n    let mut k = 0.0;\n    let mut l = 0.0;\n    let mut\
    \ m = 0.0;\n    let mut n = 0.0;\n    let mut o = 0.0;\n    let mut p = 0.0;\n\
    \    let mut q = 0.0;\n    let mut r = 0.0;\n    let mut s = 0.0;\n    let mut\
    \ t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n\
    \    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ a = 0.0;\n    let mut b = 0.0;\n    let mut c = 0.0;\n    let mut d = 0.0;\n\
    \    let mut e = 0.0;\n    let mut f = 0.0;\n    let mut g = 0.0;\n    let mut\
    \ h = 0.0;\n\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp88qt303b.rs:11:51\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut a = a as f64;\n    let mut b = b as f64;\n    let mut\
    \ c = c as f64;\n    if a + b > c {\n        a = c;\n        b = a;\n    }\n \
    \   if a + c > b {\n        a = b;\n        c = a;\n    }\n    if b + c > a {\n\
    \        b = c;\n        c = b;\n    }\n    if a + b > c {\n        a = c;\n \
    \       b = a;\n    }\n    if a + c > b {\n        a = b;\n        c = a;\n  \
    \  }\n    if b + c > a {\n        b = c;\n        c = b;\n    }\n    if a + b\
    \ > c {\n        a = c;\n        b = a;\n    }\n    if a + c > b {\n        a\
    \ = b;\n        c = a;\n    }\n    if b + c > a {\n        b = c;\n        c =\
    \ b;\n    }\n    if a + b > c {\n        a = c;\n        b = a;\n    }\n    if\
    \ a + c > b {\n        a = b;\n        c = a;\n    }\n    if b + c > a {\n   \
    \     b = c;\n        c = b;\n    }\n    if a + b > c {\n        a = c;\n    \
    \    b = a;\n    }\n    if a + c > b {\n        a = b;\n        c = a;\n    }\n\
    \    if b + c > a {\n        b = c;\n        c = b;\n    }\n    if a + b > c {\n\
    \        a = c;\n        b = a;\n    }\n    if a + c > b {\n        a = b;\n \
    \       c = a;\n    }\n    if b + c > a {\n        b = c;\n        c = b;\n  \
    \  }\n    if a + b > c {\n        a = c;\n        b = a;\n    }\n    if a + c\
    \ > b {\n        a = b;\n        c = a;\n    }\n    if b + c > a {\n        b\
    \ = c;\n        c = b;\n    }\n    if a + b > c {\n        a = c;\n        b =\
    \ a;\n    }\n    if a + c > b {\n        a = b;\n        c = a;\n    }\n    if\
    \ b + c > a {\n        b = c;\n        c = b;\n    }\n    if a + b > c {\n   \
    \     a = c;\n        b = a;\n    }\n    if a + c > b {\n        a = b;\n    \
    \    c = a;\n    }\n    if b + c > a {\n        b = c;\n        c = b;\n    }\n\
    \    if a + b > c {\n        a = c;\n        b = a;\n    }\n    if a + c > b {\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpv4afy962.rs:149:3\n\
    \    |\n11  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n135 |     if a + c > b {\n    |                  - this delimiter might not\
    \ be properly closed...\n136 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n149 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpv4afy962.rs:11:51\n   |\n11 | fn triangle_area(a: isize, b: isize, c:\
    \ isize) -> f64 {\n   |    -------------                                  ^^^\
    \ expected `f64`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if\
    \ a + c > b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (a + c);\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpwz7bdk0v.rs:14:15\n\
    \   |\n14 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpwz7bdk0v.rs:17:15\n\
    \   |\n17 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpwz7bdk0v.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (a + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        x => if b > c { 1.0 } else { -1.0 },\n \
    \       y => if a > b { 1.0 } else { -1.0 },\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmp_a6hl5px.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut a = a / 2.0;\n    let mut b = b / 2.0;\n    let mut c\
    \ = c / 2.0;\n    if a + b > c {\n        s += a;\n        t += b;\n        u\
    \ += c;\n    }\n    if a + c > b {\n        s += a;\n        t += c;\n       \
    \ v += b;\n    }\n    if b + c > a {\n        s += b;\n        t += c;\n     \
    \   u += a;\n    }\n    if a + b > c {\n        s += a;\n        t += b;\n   \
    \     u += c;\n    }\n    if a + c > b {\n        s += a;\n        t += c;\n \
    \       v += b;\n    }\n    if b + c > a {\n        s += b;\n        t += c;\n\
    \        u += a;\n    }\n    if a + b > c {\n        s += a;\n        t += b;\n\
    \        u += c;\n    }\n    if a + c > b {\n        s += a;\n        t += c;\n\
    \        v += b;\n    }\n    if b + c > a {\n        s += b;\n        t += c;\n\
    \        u += a;\n    }\n    if a + b > c {\n        s += a;\n        t += b;\n\
    \        u += c;\n    }\n    if a + c > b {\n        s += a;\n        t += c;\n\
    \        v += b;\n    }\n    if b + c > a {\n        s += b;\n        t += c;\n\
    \        u += a;\n    }\n    if a + b > c {\n        s += a;\n        t += b;\n\
    \        u += c;\n    }\n    if a + c > b {\n        s += a;\n        t += c;\n\
    \        v += b;\n    }\n    if b + c > a {\n        s += b;\n        t += c;\n\
    \        u += a;\n    }\n    if a + b > c {\n        s += a;\n        t += b;\n\
    \        u += c;\n    }\n    if a + c > b {\n        s += a;\n        t += c;\n\
    \        v += b;\n    }\n    if b + c > a {\n        s += b;\n        t += c;\n\
    \        u += a;\n    }\n    if a + b > c {\n        s += a;\n        t += b;\n\
    \        u += c;\n    }\n    if a + c > b {\n        s += a;\n\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp8rsboe02.rs:134:3\n\
    \    |\n11  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n118 |     if a + c > b {\n    |                  - this delimiter might not\
    \ be properly closed...\n...\n121 | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n134 | }\n    |   ^\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp8rsboe02.rs:20:19\n   |\n20 |     let mut\
    \ a = a / 2.0;\n   |                   ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp8rsboe02.rs:21:19\n   |\n\
    21 |     let mut b = b / 2.0;\n   |                   ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp8rsboe02.rs:22:19\n\
    \   |\n22 |     let mut c = c / 2.0;\n   |                   ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n          "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + b - c;\n    }\n    if a +\
    \ c > b {\n        area = area + c - b;\n    }\n    if b + c > a {\n        area\
    \ = area + c - a;\n    }\n    area = area / 2.0;\n    area = area.round();\n \
    \   area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptfb5ow2g.rs:14:21\n\
    \   |\n14 |         area = area + b - c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptfb5ow2g.rs:17:21\n\
    \   |\n17 |         area = area + c - b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptfb5ow2g.rs:20:21\n\
    \   |\n20 |         area = area + c - a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmptfb5ow2g.rs:23:17\n   |\n23 |     area = area.round();\n\
    \   |        "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n    \
    \    return 0.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmppcvqqm_z.rs:19:7\n\
    \   |\n19 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (b * a) - (a * b);\n\
    \    area = area / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmparri0k4h.rs:27:12\n\
    \   |\n27 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmparri0k4h.rs:22:17\n\
    \   |\n22 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmparri0k4h.rs:23:17\n\
    \   |\n23 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmparri0k4h.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    area = round(area, 2);\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp4_9ki0d7.rs:27:12\n\
    \   |\n27 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:22:17\n\
    \   |\n22 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:23:17\n\
    \   |\n23 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4_9ki0d7.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ 0.0;\n    \n    if a + b > c {\n        s = s + (a + b - c) * 0.5;\n    }\n\
    \    if a + c > b {\n        s = s + (a + c - b) * 0.5;\n    }\n    if b + c >\
    \ a {\n        s = s + (b + c - a) * 0.5;\n    }\n    \n    s / (a + b + c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp5iyw5hmy.rs:25:29\n\
    \   |\n25 |         s = s + (a + b - c) * 0.5;\n   |                         \
    \    ^ no implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmp5iyw5hmy.rs:28:29\n   |\n28 |         s = s + (a + c - b) * 0.5;\n\
    \   |                             ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmp5iyw5hmy.rs:31:29\n   |\n\
    31 |         s = s + (b + c - a) * 0.5;\n   |                             ^ no\
    \ implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot divide `{float}` by `isize`\n\
    \  --> /tmp/tmp5iyw5hmy.rs:34:7\n   |\n34 |     s / "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzr7gftgj.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxyg0j6lf.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ 0.0;\n    \n    if a > b {\n        s += a\n    }\n    if a > c {\n        s\
    \ += b\n    }\n    if b > c {\n        s += c\n    }\n    \n    s / (a + b + c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpd73rhpy5.rs:25:11\n\
    \   |\n25 |         s += a\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpd73rhpy5.rs:28:11\n\
    \   |\n28 |         s += b\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpd73rhpy5.rs:31:11\n\
    \   |\n31 |         s += c\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmpd73rhpy5.rs:34:7\n\
    \   |\n34 |     s / (a + b + c)\n   |       ^ no implementation for `{float} /\
    \ isize`\n   |"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpr187rhor.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area_sum:\
    \ f64 = 0.0;\n    area_sum += a * b\n    area_sum += a * c\n    area_sum += b\
    \ * c\n    \n    area_sum / 3.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area_sum`\n  --> /tmp/tmppa3y9fdv.rs:23:22\n\
    \   |\n23 |     area_sum += a * b\n   |                      ^ help: add `;` here\n\
    24 |     area_sum += a * c\n   |     -------- unexpected token\n\nerror: expected\
    \ `;`, found `area_sum`\n  --> /tmp/tmppa3y9fdv.rs:24:22\n   |\n24 |     area_sum\
    \ += a * c\n   |                      ^ help: add `;` here\n25 |     area_sum\
    \ += b * c\n   |     -------- unexpected token\n\nerror: expected `;`, found `area_sum`\n\
    \  --> /tmp/tmppa3y9fdv.rs:25:22\n   |\n25 |     area_sum += b * c\n   |     \
    \                 ^ help: add `;` here\n26 |     \n27 |     area_sum / 3.0\n \
    \  |     -------- unexpected token\n\nerror[E0277]: cannot add-assign `isize`\
    \ to `f64`\n  --> /tmp/tmppa3y9fdv.rs:23:14\n   |\n23 |     area_sum += a * b\n\
    \   |              ^^ no implementation for `f64 += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `f64`\n  --> /tmp/tmppa3y9fdv.rs:24:14\n   |\n24 |     area_sum +=\
    \ a * c\n   |              ^^ no implementation for `f64 += isize`\n   |\n   =\
    \ help: the trait `AddAssign<isize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `f64`\n  --> /tmp/tmppa3y9fdv.rs:25:14\n   |\n25 |   \
    \  area_sum += b * c\n   |              ^^ no implementation for"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + ((a * b) - (c * c));\n    area = area + ((a * c) - (b * b));\n\
    \    area = area + ((a * b) - (c * b));\n    area = area / 2.0;\n    area = round(area\
    \ as f64 * 100.0) / 100.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp8_4g9tfc.rs:26:12\n\
    \   |\n26 |     area = round(area as f64 * 100.0) / 100.0;\n   |            ^^^^^\
    \ not found in this scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n \
    \ --> /tmp/tmp8_4g9tfc.rs:22:17\n   |\n22 |     area = area + ((a * b) - (c *\
    \ c));\n   |                 ^ no implementation for `{float} + isize`\n   |\n\
    \   = help: the trait `Add<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp8_4g9tfc.rs:23:17\n   |\n23 |     area\
    \ = area + ((a * c) - (b * b));\n   |                 ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8_4g9tfc.rs:24:17\n\
    \   |\n24 |     area = area + ((a * b) - (c * b));\n   |                 ^ no\
    \ implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n         "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpr187rhor.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut u1 = 0.0;\n    let mut v1 = 0.0;\n    let mut w1 = 0.0;\n\
    \    let mut x2 = 0.0;\n    let mut y2 = 0.0;\n    let mut z2 = 0.0;\n    let\
    \ mut u2 = 0.0;\n    let mut v2 = 0.0;\n    let mut w2 = 0.0;\n    let mut x3\
    \ = 0.0;\n    let mut y3 = 0.0;\n    let mut z3 = 0.0;\n    let mut u3 = 0.0;\n\
    \    let mut v3 = 0.0;\n    let mut w3 = 0.0;\n    let mut x4 = 0.0;\n    let\
    \ mut y4 = 0.0;\n    let mut z4 = 0.0;\n    let mut u4 = 0.0;\n    let mut v4\
    \ = 0.0;\n    let mut w4 = 0.0;\n    let mut x5 = 0.0;\n    let mut y5 = 0.0;\n\
    \    let mut z5 = 0.0;\n    let mut u5 = 0.0;\n    let mut v5 = 0.0;\n    let\
    \ mut w5 = 0.0;\n    let mut x6 = 0.0;\n    let mut y6 = 0.0;\n    let mut z6\
    \ = 0.0;\n    let mut u6 = 0.0;\n    let mut v6 = 0.0;\n    let mut w6 = 0.0;\n\
    \    let mut x7 = 0.0;\n    let mut y7 = 0.0;\n    let mut z7 = 0.0;\n    let\
    \ mut u7 = 0.0;\n    let mut v7 = 0.0;\n    let mut w7 = 0.0;\n    let mut x8\
    \ = 0.0;\n    let mut y8 = 0.0;\n    let mut z8 = 0.0;\n    let mut u8 = 0.0;\n\
    \    let mut v8 = 0.0;\n    let mut w8 = 0.0;\n    let mut x9 = 0.0;\n    let\
    \ mut y9 = 0.0;\n    let mut z9 = 0.0;\n    let mut u9 = 0.0;\n    let mut v9\
    \ = 0.0;\n    let mut w9 = 0.0;\n    let mut x10 = 0.0;\n    let mut y10 = 0.0;\n\
    \    let mut z10 = 0.0;\n    let mut u10 = 0.0;\n    let mut v10 = 0.0;\n    let\
    \ mut w10 = 0.0;\n    let mut x11\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpujev_eld.rs:77:16\n   |\n\
    77 |     let mut x11\n   |                ^ help: add `;` here\n78 | }\n   | -\
    \ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpujev_eld.rs:11:51\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        x => if a + b > c { -1.0 } else { 1.0 },\n\
    \        _ => if a + c > b { -1.0 } else { 1.0 },\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpy0w5jwzd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0;\n\
    \    if a + b > c {\n        s = s + (a - b) * (c - a);\n    }\n    if a + c >\
    \ b {\n        s = s + (a - c) * (b - a);\n    }\n    if b + c > a {\n       \
    \ s = s + (b - c) * (a - b);\n    }\n    s / (a + b + c)\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpk329nz_a.rs:23:15\n\
    \   |\n23 |         s = s + (a - b) * (c - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpk329nz_a.rs:26:15\n\
    \   |\n26 |         s = s + (a - c) * (b - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpk329nz_a.rs:29:15\n\
    \   |\n29 |         s = s + (b - c) * (a - b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmpk329nz_a.rs:31:7\n\
    \   |\n31 |     s / (a + b + c)\n   |       ^ no implementation for `{float} /"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = -1.0;\n    } else {\n        let\
    \ mut ab = a + b;\n        let mut bc = b + c;\n        let mut ac = a + c;\n\
    \        while ab > bc && ac > bc {\n            ab -= bc;\n            ac -=\
    \ bc;\n        }\n        area = ab * ac;\n    }\n    area = area.round();\n \
    \   area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwganwbp0.rs:23:16\n   |\n\
    12 |     let mut area = 0.0;\n   |                    --- expected due to this\
    \ value\n...\n23 |         area = ab * ac;\n   |                ^^^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0689]: can't call method `round`\
    \ on ambiguous numeric type `{float}`\n  --> /tmp/tmpwganwbp0.rs:25:17\n   |\n\
    25 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n12 |     let mut area: f32\
    \ = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpz377m507.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpz377m507.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpz377m507.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpz377m507.rs:25:19\n\
    \   |\n25 |     area += a * b * 0.5;\n   |                   ^ no implementati"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    (a * b + c) / 2.0\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmplu4y0lxl.rs:21:17\n\
    \   |\n21 |     (a * b + c) / 2.0\n   |                 ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    let\
    \ mut area_sum = 0.0;\n    \n    if a + b > c {\n        area_sum += (a + b) *\
    \ (c + b) * (a + c) * (b + c);\n    }\n    \n    if a + c > b {\n        area_sum\
    \ += (a + c) * (b + c) * (a + b) * (c + b);\n    }\n    \n    if b + c > a {\n\
    \        area_sum += (b + c) * (a + c) * (a + b) * (b + c);\n    }\n    \n   \
    \ if area_sum > 0.0 {\n        area_sum / 4.0\n    } else {\n        -1\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp1un_7hyk.rs:16:18\n\
    \   |\n16 |         area_sum += (a + b) * (c + b) * (a + c) * (b + c);\n   | \
    \                 ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp1un_7hyk.rs:20:18\n   |\n20 |\
    \         area_sum += (a + c) * (b + c) * (a + b) * (c + b);\n   |           \
    \       ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmp1un_7hyk.rs:24:18\n   |\n24 |         area_sum\
    \ += (b + c) * (a + c) * (a + b) * (b + c);\n   |                  ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0308]: "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        -1\n    } else if a + c > b {\n        -1\n    } else if b +\
    \ c > a {\n        -1\n    } else {\n        (a * b + c) / 2.0\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpaesty91i.rs:19:21\n   |\n\
    19 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + (c - a) * (b - c);\n    }\n    if\
    \ a + c > b {\n        s = s + (b - a) * (c - b);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (c - a);\n    }\n    s * 0.5\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7q3t5zo6.rs:14:15\n\
    \   |\n14 |         s = s + (c - a) * (b - c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7q3t5zo6.rs:17:15\n\
    \   |\n17 |         s = s + (b - a) * (c - b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7q3t5zo6.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (c - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a + b + c) / 2.0;\n    area = area - (a + b) * (b + c) / 2.0;\n\
    \    area = area - (b + c) * (a + c) / 2.0;\n    area = area / 2.0;\n    area\
    \ = area.round();\n    return area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp8kwvwijq.rs:22:31\n\
    \   |\n22 |     area = area + (a + b + c) / 2.0;\n   |                       \
    \        ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp8kwvwijq.rs:23:37\n   |\n23 |     area =\
    \ area - (a + b) * (b + c) / 2.0;\n   |                                     ^\
    \ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmp8kwvwijq.rs:24:37\n   |\n24 |     area = area - (b + c) * (a +\
    \ c) / 2.0;\n   |                                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a +\
    \ b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeh_yt58h.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzr7gftgj.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\
    \    use std::cmp::Ordering;\n    use std::cmp::Ordering::*;\n    use std::cmp::PartialOrd;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::Eq;\n    use std::cmp::Eq::*;\n\
    \    use std::cmp::Ord;\n    use std::cmp::Ord::*;\n    use std::cmp::PartialOrd;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n\
    \    use std::cmp::PartialOrd::*;\n    use std::cmp::PartialOrd::*;\n    use \n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpa2vt1lua.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected identifier\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmpa2vt1lua.rs:16:9\n   |\n16 |     use std::cmp::PartialOrd::*;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n\
    \  --> /tmp/tmpa2vt1lua.rs:18:9\n   |\n18 |     use std::cmp::Eq::*;\n   |   \
    \      ^^^^^^^^^^^^^^^\n\nerror: items in traits are not importable\n  --> /tmp/tmpa2vt1lua.rs:20:9\n\
    \   |\n20 |     use std::cmp::Ord::*;\n   |         ^^^^^^^^^^^^^^^^\n\nerror[E0252]:\
    \ the name `PartialOrd` is defined multiple times\n  --> /tmp/tmpa2vt1lua.rs:21:9\n\
    \   |\n15 |     use std::cmp::PartialOrd;\n   |         -------------------- previous\
    \ import of the trait `PartialOrd` here\n...\n21 |     use std::cmp::PartialOrd;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^ `PartialOrd` reimported here\n   |\n   = note:\
    \ `PartialOrd` must be defined only once in the type namespace of this block\n\
    \nerror: items in traits are not importable\n  --> /tmp/tmpa2vt1lua.rs:22:9\n\
    \   |\n22 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: items in traits are not importable\n  --> /tmp/tmpa2vt1lua.rs:23:9\n\
    \   |\n23 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: items in traits are not importable\n  --> /tmp/tmpa2vt1lua.rs:24:9\n\
    \   |\n24 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: items in traits are not importable\n  --> /tmp/tmpa2vt1lua.rs:25:9\n\
    \   |\n25 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: items in traits are not importable\n  --> /tmp/tmpa2vt1lua.rs:26:9\n\
    \   |\n26 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: items in traits are not importable\n  --> /tmp/tmpa2vt1lua.rs:27:9\n\
    \   |\n27 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: items in traits are not importable\n  --> /tmp/tmpa2vt1lua.rs:28:9\n\
    \   |\n28 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: items in trait"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 2.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp03y530fc.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp03y530fc.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp03y530fc.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        -1\n    } else if a + c > b {\n        -1\n    } else if b +\
    \ c > a {\n        -1\n    } else {\n        (a * b + c) / 2.0\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaesty91i.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpaesty91i.rs:19:21\n   |\n\
    19 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = (a + b\
    \ + c) / 2;\n    let mut t = (a + b + c) / 2;\n    let mut u = (a + b + c) / 2;\n\
    \    while u > t {\n        if s > u {\n            s -= u;\n        } else {\n\
    \            t -= u;\n        }\n        u /= 2;\n    }\n    if s == t {\n   \
    \     return s * s\n    }\n    return -1.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3001hhl8.rs:33:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n33 |         return s * s\n   |                ^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    33 |         return (s * s) as f64\n   |                +     ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a > b {\n        area += b * (b - a)\n    }\n    if a >\
    \ c {\n        area += c * (c - a)\n    }\n    if b > c {\n        area += a *\
    \ (a - b)\n    }\n    \n    area /= 2.0;\n    \n    area.round()\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmps50adn6_.rs:25:14\n\
    \   |\n25 |         area += b * (b - a)\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmps50adn6_.rs:28:14\n   |\n28 |         area += c * (c - a)\n   |\
    \              ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmps50adn6_.rs:31:14\n   |\n31 |         area\
    \ += a * (a - b)\n   |              ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0689]: can't call method `round` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmps50adn6_.rs:36:10\n   |\n36 |  "
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut a = a as f64;\n    let mut b = b as f64;\n    let mut\
    \ c = c as f64;\n    if a + b > c {\n        s = 0.0;\n        t = 0.0;\n    \
    \    w = 0.0;\n        x = 0.0;\n        y = 0.0;\n        z = 0.0;\n        a\
    \ = 0.0;\n        b = 0.0;\n        c = 0.0;\n    }\n    if a + c > b {\n    \
    \    s = 0.0;\n        t = 0.0;\n        w = 0.0;\n        x = 0.0;\n        y\
    \ = 0.0;\n        z = 0.0;\n        a = 0.0;\n        b = 0.0;\n        c = 0.0;\n\
    \    }\n    if b + c > a {\n        s = 0.0;\n        t = 0.0;\n        w = 0.0;\n\
    \        x = 0.0;\n        y = 0.0;\n        z = 0.0;\n        a = 0.0;\n    \
    \    b = 0.0;\n        c = 0.0;\n    }\n    if a + b > c {\n        s = 0.0;\n\
    \        t = 0.0;\n        w = 0.0;\n        x = 0.0;\n        y = 0.0;\n    \
    \    z = 0.0;\n        a = 0.0;\n        b = 0.0;\n        c = 0.0;\n    }\n \
    \   if a + c > b {\n        s = 0.0;\n        t = 0.0;\n        w = 0.0;\n   \
    \     x = 0.0;\n        y = 0.0;\n        z = 0.0;\n        a = 0.0;\n       \
    \ b = 0.0;\n        c = 0.0;\n    }\n    if b + c > a {\n        s = 0.0;\n  \
    \      t = 0.0;\n        w = 0.0;\n        x = 0.0;\n        y = 0.0;\n      \
    \  z = 0.0;\n        a = 0.0;\n        b = 0.0;\n        c = 0.0;\n    }\n   \
    \ if a + b > c {\n        s = 0.0;\n        t = 0.0;\n        w = 0.0;\n     \
    \   x = 0.0;\n        y = 0.0;\n        z = 0.0;\n        a = 0.0;\n        b\
    \ = 0.0;\n        c = 0.0;\n    }\n    if a + c > b {\n        s = 0.0;\n    \
    \    t = 0.0;\n        w = 0.0;\n        x = 0.0;\n        y = 0.0;\n        z\
    \ = 0.0;\n        a = 0.0;\n        b = 0.0;\n        c = 0.0;\n    }\n    if\
    \ b + c > a {\n        s = 0.0;\n        t = 0.0;\n        w = 0.0;\n        x\
    \ = 0.0;\n        y = 0.0;\n        z = 0.0;\n        a = 0.0;\n        b = 0.0;\n\
    \        c = 0.0;\n    }\n    if a + b > c {\n        s = 0.0;\n        t = \n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5qj_s3_u.rs:138:3\n\
    \    |\n11  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n122 |     if a + b > c {\n    |                  - this delimiter might not\
    \ be properly closed...\n...\n125 | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n138 | }\n    |   ^\n\nerror: expected expression,\
    \ found `}`\n   --> /tmp/tmp5qj_s3_u.rs:125:1\n    |\n125 | }\n    | ^ expected\
    \ expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5qj_s3_u.rs:11:51\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a < b {\n        area += b * (b + c) / 2.0;\n    }\n  \
    \  \n    if a < c {\n        area += c * (a + c) / 2.0;\n    }\n    \n    if b\
    \ < c {\n        area += a * (a + b) / 2.0;\n    }\n    \n    area / 2.0\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp9ol5_r1g.rs:25:29\n\
    \   |\n25 |         area += b * (b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmp9ol5_r1g.rs:29:29\n   |\n29 |         area += c * (a + c) / 2.0;\n\
    \   |                             ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp9ol5_r1g.rs:33:29\n   |\n\
    33 |         area += a * (a + b) / 2.0;\n   |                             ^ no\
    \ implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = b * b - c;\n    } else {\n        s\
    \ = a * a - b * b;\n    }\n    if s > 0.0 {\n        s /= 2.0;\n    }\n    s *\
    \ s\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjrbpl5p4.rs:14:13\n   |\n\
    12 |     let mut s = 0.0;\n   |                 --- expected due to this value\n\
    13 |     if a + b > c {\n14 |         s = b * b - c;\n   |             ^^^^^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjrbpl5p4.rs:16:13\n   |\n12 |     let mut s = 0.0;\n   |      \
    \           --- expected due to this value\n...\n16 |         s = a * a - b *\
    \ b;\n   |             ^^^^^^^^^^^^^ expected floating-point number, found `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0;\n\
    \    if a + b > c {\n        s = s + (b - c) * (b + c) / 2.0;\n    }\n    if a\
    \ + c > b {\n        s = s + (c - a) * (c + a) / 2.0;\n    }\n    if b + c > a\
    \ {\n        s = s + (a - b) * (a + b) / 2.0;\n    }\n    s / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp62drbrek.rs:23:35\n\
    \   |\n23 |         s = s + (b - c) * (b + c) / 2.0;\n   |                   \
    \                ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp62drbrek.rs:26:35\n   |\n26 |   \
    \      s = s + (c - a) * (c + a) / 2.0;\n   |                                \
    \   ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmp62drbrek.rs:29:35\n   |\n29 |         s = s + (a - b) * (a + b)\
    \ / 2.0;\n   |                                   ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a < b {\n        area += a * b;\n    }\n    \n    if a\
    \ < c {\n        area += a * c;\n    }\n    \n    if b < c {\n        area +=\
    \ b * c;\n    }\n    \n    area / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpudkpxova.rs:25:14\n\
    \   |\n25 |         area += a * b;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpudkpxova.rs:29:14\n\
    \   |\n29 |         area += a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpudkpxova.rs:33:14\n\
    \   |\n33 |         area += b * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a +\
    \ b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeh_yt58h.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    (a * b + c) * 0.5\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpxjtb067f.rs:21:17\n\
    \   |\n21 |     (a * b + c) * 0.5\n   |                 ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a > b {\n        area = area + (a - b) * (b - c);\n   \
    \ }\n    \n    if a > c {\n        area = area + (a - c) * (c - b);\n    }\n \
    \   \n    if b > c {\n        area = area + (b - c) * (c - a);\n    }\n    \n\
    \    area = area / 2.0;\n    \n    if area < 0.0 {\n        area = -1.0;\n   \
    \ }\n    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp2pu4ltto.rs:25:21\n\
    \   |\n25 |         area = area + (a - b) * (b - c);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmp2pu4ltto.rs:29:21\n   |\n29 |         area = area + (a - c) * (c - b);\n\
    \   |                     ^ no implementation for `{float} + isize`\n   |\n  \
    \ = help: the trait `Add<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp2pu4ltto.rs:33:21\n   |\n33 |      \
    \   area = area + (b - c) * (c - a);\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = b as f64;\n        b = c as f64;\n        c = a as f64;\n\
    \    }\n    if a + c > b {\n        a = c as f64;\n        b = a as f64;\n   \
    \     c = b as f64;\n    }\n    if b + c > a {\n        a = b as f64;\n      \
    \  b = c as f64;\n        c = a as f64;\n    }\n    (a * b * c).round()\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `64.0`,\n right: `6.0`', /tmp/tmprosdudgi.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    let\
    \ mut a = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n  \
    \  \n    if a + b > c {\n        a = a + b - c;\n    }\n    \n    if a + c > b\
    \ {\n        b = a + c - b;\n    }\n    \n    if b + c > a {\n        c = b +\
    \ c - a;\n    }\n    \n    a as f64 / b as f64 as f64\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.6666666666666666`,\n right: `6.0`', /tmp/tmplmukcuye.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = b - c;\n    }\n    if a + c > b {\n        b = c - a;\n\
    \    }\n    if b + c > a {\n        c = a - b;\n    }\n    a + b + c\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.0`,\n right: `6.0`', /tmp/tmpy5vsgo7m.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area / (a * c);\n    area =\
    \ area / (b * c);\n    area = area / (a * b);\n    area = area / (c * b);\n  \
    \  area = area / (a * c);\n    area = area / (c * c);\n    area = area / (b *\
    \ b);\n    area = area / (a * a);\n    area = area / (c * c);\n    area = area\
    \ / (b * b);\n    area = area / (a * a);\n    area = area / (c * c);\n    area\
    \ = area / (b * b);\n    area = area / (a * a);\n    area = area / (c * c);\n\
    \    area = area / (b * b);\n    area = area / (a * a);\n    area = area / (c\
    \ * c);\n    area = area / (b * b);\n    area = area / (a * a);\n    area = area\
    \ / (c * c);\n    area = area / (b * b);\n    area = area / (a * a);\n    area\
    \ = area / (c * c);\n    area = area / (b * b);\n    area = area / (a * a);\n\
    \    area = area / (c * c);\n    area = area / (b * b);\n    area = area / (a\
    \ * a);\n    area = area / (c * c);\n    area = area / (b * b);\n    area = area\
    \ / (a * a);\n    area = area / (c * c);\n    area = area / (b * b);\n    area\
    \ = area / (a * a);\n    area = area / (c * c);\n    area = area / (b * b);\n\
    \    area = area / (a * a);\n    area = area / (c * c);\n    area = area / (b\
    \ * b);\n    area = area / (a * a);\n    area = area / (c * c);\n    area = area\
    \ / (b * b);\n    area = area / (a * a);\n    area = area / (c * c);\n    area\
    \ = area / (b * b);\n    area = area / (a * a);\n    area = area / (c * c);\n\
    \    area = area / (b * b);\n    area = area / (a * a);\n    area = area / (c\
    \ * c);\n    area = area / (b * b);\n    area = area / (a * a);\n    area = area\
    \ / (c * c);\n    area = area / (b * b);\n    area = area / (a * a);\n    area\
    \ = area / (c * c);\n    area = \n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpzs5ajrxz.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected expression\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpzs5ajrxz.rs:22:17\n   |\n22 |     area = area +\
    \ (a * b) - (c * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot divide `{float}` by `isize`\n  --> /tmp/tmpzs5ajrxz.rs:23:17\n   |\n\
    23 |     area = area / (a * c);\n   |                 ^ no implementation for\
    \ `{float} / isize`\n   |\n   = help: the trait `Div<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmpzs5ajrxz.rs:24:17\n\
    \   |\n24 |     area = area / (b * c);\n   |                 ^ no implementation\
    \ for `{float} / isize`\n   |\n   = help: the trait `Div<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `{float}` by `isize`"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = (a + b\
    \ + c) / 2;\n    if s == 0 {\n        return 0.0\n    }\n    s *= s;\n    let\
    \ mut area: f64 = 0.0;\n    area = s / 4.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    \n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpytbdx78e.rs:27:14\n\
    \   |\n27 |     area = s / 4.0;\n   |              ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpytbdx78e.rs:11:51\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    (a * b + c) / 2.0\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmplu4y0lxl.rs:21:17\n\
    \   |\n21 |     (a * b + c) / 2.0\n   |                 ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut s =\
    \ (a + b + c) / 2.0;\n    let mut area: f64 = 0.0;\n    \n    if s > 0.0 {\n \
    \       area = s * (s - a) * (s - b) * (s - c);\n    }\n    \n    area\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpcy9zwya6.rs:22:29\n\
    \   |\n22 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        _ => 2.0 * (a + b + c) / 3.0,\n    }\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpvag00xh1.rs:14:18\n\
    \   |\n14 |         _ => 2.0 * (a + b + c) / 3.0,\n   |                  ^ no\
    \ implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum:\
    \ f64 = 0.0;\n    sum += a * b as f64;\n    sum += a * c as f64;\n    sum += b\
    \ * c as f64;\n    \n    if sum > 0.0 {\n        sum as f64 / 3.0\n    } else\
    \ {\n        -1.0 as f64\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmp_y51vpa4.rs:13:14\n\
    \   |\n13 |     sum += a * b as f64;\n   |              ^ no implementation for\
    \ `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmp_y51vpa4.rs:14:14\n\
    \   |\n14 |     sum += a * c as f64;\n   |              ^ no implementation for\
    \ `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmp_y51vpa4.rs:15:14\n\
    \   |\n15 |     sum += b * c as f64;\n   |              ^ no implementation for\
    \ `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        -1\n    } else {\n        (a * b) - (c * b)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp869rlaa3.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp869rlaa3.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         (a * b) - (c * b)\n   |         ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         ((a * b) - (c * b)) as f64\n   |         +   \
    \              ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = \n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpgatrtkxs.rs:89:1\n\
    \   |\n89 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgatrtkxs.rs:22:12\n   |\n21 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n22 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n22 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = a - b;\n        b = c - a;\n        c = c - b;\n    }\n\
    \    let mut area = 0.0;\n    if a + b > c {\n        area = area + (b * c / a);\n\
    \    } else {\n        area = area + (c * (a - b) / 2.0);\n    }\n    area = area\
    \ + (a * c / 2.0);\n    area = area / 2.0;\n    area = area.round();\n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3.0`,\n right: `6.0`', /tmp/tmphvv_j9s1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum:\
    \ f64 = 0.0;\n    \n    if a + b > c {\n        sum = a + b + c;\n    } else {\n\
    \        sum = a + c;\n    }\n    \n    if a + c > b {\n        sum += a + c;\n\
    \    } else {\n        sum += b + c;\n    }\n    \n    if b + c > a {\n      \
    \  sum += b + c;\n    } else {\n        sum += a + b;\n    }\n    \n    sum /\
    \ 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpffgt8mvw.rs:15:15\n   |\n\
    12 |     let mut sum: f64 = 0.0;\n   |                  --- expected due to this\
    \ type\n...\n15 |         sum = a + b + c;\n   |               ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |         sum = (a + b + c) as f64;\n   |               +         ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpffgt8mvw.rs:17:15\n   |\n12 |\
    \     let mut sum: f64 = 0.0;\n   |                  --- expected due to this\
    \ type\n...\n17 |         sum = a + c;\n   |               ^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |         sum = (a + c) as f64;\n   |               +     ++++++++\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `f64`\n  --> /tmp/tmpffgt8mvw.rs:21:13\n   |\n\
    21 |         sum += a + c;\n   |             ^^ no implementation for `f64 +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpffgt8mvw.rs:23:13\n\
    \   |\n23 |         sum += b + c;\n   |             ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as A"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    (a * b + c) / 2.0\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmplu4y0lxl.rs:21:17\n\
    \   |\n21 |     (a * b + c) / 2.0\n   |                 ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011976
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a > b {\n        area += a * b;\n    }\n    \n    if a\
    \ > c {\n        area += a * c;\n    }\n    \n    if b > c {\n        area +=\
    \ b * c;\n    }\n    \n    area /= 2.0;\n    \n    area = area.round();\n    \n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp61bvxvhs.rs:25:14\n\
    \   |\n25 |         area += a * b;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp61bvxvhs.rs:29:14\n\
    \   |\n29 |         area += a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp61bvxvhs.rs:33:14\n\
    \   |\n33 |         area += b * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmp61bvxvhs.rs:38:17\n   |\n38 |     area = area."
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + (b - c) * (b + c) / 2.0;\n    }\n\
    \    if a + c > b {\n        s = s + (c - b) * (c + b) / 2.0;\n    }\n    if b\
    \ + c > a {\n        s = s + (a - b) * (a + b) / 2.0;\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpjpngsx8w.rs:14:35\n\
    \   |\n14 |         s = s + (b - c) * (b + c) / 2.0;\n   |                   \
    \                ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpjpngsx8w.rs:17:35\n   |\n17 |   \
    \      s = s + (c - b) * (c + b) / 2.0;\n   |                                \
    \   ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpjpngsx8w.rs:20:35\n   |\n20 |         s = s + (a - b) * (a + b)\
    \ / 2.0;\n   |                                   ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * (s - a) * (s -\
    \ b) * (s - c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf70i4vxw.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * (s - a) * (s - b) * (s - c)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n16 |     (s * (s - a) * (s - b) * (s - c)) as f64\n   |   \
    \  +                               ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut s = 0.0;\n\
    \    if a > b {\n        s += b - a;\n    }\n    if a > c {\n        s += c -\
    \ a;\n    }\n    if b > c {\n        s += a - b;\n    }\n    if s > 0.0 {\n  \
    \      return s / 2.0\n    }\n    return -1.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpaefssai1.rs:23:11\n\
    \   |\n23 |         s += b - a;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpaefssai1.rs:26:11\n\
    \   |\n26 |         s += c - a;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpaefssai1.rs:29:11\n\
    \   |\n29 |         s += a - b;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a +\
    \ b + c {\n        0 => 0.0,\n        x => if x > c { -1.0 } else { 1.0 },\n \
    \   }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpr3gh0bd7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b\
    \ > c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n\
    \    }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu7vzoqy_.rs:22:12\n   |\n\
    21 |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n22 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n22 |     area = ((a * b) - (c * a)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if\
    \ a + c > b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (a + b);\n    }\n    s / 2.0\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpnshggz48.rs:14:15\n\
    \   |\n14 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpnshggz48.rs:17:15\n\
    \   |\n17 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpnshggz48.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (a + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut a = a as f64;\n    let mut b = b as f64;\n \
    \   let mut c = c as f64;\n    if a + b > c {\n        s += c;\n        t = b;\n\
    \    } else {\n        s += a;\n        t = c;\n    }\n    if a + c > b {\n  \
    \      s += b;\n        t = c;\n    } else {\n        s += a;\n        t = b;\n\
    \    }\n    if b + c > a {\n        s += c;\n        t = a;\n    } else {\n  \
    \      s += b;\n        t = a;\n    }\n    if a + b > c {\n        s += c;\n \
    \       t = b;\n    } else {\n        s += a;\n        t = c;\n    }\n    if a\
    \ + c > b {\n        s += b;\n        t = c;\n    } else {\n        s += a;\n\
    \        t = b;\n    }\n    if b + c > a {\n        s += c;\n        t = a;\n\
    \    } else {\n        s += b;\n        t = a;\n    }\n    if a + b > c {\n  \
    \      s += c;\n        t = b;\n    } else {\n        s += a;\n        t = c;\n\
    \    }\n    if a + c > b {\n        s += b;\n        t = c;\n    } else {\n  \
    \      s += a;\n        t = b;\n    }\n    if b + c > a {\n        s += c;\n \
    \       t = a;\n    } else {\n        s += b;\n        t = a;\n    }\n    if a\
    \ + b > c {\n        s += c;\n        t = b;\n    } else {\n        s += a;\n\
    \        t = c;\n    }\n    if a + c > b {\n        s += b;\n        t = c;\n\
    \    } else {\n        s += a;\n        t = b;\n    }\n    if b + c > a {\n  \
    \      s += c;\n        t = a;\n    } else {\n        s += b;\n        t = a;\n\
    \    }\n    if a + b > c {\n        s += c;\n        t = b;\n    } else {\n  \
    \      s += a;\n        t = c;\n    }\n    if a + c > b {\n        s += b;\n \
    \       t = c;\n    } else {\n        s += a;\n        t = b;\n    }\n    if b\
    \ + c > a {\n        s += c;\n        t = a;\n    } else {\n        s += b;\n\
    \        t = a;\n    }\n    if a + b > c {\n        s += c;\n        t = b;\n\
    \    } else {\n        s += a;\n        t = c;\n    }\n    if a + c > b {\n  \
    \      s += b;\n        t = c;\n    } else {\n        s += a;\n        t = b;\n\
    \    }\n    if b + c > a {\n        s += c;\n        t = a;\n    } else {\n  \
    \      s += b;\n        t = a;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpcvxxpp97.rs:158:3\n\
    \    |\n11  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n142 |     } else {\n    |            - this delimiter might not be properly\
    \ closed...\n...\n145 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n158 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcvxxpp97.rs:11:51\n   |\n11 | fn triangle_area(a: isize, b: isize, c:\
    \ isize) -> f64 {\n   |    -------------                                  ^^^\
    \ expected `f64`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011977
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a\
    \ = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a\
    \ + b > c {\n        a = b as f64;\n        b = c as f64;\n        c = a as f64;\n\
    \    }\n    if a + c > b {\n        a = c as f64;\n        c = b as f64;\n   \
    \     b = a as f64;\n    }\n    if b + c > a {\n        b = c as f64;\n      \
    \  c = a as f64;\n        a = b as f64;\n    }\n    (a * b * c) / ((a * b) + c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3.4482758620689653`,\n right: `6.0`', /tmp/tmpyo0rvjfs.rs:35:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011977
