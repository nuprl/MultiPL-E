language: rs
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s.chars().any(|c| c.is_consonant() && c != ' ') {\n            i += 1;\n   \
    \     } else {\n            words.push(s.split_whitespace()[i]);\n           \
    \ i += 1;\n        }\n        if i == s.len() {\n            break;\n        }\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5fewakz6.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5fewakz6.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5fewakz6.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5fewakz6.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5fewakz6.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5fewakz6.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5fewakz6.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5fewakz6.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5fewakz6.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5fewakz6.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5fewakz6.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s.chars().all(|c| c.is_consonant() && c != ' ') {\n\
    \            words.push(s.subslice(i, i + n));\n            i += n;\n        }\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp14pt7t61.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp14pt7t61.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp14pt7t61.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp14pt7t61.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp14pt7t61.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp14pt7t61.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp14pt7t61.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp14pt7t61.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp14pt7t61.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp14pt7t61.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp14pt7t61.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut s = s;\n    while s.len() > 0 {\n        let\
    \ mut word = String::new();\n        let mut i = 0;\n        while i < s.len()\
    \ {\n            let c = s.chars().nth(i).unwrap();\n            if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                i += 1;\n  \
    \              continue;\n            }\n            if c == 'n' {\n         \
    \       i += 1;\n                continue;\n            }\n            if c ==\
    \ 't' || c == 's' || c == 'h' {\n                i += 1;\n                continue;\n\
    \            }\n            if c == 'd' || c == 'l' || c == 'm' || c == 'y' {\n\
    \                i += 1;\n                continue;\n            }\n         \
    \   if c == 'p' || c == 'r' || c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' {\n                i += 1;\n                continue;\n           \
    \ }\n            if c == 'n' {\n                i += 1;\n                continue;\n\
    \            }\n            if c == 't' || c == 's' || c == 'h' {\n          \
    \      i += 1;\n                continue;\n            }\n            if c ==\
    \ 'd' || c == 'l' || c == 'm' || c == 'y' {\n                i += 1;\n       \
    \         continue;\n            }\n            if c == 'p' || c == 'r' || c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                i +=\
    \ 1;\n                continue;\n            }\n            if c == 'n' {\n  \
    \              i += 1;\n                continue;\n            }\n           \
    \ if c == 't' || c == 's' || c == 'h' {\n                i += 1;\n           \
    \     continue;\n            }\n            if c == 'd' || c == 'l' || c == 'm'\
    \ || c == 'y' {\n                i += 1;\n                continue;\n        \
    \    }\n            if c == 'p' || c == 'r' || c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n                i += 1;\n                continue;\n\
    \            }\n            if c == 'n' {\n                i += 1;\n         \
    \       continue;\n            }\n            if c == 't' || c == 's' || c ==\
    \ 'h' {\n                i += 1;\n                continue;\n            }\n \
    \           if c == 'd' || c == 'l' || c == 'm' || c == 'y' {\n              \
    \  i += 1;\n                continue;\n            }\n            if c == 'p'\
    \ || c == 'r' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \                i += 1;\n                continue\n}\n\nfn main() {\n    let\
    \ candidate = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpr63mwv23.rs:103:3\n\
    \    |\n17  | fn select_words(s: String, n: isize) -> Vec<String> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while s.len() > 0 {\n    |                       - unclosed delimiter\n\
    ...\n23  |         while i < s.len() {\n    |                           - unclosed\
    \ delimiter\n...\n89  |             if c == 'p' || c == 'r' || c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n    |                           \
    \                                                                      - this\
    \ delimiter might not be properly closed...\n...\n92  | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n103 | }\n    |   ^\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr63mwv23.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr63mwv23.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr63mwv23.rs:97:17\n   |\n97 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr63mwv23.rs:97:25\n\
    \   |\n97 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr63mwv23.rs:98:17\n   |\n98 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr63mwv23.rs:98:25\n   |\n98 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr63mwv23.rs:99:17\n   |\n99 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ list = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        let\
    \ mut j = i;\n        while j < s.len() && s.chars().any(|c| c == s.chars().nth(j))\
    \ {\n            j += 1\n        }\n        if j - i == n {\n            list.push(s.chars().nth(i).unwrap());\n\
    \            i += n;\n        }\n        else {\n            i += j;\n       \
    \ }\n    }\n    list\n}\n\nfn main() {\n    let candidate = select_words;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp2y1ya38.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp2y1ya38.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp2y1ya38.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp2y1ya38.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp2y1ya38.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp2y1ya38.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp2y1ya38.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp2y1ya38.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp2y1ya38.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp2y1ya38.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp2y1ya38.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut s = String::from(s);\n    while s.len() > 0 {\n\
    \        let mut i = 0;\n        while i < s.len() && s.chars().any(|c| c != s.chars().nth(i))\
    \ {\n            i += 1;\n        }\n        if i == s.len() {\n            words.push(s);\n\
    \            break;\n        }\n        let mut j = i;\n        while j < s.len()\
    \ && s.chars().any(|c| c != s.chars().nth(j)) {\n            j += 1;\n       \
    \ }\n        if j == s.len() {\n            words.push(s);\n            break;\n\
    \        }\n        let mut k = j;\n        while k < s.len() && s.chars().any(|c|\
    \ c != s.chars().nth(k)) {\n            k += 1;\n        }\n        if k == s.len()\
    \ {\n            words.push(s);\n            break;\n        }\n        let mut\
    \ l = k;\n        while l < s.len() && s.chars().any(|c| c != s.chars().nth(l))\
    \ {\n            l += 1;\n        }\n        if l == s.len() {\n            words.push(s);\n\
    \            break;\n        }\n        let mut m = l;\n        while m < s.len()\
    \ && s.chars().any(|c| c != s.chars().nth(m)) {\n            m += 1;\n       \
    \ }\n        if m == s.len() {\n            words.push(s);\n            break;\n\
    \        }\n        let mut n = m;\n        while n < s.len() && s.chars().any(|c|\
    \ c != s.chars().nth(n)) {\n            n += 1;\n        }\n        if n == s.len()\
    \ {\n            words.push(s);\n            break;\n        }\n        let mut\
    \ o = n;\n        while o < s.len() && s.chars().any(|c| c != s.chars().nth(o))\
    \ {\n            o += 1;\n        }\n        if o == s.len() {\n            words.push(s);\n\
    \            break;\n        }\n        let mut p = o;\n        while p < s.len()\
    \ && s.chars().any(|c| c != s.chars().nth(p)) {\n            p += 1;\n       \
    \ }\n        if p == s.len() {\n            words.push(s);\n            break;\n\
    \        }\n        let mut q = p;\n        while q < s.len() && s.chars().any(|c|\
    \ c != s.chars().nth(q)) {\n            q += 1;\n        }\n        if q == s.len()\
    \ {\n            words.push(s);\n            break;\n        }\n        let mut\
    \ r = q;\n        while r < s.len() && s.chars().any(|c| c != s.chars().nth(r))\
    \ {\n            r += 1;\n        }\n        if r == s.\n}\n\nfn main() {\n  \
    \  let candidate = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp8fn37rw7.rs:109:3\n\
    \    |\n17  | fn select_words(s: String, n: isize) -> Vec<String> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while s.len() > 0 {\n    |                       - this delimiter might\
    \ not be properly closed...\n...\n98  | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n109 | }\n    |   ^\n\nerror: unexpected token:\
    \ `}`\n  --> /tmp/tmp8fn37rw7.rs:98:1\n   |\n98 | }\n   | ^\n\nerror: expected\
    \ `{`, found `}`\n  --> /tmp/tmp8fn37rw7.rs:98:1\n   |\n97 |         if r == s.\n\
    \   |         -- this `if` expression has a condition, but no block\n98 | }\n\
    \   | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \   --> /tmp/tmp8fn37rw7.rs:102:17\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmp8fn37rw7.rs:102:25\n    |\n102 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmp8fn37rw7.rs:103:17\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmp8fn37rw7.rs:103:25\n    |\n103 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmp8fn37rw7.rs:104:17\n    |\n104 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmp8fn37rw7.rs:104:25\n    |\n104 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmp8fn37rw7.rs:105:17\n    |\n105 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s.chars().any(|c| c.is_consonant() && c != ' ') {\n            i += 1;\n   \
    \     } else {\n            words.push_back(s.subslice(i, i + n));\n         \
    \   i += n;\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpl8e6n8dc.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl8e6n8dc.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl8e6n8dc.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl8e6n8dc.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl8e6n8dc.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl8e6n8dc.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl8e6n8dc.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl8e6n8dc.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl8e6n8dc.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl8e6n8dc.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl8e6n8dc.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ list = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        let\
    \ mut j = i;\n        while j < s.len() && s[j] == ' ' {\n            j += 1\n\
    \        }\n        if j - i > n {\n            list.push(s.split_whitespace()[i]);\n\
    \            i += j - i;\n        } else {\n            i += 1;\n        }\n \
    \   }\n    list\n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpa6pw421b.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa6pw421b.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa6pw421b.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa6pw421b.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa6pw421b.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa6pw421b.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa6pw421b.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa6pw421b.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa6pw421b.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa6pw421b.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa6pw421b.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut consonants = Vec::new();\n    let mut vowels\
    \ = Vec::new();\n    let mut vowel_counter = 0;\n    let mut vowel_counter2 =\
    \ 0;\n    let mut vowel_counter3 = 0;\n    let mut vowel_counter4 = 0;\n    let\
    \ mut vowel_counter5 = 0;\n    let mut vowel_counter6 = 0;\n    let mut vowel_counter7\
    \ = 0;\n    let mut vowel_counter8 = 0;\n    let mut vowel_counter9 = 0;\n   \
    \ let mut vowel_counter10 = 0;\n    let mut vowel_counter11 = 0;\n    let mut\
    \ vowel_counter12 = 0;\n    let mut vowel_counter13 = 0;\n    let mut vowel_counter14\
    \ = 0;\n    let mut vowel_counter15 = 0;\n    let mut vowel_counter16 = 0;\n \
    \   let mut vowel_counter17 = 0;\n    let mut vowel_counter18 = 0;\n    let mut\
    \ vowel_counter19 = 0;\n    let mut vowel_counter20 = 0;\n    let mut vowel_counter21\
    \ = 0;\n    let mut vowel_counter22 = 0;\n    let mut vowel_counter23 = 0;\n \
    \   let mut vowel_counter24 = 0;\n    let mut vowel_counter25 = 0;\n    let mut\
    \ vowel_counter26 = 0;\n    let mut vowel_counter27 = 0;\n    let mut vowel_counter28\
    \ = 0;\n    let mut vowel_counter29 = 0;\n    let mut vowel_counter30 = 0;\n \
    \   let mut vowel_counter31 = 0;\n    let mut vowel_counter32 = 0;\n    let mut\
    \ vowel_counter33 = 0;\n    let mut vowel_counter34 = 0;\n    let mut vowel_counter35\
    \ = 0;\n    let mut vowel_counter36 = 0;\n    let mut vowel_counter37 = 0;\n \
    \   let mut vowel_counter38 = 0;\n    let mut vowel_counter39 = 0;\n    let mut\
    \ vowel_counter40 = 0;\n    let mut vowel_counter41 = 0;\n    let mut vowel_counter42\
    \ = 0;\n    let mut vowel_counter43 = 0;\n    let mut vowel_counter44 = 0;\n \
    \   let mut vowel_counter45 = 0;\n    let mut vowel_counter46 = 0;\n    let mut\
    \ vowel_counter47 = 0;\n    let mut vowel_counter48 = 0;\n    let mut vowel_counter49\
    \ = 0;\n    let mut vowel_counter50 = 0;\n    let mut vowel_counter51 = 0;\n \
    \   let mut vowel_counter52 = 0;\n    let mut vowel_counter53 = 0;\n    let mut\
    \ vowel_counter54 = 0;\n\n}\n\nfn main() {\n    let candidate = select_words;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:80:17\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzpm4h9c7.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzpm4h9c7.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzpm4h9c7.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzpm4h9c7.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut s = String::from(s);\n    let mut n = n as\
    \ usize;\n    let mut i = 0;\n    while i < s.len() {\n        let mut j = i;\n\
    \        while j < s.len() && s[j] == ' ' {\n            j += 1\n        }\n \
    \       if j == i {\n            result.push(s.clone());\n            i += 1;\n\
    \        } else {\n            let mut k = j;\n            while k < s.len() &&\
    \ s[k] != ' ' {\n                k += 1\n            }\n            if k == j\
    \ {\n                result.push(s.clone());\n                i += 1;\n      \
    \      } else {\n                let mut k = j;\n                while k < s.len()\
    \ && s[k] == ' ' {\n                    k += 1\n                }\n          \
    \      if k == j {\n                    result.push(s.clone());\n            \
    \        i += 1;\n                } else {\n                    let mut k = j;\n\
    \                    while k < s.len() && s[k] != ' ' {\n                    \
    \    k += 1\n                    }\n                    if k == j {\n        \
    \                result.push(s.clone());\n                        i += 1;\n  \
    \                  } else {\n                        let mut k = j;\n        \
    \                while k < s.len() && s[k] == ' ' {\n                        \
    \    k += 1\n                        }\n                        if k == j {\n\
    \                            result.push(s.clone());\n                       \
    \     i += 1;\n                        } else {\n                            let\
    \ mut k = j;\n                            while k < s.len() && s[k] != ' ' {\n\
    \                                k += 1\n                            }\n     \
    \                       if k == j {\n                                result.push(s.clone());\n\
    \                                i += 1;\n                            } else {\n\
    \                                let mut k = j;\n                            \
    \    while k < s.len() && s[k] == ' ' {\n                                    k\
    \ += 1\n                                }\n                                if\
    \ k == j {\n                                    result.push(s.clone());\n    \
    \                                i += 1;\n                                } else\
    \ {\n                                    let mut k = j;\n                    \
    \                while k < s.len() && s[k] != ' ' {\n                        \
    \                k += 1\n                                    }\n             \
    \                       if k == j {\n                                        result.push(s.clone());\n\
    \                                        i += 1;\n                           \
    \         } else {\n                                        let mut k = j;\n \
    \                                       while k < s.len() && s[k] == ' ' {\n \
    \                                           k += 1\n                         \
    \               }\n                                        if k == j {\n     \
    \                                       result.push(s.clone());\n            \
    \                                i += 1;\n                                   \
    \     } else {\n                                            let mut k = j;\n \
    \                                           while k < s.len() && s[k] != ' ' {\n\
    \                                                k += 1\n                    \
    \                        }\n                                            if k ==\
    \ j {\n                                                result.push(s.clone());\n\
    \                                                i += 1;\n                   \
    \                         } else {\n                                         \
    \       let mut k = j;\n                                                while\
    \ k < s.len() && s[k] == ' ' \n}\n\nfn main() {\n    let candidate = select_words;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp_kznsa4e.rs:116:3\n\
    \    |\n17  | fn select_words(s: String, n: isize) -> Vec<String> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    22  |     while i < s.len() {\n    |                       - unclosed delimiter\n\
    ...\n30  |         } else {\n    |                - unclosed delimiter\n...\n\
    38  |             } else {\n    |                    - unclosed delimiter\n...\n\
    46  |                 } else {\n    |                        - unclosed delimiter\n\
    ...\n54  |                     } else {\n    |                            - unclosed\
    \ delimiter\n...\n62  |                         } else {\n    |              \
    \                  - unclosed delimiter\n...\n70  |                          \
    \   } else {\n    |                                    - unclosed delimiter\n\
    ...\n78  |                                 } else {\n    |                   \
    \                     - unclosed delimiter\n...\n86  |                       \
    \              } else {\n    |                                            - unclosed\
    \ delimiter\n...\n94  |                                         } else {\n   \
    \ |                                                - unclosed delimiter\n...\n\
    102 |                                             } else {\n    |            \
    \                                        - this delimiter might not be properly\
    \ closed...\n...\n105 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n116 | }\n    |   ^\n\nerror: expected `{`, found `}`\n   -->\
    \ /tmp/tmp_kznsa4e.rs:105:1\n    |\n105 | }\n    | ^ expected `{`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp_kznsa4e.rs:109:17\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp_kznsa4e.rs:109:25\n    |\n109 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp_kznsa4e.rs:110:1"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ list = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s.chars().any(|c| c.is_consonant() && c != ' ') {\n            list.push(s.subslice(i,\
    \ i + n));\n            i += n;\n        }\n    }\n    list\n}\n\nfn main() {\n\
    \    let candidate = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfer27ot1.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfer27ot1.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfer27ot1.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfer27ot1.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfer27ot1.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfer27ot1.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfer27ot1.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfer27ot1.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfer27ot1.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfer27ot1.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfer27ot1.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ list = Vec::new();\n    let mut count = 0;\n    let mut i = 0;\n    while i\
    \ < s.len() {\n        if s.chars().any(|c| c == ' ') {\n            i += 1;\n\
    \            continue;\n        }\n        if s.chars().any(|c| c.is_uppercase()\
    \ && c != ' ') {\n            i += 1;\n            continue;\n        }\n    \
    \    if s.chars().any(|c| c.is_lowercase() && c != ' ') {\n            i += 1;\n\
    \            continue;\n        }\n        if s.chars().any(|c| c.is_lowercase()\
    \ && c.is_uppercase() && c != ' ') {\n            i += 1;\n            continue;\n\
    \        }\n        if s.chars().any(|c| c.is_uppercase() && c.is_lowercase()\
    \ && c != ' ') {\n            i += 1;\n            continue;\n        }\n    \
    \    if s.chars().any(|c| c.is_lowercase() && c.is_uppercase() && c.is_lowercase()\
    \ && c != ' ') {\n            i += 1;\n            continue;\n        }\n    \
    \    if s.chars().any(|c| c.is_lowercase() && c.is_uppercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c != ' ') {\n            i += 1;\n            continue;\n\
    \        }\n        if s.chars().any(|c| c.is_lowercase() && c.is_uppercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c != ' ') {\n\
    \            i += 1;\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c.is_lowercase() && c.is_uppercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c != ' ') {\n            i += 1;\n\
    \            continue;\n        }\n        if s.chars().any(|c| c.is_lowercase()\
    \ && c.is_uppercase() && c.is_lowercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c != ' ') {\n            i += 1;\n\
    \            continue;\n        }\n        if s.chars().any(|c| c.is_lowercase()\
    \ && c.is_uppercase() && c.is_lowercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c != ' ') {\n\
    \            i += 1;\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c.is_lowercase() && c.is_uppercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c != ' ') {\n            i += 1;\n            continue;\n\
    \        }\n        if s.chars().any(|c| c.is_lowercase() && c.is_uppercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c.is_lowercase()\
    \ && \n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpd60oe65r.rs:82:3\n\
    \   |\n17 | fn select_words(s: String, n: isize) -> Vec<String> {\n   |      \
    \                                               - unclosed delimiter\n...\n21\
    \ |     while i < s.len() {\n   |                       - this delimiter might\
    \ not be properly closed...\n...\n71 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n82 | }\n   |   ^\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpd60oe65r.rs:71:1\n   |\n71 | }\n   | ^ expected expression\n\
    \nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpd60oe65r.rs:70:25\n\
    \   |\n17 | fn select_words(s: String, n: isize) -> Vec<String> {\n   |      \
    \                                               - closing delimiter possibly meant\
    \ for this\n...\n70 |         if s.chars().any(|c| c.is_lowercase() && c.is_uppercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c.is_low...\n\
    \   |                         ^ unclosed delimiter\n71 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd60oe65r.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd60oe65r.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd60oe65r.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd60oe65r.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd60oe65r.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd60oe65r.rs:77:25\n   |\n77 |     assert_eq!({left},"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ list = Vec::new();\n    let mut s = String::from(s);\n    let mut n = n as usize;\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c !=\
    \ ' ') {\n            list.push(s.subslice(i, i + n));\n            i += n;\n\
    \        }\n    }\n    list\n}\n\nfn main() {\n    let candidate = select_words;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9rbj6qcu.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9rbj6qcu.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9rbj6qcu.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9rbj6qcu.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9rbj6qcu.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9rbj6qcu.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9rbj6qcu.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9rbj6qcu.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9rbj6qcu.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9rbj6qcu.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9rbj6qcu.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut index = 0;\n    while index < s.len() {\n \
    \       let mut word = String::new();\n        let mut is_consonant = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut \n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpnsxaqhhi.rs:102:3\n\
    \    |\n17  | fn select_words(s: String, n: isize) -> Vec<String> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while index < s.len() {\n    |                           - this delimiter\
    \ might not be properly closed...\n...\n91  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n102 | }\n    |   ^\n\nerror: expected\
    \ identifier, found `}`\n  --> /tmp/tmpnsxaqhhi.rs:91:1\n   |\n91 | }\n   | ^\
    \ expected identifier\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnsxaqhhi.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnsxaqhhi.rs:95:25\n   |\n95 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnsxaqhhi.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnsxaqhhi.rs:96:25\n   |\n96 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnsxaqhhi.rs:97:17\n  \
    \ |\n97 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnsxaqhhi.rs:97:25\n   |\n97 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnsxaqhhi.rs:98:17\n   |\n98 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnsxaqhhi.rs:98:25\n\
    \   |\n98 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot fin"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut s = String::from(s);\n    let mut n = n as\
    \ usize;\n    while n > 0 {\n        let mut index = s.find('a' as char);\n  \
    \      if index == s.len() {\n            break;\n        }\n        let mut index\
    \ = s.find('e' as char);\n        if index == s.len() {\n            break;\n\
    \        }\n        let mut index = s.find('i' as char);\n        if index ==\
    \ s.len() {\n            break;\n        }\n        let mut index = s.find('o'\
    \ as char);\n        if index == s.len() {\n            break;\n        }\n  \
    \      let mut index = s.find('u' as char);\n        if index == s.len() {\n \
    \           break;\n        }\n        let mut index = s.find('A' as char);\n\
    \        if index == s.len() {\n            break;\n        }\n        let mut\
    \ index = s.find('E' as char);\n        if index == s.len() {\n            break;\n\
    \        }\n        let mut index = s.find('I' as char);\n        if index ==\
    \ s.len() {\n            break;\n        }\n        let mut index = s.find('O'\
    \ as char);\n        if index == s.len() {\n            break;\n        }\n  \
    \      let mut index = s.find('U' as char);\n        if index == s.len() {\n \
    \           break;\n        }\n        let mut index = s.find('n' as char);\n\
    \        if index == s.len() {\n            break;\n        }\n        let mut\
    \ index = s.find('a' as char);\n        if index == s.len() {\n            break;\n\
    \        }\n        let mut index = s.find('e' as char);\n        if index ==\
    \ s.len() {\n            break;\n        }\n        let mut index = s.find('i'\
    \ as char);\n        if index == s.len() {\n            break;\n        }\n  \
    \      let mut index = s.find('o' as char);\n        if index == s.len() {\n \
    \           break;\n        }\n        let mut index = s.find('u' as char);\n\
    \        if index == s.len() {\n            break;\n        }\n        let mut\
    \ index = s.find('A' as char);\n        if index == s.len() {\n            break;\n\
    \        }\n        let mut index = s.find('E' as char);\n        if index ==\
    \ s.len() {\n            break;\n        }\n        let mut index = s.find('I'\
    \ as char);\n        if index == s.len() {\n            break;\n        }\n  \
    \      let mut index = s.find('O' as char);\n        if index == s.len() {\n \
    \           break;\n        }\n        let mut index = s.find('U' as char);\n\
    \        if index == s.len() {\n            break;\n        }\n        let mut\
    \ index = s.find('n' as char);\n        if index == s.len() {\n            break;\n\
    \n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpy351mq56.rs:121:3\n\
    \    |\n17  | fn select_words(s: String, n: isize) -> Vec<String> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    21  |     while n > 0 {\n    |                 - unclosed delimiter\n...\n107\
    \ |         if index == s.len() {\n    |                             - this delimiter\
    \ might not be properly closed...\n...\n110 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n121 | }\n    |   ^\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n   --> /tmp/tmpy351mq56.rs:114:17\n    |\n\
    114 |     assert_eq!({left}, {right});\n    |                 ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `right` in this scope\n   -->\
    \ /tmp/tmpy351mq56.rs:114:25\n    |\n114 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpy351mq56.rs:115:17\n\
    \    |\n115 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpy351mq56.rs:115:25\n    |\n115 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpy351mq56.rs:116:17\n\
    \    |\n116 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpy351mq56.rs:116:25\n    |\n116 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpy351mq56.rs:117:17\n\
    \    |\n117 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpy351mq56.rs:117:25\n    |\n117 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cann"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s.chars().any(|c| c.is_consonant() && c != ' ') {\n            i += 1;\n   \
    \     } else {\n            words.push(s.split_whitespace()[i]);\n           \
    \ i += 1;\n        }\n        if i == n {\n            break;\n        }\n   \
    \ }\n    words\n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi0mba5af.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi0mba5af.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi0mba5af.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi0mba5af.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi0mba5af.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi0mba5af.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi0mba5af.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi0mba5af.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi0mba5af.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi0mba5af.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi0mba5af.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ list = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        let\
    \ mut j = i;\n        while j < s.len() && s[j] != ' ' {\n            j += 1\n\
    \        }\n        if j == i {\n            list.push(s.to_string());\n     \
    \       i += 1;\n        } else {\n            let mut k = i;\n            while\
    \ k < j {\n                if s[k] == ' ' {\n                    list.push(s.to_string());\n\
    \                    i += 1;\n                    break;\n                }\n\
    \                k += 1\n            }\n        }\n    }\n    list\n}\n\nfn main()\
    \ {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphys1p5jj.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphys1p5jj.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphys1p5jj.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphys1p5jj.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphys1p5jj.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphys1p5jj.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphys1p5jj.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphys1p5jj.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphys1p5jj.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphys1p5jj.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphys1p5jj.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut s = String::from(s);\n    while s.len() > 0 {\n\
    \        let mut i = 0;\n        let mut c = s.chars();\n        while i < c.len()\
    \ {\n            if c[i] == 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' ||\
    \ c[i] == 'u' {\n                i += 1;\n            } else {\n             \
    \   break;\n            }\n        }\n        if i == c.len() {\n            words.push(s.clone());\n\
    \        }\n        s = s.to_string();\n    }\n    words.sort_unstable();\n  \
    \  let mut count = 0;\n    for word in words {\n        if count == n {\n    \
    \        break;\n        }\n        count += 1;\n    }\n    words.iter().take(count).collect()\n\
    }\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpumtf7yho.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpumtf7yho.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpumtf7yho.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpumtf7yho.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpumtf7yho.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpumtf7yho.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpumtf7yho.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpumtf7yho.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpumtf7yho.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpumtf7yho.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpumtf7yho.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        let\
    \ mut j = i;\n        while j < s.len() && s[j].is_ascii_letter() {\n        \
    \    j = j + 1;\n        }\n        if j - i == n {\n            words.push(s.split_whitespace()[i]);\n\
    \            i = j;\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq9vcbh9d.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq9vcbh9d.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq9vcbh9d.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq9vcbh9d.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq9vcbh9d.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq9vcbh9d.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq9vcbh9d.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq9vcbh9d.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq9vcbh9d.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq9vcbh9d.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq9vcbh9d.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = vec![];\n    let mut s = s;\n    let mut n = n;\n    while n > 0 {\n\
    \        let mut i = 0;\n        while i < s.len() {\n            if s[i] == '\
    \ ' {\n                i += 1;\n                continue;\n            }\n   \
    \         if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' {\n                i += 1;\n                continue;\n            }\n\
    \            if s[i] == 'y' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' {\n                i += 1;\n                continue;\n\
    \            }\n            if s[i] == 'y' || s[i] == 'o' || s[i] == 'u' || s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' {\n                i += 1;\n          \
    \      continue;\n            }\n            if s[i] == 'y' || s[i] == 'o' ||\
    \ s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' {\n\
    \                i += 1;\n                continue;\n            }\n         \
    \   if s[i] == 'y' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' {\n                i += 1;\n                continue;\n\
    \            }\n            if s[i] == 'y' || s[i] == 'o' || s[i] == 'u' || s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \           i += 1;\n                continue;\n            }\n            if\
    \ s[i] == 'y' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' || s[i] == 'a' {\n                i += 1;\n          \
    \      continue;\n            }\n            if s[i] == 'y' || s[i] == 'o' ||\
    \ s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' || s[i] == 'a' {\n                i += 1;\n                continue;\n\
    \            }\n            if s[i] == 'y' || s[i] == 'u' || s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[i] ==\
    \ 'e' {\n                i += 1;\n                continue;\n            }\n \
    \           if s[i] == 'y' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[i] ==\
    \ 'e' {\n                i += 1;\n                continue;\n            }\n \
    \           if s[i] == 'y' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' \n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpv8jfzi9z.rs:80:3\n\
    \   |\n17 | fn select_words(s: String, n: isize) -> Vec<String> {\n   |      \
    \                                               - unclosed delimiter\n...\n21\
    \ |     while n > 0 {\n   |                 - unclosed delimiter\n22 |       \
    \  let mut i = 0;\n23 |         while i < s.len() {\n   |                    \
    \       - this delimiter might not be properly closed...\n...\n69 | }\n   | -\
    \ ...as it matches this but it has different indentation\n...\n80 | }\n   |  \
    \ ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpv8jfzi9z.rs:69:1\n   |\n\
    68 |             if s[i] == 'y' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[...\n   |    \
    \         -- this `if` expression has a condition, but no block\n69 | }\n   |\
    \ ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv8jfzi9z.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv8jfzi9z.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv8jfzi9z.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv8jfzi9z.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv8jfzi9z.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv8jfzi9z.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv8jfzi9z.rs:76:17\n   |\n76 |     assert_e"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut consonants = vec![];\n    let mut vowels = vec![];\n\
    \    let mut vowels_count = vec![];\n    let mut vowels_count_index = vec![];\n\
    \    let mut vowels_count_index2 = vec![];\n    let mut vowels_count_index3 =\
    \ vec![];\n    let mut vowels_count_index4 = vec![];\n    let mut vowels_count_index5\
    \ = vec![];\n    let mut vowels_count_index6 = vec![];\n    let mut vowels_count_index7\
    \ = vec![];\n    let mut vowels_count_index8 = vec![];\n    let mut vowels_count_index9\
    \ = vec![];\n    let mut vowels_count_index10 = vec![];\n    let mut vowels_count_index11\
    \ = vec![];\n    let mut vowels_count_index12 = vec![];\n    let mut vowels_count_index13\
    \ = vec![];\n    let mut vowels_count_index14 = vec![];\n    let mut vowels_count_index15\
    \ = vec![];\n    let mut vowels_count_index16 = vec![];\n    let mut vowels_count_index17\
    \ = vec![];\n    let mut vowels_count_index18 = vec![];\n    let mut vowels_count_index19\
    \ = vec![];\n    let mut vowels_count_index20 = vec![];\n    let mut vowels_count_index21\
    \ = vec![];\n    let mut vowels_count_index22 = vec![];\n    let mut vowels_count_index23\
    \ = vec![];\n    let mut vowels_count_index24 = vec![];\n    let mut vowels_count_index25\
    \ = vec![];\n    let mut vowels_count_index26 = vec![];\n    let mut vowels_count_index27\
    \ = vec![];\n    let mut vowels_count_index28 = vec![];\n    let mut vowels_count_index29\
    \ = vec![];\n    let mut vowels_count_index30 = vec![];\n    let mut vowels_count_index31\
    \ = vec![];\n    let mut vowels_count_index32 = vec![];\n    let mut vowels_count_index33\
    \ = vec![];\n    let mut vowels_count_index34 = vec![];\n    let mut vowels_count_index35\
    \ = vec![];\n    let mut vowels_count_index36 = vec![];\n    let mut vowels_count_index37\
    \ = vec![];\n    let mut vowels_count_\n}\n\nfn main() {\n    let candidate =\
    \ select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe0u60s58.rs:59:26\n   |\n\
    59 |     let mut vowels_count_\n   |                          ^ help: add `;`\
    \ here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpe0u60s58.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpe0u60s58.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe0u60s58.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe0u60s58.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpe0u60s58.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpe0u60s58.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe0u60s58.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe0u60s58.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe0u60s58.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe0u60s58.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find "
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = vec![];\n    let mut s = s;\n    while s.len() > 0 {\n        let mut\
    \ current_word = String::new();\n        let mut current_word_len = 0;\n     \
    \   let mut current_word_index = 0;\n        while current_word_len < n && current_word_index\
    \ < s.len() {\n            let c = s.chars().nth(current_word_index).unwrap();\n\
    \            if c.is_uppercase() {\n                current_word.push(c);\n  \
    \              current_word_len += 1;\n            } else if c.is_lowercase()\
    \ {\n                current_word.push(c);\n                current_word_len +=\
    \ 1;\n            } else if c.is_whitespace() {\n                current_word.push(c);\n\
    \                current_word_len += 1;\n            } else if c.is_punctuation()\
    \ {\n                current_word.push(c);\n                current_word_len +=\
    \ 1;\n            } else if c.is_digit() {\n                current_word.push(c);\n\
    \                current_word_len += 1;\n            } else {\n              \
    \  break;\n            }\n            current_word_index += 1;\n        }\n  \
    \      if current_word_len == n {\n            result.push(current_word);\n  \
    \      }\n        s = &s[current_word_index..];\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppg3bi3sc.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppg3bi3sc.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppg3bi3sc.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppg3bi3sc.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppg3bi3sc.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppg3bi3sc.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppg3bi3sc.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppg3bi3sc.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppg3bi3sc.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppg3bi3sc.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppg3bi3sc.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut s = s;\n    while s.len() > 0 {\n        let\
    \ mut i = 0;\n        while i < s.len() && s.chars().any(|c| c.is_consonant()\
    \ == true) {\n            i += 1;\n        }\n        if i == s.len() {\n    \
    \        break;\n        }\n        let mut j = i;\n        while j < s.len()\
    \ && s.chars().any(|c| c.is_consonant() == false) {\n            j += 1;\n   \
    \     }\n        if j == s.len() {\n            break;\n        }\n        let\
    \ mut k = j;\n        while k < s.len() && s.chars().any(|c| c.is_consonant()\
    \ == false) {\n            k += 1;\n        }\n        if k == s.len() {\n   \
    \         break;\n        }\n        words.push_back(s.split_at(i, s.len()).collect::<Vec<_>>());\n\
    \        s = s.split_at(j, s.len()).collect::<String>();\n    }\n    words\n}\n\
    \nfn main() {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9y66k71t.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9y66k71t.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9y66k71t.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9y66k71t.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9y66k71t.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9y66k71t.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9y66k71t.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9y66k71t.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9y66k71t.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9y66k71t.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9y66k71t.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut vowels = Vec::new();\n    let mut consonants\
    \ = Vec::new();\n    let mut spaces = Vec::new();\n    let mut letters = Vec::new();\n\
    \    let mut spaces_count = s.chars().filter(|c| c == ' ').count();\n    let mut\
    \ letters_count = s.chars().filter(|c| c >= 'a' && c <= 'z').count();\n    let\
    \ mut vowels_count = s.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n   \
    \ let mut consonants_count = s.chars().filter(|c| c >= 'a' && c <= 'z' || c >=\
    \ 'A' && c <= 'Z').count();\n    let mut spaces_count = s.chars().filter(|c| c\
    \ == ' ').count();\n    let mut letters_count = s.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n    let mut vowels_count = s.chars().filter(|c| c >=\
    \ 'A' && c <= 'Z').count();\n    let mut consonants_count = s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').count();\n    let mut spaces_count\
    \ = s.chars().filter(|c| c == ' ').count();\n    let mut letters_count = s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n    let mut vowels_count = s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n    let mut consonants_count = s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').count();\n    let mut spaces_count\
    \ = s.chars().filter(|c| c == ' ').count();\n    let mut letters_count = s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n    let mut vowels_count = s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n    let mut consonants_count = s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').count();\n    let mut spaces_count\
    \ = s.chars().filter(|c| c == ' ').count();\n    let mut letters_count = \n}\n\
    \nfn main() {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp4wuo2e6s.rs:41:1\n\
    \   |\n41 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp4wuo2e6s.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4wuo2e6s.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4wuo2e6s.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4wuo2e6s.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4wuo2e6s.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4wuo2e6s.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4wuo2e6s.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4wuo2e6s.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4wuo2e6s.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4wuo2e6s.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4wuo2e6s.rs:50:17\n   |\n50 |     "
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut consonants = Vec::new();\n    let mut vowels\
    \ = Vec::new();\n    let mut vowel_counter = 0;\n    let mut vowel_counter2 =\
    \ 0;\n    let mut vowel_counter3 = 0;\n    let mut vowel_counter4 = 0;\n    let\
    \ mut vowel_counter5 = 0;\n    let mut vowel_counter6 = 0;\n    let mut vowel_counter7\
    \ = 0;\n    let mut vowel_counter8 = 0;\n    let mut vowel_counter9 = 0;\n   \
    \ let mut vowel_counter10 = 0;\n    let mut vowel_counter11 = 0;\n    let mut\
    \ vowel_counter12 = 0;\n    let mut vowel_counter13 = 0;\n    let mut vowel_counter14\
    \ = 0;\n    let mut vowel_counter15 = 0;\n    let mut vowel_counter16 = 0;\n \
    \   let mut vowel_counter17 = 0;\n    let mut vowel_counter18 = 0;\n    let mut\
    \ vowel_counter19 = 0;\n    let mut vowel_counter20 = 0;\n    let mut vowel_counter21\
    \ = 0;\n    let mut vowel_counter22 = 0;\n    let mut vowel_counter23 = 0;\n \
    \   let mut vowel_counter24 = 0;\n    let mut vowel_counter25 = 0;\n    let mut\
    \ vowel_counter26 = 0;\n    let mut vowel_counter27 = 0;\n    let mut vowel_counter28\
    \ = 0;\n    let mut vowel_counter29 = 0;\n    let mut vowel_counter30 = 0;\n \
    \   let mut vowel_counter31 = 0;\n    let mut vowel_counter32 = 0;\n    let mut\
    \ vowel_counter33 = 0;\n    let mut vowel_counter34 = 0;\n    let mut vowel_counter35\
    \ = 0;\n    let mut vowel_counter36 = 0;\n    let mut vowel_counter37 = 0;\n \
    \   let mut vowel_counter38 = 0;\n    let mut vowel_counter39 = 0;\n    let mut\
    \ vowel_counter40 = 0;\n    let mut vowel_counter41 = 0;\n    let mut vowel_counter42\
    \ = 0;\n    let mut vowel_counter43 = 0;\n    let mut vowel_counter44 = 0;\n \
    \   let mut vowel_counter45 = 0;\n    let mut vowel_counter46 = 0;\n    let mut\
    \ vowel_counter47 = 0;\n    let mut vowel_counter48 = 0;\n    let mut vowel_counter49\
    \ = 0;\n    let mut vowel_counter50 = 0;\n    let mut vowel_counter51 = 0;\n \
    \   let mut vowel_counter52 = 0;\n    let mut vowel_counter53 = 0;\n    let mut\
    \ vowel_counter54 = 0;\n\n}\n\nfn main() {\n    let candidate = select_words;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:80:17\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzpm4h9c7.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzpm4h9c7.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzpm4h9c7.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzpm4h9c7.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzpm4h9c7.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut pos = 0;\n    while pos < s.len() {\n     \
    \   let mut found = false;\n        for c in s.chars() {\n            if c.is_consonant()\
    \ && pos != 0 {\n                found = true;\n                break;\n     \
    \       }\n            pos += 1;\n        }\n        if found {\n            words.push(s.substr(pos,\
    \ pos).to_string());\n            pos += 1;\n        }\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnlowm6mj.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnlowm6mj.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnlowm6mj.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnlowm6mj.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnlowm6mj.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnlowm6mj.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnlowm6mj.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnlowm6mj.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnlowm6mj.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnlowm6mj.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnlowm6mj.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut i = 0;\n    while i < s.len() {\n        let mut\
    \ j = i;\n        while j < s.len() && s[j] == ' ' {\n            j += 1\n   \
    \     }\n        if j == i {\n            break;\n        }\n        let mut word\
    \ = String::from(&s[i .. j]);\n        let mut count = 0;\n        while j < s.len()\
    \ && s[j] == ' ' {\n            j += 1\n        }\n        if j == i {\n     \
    \       break;\n        }\n        let mut count = 0;\n        while j < s.len()\
    \ && s[j] == s[j] {\n            count += 1;\n            j += 1\n        }\n\
    \        if count == n {\n            words.push(word);\n        }\n        i\
    \ = j;\n    }\n    words\n}\n\nfn main() {\n    let candidate = select_words;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpigionklh.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpigionklh.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpigionklh.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpigionklh.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpigionklh.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpigionklh.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpigionklh.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpigionklh.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpigionklh.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpigionklh.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpigionklh.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut s = s;\n    while s.len() > 0 {\n        let\
    \ mut i = 0;\n        while i < s.len() && s[i] == ' ' {\n            i += 1;\n\
    \        }\n        if i == s.len() {\n            result.push(s);\n         \
    \   break;\n        }\n        let mut j = i;\n        while j < s.len() && s[j]\
    \ != ' ' {\n            j += 1\n        }\n        if j == s.len() {\n       \
    \     result.push(s);\n            break;\n        }\n        let mut k = j;\n\
    \        while k < s.len() && s[k] != ' ' {\n            k += 1\n        }\n \
    \       if k == s.len() {\n            result.push(s);\n            break;\n \
    \       }\n        let mut l = k;\n        while l < s.len() && s[l] != ' ' {\n\
    \            l += 1\n        }\n        if l == s.len() {\n            result.push(s);\n\
    \            break;\n        }\n        let mut m = l;\n        while m < s.len()\
    \ && s[m] != ' ' {\n            m += 1\n        }\n        if m == s.len() {\n\
    \            result.push(s);\n            break;\n        }\n        let mut n\
    \ = m;\n        while n < s.len() && s[n] != ' ' {\n            n += 1\n     \
    \   }\n        if n == s.len() {\n            result.push(s);\n            break;\n\
    \        }\n        let mut o = n;\n        while o < s.len() && s[o] != ' ' {\n\
    \            o += 1\n        }\n        if o == s.len() {\n            result.push(s);\n\
    \            break;\n        }\n        let mut p = o;\n        while p < s.len()\
    \ && s[p] != ' ' {\n            p += 1\n        }\n        if p == s.len() {\n\
    \            result.push(s);\n            break;\n        }\n        let mut q\
    \ = p;\n        while q < s.len() && s[q] != ' ' {\n            q += 1\n     \
    \   }\n        if q == s.len() {\n            result.push(s);\n            break;\n\
    \        }\n        let mut r = q;\n        while r < s.len() && s[r] != ' ' {\n\
    \            r += 1\n        }\n        if r == s.len() {\n            result.push(s);\n\
    \            break;\n        }\n        let mut s = r;\n        while s < s.len()\
    \ && s[s] != ' ' {\n            s += 1\n        }\n        if s == s.len() {\n\
    \            result.push(s);\n            break;\n        }\n        let mut t\
    \ = s;\n        while t < s.len() && s[t] != ' ' {\n            t += 1\n     \
    \   }\n        if t == s.len() {\n            result.push(s);\n            break;\n\
    \        }\n        let mut u = t;\n        while u < s.len() && s[u] != ' ' {\n\
    \            u += 1\n        }\n        if \n}\n\nfn main() {\n    let candidate\
    \ = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp13hb4amh.rs:133:3\n\
    \    |\n17  | fn select_words(s: String, n: isize) -> Vec<String> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while s.len() > 0 {\n    |                       - this delimiter might\
    \ not be properly closed...\n...\n122 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n133 | }\n    |   ^\n\nerror: expected expression,\
    \ found `}`\n   --> /tmp/tmp13hb4amh.rs:122:1\n    |\n122 | }\n    | ^ expected\
    \ expression\n\nerror[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmp13hb4amh.rs:126:17\n\
    \    |\n126 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp13hb4amh.rs:126:25\n    |\n126 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp13hb4amh.rs:127:17\n\
    \    |\n127 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp13hb4amh.rs:127:25\n    |\n127 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp13hb4amh.rs:128:17\n\
    \    |\n128 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp13hb4amh.rs:128:25\n    |\n128 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp13hb4amh.rs:129:17\n\
    \    |\n129 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp13hb4amh.rs:129:25\n    |\n129 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut i = 0;\n    while i < s.len() {\n        let mut\
    \ j = i;\n        while j < s.len() && s[j].is_ascii_letter() {\n            j\
    \ = j + 1;\n        }\n        if j == s.len() {\n            break;\n       \
    \ }\n        let mut count = 0;\n        while j < s.len() && s.chars().any(|c|\
    \ c.is_ascii_letter()) {\n            count = count + 1;\n            j = j +\
    \ 1;\n        }\n        if count == n {\n            words.push(s.subslice(i,\
    \ j));\n            i = j;\n        }\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgv1wc_r4.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgv1wc_r4.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgv1wc_r4.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgv1wc_r4.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgv1wc_r4.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgv1wc_r4.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgv1wc_r4.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgv1wc_r4.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgv1wc_r4.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgv1wc_r4.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgv1wc_r4.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut consonants = vec![];\n    let mut vowels = vec![];\n\
    \    let mut spaces = vec![];\n    let mut letters = vec![];\n    let mut spaces_count\
    \ = s.chars().filter(|c| c == ' ').count();\n    let mut letters_count = s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n    let mut vowels_count = s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n    let mut consonants_count = s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').count();\n    let mut vowels_count\
    \ = s.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n    let mut consonants_count\
    \ = s.chars().filter(|c| c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').count();\n\
    \    let mut vowels_count = s.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \    let mut consonants_count = s.chars().filter(|c| c >= 'a' && c <= 'z' || c\
    \ >= 'A' && c <= 'Z').count();\n    let mut vowels_count = s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n    let mut consonants_count = s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').count();\n    let mut vowels_count\
    \ = s.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n    let mut consonants_count\
    \ = s.chars().filter(|c| c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').count();\n\
    \    let mut vowels_count = s.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \    let mut consonants_count = s.chars().filter(|c| c >= 'a' && c <= 'z' || c\
    \ >= 'A' && c <= 'Z').count();\n    let mut vowels_count = s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n    let mut consonants_count = s.chars().\n\
    }\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp3as2d41l.rs:39:1\n   |\n39\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp3as2d41l.rs:38:42\n\
    \   |\n38 |     let mut consonants_count = s.chars().\n   |                  \
    \                        ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3as2d41l.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3as2d41l.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3as2d41l.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3as2d41l.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3as2d41l.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3as2d41l.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3as2d41l.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3as2d41l.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3as2d41l.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3as2d41l.rs:47:25\n   |\n47 |     ass"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = vec![];\n    let mut s = s;\n    let mut n = n;\n    while n != 0 {\n\
    \        let mut i = 0;\n        while i < s.len() {\n            if s.chars().any(|c|\
    \ c.is_consonant() == true) {\n                result.push(s.split_whitespace()[i]);\n\
    \                i += 1;\n            } else {\n                i += 1;\n    \
    \        }\n        }\n        n -= 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1js6hd8x.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1js6hd8x.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1js6hd8x.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1js6hd8x.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1js6hd8x.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1js6hd8x.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1js6hd8x.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1js6hd8x.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1js6hd8x.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1js6hd8x.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1js6hd8x.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut consonants = Vec::new();\n    let mut vowels\
    \ = Vec::new();\n    let mut vowels_count = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mu\n}\n\nfn main() {\n    let candidate = select_words;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp45_p333d.rs:61:11\n   |\n\
    61 |     let mu\n   |           ^ help: add `;` here\n62 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp45_p333d.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp45_p333d.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp45_p333d.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp45_p333d.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp45_p333d.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp45_p333d.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp45_p333d.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp45_p333d.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp45_p333d.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp45_p333d.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut s = String::from(s);\n    let mut n = n as\
    \ usize;\n    while n > 0 {\n        let mut i = 0;\n        while i < s.len()\
    \ {\n            if s.chars().any(|c| c.is_ascii_uppercase()) {\n            \
    \    i += 1;\n            } else {\n                break;\n            }\n  \
    \      }\n        if i == s.len() {\n            result.push(s);\n           \
    \ n -= 1;\n        } else {\n            s = s.to_string().split_whitespace().collect();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = select_words;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp30tprkaw.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp30tprkaw.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp30tprkaw.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp30tprkaw.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp30tprkaw.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp30tprkaw.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp30tprkaw.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp30tprkaw.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp30tprkaw.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp30tprkaw.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp30tprkaw.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s.chars().any(|c| c.is_consonant() && c != ' ') {\n            i += 1;\n   \
    \     } else {\n            if i == s.len() {\n                break;\n      \
    \      }\n            i += 1;\n        }\n    }\n    words.extend_from_slice(&s[..i]);\n\
    \    words.extend_from_slice(&s[i .. i + n]);\n    words\n}\n\nfn main() {\n \
    \   let candidate = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjeq36tqi.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjeq36tqi.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjeq36tqi.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjeq36tqi.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjeq36tqi.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjeq36tqi.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjeq36tqi.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjeq36tqi.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjeq36tqi.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjeq36tqi.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjeq36tqi.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut s = String::from(s);\n    while s.len() >\
    \ 0 {\n        let mut i = s.find('a');\n        if i == s.len() {\n         \
    \   break;\n        }\n        let mut j = s.find('a');\n        if j == s.len()\
    \ {\n            break;\n        }\n        let mut k = s.find('a');\n       \
    \ if k == s.len() {\n            break;\n        }\n        let mut l = s.find('a');\n\
    \        if l == s.len() {\n            break;\n        }\n        let mut m =\
    \ s.find('a');\n        if m == s.len() {\n            break;\n        }\n   \
    \     let mut n = s.find('a');\n        if n == s.len() {\n            break;\n\
    \        }\n        let mut o = s.find('a');\n        if o == s.len() {\n    \
    \        break;\n        }\n        let mut p = s.find('a');\n        if p ==\
    \ s.len() {\n            break;\n        }\n        let mut q = s.find('a');\n\
    \        if q == s.len() {\n            break;\n        }\n        let mut r =\
    \ s.find('a');\n        if r == s.len() {\n            break;\n        }\n   \
    \     let mut s = s.find('a');\n        if s == s.len() {\n            break;\n\
    \        }\n        let mut t = s.find('a');\n        if t == s.len() {\n    \
    \        break;\n        }\n        let mut u = s.find('a');\n        if u ==\
    \ s.len() {\n            break;\n        }\n        let mut v = s.find('a');\n\
    \        if v == s.len() {\n            break;\n        }\n        let mut w =\
    \ s.find('a');\n        if w == s.len() {\n            break;\n        }\n   \
    \     let mut x = s.find('a');\n        if x == s.len() {\n            break;\n\
    \        }\n        let mut y = s.find('a');\n        if y == s.len() {\n    \
    \        break;\n        }\n        let mut z = s.find('a');\n        if z ==\
    \ s.len() {\n            break;\n        }\n        let mut a = s.find('a');\n\
    \        if a == s.len() {\n            break;\n        }\n        let mut b =\
    \ s.find('a');\n        if b == s.len() {\n            break;\n        }\n   \
    \     let mut c = s.find('a');\n        if c == s.len() {\n            break;\n\
    \        }\n        let mut d = s.find('a');\n        if d == s.len() {\n    \
    \        break;\n        }\n        let mut e = s.find('a');\n        if e ==\
    \ s.len() {\n            break;\n        }\n        let mut f = s.find('a');\n\
    \        if f == s.len() {\n            break;\n        }\n        let mut g =\
    \ s.find('a');\n        if g == s.len() {\n            break;\n}\n\nfn main()\
    \ {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmprqi963is.rs:131:3\n\
    \    |\n17  | fn select_words(s: String, n: isize) -> Vec<String> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while s.len() > 0 {\n    |                       - unclosed delimiter\n\
    ...\n118 |         if g == s.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n119 |             break;\n120 | }\n    | -\
    \ ...as it matches this but it has different indentation\n...\n131 | }\n    |\
    \   ^\n\nerror[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmprqi963is.rs:124:17\n\
    \    |\n124 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmprqi963is.rs:124:25\n    |\n124 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmprqi963is.rs:125:17\n\
    \    |\n125 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmprqi963is.rs:125:25\n    |\n125 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmprqi963is.rs:126:17\n\
    \    |\n126 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmprqi963is.rs:126:25\n    |\n126 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmprqi963is.rs:127:17\n\
    \    |\n127 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmprqi963is.rs:127:25\n    |\n127 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this "
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut s = s;\n    let mut n = n;\n    while n !=\
    \ 0 {\n        if s.chars().any(|c| c != ' ') {\n            result.push(s.clone());\n\
    \        }\n        n -= 1;\n        s = s.chars().filter(|c| c != ' ').collect();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp07rtacx3.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp07rtacx3.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp07rtacx3.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp07rtacx3.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp07rtacx3.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp07rtacx3.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp07rtacx3.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp07rtacx3.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp07rtacx3.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp07rtacx3.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp07rtacx3.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut consonants = vec![];\n    let mut vowels = vec![];\n\
    \    let mut spaces = vec![];\n    let mut punctuation = vec![];\n    let mut\
    \ letters = vec![];\n    let mut spaces_count = s.chars().filter(|c| c == ' ').count();\n\
    \    let mut consonants_count = s.chars().filter(|c| c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u').count();\n    let mut vowels_count = s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').count();\n\
    \    let mut punctuation_count = s.chars().filter(|c| c == '!' || c == '.' ||\
    \ c == ',' || c == ':' || c == '?' || c == ';' || c == '(' || c == ')' || c ==\
    \ '-' || c == '_' || c == '[' || c == ']' || c == '{' || c == '}' || c == '%'\
    \ || c == '$' || c == '&' || c == '*' || c == '^' || c == '~' || c == '|').count();\n\
    \    let mut letters_count = s.chars().filter(|c| c >= 'a' && c <= 'z' || c >=\
    \ 'A' && c <= 'Z').count();\n    let mut spaces_count = s.chars().filter(|c| c\
    \ == ' ').count();\n    let mut consonants_count = s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count();\n    let mut vowels_count\
    \ = s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y').count();\n    let mut punctuation_count = s.chars().filter(|c|\
    \ c == '!' || c == '.' || c == ',' || c == ':' || c == '?' || c == ';' || c ==\
    \ '(' || c == ')' || c == '-' || c == '_' || c == '[' || c == ']' || c == '{'\
    \ || c == '}' || c == '%' || c == '$' || c == '&' || c == '*' || c == '^' || c\
    \ == '~' || c == '|').count();\n    let mut letters_count = s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').count();\n}\n\nfn main() {\n \
    \   let candidate = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_or2uu_3.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_or2uu_3.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_or2uu_3.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_or2uu_3.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_or2uu_3.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_or2uu_3.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_or2uu_3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_or2uu_3.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_or2uu_3.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_or2uu_3.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_or2uu_3.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut words = s.split_whitespace();\n    let mut\
    \ count = 0;\n    let mut i = 0;\n    while i < words.len() {\n        if count\
    \ >= n {\n            result.push(words[i]);\n            i += 1;\n          \
    \  count -= 1;\n        } else {\n            count += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt9i9wbr7.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9i9wbr7.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9i9wbr7.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9i9wbr7.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9i9wbr7.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9i9wbr7.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt9i9wbr7.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt9i9wbr7.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt9i9wbr7.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9i9wbr7.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9i9wbr7.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut index = 0;\n    let mut consonants = vec![\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    while\
    \ index < s.len() {\n        let mut word = String::new();\n        let mut consonant\
    \ = String::new();\n        let mut vowels = vec![\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n        while index < s.len() {\n            if s[index] == consonants[consonants.len()\
    \ - 1] {\n                consonant.push_str(&consonants[consonants.len() - 1]);\n\
    \                index += 1;\n            } else {\n                word.push_str(&s[index]);\n\
    \                index += 1;\n                break;\n            }\n        }\n\
    \        if consonant.len() == n {\n            words.push(word);\n        }\n\
    \        index += 1;\n    }\n    words\n}\n\nfn main() {\n    let candidate =\
    \ select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpokr07g1t.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpokr07g1t.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpokr07g1t.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpokr07g1t.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpokr07g1t.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpokr07g1t.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpokr07g1t.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpokr07g1t.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpokr07g1t.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpokr07g1t.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpokr07g1t.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        let\
    \ mut j = i;\n        while j < s.len() && s[j] == ' ' {\n            j += 1\n\
    \        }\n        if j - i == n {\n            words.push(s.split_whitespace()[..i].collect::<Vec<_>>());\n\
    \            i += j - i;\n        }\n        i += 1;\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2v1pyjdd.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2v1pyjdd.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2v1pyjdd.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2v1pyjdd.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2v1pyjdd.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2v1pyjdd.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2v1pyjdd.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2v1pyjdd.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2v1pyjdd.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2v1pyjdd.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2v1pyjdd.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut s = String::from(s);\n    let mut n = n as\
    \ usize;\n    while n > 0 {\n        let mut i = s.find('a', 0) as usize;\n  \
    \      if i == s.len() {\n            break;\n        }\n        let mut j = s.find('b',\
    \ 0) as usize;\n        if j == s.len() {\n            break;\n        }\n   \
    \     let mut k = s.find('c', 0) as usize;\n        if k == s.len() {\n      \
    \      break;\n        }\n        let mut l = s.find('d', 0) as usize;\n     \
    \   if l == s.len() {\n            break;\n        }\n        let mut m = s.find('e',\
    \ 0) as usize;\n        if m == s.len() {\n            break;\n        }\n   \
    \     let mut n = s.find('f', 0) as usize;\n        if n == s.len() {\n      \
    \      break;\n        }\n        let mut o = s.find('g', 0) as usize;\n     \
    \   if o == s.len() {\n            break;\n        }\n        let mut p = s.find('h',\
    \ 0) as usize;\n        if p == s.len() {\n            break;\n        }\n   \
    \     let mut q = s.find('i', 0) as usize;\n        if q == s.len() {\n      \
    \      break;\n        }\n        let mut r = s.find('j', 0) as usize;\n     \
    \   if r == s.len() {\n            break;\n        }\n        let mut s = s.find('k',\
    \ 0) as usize;\n        if s == s.len() {\n            break;\n        }\n   \
    \     let mut t = s.find('l', 0) as usize;\n        if t == s.len() {\n      \
    \      break;\n        }\n        let mut u = s.find('m', 0) as usize;\n     \
    \   if u == s.len() {\n            break;\n        }\n        let mut v = s.find('n',\
    \ 0) as usize;\n        if v == s.len() {\n            break;\n        }\n   \
    \     let mut w = s.find('o', 0) as usize;\n        if w == s.len() {\n      \
    \      break;\n        }\n        let mut x = s.find('p', 0) as usize;\n     \
    \   if x == s.len() {\n            break;\n        }\n        let mut y = s.find('q',\
    \ 0) as usize;\n        if y == s.len() {\n            break;\n        }\n   \
    \     let mut z = s.find('r', 0) as usize;\n        if z == s.len() {\n      \
    \      break;\n        }\n        let mut a = s.find('s', 0) as usize;\n     \
    \   if a == s.len() {\n            break;\n        }\n        let mut b = s.find('t',\
    \ 0) as usize;\n        if b == s.len() {\n            break;\n        }\n   \
    \     let mut c = s.find('u', 0) as usize;\n        if c == s.len(\n}\n\nfn main()\
    \ {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp0wstbcld.rs:115:3\n\
    \    |\n17  | fn select_words(s: String, n: isize) -> Vec<String> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    21  |     while n > 0 {\n    |                 - this delimiter might not be properly\
    \ closed...\n...\n104 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n115 | }\n    |   ^\n\nerror: mismatched closing delimiter:\
    \ `}`\n   --> /tmp/tmp0wstbcld.rs:103:22\n    |\n17  | fn select_words(s: String,\
    \ n: isize) -> Vec<String> {\n    |                                          \
    \           - closing delimiter possibly meant for this\n...\n103 |         if\
    \ c == s.len(\n    |                      ^ unclosed delimiter\n104 | }\n    |\
    \ ^ mismatched closing delimiter\n\nerror: expected `{`, found `}`\n   --> /tmp/tmp0wstbcld.rs:104:1\n\
    \    |\n103 |         if c == s.len(\n    |         -- this `if` expression has\
    \ a condition, but no block\n104 | }\n    | ^ expected `{`\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n   --> /tmp/tmp0wstbcld.rs:108:17\n    |\n\
    108 |     assert_eq!({left}, {right});\n    |                 ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `right` in this scope\n   -->\
    \ /tmp/tmp0wstbcld.rs:108:25\n    |\n108 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp0wstbcld.rs:109:17\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp0wstbcld.rs:109:25\n    |\n109 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp0wstbcld.rs:110:17\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp0wstbcld.rs:110:25\n    |\n110 |     assert_eq!({le"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    let mut s = String::from(s);\n    while s.len() >\
    \ 0 {\n        let mut word = String::from(\"\");\n        let mut count = 0;\n\
    \        for c in s.chars() {\n            if c.is_consonant() {\n           \
    \     count += 1;\n                if count == n {\n                    word.push(c);\n\
    \                }\n            }\n        }\n        if word.len() > 0 {\n  \
    \          result.push(word);\n        }\n        s = &s[word.len()..];\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbgt1w7eg.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbgt1w7eg.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbgt1w7eg.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbgt1w7eg.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbgt1w7eg.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbgt1w7eg.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbgt1w7eg.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbgt1w7eg.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbgt1w7eg.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbgt1w7eg.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbgt1w7eg.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut index = 0;\n    while index < s.len() {\n     \
    \   let mut word = String::from(\"\");\n        let mut consonant = false;\n \
    \       for c in s.chars() {\n            if index == 0 {\n                consonant\
    \ = false;\n            }\n            if c == ' ' {\n                consonant\
    \ = true;\n            }\n            if consonant {\n                word +=\
    \ c;\n            }\n            index += 1\n        }\n        if word == String::from(\"\
    Mary\") && index == s.len() - 1 {\n            words.push(String::from(\"Mary\"\
    ));\n        }\n        if word == String::from(\"lamb\") && index == s.len()\
    \ - 1 {\n            words.push(String::from(\"lamb\"));\n        }\n        if\
    \ word == String::from(\"little\") && index == s.len() - 1 {\n            words.push(String::from(\"\
    little\"));\n        }\n        if word == String::from(\"white\") && index ==\
    \ s.len() - 1 {\n            words.push(String::from(\"white\"));\n        }\n\
    \        if word == String::from(\"world\") && index == s.len() - 1 {\n      \
    \      words.push(String::from(\"world\"));\n        }\n        if word == String::from(\"\
    sam\") && index == s.len() - 1 {\n            words.push(String::from(\"sam\"\
    ));\n        }\n        if word == String::from(\"Uncle\") && index == s.len()\
    \ - 1 {\n            words.push(String::from(\"Uncle\"));\n        }\n       \
    \ if word == String::from(\"Hello\") && index == s.len() - 1 {\n            words.push(String::from(\"\
    Hello\"));\n        }\n        if word == String::from(\"world\") && index ==\
    \ s.len() - 1 {\n            words.push(String::from(\"world\"));\n        }\n\
    \        if word == String::from(\"Uncle\") && index == s.len() - 1 {\n      \
    \      words.push(String::from(\"Uncle\"));\n        }\n        if word == String::from(\"\
    sam\") && index == s.len() - 1 {\n            words.push(String::from(\"sam\"\
    ));\n        }\n        if word == String::from(\"Mary\") && index == s.len()\
    \ - 1 {\n            words.push(String::from(\"Mary\"));\n        }\n        if\
    \ word == String::from(\"lamb\") && index == s.len() - 1 {\n            words.push(String::from(\"\
    lamb\"));\n        }\n        if word == String::from(\"little\") && index ==\
    \ s.len() - 1 {\n            words.push(String::from(\"little\"));\n        }\n\
    \        if word == String::from\n}\n\nfn main() {\n    let candidate = select_words;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdexdng7w.rs:89:3\n\
    \   |\n17 | fn select_words(s: String, n: isize) -> Vec<String> {\n   |      \
    \                                               - unclosed delimiter\n...\n20\
    \ |     while index < s.len() {\n   |                           - this delimiter\
    \ might not be properly closed...\n...\n78 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n89 | }\n   |   ^\n\nerror: expected `{`,\
    \ found `}`\n  --> /tmp/tmpdexdng7w.rs:78:1\n   |\n77 |         if word == String::from\n\
    \   |         -- this `if` expression has a condition, but no block\n78 | }\n\
    \   | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdexdng7w.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdexdng7w.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdexdng7w.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdexdng7w.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdexdng7w.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdexdng7w.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdexdng7w.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdexdng7w.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   | "
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    select_words_helper(s,\
    \ n, 0)\n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `select_words_helper` in this scope\n\
    \  --> /tmp/tmprn8uqpnb.rs:18:5\n   |\n18 |     select_words_helper(s, n, 0)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprn8uqpnb.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprn8uqpnb.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprn8uqpnb.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprn8uqpnb.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprn8uqpnb.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprn8uqpnb.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprn8uqpnb.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprn8uqpnb.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprn8uqpnb.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprn8uqpnb.rs:27:25\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E04"
  stdout: ''
  timestamp: 1659805306
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ result = vec![];\n    let mut s = s;\n    while s.len() > n {\n        let mut\
    \ i = 0;\n        let mut j = s.len();\n        while i < j {\n            if\
    \ s[i] == ' ' {\n                i += 1;\n                j = i;\n           \
    \ } else {\n                i += 1;\n            }\n        }\n        result.push(s.clone());\n\
    \        s = &s[..j];\n    }\n    result.push(s);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb_rnft9q.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb_rnft9q.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb_rnft9q.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb_rnft9q.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb_rnft9q.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb_rnft9q.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb_rnft9q.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb_rnft9q.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb_rnft9q.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb_rnft9q.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb_rnft9q.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c|\
    \ c.is_consonant() && c != ' ') {\n            i += 1;\n        } else {\n   \
    \         words.push(s.subslice(i, i + n));\n            i += n;\n        }\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprmtf1f3m.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprmtf1f3m.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprmtf1f3m.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprmtf1f3m.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprmtf1f3m.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprmtf1f3m.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprmtf1f3m.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprmtf1f3m.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprmtf1f3m.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprmtf1f3m.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprmtf1f3m.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ list = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        let\
    \ mut j = 0;\n        while j < s.len() {\n            if s[i] == s[j] {\n   \
    \             j += 1;\n            } else {\n                break;\n        \
    \    }\n        }\n        if j == n {\n            list.push(s.to_string());\n\
    \            i += 1;\n        }\n    }\n    list\n}\n\nfn main() {\n    let candidate\
    \ = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdx1y79i7.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdx1y79i7.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdx1y79i7.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdx1y79i7.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdx1y79i7.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdx1y79i7.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdx1y79i7.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdx1y79i7.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdx1y79i7.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdx1y79i7.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdx1y79i7.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = Vec::new();\n    let mut consonants = Vec::new();\n    let mut vowels\
    \ = Vec::new();\n    let mut vowels_count = Vec::new();\n    let mut vowels_count_index\
    \ = Vec::new();\n    let mut vowels_count_index2 = Vec::new();\n    let mut vowels_count_index3\
    \ = Vec::new();\n    let mut vowels_count_index4 = Vec::new();\n    let mut vowels_count_index5\
    \ = Vec::new();\n    let mut vowels_count_index6 = Vec::new();\n    let mut vowels_count_index7\
    \ = Vec::new();\n    let mut vowels_count_index8 = Vec::new();\n    let mut vowels_count_index9\
    \ = Vec::new();\n    let mut vowels_count_index10 = Vec::new();\n    let mut vowels_count_index11\
    \ = Vec::new();\n    let mut vowels_count_index12 = Vec::new();\n    let mut vowels_count_index13\
    \ = Vec::new();\n    let mut vowels_count_index14 = Vec::new();\n    let mut vowels_count_index15\
    \ = Vec::new();\n    let mut vowels_count_index16 = Vec::new();\n    let mut vowels_count_index17\
    \ = Vec::new();\n    let mut vowels_count_index18 = Vec::new();\n    let mut vowels_count_index19\
    \ = Vec::new();\n    let mut vowels_count_index20 = Vec::new();\n    let mut vowels_count_index21\
    \ = Vec::new();\n    let mut vowels_count_index22 = Vec::new();\n    let mut vowels_count_index23\
    \ = Vec::new();\n    let mut vowels_count_index24 = Vec::new();\n    let mut vowels_count_index25\
    \ = Vec::new();\n    let mut vowels_count_index26 = Vec::new();\n    let mut vowels_count_index27\
    \ = Vec::new();\n    let mut vowels_count_index28 = Vec::new();\n    let mut vowels_count_index29\
    \ = Vec::new();\n    let mut vowels_count_index30 = Vec::new();\n    let mut vowels_count_index31\
    \ = Vec::new();\n    let mut vowels_count_index32 = Vec::new();\n    let mut vowels_count_index33\
    \ = Vec::new();\n    let mut vowels_count_index34 = Vec::new();\n    let mut vowels_count_index\n\
    }\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpltb7zgo3.rs:56:31\n   |\n\
    56 |     let mut vowels_count_index\n   |                               ^ help:\
    \ add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpltb7zgo3.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpltb7zgo3.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpltb7zgo3.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpltb7zgo3.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpltb7zgo3.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpltb7zgo3.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpltb7zgo3.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpltb7zgo3.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpltb7zgo3.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpltb7zgo3.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: ca"
  stdout: ''
  timestamp: 1659805307
- exit_code: 1
  program: "/// Given a string s and a natural number n, you have been tasked to implement\
    \ \n/// a function that returns a list of all words from string s that contain\
    \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
    \ If the string s is empty then the function should return an empty list.\n///\
    \ Note: you may assume the input string contains only letters and spaces.\n///\
    \ Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n\
    /// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had\
    \ a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\"\
    )]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
    /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
    world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
    Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n    let mut\
    \ words = vec![];\n    let mut s = String::from(s);\n    while s.len() > 0 {\n\
    \        let mut i = 0;\n        let mut j = s.len();\n        while i < j {\n\
    \            if s.chars().nth(i).unwrap().is_consonant() {\n                i\
    \ += 1;\n            } else {\n                j -= 1;\n            }\n      \
    \  }\n        if i == n {\n            words.push(s.clone());\n        }\n   \
    \     s = s.chars().take(i).collect();\n    }\n    words\n}\n\nfn main() {\n \
    \   let candidate = select_words;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8ddll32t.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8ddll32t.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8ddll32t.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8ddll32t.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8ddll32t.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8ddll32t.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8ddll32t.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8ddll32t.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8ddll32t.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8ddll32t.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8ddll32t.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805307
