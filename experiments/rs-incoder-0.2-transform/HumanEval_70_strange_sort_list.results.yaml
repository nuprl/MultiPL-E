language: rs
name: HumanEval_70_strange_sort_list
results:
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx = lst.iter().position(|x| *x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp10qi77js.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp10qi77js.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp10qi77js.rs:21:49\n   |\n21 |         min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n21 |         min_idx = lst.iter().position(|x| *x == *min).unwrap();\n\
    \   |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp10qi77js.rs:22:49\n   |\n22 |         max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n22 |         max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                 +\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx < max_idx\
    \ {\n        result.push(min);\n        min = lst.iter().nth(min_idx).unwrap();\n\
    \        min_idx += 1;\n    }\n    while max_idx > min_idx {\n        result.push(max);\n\
    \        max = lst.iter().nth(max_idx).unwrap();\n        max_idx -= 1;\n    }\n\
    \    result.push(min);\n    result.push(max);\n    result\n}\n\nfn main() {\n\
    \    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4kml6sz.rs:29:5\n   |\n\
    11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n29 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    let mut min_value = sorted_list[0];\n    let mut max_value = sorted_list[0];\n\
    \    for value in sorted_list.iter().rev() {\n        if value < min_value {\n\
    \            min_value = value;\n        }\n        if value > max_value {\n \
    \           max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in sorted_list.iter() {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in sorted_list.iter().rev() {\n        if value < min_value {\n\
    \            min_value = value;\n        }\n        if value > max_value {\n \
    \           max_value = value;\n        }\n    }\n    sorted_list.sort();\n  \
    \  sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0b8ii9jh.rs:16:20\n   |\n\
    16 |         if value < min_value {\n   |                    ^^^^^^^^^\n   | \
    \                   |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&min_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0b8ii9jh.rs:17:25\n   |\n13 |     let mut min_value\
    \ = sorted_list[0];\n   |                         -------------- expected due\
    \ to this value\n...\n17 |             min_value = value;\n   |              \
    \           ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n17 |             min_value = *value;\n   |               \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0b8ii9jh.rs:19:20\n\
    \   |\n19 |         if value > max_value {\n   |                    ^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0b8ii9jh.rs:20:25\n   |\n14 |     let mut max_value\
    \ = sorted_list[0];\n   |                         -------------- expected due\
    \ to this value\n...\n20 |             max_value = value;\n   |              \
    \           ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n20 |             max_value = *value;\n   |               \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0b8ii9jh.rs:26:20\n\
    \   |\n26 |         if value < min_value {\n   |                    ^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&min_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0b8ii9jh.rs:27:25\n   |\n23 |     let mut min_value\
    \ = min_value;\n   |                         --------- expected due to this value\n\
    ...\n27 |             min_value = value;\n   |                         ^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    27 |             min_val"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut min_val = lst.iter().min().unwrap();\n    let mut max_val = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min_val).unwrap();\n    let\
    \ mut max_idx = lst.iter().position(|x| x == max_val).unwrap();\n    let mut min_idx2\
    \ = lst.iter().position(|x| x == min_val).unwrap();\n    let mut max_idx2 = lst.iter().position(|x|\
    \ x == max_val).unwrap();\n    let mut min_idx3 = lst.iter().position(|x| x ==\
    \ min_val).unwrap();\n    let mut max_idx3 = lst.iter().position(|x| x == max_val).unwrap();\n\
    \    let mut min_idx4 = lst.iter().position(|x| x == min_val).unwrap();\n    let\
    \ mut max_idx4 = lst.iter().position(|x| x == max_val).unwrap();\n    let mut\
    \ min_idx5 = lst.iter().position(|x| x == min_val).unwrap();\n    let mut max_idx5\
    \ = lst.iter().position(|x| x == max_val).unwrap();\n    let mut min_idx6 = lst.iter().position(|x|\
    \ x == min_val).unwrap();\n    let mut max_idx6 = lst.iter().position(|x| x ==\
    \ max_val).unwrap();\n    let mut min_idx7 = lst.iter().position(|x| x == min_val).unwrap();\n\
    \    let mut max_idx7 = lst.iter().position(|x| x == max_val).unwrap();\n    let\
    \ mut min_idx8 = lst.iter().position(|x| x == min_val).unwrap();\n    let mut\
    \ max_idx8 = lst.iter().position(|x| x == max_val).unwrap();\n    let mut min_idx9\
    \ = lst.iter().position(|x| x == min_val).unwrap();\n    let mut max_idx9 = lst.iter().position(|x|\
    \ x == max_val).unwrap();\n    let mut min_idx10 = lst.iter().position(|x| x ==\
    \ min_val).unwrap();\n    let mut max_idx10 = lst.iter().position(|x| x == max_val).unwrap();\n\
    \    let mut min_idx11 = lst.iter().position(|x| x == min_val).unwrap();\n   \
    \ let mut max_idx11 = lst.iter().position(|x| x == max_val).unwrap();\n    let\
    \ mut min_idx12 = lst.iter().position(|x| x == \n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmppxtanw40.rs:38:1\n\
    \   |\n38 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmppxtanw40.rs:37:44\n   |\n11 | fn strange_sort_list(lst: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                                     -\
    \ closing delimiter possibly meant for this\n...\n37 |     let mut min_idx12 =\
    \ lst.iter().position(|x| x == \n   |                                        \
    \    ^ unclosed delimiter\n38 | }\n   | ^ mismatched closing delimiter\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx < max_idx\
    \ {\n        let tmp = min;\n        min = max;\n        max = tmp;\n        min_idx\
    \ = lst.iter().position(|x| x == min).unwrap();\n        max_idx = lst.iter().position(|x|\
    \ x == max).unwrap();\n    }\n    lst.sort_unstable();\n    lst\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmn70jt9n.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min_val = lst.iter().min().unwrap();\n    let mut max_val = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|&x| x == min_val).unwrap();\n    let\
    \ mut max_idx = lst.iter().position(|&x| x == max_val).unwrap();\n    while min_idx\
    \ < max_idx {\n        let tmp = min_val;\n        min_val = max_val;\n      \
    \  max_val = tmp;\n        min_idx = lst.iter().position(|&x| x == min_val).unwrap();\n\
    \        max_idx = lst.iter().position(|&x| x == max_val).unwrap();\n    }\n \
    \   lst.sort_unstable();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuoimjtx.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|&x| x == min_val).unwrap();\n\
    \   |                                                     ^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \   let mut min_idx = lst.iter().position(|&x| x == *min_val).unwrap();\n   |\
    \                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppuoimjtx.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|&x|\
    \ x == max_val).unwrap();\n   |                                              \
    \       ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|&x| x == *max_val).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppuoimjtx.rs:21:49\n   |\n21 |         min_idx = lst.iter().position(|&x|\
    \ x == min_val).unwrap();\n   |                                              \
    \   ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n21 |         min_idx = lst.iter().position(|&x| x == *min_val).unwrap();\n\
    \   |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppuoimjtx.rs:22:49\n   |\n22 |         max_idx = lst.iter().position(|&x|\
    \ x == max_val).unwrap();\n   |                                              \
    \   ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n22 |         max_idx = lst.iter().position(|&x| x == *max_val).unwrap();\n\
    \   |                                                 +\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    for i in 1..lst.len() {\n        let mut el = lst[i];\n      \
    \  if el < min_value {\n            el = min_value;\n        }\n        if el\
    \ > max_value {\n            el = max_value;\n        }\n        sorted_list.push(el);\n\
    \    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `lst`\n   --> /tmp/tmpvwy0iq60.rs:23:17\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for el in lst {\n    | \
    \              --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    23  |     for i in 1..lst.len() {\n    |                 ^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for el in &lst\
    \ {\n    |               +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    sorted_list.sort();\n    sorted_list\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3osj0gyl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp9h0_gvbx.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7oqpd5_k.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 | \n117 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n130 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7oqpd5_k.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx\
    \ = min_idx.unwrap();\n    let mut max_idx = max_idx.unwrap();\n    let mut i\
    \ = min_idx;\n    while i < max_idx {\n        let mut j = i;\n        while j\
    \ < max_idx && lst[j] == max {\n            j += 1\n        }\n        lst[i]\
    \ = lst[j];\n        i += 1;\n    }\n    lst\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvj_2996.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbvj_2996.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0599]: no\
    \ method named `unwrap` found for type `usize` in the current scope\n  --> /tmp/tmpbvj_2996.rs:17:31\n\
    \   |\n17 |     let mut min_idx = min_idx.unwrap();\n   |                    \
    \           ^^^^^^ method not found in `usize`\n\nerror[E0599]: no method named\
    \ `unwrap` found for type `usize` in the current scope\n  --> /tmp/tmpbvj_2996.rs:18:31\n\
    \   |\n18 |     let mut max_idx = max_idx.unwrap();\n   |                    \
    \           ^^^^^^ method not found in `usize`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    let mut min_val = lst.iter().min().unwrap();\n    let mut max_val = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|&x| x == min_val).unwrap();\n    let\
    \ mut max_idx = lst.iter().position(|&x| x == max_val).unwrap();\n    while min_idx\
    \ < max_idx {\n        let tmp = min_val;\n        min_val = max_val;\n      \
    \  max_val = tmp;\n        min_idx = lst.iter().position(|&x| x == min_val).unwrap();\n\
    \        max_idx = lst.iter().position(|&x| x == max_val).unwrap();\n    }\n \
    \   lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp61blf29o.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|&x| x == min_val).unwrap();\n\
    \   |                                                     ^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \   let mut min_idx = lst.iter().position(|&x| x == *min_val).unwrap();\n   |\
    \                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp61blf29o.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|&x|\
    \ x == max_val).unwrap();\n   |                                              \
    \       ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|&x| x == *max_val).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp61blf29o.rs:21:49\n   |\n21 |         min_idx = lst.iter().position(|&x|\
    \ x == min_val).unwrap();\n   |                                              \
    \   ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n21 |         min_idx = lst.iter().position(|&x| x == *min_val).unwrap();\n\
    \   |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp61blf29o.rs:22:49\n   |\n22 |         max_idx = lst.iter().position(|&x|\
    \ x == max_val).unwrap();\n   |                                              \
    \   ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n22 |         max_idx = lst.iter().position(|&x| x == *max_val).unwrap();\n\
    \   |                                                 +\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min_val = lst.iter().min().unwrap();\n    let mut max_val = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min_val).unwrap();\n    let\
    \ mut max_idx = lst.iter().position(|x| x == max_val).unwrap();\n    while min_idx\
    \ < max_idx {\n        let tmp = min_val;\n        min_val = max_val;\n      \
    \  max_val = tmp;\n        min_idx = lst.iter().position(|x| x == min_val).unwrap();\n\
    \        max_idx = lst.iter().position(|x| x == max_val).unwrap();\n    }\n  \
    \  lst.sort_unstable();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpo8bffsk4.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7oqpd5_k.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 | \n117 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n130 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7oqpd5_k.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for value\
    \ in lst {\n        if value < min_value {\n            min_value = value;\n \
    \       }\n        if value > max_value {\n            max_value = value;\n  \
    \      }\n    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if \n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpdbrh6qjx.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 |         if \n117 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n130 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n   --> /tmp/tmpdbrh6qjx.rs:117:1\n    |\n117 | }\n  \
    \  | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdbrh6qjx.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx as usize;\n    let mut max_idx = max_idx as usize;\n    let mut min_idx\
    \ = min_idx as usize;\n    let mut max_idx = max_idx as usize;\n    while min_idx\
    \ < max_idx {\n        if lst[min_idx] > lst[max_idx] {\n            lst[min_idx],\
    \ lst[max_idx] = lst[max_idx], lst[min_idx];\n            min_idx += 1;\n    \
    \        max_idx -= 1;\n        } else {\n            min_idx += 1;\n        }\n\
    \    }\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n\
    \  --> /tmp/tmpbdkc6_6x.rs:23:25\n   |\n23 |             lst[min_idx], lst[max_idx]\
    \ = lst[max_idx], lst[min_idx];\n   |                         ^ expected one of\
    \ `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx2\
    \ = lst.iter().position(|x| *x == min).unwrap();\n    let mut max_idx2 = lst.iter().position(|x|\
    \ *x == max).unwrap();\n    let mut min_idx3 = lst.iter().position(|x| *x == min).unwrap();\n\
    \    let mut max_idx3 = lst.iter().position(|x| *x == max).unwrap();\n    let\
    \ mut min_idx4 = lst.iter().position(|x| *x == min).unwrap();\n    let mut max_idx4\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx5 = lst.iter().position(|x|\
    \ *x == min).unwrap();\n    let mut max_idx5 = lst.iter().position(|x| *x == max).unwrap();\n\
    \    let mut min_idx6 = lst.iter().position(|x| *x == min).unwrap();\n    let\
    \ mut max_idx6 = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx7\
    \ = lst.iter().position(|x| *x == min).unwrap();\n    let mut max_idx7 = lst.iter().position(|x|\
    \ *x == max).unwrap();\n    let mut min_idx8 = lst.iter().position(|x| *x == min).unwrap();\n\
    \    let mut max_idx8 = lst.iter().position(|x| *x == max).unwrap();\n    let\
    \ mut min_idx9 = lst.iter().position(|x| *x == min).unwrap();\n    let mut max_idx9\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx10 = lst.iter().position(|x|\
    \ *x == min).unwrap();\n    let mut max_idx10 = lst.iter().position(|x| *x ==\
    \ max).unwrap();\n    let mut min_idx11 = lst.iter().position(|x| *x == min).unwrap();\n\
    \    let mut max_idx11 = lst.iter().position(|x| *x == max).unwrap();\n    let\
    \ mut min_idx12 = lst.iter().position(|x| *x == min\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpo5bs0tzj.rs:38:1\n   |\n38 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpo5bs0tzj.rs:37:44\n   |\n11 | fn strange_sort_list(lst: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                                     -\
    \ closing delimiter possibly meant for this\n...\n37 |     let mut min_idx12 =\
    \ lst.iter().position(|x| *x == min\n   |                                    \
    \        ^ unclosed delimiter\n38 | }\n   | ^ mismatched closing delimiter\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpo5bs0tzj.rs:15:53\n   |\n15 |  \
    \   let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |     \
    \                                                ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let mut min_idx\
    \ = lst.iter().position(|x| *x == *min).unwrap();\n   |                      \
    \                               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo5bs0tzj.rs:16:53\n\
    \   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == max).unwrap();\n\
    \   |                                                     ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \   let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n   |    \
    \                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo5bs0tzj.rs:17:54\n   |\n17 |     let mut min_idx2 = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 \
    \     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n17 |     let mut min_idx2 = lst.iter().position(|x| *x ==\
    \ *min).unwrap();\n   |                                                      +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo5bs0tzj.rs:18:54\n   |\n18 |\
    \     let mut max_idx2 = lst.iter().position(|x| *x == max).unwrap();\n   |  \
    \                                                   "
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        let tmp = min;\n        min = max.clone();\n        max =\
    \ tmp;\n        min_idx = lst.iter().position(|x| x == min).unwrap();\n      \
    \  max_idx = lst.iter().position(|x| x == max).unwrap();\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq0q_gj8q.rs:19:15\n   |\n\
    13 |     let mut min = lst.iter().min().unwrap();\n   |                   -------------------------\
    \ expected due to this value\n...\n19 |         min = max.clone();\n   |     \
    \          ^^^^^^^^^^^\n   |               |\n   |               expected `&isize`,\
    \ found `isize`\n   |               help: consider borrowing here: `&max`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::<isize>::new();\n    let mut min_value = lst[0];\n    let mut max_value\
    \ = lst[0];\n    for value in lst {\n        if value < min_value {\n        \
    \    min_value = value;\n        }\n        if value > max_value {\n         \
    \   max_value = value;\n        }\n    }\n    sorted_list.push(min_value);\n \
    \   sorted_list.push(max_value);\n    for value in lst {\n        if value < min_value\
    \ {\n            sorted_list.push(value);\n        }\n        if value > max_value\
    \ {\n            sorted_list.push(value);\n        }\n    }\n    sorted_list\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp_4ftzqvc.rs:25:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut new_lst =\
    \ Vec::new();\n    while min_idx != max_idx {\n        new_lst.push(min);\n  \
    \      new_lst.push(max);\n        min = lst.iter().nth(min_idx).unwrap();\n \
    \       max = lst.iter().nth(max_idx).unwrap();\n        min_idx = lst.iter().position(|x|\
    \ x == min).unwrap();\n        max_idx = lst.iter().position(|x| x == max).unwrap();\n\
    \    }\n    new_lst.push(min);\n    new_lst.push(max);\n    new_lst\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1w2hfy3m.rs:28:5\n   |\n\
    11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n28 |     new_lst\n   |     ^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut mid = lst.iter().skip(1).take(2).min().unwrap();\n    while let Some(mid)\
    \ = mid {\n        result.push(mid);\n        if mid < min {\n            min\
    \ = mid;\n        }\n        if mid > max {\n            max = mid;\n        }\n\
    \        mid = lst.iter().skip(1).take(2).min().unwrap();\n    }\n    result.push(min);\n\
    \    result.push(max);\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3esd2ju1.rs:16:15\n   |\n\
    16 |     while let Some(mid) = mid {\n   |               ^^^^^^^^^   --- this\
    \ expression has type `&isize`\n   |               |\n   |               expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3esd2ju1.rs:17:21\n\
    \   |\n17 |         result.push(mid);\n   |                     ^^^ expected `isize`,\
    \ found reference\n   |\n   = note:   expected type `isize`\n           found\
    \ reference `&_`\nhelp: consider dereferencing the borrow\n   |\n17 |        \
    \ result.push(*mid);\n   |                     +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3esd2ju1.rs:26:17\n   |\n26 |     result.push(min);\n   |     \
    \            ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n26 |     result.push(*min);\n   |                 +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3esd2ju1.rs:27:17\n   |\n27 |     result.push(max);\n\
    \   |                 ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n27 |     result.push(*max);\n   |          \
    \       +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut mid = min + max / 2;\n    while lst.len() > 0 {\n        if lst.len()\
    \ > 1 {\n            if lst.iter().any(|&x| x > mid) {\n                mid =\
    \ mid.saturating_add((min + max) / 2);\n            } else {\n               \
    \ mid = mid.saturating_add((min + max) / 2);\n            }\n        }\n     \
    \   res.push(mid);\n        min = mid;\n        max = mid;\n        mid = min\
    \ + max / 2;\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp82ieufv1.rs:25:15\n   |\n\
    13 |     let mut min = lst.iter().min().unwrap();\n   |                   -------------------------\
    \ expected due to this value\n...\n25 |         min = mid;\n   |             \
    \  ^^^\n   |               |\n   |               expected `&isize`, found `isize`\n\
    \   |               help: consider borrowing here: `&mid`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp82ieufv1.rs:26:15\n   |\n14 |     let mut max = lst.iter().max().unwrap();\n\
    \   |                   ------------------------- expected due to this value\n\
    ...\n26 |         max = mid;\n   |               ^^^\n   |               |\n \
    \  |               expected `&isize`, found `isize`\n   |               help:\
    \ consider borrowing here: `&mid`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for x in lst {\n        if x < min_value {\n            min_value = x;\n\
    \        }\n        if x > max_value {\n            max_value = x;\n        }\n\
    \    }\n    min_value = min_value - 1;\n    max_value = max_value + 1;\n    for\
    \ x in lst {\n        if x < min_value {\n            sorted_list.push(x);\n \
    \       }\n        if x > max_value {\n            sorted_list.push(x);\n    \
    \    }\n    }\n    sorted_list.push(min_value);\n    sorted_list.push(max_value);\n\
    \    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpifoyfppe.rs:25:14\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for x in lst {\n    |  \
    \            --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    25  |     for x in lst {\n    |              ^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n15  |     for x in &lst {\n    |  \
    \            +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for x in\
    \ lst {\n        if x < min_value {\n            min_value = x;\n        }\n \
    \       if x > max_value {\n            max_value = x;\n        }\n    }\n   \
    \ let mut min_value = min_value;\n    let mut max_value = max_value;\n    for\
    \ x in lst {\n        if x < min_value {\n            min_value = x;\n       \
    \ }\n        if x > max_value {\n            max_value = x;\n        }\n    }\n\
    \    for x in lst {\n        if x == min_value {\n            result.push(x);\n\
    \        }\n        if x == max_value {\n            result.push(x);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpz5i0h79b.rs:25:14\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for x in lst {\n    |  \
    \            --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    25  |     for x in lst {\n    |              ^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n15  |     for x in &lst {\n    |  \
    \            +\n\nerror[E0382]: use of moved value: `lst`\n  --> /tmp/tmpz5i0h79b.rs:33:14\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |      \
    \                --- move occurs because `lst` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n...\n25 |     for x in lst {\n   |         \
    \     --- `lst` moved due to this implicit call to `.into_iter()`\n...\n33 | \
    \    for x in lst {\n   |              ^^^ value used here after move\n   |\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n   |\n25 |     for x in &lst {\n   |              +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx2\
    \ = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx2 = lst.iter().position(|x|\
    \ x == max).unwrap();\n    let mut min_idx3 = lst.iter().position(|x| x == min).unwrap();\n\
    \    let mut max_idx3 = lst.iter().position(|x| x == max).unwrap();\n    let mut\
    \ min_idx4 = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx4\
    \ = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx5 = lst.iter().position(|x|\
    \ x == min).unwrap();\n    let mut max_idx5 = lst.iter().position(|x| x == max).unwrap();\n\
    \    let mut min_idx6 = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx6 = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx7\
    \ = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx7 = lst.iter().position(|x|\
    \ x == max).unwrap();\n    let mut min_idx8 = lst.iter().position(|x| x == min).unwrap();\n\
    \    let mut max_idx8 = lst.iter().position(|x| x == max).unwrap();\n    let mut\
    \ min_idx9 = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx9\
    \ = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx10 = lst.iter().position(|x|\
    \ x == min).unwrap();\n    let mut max_idx10 = lst.iter().position(|x| x == max).unwrap();\n\
    \    let mut min_idx11 = lst.iter().position(|x| x == min).unwrap();\n    let\
    \ mut max_idx11 = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx12\
    \ = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx12 = lst.iter().position(|x|\
    \ x == max).\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpjpits79x.rs:39:1\n   |\n39\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpjpits79x.rs:38:59\n\
    \   |\n38 |     let mut max_idx12 = lst.iter().position(|x| x == max).\n   | \
    \                                                          ^ help: add `;` here\n\
    39 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpits79x.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp9h0_gvbx.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx as usize;\n    let mut max_idx = max_idx as usize;\n    while min_idx\
    \ < max_idx {\n        result.push(lst[min_idx]);\n        min_idx += 1;\n   \
    \ }\n    while max_idx > min_idx {\n        result.push(lst[max_idx]);\n     \
    \   max_idx -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpqo8rasoi.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx.unwrap();\n    let mut max_idx = max_idx.unwrap();\n    let mut i =\
    \ 1;\n    while i < lst.len() {\n        if min_idx < max_idx {\n            i\
    \ += 1;\n            min = lst[min_idx];\n            max = lst[max_idx];\n  \
    \          min_idx = lst.iter().position(|x| x == min).unwrap();\n           \
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n            min_idx =\
    \ min_idx.unwrap();\n            max_idx = max_idx.unwrap();\n        } else {\n\
    \            i += 1;\n            min = lst[min_idx];\n            max = lst[max_idx];\n\
    \            min_idx = lst.iter().position(|x| x == min).unwrap();\n         \
    \   max_idx = lst.iter().position(|x| x == max).unwrap();\n            min_idx\
    \ = min_idx.unwrap();\n            max_idx = max_idx.unwrap();\n        }\n  \
    \  }\n    for i in lst.iter().cloned().skip(1).cloned() {\n        res.push(i);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpz1j8l9jp.rs:17:31\n   |\n17 |     let mut min_idx = min_idx.unwrap();\n\
    \   |                               ^^^^^^ method not found in `usize`\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `usize` in the current scope\n  -->\
    \ /tmp/tmpz1j8l9jp.rs:18:31\n   |\n18 |     let mut max_idx = max_idx.unwrap();\n\
    \   |                               ^^^^^^ method not found in `usize`\n\nerror[E0271]:\
    \ type mismatch resolving `<usize as SliceIndex<[isize]>>::Output == &isize`\n\
    \  --> /tmp/tmpz1j8l9jp.rs:23:19\n   |\n23 |             min = lst[min_idx];\n\
    \   |                   ^^^^^^^^^^^^ expected `isize`, found `&isize`\n\nerror[E0271]:\
    \ type mismatch resolving `<usize as SliceIndex<[isize]>>::Output == &isize`\n\
    \  --> /tmp/tmpz1j8l9jp.rs:24:19\n   |\n24 |             max = lst[max_idx];\n\
    \   |                   ^^^^^^^^^^^^ expected `isize`, found `&isize`\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `usize` in the current scope\n  -->\
    \ /tmp/tmpz1j8l9jp.rs:27:31\n   |\n27 |             min_idx = min_idx.unwrap();\n\
    \   |                               ^^^^^^ method not found in `usize`\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `usize` in the current scope\n  -->\
    \ /tmp/tmpz1j8l9jp.rs:28:31\n   |\n28 |             max_idx = max_idx.unwrap();\n\
    \   |                               ^^^^^^ method not found in `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz1j8l9jp.rs:31:19\n   |\n13 |     let mut min\
    \ = lst.iter().min().unwrap();\n   |                   -------------------------\
    \ expected due to this value\n...\n31 |             min = lst[min_idx];\n   |\
    \                   ^^^^^^^^^^^^\n   |                   |\n   |             \
    \      expected `&isize`, found `isize`\n   |                   help: consider\
    \ borrowing here: `&lst[min_idx]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz1j8l9jp.rs:32:19\n\
    \   |\n14 |     let mut max = lst.iter().max().unwrap();\n   |               \
    \    ------------------------- expected due to this value\n...\n32 |         \
    \    "
  stdout: ''
  timestamp: 1660010621
- exit_code: -1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx = lst.iter().position(|x| x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| x == max).unwrap();\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010626
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx2\
    \ = lst.iter().position(|x| *x == min).unwrap();\n    let mut max_idx2 = lst.iter().position(|x|\
    \ *x == max).unwrap();\n    let mut min_idx3 = lst.iter().position(|x| *x == min).unwrap();\n\
    \    let mut max_idx3 = lst.iter().position(|x| *x == max).unwrap();\n    let\
    \ mut min_idx4 = lst.iter().position(|x| *x == min).unwrap();\n    let mut max_idx4\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx5 = lst.iter().position(|x|\
    \ *x == min).unwrap();\n    let mut max_idx5 = lst.iter().position(|x| *x == max).unwrap();\n\
    \    let mut min_idx6 = lst.iter().position(|x| *x == min).unwrap();\n    let\
    \ mut max_idx6 = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx7\
    \ = lst.iter().position(|x| *x == min).unwrap();\n    let mut max_idx7 = lst.iter().position(|x|\
    \ *x == max).unwrap();\n    let mut min_idx8 = lst.iter().position(|x| *x == min).unwrap();\n\
    \    let mut max_idx8 = lst.iter().position(|x| *x == max).unwrap();\n    let\
    \ mut min_idx9 = lst.iter().position(|x| *x == min).unwrap();\n    let mut max_idx9\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx10 = lst.iter().position(|x|\
    \ *x == min).unwrap();\n    let mut max_idx10 = lst.iter().position(|x| *x ==\
    \ max).unwrap();\n    let mut min_idx11 = lst.iter().position(|x| *x == min).unwrap();\n\
    \    let mut max_idx11 = lst.iter().position(|x| *x == max).unwrap();\n    let\
    \ mut min_idx12 = lst.iter().position(|x| *\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmprkbk3mn3.rs:38:1\n\
    \   |\n38 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmprkbk3mn3.rs:37:44\n   |\n11 | fn strange_sort_list(lst: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                                     -\
    \ closing delimiter possibly meant for this\n...\n37 |     let mut min_idx12 =\
    \ lst.iter().position(|x| *\n   |                                            ^\
    \ unclosed delimiter\n38 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprkbk3mn3.rs:15:53\n   |\n15 |     let mut min_idx\
    \ = lst.iter().position(|x| *x == min).unwrap();\n   |                       \
    \                              ^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n15 |     let mut min_idx = lst.iter().position(|x|\
    \ *x == *min).unwrap();\n   |                                                \
    \     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprkbk3mn3.rs:16:53\n \
    \  |\n16 |     let mut max_idx = lst.iter().position(|x| *x == max).unwrap();\n\
    \   |                                                     ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \   let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n   |    \
    \                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprkbk3mn3.rs:17:54\n   |\n17 |     let mut min_idx2 = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 \
    \     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n17 |     let mut min_idx2 = lst.iter().position(|x| *x ==\
    \ *min).unwrap();\n   |                                                      +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprkbk3mn3.rs:18:54\n   |\n18 |\
    \     let mut max_idx2 = lst.iter().position(|x| *x == max).unwrap();\n   |  \
    \                                                    ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the "
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = vec![];\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    for value in lst {\n        if value < min_value\
    \ {\n            sorted_list.push(value);\n        }\n        if value > max_value\
    \ {\n            sorted_list.push(value);\n        }\n    }\n    for value in\
    \ lst {\n        if value < min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_\n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpdtmm6vx8.rs:137:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    119 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n...\n124 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n137 | }\n    |   ^\n\nerror: expected `{`, found\
    \ `}`\n   --> /tmp/tmpdtmm6vx8.rs:124:1\n    |\n123 |         if value > max_\n\
    \    |         -- this `if` expression has a condition, but no block\n124 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdtmm6vx8.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp9h0_gvbx.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx\
    \ = min_idx as usize;\n    let mut max_idx = max_idx as usize;\n    while min_idx\
    \ < max_idx {\n        lst[min_idx] = lst[max_idx];\n        min_idx += 1;\n \
    \       max_idx -= 1;\n    }\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8n8ne2ay.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8n8ne2ay.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut min_val = lst[0];\n    let mut max_val = lst[0];\n    for el in lst\
    \ {\n        if el < min_val {\n            min_val = el;\n        }\n       \
    \ if el > max_val {\n            max_val = el;\n        }\n    }\n    let mut\
    \ min_el = min_val;\n    let mut max_el = max_val;\n    for el in lst {\n    \
    \    if el < min_el {\n            min_el = el;\n        }\n        if el > max_el\
    \ {\n            max_el = el;\n        }\n    }\n    let mut min_el2 = min_el;\n\
    \    let mut max_el2 = max_el;\n    for el in lst {\n        if el < min_el2 {\n\
    \            min_el2 = el;\n        }\n        if el > max_el2 {\n           \
    \ max_el2 = el;\n        }\n    }\n    let mut min_el3 = min_el2;\n    let mut\
    \ max_el3 = max_el2;\n    for el in lst {\n        if el < min_el3 {\n       \
    \     min_el3 = el;\n        }\n        if el > max_el3 {\n            max_el3\
    \ = el;\n        }\n    }\n    let mut min_el4 = min_el3;\n    let mut max_el4\
    \ = max_el3;\n    for el in lst {\n        if el < min_el4 {\n            min_el4\
    \ = el;\n        }\n        if el > max_el4 {\n            max_el4 = el;\n   \
    \     }\n    }\n    let mut min_el5 = min_el4;\n    let mut max_el5 = max_el4;\n\
    \    for el in lst {\n        if el < min_el5 {\n            min_el5 = el;\n \
    \       }\n        if el > max_el5 {\n            max_el5 = el;\n        }\n \
    \   }\n    let mut min_el6 = min_el5;\n    let mut max_el6 = max_el5;\n    for\
    \ el in lst {\n        if el < min_el6 {\n            min_el6 = el;\n        }\n\
    \        if el > max_el6 {\n            max_el6 = el;\n        }\n    }\n    let\
    \ mut min_el7 = min_el6;\n    let mut max_el7 = max_el6;\n    for el in lst {\n\
    \        if el < min_el7 {\n            min_el7 = el;\n        }\n        if el\
    \ > max_el7 {\n            max_el7 = el;\n        }\n    }\n    let mut min_el8\
    \ = min_el7;\n    let mut max_el8 = max_el7;\n    for el in lst {\n        if\
    \ el < min_el8\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp24wgg7w_.rs:110:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    95  |     for el in lst {\n    |                   - this delimiter might not\
    \ be properly closed...\n96  |         if el < min_el8\n97  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n110 | }\n    |   ^\n\n\
    error: expected `{`, found `}`\n  --> /tmp/tmp24wgg7w_.rs:97:1\n   |\n96 |   \
    \      if el < min_el8\n   |         -- this `if` expression has a condition,\
    \ but no block\n97 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp24wgg7w_.rs:11:42\n   |\n11 | fn strange_sort_list(lst: Vec<isize>)\
    \ -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    sorted_list.sort();\n    sorted_list\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3osj0gyl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx as usize;\n    let mut max_idx = max_idx as usize;\n    while min_idx\
    \ < max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx += 1;\n        max_idx -= 1;\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpw_l62re3.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut mid = min + max / 2;\n    while mid != min {\n        res.push(mid);\n\
    \        mid = min + max / 2;\n    }\n    res.push(mid);\n    res.extend(lst.iter().map(|x|\
    \ x - mid).collect::<Vec<_>>());\n    res\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwn10mt9n.rs:16:18\n   |\n\
    16 |     while mid != min {\n   |                  ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |     while\
    \ mid != *min {\n   |                  +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut new_lst\
    \ = vec![];\n    while min_idx != max_idx {\n        new_lst.push(lst.swap_remove(min_idx).unwrap());\n\
    \        min_idx += 1;\n        max_idx += 1;\n    }\n    new_lst\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf0g2apvd.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpf0g2apvd.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0599]: no\
    \ method named `unwrap` found for type `isize` in the current scope\n  --> /tmp/tmpf0g2apvd.rs:19:47\n\
    \   |\n19 |         new_lst.push(lst.swap_remove(min_idx).unwrap());\n   |   \
    \                                            ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx = lst.iter().position(|x| *x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2e18fy00.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2e18fy00.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2e18fy00.rs:21:49\n   |\n21 |         min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n21 |         min_idx = lst.iter().position(|x| *x == *min).unwrap();\n\
    \   |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2e18fy00.rs:22:49\n   |\n22 |         max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n22 |         max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                 +\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut mid = min_idx\
    \ + (max_idx - min_idx) / 2;\n    while lst.len() > 1 {\n        if lst[mid] <\
    \ min {\n            min = lst[mid];\n            min_idx = mid;\n        }\n\
    \        if lst[mid] > max {\n            max = lst[mid];\n            max_idx\
    \ = mid;\n        }\n        if lst[mid] == min {\n            mid = min_idx +\
    \ (max_idx - min_idx) / 2;\n        }\n        if lst[mid] == max {\n        \
    \    mid = min_idx + (max_idx - min_idx) / 2;\n        }\n    }\n    lst.swap(min_idx,\
    \ max_idx);\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpswocayhq.rs:19:23\n   |\n\
    19 |         if lst[mid] < min {\n   |                       ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |  \
    \       if lst[mid] < *min {\n   |                       +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpswocayhq.rs:20:19\n   |\n13 |     let mut min = lst.iter().min().unwrap();\n\
    \   |                   ------------------------- expected due to this value\n\
    ...\n20 |             min = lst[mid];\n   |                   ^^^^^^^^\n   | \
    \                  |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&lst[mid]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpswocayhq.rs:23:23\n   |\n23 |         if lst[mid]\
    \ > max {\n   |                       ^^^ expected `isize`, found `&isize`\n \
    \  |\nhelp: consider dereferencing the borrow\n   |\n23 |         if lst[mid]\
    \ > *max {\n   |                       +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpswocayhq.rs:24:19\n   |\n14 |     let mut max = lst.iter().max().unwrap();\n\
    \   |                   ------------------------- expected due to this value\n\
    ...\n24 |             max = lst[mid];\n   |                   ^^^^^^^^\n   | \
    \                  |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&lst[mid]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpswocayhq.rs:27:24\n   |\n27 |         if lst[mid]\
    \ == min {\n   |                        ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n27 |         if lst[mid]\
    \ == *min {\n   |                        +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpswocayhq.rs:30:24\n   |\n30 |         if lst[mid] == max {\n  \
    \ |                        ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n30 |         if lst[mid] == *max {\n   |   \
    \                     +\n\nerror: aborting due to 6 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain "
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    sorted_list.push(min_value);\n    sorted_list.push(max_value);\n\
    \    for value in lst {\n        if value < min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpxwdt8m74.rs:25:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx - 1;\n    let mut max_idx = max_idx + 1;\n    while min_idx < max_idx\
    \ {\n        let tmp = lst[min_idx];\n        lst[min_idx] = lst[max_idx];\n \
    \       lst[max_idx] = tmp;\n        min_idx += 1;\n        max_idx += 1;\n  \
    \  }\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpp_zh3wyl.rs:17:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7oqpd5_k.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 | \n117 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n130 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7oqpd5_k.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|&x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|&x| x == max).unwrap();\n    let mut min_idx\
    \ = min_idx as usize;\n    let mut max_idx = max_idx as usize;\n    while min_idx\
    \ < max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx += 1;\n        max_idx -= 1;\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgb_ffx_k.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|&x| x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|&x| x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgb_ffx_k.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|&x|\
    \ x == max).unwrap();\n   |                                                  \
    \   ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|&x| x == *max).unwrap();\n\
    \   |                                                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    sorted_list.sort();\n    sorted_list\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3osj0gyl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: -1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx = lst.iter().position(|x| x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| x == max).unwrap();\n    }\n    lst.sort();\n    lst\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010626
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx\
    \ = min_idx.unwrap();\n    let mut max_idx = max_idx.unwrap();\n    while min_idx\
    \ < max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx += 1;\n        max_idx -= 1;\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw0whjmoc.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpw0whjmoc.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0599]: no\
    \ method named `unwrap` found for type `usize` in the current scope\n  --> /tmp/tmpw0whjmoc.rs:17:31\n\
    \   |\n17 |     let mut min_idx = min_idx.unwrap();\n   |                    \
    \           ^^^^^^ method not found in `usize`\n\nerror[E0599]: no method named\
    \ `unwrap` found for type `usize` in the current scope\n  --> /tmp/tmpw0whjmoc.rs:18:31\n\
    \   |\n18 |     let mut max_idx = max_idx.unwrap();\n   |                    \
    \           ^^^^^^ method not found in `usize`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx < max_idx\
    \ {\n        let tmp = min;\n        min = max;\n        max = tmp;\n        min_idx\
    \ = lst.iter().position(|x| x == min).unwrap();\n        max_idx = lst.iter().position(|x|\
    \ x == max).unwrap();\n    }\n    lst.sort();\n    lst\n}\n\nfn main() {\n   \
    \ let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpl9i7h31x.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    sorted_list.sort();\n    sorted_list\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3osj0gyl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    let mut min_value = sorted_list[0];\n    let mut max_value = sorted_list[0];\n\
    \    for value in sorted_list.iter().rev() {\n        if value < min_value {\n\
    \            min_value = value;\n        }\n        if value > max_value {\n \
    \           max_value = value;\n        }\n    }\n    let mut new_list = vec![];\n\
    \    let mut i = 0;\n    while i < sorted_list.len() {\n        let value = sorted_list[i];\n\
    \        if value == min_value {\n            new_list.push(min_value);\n    \
    \        i += 1;\n            continue;\n        }\n        if value == max_value\
    \ {\n            new_list.push(max_value);\n            i += 1;\n            continue;\n\
    \        }\n        new_list.push(value);\n        i += 1;\n    }\n    new_list\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpusir7llm.rs:16:20\n   |\n\
    16 |         if value < min_value {\n   |                    ^^^^^^^^^\n   | \
    \                   |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&min_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpusir7llm.rs:17:25\n   |\n13 |     let mut min_value\
    \ = sorted_list[0];\n   |                         -------------- expected due\
    \ to this value\n...\n17 |             min_value = value;\n   |              \
    \           ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n17 |             min_value = *value;\n   |               \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusir7llm.rs:19:20\n\
    \   |\n19 |         if value > max_value {\n   |                    ^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpusir7llm.rs:20:25\n   |\n14 |     let mut max_value\
    \ = sorted_list[0];\n   |                         -------------- expected due\
    \ to this value\n...\n20 |             max_value = value;\n   |              \
    \           ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n20 |             max_value = *value;\n   |               \
    \          +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for el\
    \ in lst {\n        if el < min_value {\n            min_value = el;\n       \
    \ }\n        if el > max_value {\n            max_value = el;\n        }\n   \
    \ }\n    for el in lst {\n        if el < min_value {\n            result.push(min_value);\n\
    \            min_value = el;\n        }\n        if el > max_value {\n       \
    \     result.push(max_value);\n            max_value = el;\n        }\n    }\n\
    \    result.push(min_value);\n    result.push(max_value);\n    result\n}\n\nfn\
    \ main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpkm8zgcao.rs:23:15\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for el in lst {\n    | \
    \              --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    23  |     for el in lst {\n    |               ^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n15  |     for el in &lst {\n    | \
    \              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    for el in lst {\n        if el == min_value {\n            sorted_list.push(max_value);\n\
    \        } else {\n            sorted_list.push(el);\n        }\n    }\n    sorted_list\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpj295_j_3.rs:23:15\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for el in lst {\n    | \
    \              --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    23  |     for el in lst {\n    |               ^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n15  |     for el in &lst {\n    | \
    \              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx\
    \ = min_idx + (min - min);\n    let mut max_idx = max_idx + (max - max);\n   \
    \ let mut i = min_idx;\n    while i < max_idx {\n        lst[i] = lst[max_idx\
    \ - i];\n        i += 1;\n    }\n    lst\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx2wa3yvj.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx2wa3yvj.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx2wa3yvj.rs:17:33\n   |\n17 |     let mut min_idx = min_idx\
    \ + (min - min);\n   |                                 ^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpx2wa3yvj.rs:17:31\n\
    \   |\n17 |     let mut min_idx = min_idx + (min - min);\n   |               \
    \                ^ no implementation for `usize + isize`\n   |\n   = help: the\
    \ trait `Add<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx2wa3yvj.rs:18:33\n   |\n18 |     let mut max_idx = max_idx\
    \ + (max - max);\n   |                                 ^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpx2wa3yvj.rs:18:31\n\
    \   |\n18 |     let mut max_idx = max_idx + (max - max);\n   |               \
    \             "
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx + (min - min_idx);\n    let mut max_idx = max_idx + (max - max_idx);\n\
    \    while min_idx < max_idx {\n        let tmp = lst.swap(min_idx, max_idx);\n\
    \        min_idx = min_idx + 1;\n        max_idx = max_idx + 1;\n    }\n    lst\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6hbby2oz.rs:17:40\n   |\n\
    17 |     let mut min_idx = min_idx + (min - min_idx);\n   |                  \
    \                      ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot subtract `usize` from `&isize`\n  --> /tmp/tmp6hbby2oz.rs:17:38\n   |\n\
    17 |     let mut min_idx = min_idx + (min - min_idx);\n   |                  \
    \                    ^ no implementation for `&isize - usize`\n   |\n   = help:\
    \ the trait `Sub<usize>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6hbby2oz.rs:17:33\n   |\n17 |     let mut min_idx = min_idx\
    \ + (min - min_idx);\n   |                                 ^^^^^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmp6hbby2oz.rs:17:31\n   |\n17 |     let mut min_idx = min_idx + (min -\
    \ min_idx);\n   |                               ^ no implementation for `usize\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6hbby2oz.rs:18:40\n   |\n18 |     let mut max_idx\
    \ = max_idx + (max - max_idx);\n   |                                        ^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from\
    \ `&isize`\n  --> /tmp/tmp6hbby2oz.rs:18:38\n   |\n18 |     l"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut i = min_idx;\n\
    \    while i < max_idx {\n        swap(&mut lst, i, min_idx);\n        min_idx\
    \ += 1;\n        i += 1;\n    }\n    lst\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp0pkf928m.rs:19:9\n\
    \   |\n19 |         swap(&mut lst, i, min_idx);\n   |         ^^^^ not found in\
    \ this scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use\
    \ std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0pkf928m.rs:15:53\n   |\n15 |     let mut min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n15 |     let mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0pkf928m.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for el\
    \ in lst {\n        if el < min_value {\n            min_value = el;\n       \
    \ }\n        if el > max_value {\n            max_value = el;\n        }\n   \
    \ }\n    let mut min_idx = 1;\n    let mut max_idx = 1;\n    while min_idx < lst.len()\
    \ {\n        let el = lst[min_idx];\n        let mut idx = min_idx;\n        while\
    \ idx < lst.len() {\n            if el > lst[idx] {\n                break;\n\
    \            }\n            idx += 1;\n        }\n        result.push(el);\n \
    \       min_idx = idx;\n    }\n    while max_idx < lst.len() {\n        let el\
    \ = lst[max_idx];\n        let mut idx = max_idx;\n        while idx < lst.len()\
    \ {\n            if el < lst[idx] {\n                break;\n            }\n \
    \           idx += 1;\n        }\n        result.push(el);\n        max_idx =\
    \ idx;\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `lst`\n   --> /tmp/tmp73f2tba6.rs:25:21\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for el in lst {\n    | \
    \              --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    25  |     while min_idx < lst.len() {\n    |                     ^^^^^^^^^ value\
    \ borrowed here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `lst`\nhelp: consider iterating over a slice of\
    \ the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n15  |\
    \     for el in &lst {\n    |               +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n\
    \    for el in lst {\n        if el < min_val {\n            min_val = el;\n \
    \       }\n        if el > max_val {\n            max_val = el;\n        }\n \
    \   }\n    let mut min_el = min_val;\n    let mut max_el = max_val;\n    for el\
    \ in lst {\n        if el < min_el {\n            min_el = el;\n        }\n  \
    \      if el > max_el {\n            max_el = el;\n        }\n    }\n    let mut\
    \ min_el2 = min_el;\n    let mut max_el2 = max_el;\n    for el in lst {\n    \
    \    if el < min_el2 {\n            min_el2 = el;\n        }\n        if el >\
    \ max_el2 {\n            max_el2 = el;\n        }\n    }\n    let mut min_el3\
    \ = min_el2;\n    let mut max_el3 = max_el2;\n    for el in lst {\n        if\
    \ el < min_el3 {\n            min_el3 = el;\n        }\n        if el > max_el3\
    \ {\n            max_el3 = el;\n        }\n    }\n    let mut min_el4 = min_el3;\n\
    \    let mut max_el4 = max_el3;\n    for el in lst {\n        if el < min_el4\
    \ {\n            min_el4 = el;\n        }\n        if el > max_el4 {\n       \
    \     max_el4 = el;\n        }\n    }\n    let mut min_el5 = min_el4;\n    let\
    \ mut max_el5 = max_el4;\n    for el in lst {\n        if el < min_el5 {\n   \
    \         min_el5 = el;\n        }\n        if el > max_el5 {\n            max_el5\
    \ = el;\n        }\n    }\n    let mut min_el6 = min_el5;\n    let mut max_el6\
    \ = max_el5;\n    for el in lst {\n        if el < min_el6 {\n            min_el6\
    \ = el;\n        }\n        if el > max_el6 {\n            max_el6 = el;\n   \
    \     }\n    }\n    let mut min_el7 = min_el6;\n    let mut max_el7 = max_el6;\n\
    \    for el in lst {\n        if el < min_el7 {\n            min_el7 = el;\n \
    \       }\n        if el > max_el7 {\n            max_el7 = el;\n        }\n \
    \   }\n    let mut min_el8 = min_el7;\n    let mut max_el8 = max_el7;\n    for\
    \ el in lst {\n\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp3cmeaqoc.rs:110:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    95  |     for el in lst {\n    |                   - this delimiter might not\
    \ be properly closed...\n96  | \n97  | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n110 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3cmeaqoc.rs:16:17\n   |\n16 |         if el < min_val {\n\
    \   |                 ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n16 |         if el < min_val.try_into().unwrap() {\n   |              \
    \          ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3cmeaqoc.rs:17:23\n\
    \   |\n13 |     let mut min_val = std::i32::MAX;\n   |                       -------------\
    \ expected due to this value\n...\n17 |             min_val = el;\n   |      \
    \                 ^^ expected `i32`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3cmeaqoc.rs:19:17\n   |\n19 |         if el > max_val {\n\
    \   |                 ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n19 |         if el > max_val.try_into().unwrap() {\n   |              \
    \          ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3cmeaqoc.rs:20:23\n\
    \   |\n14 |     let mut max_val = std::i32::MIN;\n   |                       -------------\
    \ expected due to this value\n...\n20 |             max_val = el;\n   |      \
    \                 ^^ expected `i32`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3cmeaqoc.rs:26:17\n   |\n26 |         if el < min_el {\n\
    \   |                 ^^^^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n26 |         if el < min_el.try_into().unwrap() {\n   |               \
    \        +++++++++++++++++++"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    if min_value == max_value {\n        return sorted_list;\n\
    \    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    for\
    \ value in lst {\n        if value < min_value {\n            min_value = value;\n\
    \        }\n        if value > max_value {\n            max_value = value;\n \
    \       }\n    }\n    if min_value == max_value {\n        return sorted_list;\n\
    \    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    for\
    \ value in lst {\n        if value < min_value {\n            min_value = value;\n\
    \        }\n        if value > max_value {\n            max_value = value;\n \
    \       }\n    }\n    if min_value == max_value {\n        return sorted_list;\n\
    \    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    for\
    \ value in lst {\n        if value < min_value {\n            min_value = value;\n\
    \        }\n        if value > max_value {\n            max_value = value;\n \
    \       }\n    }\n    if min_value == max_value {\n        return sorted_list;\n\
    \    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    for\
    \ value in lst {\n        if value < min_value {\n            min_value = value;\n\
    \        }\n        if value > max_value {\n            max_value = value;\n \
    \       }\n    }\n    if min_value == max_value {\n        return sorted_list;\n\
    \    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    for\
    \ value in lst {\n        if value < min_value {\n            min_value = value;\n\
    \        }\n        if value > max_value {\n            max_value = value;\n \
    \       }\n    }\n    if min_value == max_value {\n        return sorted_list;\n\
    \    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    for\
    \ value in lst {\n        if value < min_value {\n            min_value = value;\n\
    \        }\n\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpxvtos9dv.rs:123:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    105 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n...\n110 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n123 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxvtos9dv.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        lst[min_idx] = max;\n        lst[max_idx] = min;\n      \
    \  min_idx = lst.iter().position(|x| *x == min).unwrap();\n        max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n    }\n    lst\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprqaymkph.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprqaymkph.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprqaymkph.rs:18:24\n   |\n18 |         lst[min_idx] = max;\n\
    \   |         ------------   ^^^ expected `isize`, found `&isize`\n   |      \
    \   |\n   |         expected due to the type of this binding\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n18 |         lst[min_idx] = *max;\n   |    \
    \                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprqaymkph.rs:19:24\n\
    \   |\n19 |         lst[max_idx] = min;\n   |         ------------   ^^^ expected\
    \ `isize`, found `&isize`\n   |         |\n   |         expected due to the type\
    \ of this binding\n   |\nhelp: consider dereferencing the borrow\n   |\n19 | \
    \        lst[max_idx] = *min;\n   |                        +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprqaymkph.rs:20:49\n   |\n20 |         min_idx\
    \ = lst.iter().position(|x| *x == min).unwrap();\n   |                       \
    \                          ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |         min_idx = lst.iter().position(|x|\
    \ *x == *min).unwrap();\n   |                                                \
    \ +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprqaymkph.rs:21:49\n   |\n\
    21 |         max_idx = lst.iter().position(|x"
  stdout: ''
  timestamp: 1660010621
- exit_code: -1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx = lst.iter().position(|x| x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| x == max).unwrap();\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010627
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    let mut min_value = sorted_list.iter().min().unwrap();\n    let\
    \ mut max_value = sorted_list.iter().max().unwrap();\n    let mut min_value =\
    \ min_value;\n    let mut max_value = max_value;\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    let mut min_value = min_value;\n    let\
    \ mut max_value = max_value;\n    let mut min_value = min_value;\n    let mut\
    \ max_value = max_value;\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    let\
    \ mut min_value = min_value;\n    let mut max_value = max_value;\n    let mut\
    \ min_value = min_value;\n    let mut max_value = max_value;\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    let mut min_value = min_value;\n    let\
    \ mut max_value = max_value;\n    let mut min_value = min_value;\n    let mut\
    \ max_value = max_value;\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    let\
    \ mut min_value = min_value;\n    let mut max_value = max_value;\n    let mut\
    \ min_value = min_value;\n    let mut max_value = max_value;\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    let mut min_value = min_value;\n    let\
    \ mut max_value = max_value;\n    let mut min_value = min_value;\n    let mut\
    \ max_value = max_value;\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    let\
    \ mut min_value = min_value;\n    let mut max_value = max_value;\n    let mut\
    \ min_value = min_value;\n    let mut max_value = max_value;\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    let mut min_value = min_value;\n    let\
    \ mut max_\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnuzp7b48.rs:74:17\n   |\n\
    74 |     let mut max_\n   |                 ^ help: add `;` here\n75 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnuzp7b48.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        lst[min_idx] = lst[max_idx];\n        min_idx += 1;\n   \
    \     max_idx -= 1;\n    }\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpfykjvnks.rs:20:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    for value in lst {\n        if value < min_value\
    \ {\n            sorted_list.push(value);\n        }\n        if value > max_value\
    \ {\n            sorted_list.push(value);\n        }\n    }\n    for value in\
    \ lst {\n        if value < max_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > min_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp05wloe04.rs:23:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n23  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror[E0382]: use of moved value: `lst`\n  -->\
    \ /tmp/tmp05wloe04.rs:31:18\n   |\n11 | fn strange_sort_list(lst: Vec<isize>)\
    \ -> Vec<isize> {\n   |                      --- move occurs because `lst` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n23 |    \
    \ for value in lst {\n   |                  --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n31 |     for value in lst {\n   |             \
    \     ^^^ value used here after move\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n23\
    \ |     for value in &lst {\n   |                  +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for value\
    \ in lst {\n        if value < min_value {\n            min_value = value;\n \
    \       }\n        if value > max_value {\n            max_value = value;\n  \
    \      }\n    }\n    for value in lst {\n        if value < min_value {\n    \
    \        result.push(value);\n        }\n        if value > max_value {\n    \
    \        result.push(value);\n        }\n    }\n    for value in lst {\n     \
    \   if value < max_value {\n            result.push(value);\n        }\n    }\n\
    \    for value in lst {\n        if value > min_value {\n            result.push(value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp7p4jqnfr.rs:23:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n23  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror[E0382]: use of moved value: `lst`\n  -->\
    \ /tmp/tmp7p4jqnfr.rs:31:18\n   |\n11 | fn strange_sort_list(lst: Vec<isize>)\
    \ -> Vec<isize> {\n   |                      --- move occurs because `lst` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n23 |    \
    \ for value in lst {\n   |                  --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n31 |     for value in lst {\n   |             \
    \     ^^^ value used here after move\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n23\
    \ |     for value in &lst {\n   |                  +\n\nerror[E0382]: use of moved\
    \ value: `lst`\n  --> /tmp/tmp7p4jqnfr.rs:36:18\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |                      --- move occurs because\
    \ `lst` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n\
    31 |     for value in lst {\n   |                  --- `lst` moved due to this\
    \ implicit call to `.into_iter()`\n...\n36 |     for value in lst {\n   |    \
    \              ^^^ value used here after move\n   |\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \   |\n31 |     for value in &lst {\n   |                  +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    sorted_list.push(min_value);\n    sorted_list.push(max_value);\n\
    \    for value in lst {\n        if value < min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpxwdt8m74.rs:25:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx / 2;\n    let mut max_idx = max_idx / 2;\n    while min_idx < max_idx\
    \ {\n        lst[min_idx] = lst[max_idx];\n        min_idx += 1;\n        max_idx\
    \ -= 1;\n    }\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpuca5czri.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7oqpd5_k.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 | \n117 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n130 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7oqpd5_k.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for el\
    \ in lst {\n        if el < min_value {\n            min_value = el;\n       \
    \ }\n        if el > max_value {\n            max_value = el;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < \n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp99kltyn2.rs:120:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    105 |     for el in lst {\n    |                   - this delimiter might not\
    \ be properly closed...\n106 |         if el < \n107 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n120 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n   --> /tmp/tmp99kltyn2.rs:107:1\n    |\n107 | }\n  \
    \  | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp99kltyn2.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for value\
    \ in lst {\n        if value < min_value {\n            min_value = value;\n \
    \       }\n        if value > max_value {\n            max_value = value;\n  \
    \      }\n    }\n    while min_value != max_value {\n        let mut min_idx =\
    \ result.len();\n        let mut max_idx = result.len();\n        for idx in 0..result.len()\
    \ {\n            if result[idx] < min_value {\n                min_idx = idx;\n\
    \            }\n            if result[idx] > max_value {\n                max_idx\
    \ = idx;\n            }\n        }\n        if min_idx < max_idx {\n         \
    \   result.swap(min_idx, max_idx);\n        }\n        min_value = max_value;\n\
    \        for idx in min_idx..result.len() {\n            if result[idx] < min_value\
    \ {\n                min_value = result[idx];\n            }\n        }\n    \
    \    max_value = min_value;\n        for idx in 0..result.len() {\n          \
    \  if result[idx] > max_value {\n                max_value = result[idx];\n  \
    \          }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpu6upy9o1.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx\
    \ = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n    let\
    \ mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.min(min_idx);\n\
    \    let mut min_idx = min_idx.min(max_idx);\n    let mut max_idx = max_idx.\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp_d151x3a.rs:51:1\n   |\n51\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp_d151x3a.rs:50:31\n\
    \   |\n50 |     let mut max_idx = max_idx.\n   |                             \
    \  ^ help: add `;` here\n51 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_d151x3a.rs:15:53\n   |\n15 |     let mut min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n15 |     let mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_d151x3a.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_d151x3a.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for v in\
    \ lst.iter().rev() {\n        if v < min_value {\n            min_value = v;\n\
    \        }\n        if v > max_value {\n            max_value = v;\n        }\n\
    \    }\n    let mut lst = lst.iter().map(|v| {\n        if v == min_value {\n\
    \            v\n        } else {\n            if v == max_value {\n          \
    \      v\n            } else {\n                (v - min_value).abs()\n      \
    \      }\n        }\n    }).collect::<Vec<isize>>();\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaliupepb.rs:16:16\n   |\n\
    16 |         if v < min_value {\n   |                ^^^^^^^^^\n   |         \
    \       |\n   |                expected `&isize`, found `isize`\n   |        \
    \        help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaliupepb.rs:17:25\n   |\n13 |     let mut min_value = lst[0];\n\
    \   |                         ------ expected due to this value\n...\n17 |   \
    \          min_value = v;\n   |                         ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |        \
    \     min_value = *v;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaliupepb.rs:19:16\n   |\n19 |         if v > max_value\
    \ {\n   |                ^^^^^^^^^\n   |                |\n   |              \
    \  expected `&isize`, found `isize`\n   |                help: consider borrowing\
    \ here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaliupepb.rs:20:25\n\
    \   |\n14 |     let mut max_value = lst[0];\n   |                         ------\
    \ expected due to this value\n...\n20 |             max_value = v;\n   |     \
    \                    ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |             max_value = *v;\n   |     \
    \                    +\n\nerror[E0277]: can't compare `&isize` with `isize`\n\
    \  --> /tmp/tmpaliupepb.rs:24:14\n   |\n24 |         if v == min_value {\n   |\
    \              ^^ no implementation for `&isize == isize`\n   |\n   = help: the\
    \ trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0277]:\
    \ can't compare `&isize` with `isize`\n  --> /tmp/tmpaliupepb.rs:27:18\n   |\n\
    27 |             if v == max_value {\n   |                  ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implement"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    for value in lst {\n        if value < min_value\
    \ {\n            sorted_list.push(value);\n        }\n        if value > max_value\
    \ {\n            sorted_list.push(value);\n        }\n    }\n    for value in\
    \ lst {\n        if value < max_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > min_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp05wloe04.rs:23:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n23  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror[E0382]: use of moved value: `lst`\n  -->\
    \ /tmp/tmp05wloe04.rs:31:18\n   |\n11 | fn strange_sort_list(lst: Vec<isize>)\
    \ -> Vec<isize> {\n   |                      --- move occurs because `lst` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n23 |    \
    \ for value in lst {\n   |                  --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n31 |     for value in lst {\n   |             \
    \     ^^^ value used here after move\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n23\
    \ |     for value in &lst {\n   |                  +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for value\
    \ in lst {\n        if value < min_value {\n            min_value = value;\n \
    \       }\n        if value > max_value {\n            max_value = value;\n  \
    \      }\n    }\n    let mut lst = lst.to_owned();\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut lst\
    \ = lst.to_owned();\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut lst = lst.to_owned();\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    for\
    \ value in lst {\n        if value < min_value {\n            min_value = value;\n\
    \        }\n        if value > max_value {\n            max_value = value;\n \
    \       }\n    }\n    let mut lst = lst.to_owned();\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut lst\
    \ = lst.to_owned();\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut lst = lst.to_owned();\n\
    \    let mut min_value = min_value;\n    let mut max_value = max_value;\n    for\
    \ value in lst {\n        if value < min_value {\n            min_value = value;\n\
    \        }\n        if value > max_value {\n            max_value = value;\n \
    \       }\n    }\n    let mut lst = lst.to_owned();\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut lst\
    \ = lst.to_owned();\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst \n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpd9tnqi0o.rs:104:1\n    |\n\
    104 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7oqpd5_k.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 | \n117 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n130 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7oqpd5_k.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    let mut min_value = sorted_list.iter().min().unwrap();\n    let\
    \ mut max_value = sorted_list.iter().max().unwrap();\n    let mut min_value =\
    \ min_value - 1;\n    let mut max_value = max_value + 1;\n    while min_value\
    \ <= max_value {\n        sorted_list.swap(min_value, max_value);\n        min_value\
    \ = min_value + 1;\n        max_value = max_value + 1;\n    }\n    sorted_list\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzx5hdih.rs:18:26\n   |\n\
    18 |         sorted_list.swap(min_value, max_value);\n   |                   \
    \       ^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    18 |         sorted_list.swap(min_value.try_into().unwrap(), max_value);\n   |\
    \                                   ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyzx5hdih.rs:18:37\n   |\n18 |         sorted_list.swap(min_value,\
    \ max_value);\n   |                                     ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |         sorted_list.swap(min_value,\
    \ max_value.try_into().unwrap());\n   |                                      \
    \        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::<isize>::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for el\
    \ in lst {\n        if el < min_value {\n            min_value = el;\n       \
    \ }\n        if el > max_value {\n            max_value = el;\n        }\n   \
    \ }\n    let mut min_idx = 1;\n    let mut max_idx = 1;\n    while min_idx < lst.len()\
    \ && max_idx < lst.len() {\n        if lst[min_idx] < lst[max_idx] {\n       \
    \     res.push(lst[min_idx]);\n            min_idx += 1;\n        } else {\n \
    \           res.push(lst[max_idx]);\n            max_idx += 1;\n        }\n  \
    \  }\n    res.extend(lst.iter().skip(min_idx).take(max_idx - min_idx + 1).cloned());\n\
    \    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `lst`\n   --> /tmp/tmpvugjtz0m.rs:25:21\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for el in lst {\n    | \
    \              --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    25  |     while min_idx < lst.len() && max_idx < lst.len() {\n    |          \
    \           ^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n15  |     for el in &lst {\n    |               +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for x in\
    \ lst {\n        if x < min_value {\n            min_value = x;\n        }\n \
    \       if x > max_value {\n            max_value = x;\n        }\n    }\n   \
    \ for x in lst {\n        if x == min_value {\n            res.push(x);\n    \
    \    }\n        if x == max_value {\n            res.push(max_value);\n      \
    \  }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp2egzdhjz.rs:23:14\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for x in lst {\n    |  \
    \            --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    23  |     for x in lst {\n    |              ^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n15  |     for x in &lst {\n    |  \
    \            +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        lst[min_idx] = lst[max_idx];\n        lst[max_idx] = min;\n\
    \        min = lst[min_idx];\n        max = lst[max_idx];\n        min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n        max_idx = lst.iter().position(|x| *x == max).unwrap();\n\
    \    }\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpww2dypga.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpww2dypga.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpww2dypga.rs:19:24\n   |\n19 |         lst[max_idx] = min;\n\
    \   |         ------------   ^^^ expected `isize`, found `&isize`\n   |      \
    \   |\n   |         expected due to the type of this binding\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n19 |         lst[max_idx] = *min;\n   |    \
    \                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpww2dypga.rs:20:15\n\
    \   |\n13 |     let mut min = lst.iter().min().unwrap();\n   |               \
    \    ------------------------- expected due to this value\n...\n20 |         min\
    \ = lst[min_idx];\n   |               ^^^^^^^^^^^^\n   |               |\n   |\
    \               expected `&isize`, found `isize`\n   |               help: consider\
    \ borrowing here: `&lst[min_idx]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpww2dypga.rs:21:15\n\
    \   |\n14 |     let mut max = lst.iter().max().unwrap();\n   |               \
    \    ------------------------- expected due to this value\n...\n21 |         max\
    \ = lst[max_idx];\n   |               ^^^^^^^^^^^^\n   |               |\n   |\
    \               expected `&isize`, found `isize`\n   |               help: consider\
    \ borrowing here: `&lst[max_idx]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpww2dypga.rs:2"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: -1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    while min_value != max_value {\n        sorted_list.push(min_value);\n\
    \        min_value = min_value - 1;\n        max_value = max_value + 1;\n    }\n\
    \    sorted_list.push(max_value);\n    sorted_list\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010627
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7oqpd5_k.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 | \n117 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n130 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7oqpd5_k.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut current = min;\n    while current != max {\n        result.push(current);\n\
    \        current = lst.iter().find(|&x| x == current).unwrap();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps_67aixx.rs:20:5\n   |\n\
    11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n20 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = vec![];\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    for i in 0..lst.len() {\n        if lst[i] < min_value {\n   \
    \         sorted_list.push(min_value);\n            min_value = lst[i];\n    \
    \    } else if lst[i] > max_value {\n            sorted_list.push(max_value);\n\
    \            max_value = lst[i];\n        } else {\n            sorted_list.push(lst[i]);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `lst`\n   --> /tmp/tmpqevh0syt.rs:23:17\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for el in lst {\n    | \
    \              --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    23  |     for i in 0..lst.len() {\n    |                 ^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for el in &lst\
    \ {\n    |               +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    sorted_list.sort();\n    sorted_list\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3osj0gyl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for x in\
    \ lst {\n        if x < min_value {\n            min_value = x;\n        }\n \
    \       if x > max_value {\n            max_value = x;\n        }\n    }\n   \
    \ let mut min_idx = 1;\n    let mut max_idx = 1;\n    while min_idx < lst.len()\
    \ {\n        if lst[min_idx] > max_value {\n            result.push(min_value);\n\
    \            min_idx += 1;\n        } else {\n            result.push(max_value);\n\
    \            max_idx += 1;\n        }\n    }\n    while max_idx < lst.len() {\n\
    \        result.push(max_value);\n        max_idx += 1;\n    }\n    while min_idx\
    \ < lst.len() {\n        result.push(min_value);\n        min_idx += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `lst`\n   --> /tmp/tmph4gvhp4y.rs:25:21\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for x in lst {\n    |  \
    \            --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    25  |     while min_idx < lst.len() {\n    |                     ^^^^^^^^^ value\
    \ borrowed here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `lst`\nhelp: consider iterating over a slice of\
    \ the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n15  |\
    \     for x in &lst {\n    |              +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for el\
    \ in lst {\n        if el < min_value {\n            min_value = el;\n       \
    \ }\n        if el > max_value {\n            max_value = el;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    for el in lst {\n        if el < min_value {\n            min_value\
    \ = el;\n        }\n        if el > max_value {\n            max_value = el;\n\
    \        }\n    }\n    for el in lst {\n        if el < min_value {\n        \
    \    min_value = el;\n        }\n        if el > max_value {\n            max_value\
    \ = el;\n        }\n    }\n    for el in lst {\n        if el < min_value {\n\
    \            min_value = el;\n        }\n        if el > max_value {\n       \
    \     max_value = el;\n        }\n    }\n    for el in lst {\n        if el <\
    \ min_value {\n            min_value = el;\n        }\n        if el > max_value\
    \ {\n            max_value = el;\n        }\n    }\n    for el in lst {\n    \
    \    if el < min_value {\n            min_value = el;\n        }\n        if el\
    \ > max_value {\n            max_value = el;\n        }\n    }\n    for el in\
    \ lst {\n        if el < min_value {\n            min_value = el;\n        }\n\
    \        if el > max_value {\n            max_value = el;\n        }\n    }\n\
    \    for el in lst {\n        if el < min_value {\n            min_value = el;\n\
    \        }\n        if el > max_value {\n            max_value = el;\n       \
    \ }\n    }\n    for el in lst {\n        if el < min_value {\n            min_value\
    \ = el;\n        }\n        if el > max_value {\n            max_value = el;\n\
    \        }\n    }\n    for el in lst {\n        if el < min_value {\n        \
    \    min_value = el;\n        }\n        if el > max_value {\n            max_value\
    \ = el;\n        }\n    }\n    for el in lst {\n        if el < min_value {\n\
    \            min_value = el;\n        }\n        if el > max_value {\n       \
    \     max_value = el;\n        }\n    }\n    for el in lst {\n        if el <\
    \ min_value {\n            min_value = el;\n        }\n        if el > max_value\
    \ {\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp740mk7cv.rs:131:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    113 |     for el in lst {\n    |                   - unclosed delimiter\n...\n\
    117 |         if el > max_value {\n    |                           - this delimiter\
    \ might not be properly closed...\n118 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n131 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmp740mk7cv.rs:113:5\n    |\n11  |   fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    |                                         \
    \   ---------- expected `Vec<isize>` because of return type\n...\n113 | /    \
    \ for el in lst {\n114 | |         if el < min_value {\n115 | |             min_value\
    \ = el;\n116 | |         }\n...   |\n130 | |     assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n131 | | }\n    | |__^ expected struct `Vec`, found `()`\n  \
    \  |\n    = note: expected struct `Vec<isize>`\n            found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    sorted_list.sort();\n    sorted_list\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3osj0gyl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = vec![];\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if \n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpif63ow7p.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 |         if \n117 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n130 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n   --> /tmp/tmpif63ow7p.rs:117:1\n    |\n117 | }\n  \
    \  | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpif63ow7p.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7oqpd5_k.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 | \n117 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n130 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7oqpd5_k.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    sorted_list.sort();\n    sorted_list\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3osj0gyl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::<isize>::new();\n    let mut min_value = lst[0];\n    let mut max_value\
    \ = lst[0];\n    for value in lst {\n        if value < min_value {\n        \
    \    min_value = value;\n        }\n        if value > max_value {\n         \
    \   max_value = value;\n        }\n    }\n    if min_value == max_value {\n  \
    \      sorted_list.push(min_value);\n    } else {\n        let mut min_value =\
    \ min_value;\n        let mut max_value = max_value;\n        for value in lst\
    \ {\n            if value < min_value {\n                min_value = value;\n\
    \            }\n            if value > max_value {\n                max_value\
    \ = value;\n            }\n        }\n        sorted_list.push(min_value);\n \
    \       sorted_list.push(max_value);\n    }\n    sorted_list\n}\n\nfn main() {\n\
    \    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmphylkpr4j.rs:28:22\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n28  |         for value in lst {\n    |                      ^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for el\
    \ in lst {\n        if el < min_value {\n            min_value = el;\n       \
    \ }\n        if el > max_value {\n            max_value = el;\n        }\n   \
    \ }\n    for el in lst {\n        if el == min_value {\n            result.push(max_value);\n\
    \            result.push(el);\n            result.push(min_value);\n        }\
    \ else {\n            result.push(el);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmptiimgvrg.rs:23:15\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for el in lst {\n    | \
    \              --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    23  |     for el in lst {\n    |               ^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n15  |     for el in &lst {\n    | \
    \              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx < max_idx\
    \ {\n        let tmp = min;\n        min = max;\n        max = tmp;\n        min_idx\
    \ = lst.iter().position(|x| x == min).unwrap();\n        max_idx = lst.iter().position(|x|\
    \ x == max).unwrap();\n    }\n    lst.iter_mut().for_each(|x| {\n        if x\
    \ == min {\n            *x = max;\n        } else {\n            *x = min;\n \
    \       }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprrsn19u9.rs:26:18\n   |\n\
    26 |             *x = max;\n   |             --   ^^^ expected `isize`, found\
    \ `&isize`\n   |             |\n   |             expected due to the type of this\
    \ binding\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |         \
    \    *x = *max;\n   |                  +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmprrsn19u9.rs:28:18\n   |\n28 |             *x = min;\n   |      \
    \       --   ^^^ expected `isize`, found `&isize`\n   |             |\n   |  \
    \           expected due to the type of this binding\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n28 |             *x = *min;\n   |                  +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    while min_idx <\
    \ max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx = lst.iter().position(|x| *x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    }\n    lst.sort();\n   \
    \ lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4rinsq3p.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4rinsq3p.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4rinsq3p.rs:21:49\n   |\n21 |         min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n21 |         min_idx = lst.iter().position(|x| *x == *min).unwrap();\n\
    \   |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4rinsq3p.rs:22:49\n   |\n22 |         max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n22 |         max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                 +\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        lst[min_idx] = lst[max_idx];\n        lst[max_idx] = min;\n\
    \        min = min.wrapping_add(max.wrapping_sub(min).unwrap());\n        min_idx\
    \ = lst.iter().position(|x| *x == min).unwrap();\n        max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n    }\n    lst\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbpspxei.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfbpspxei.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfbpspxei.rs:19:24\n   |\n19 |         lst[max_idx] = min;\n\
    \   |         ------------   ^^^ expected `isize`, found `&isize`\n   |      \
    \   |\n   |         expected due to the type of this binding\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n19 |         lst[max_idx] = *min;\n   |    \
    \                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfbpspxei.rs:20:49\n\
    \   |\n20 |         min = min.wrapping_add(max.wrapping_sub(min).unwrap());\n\
    \   |                                                 ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |        \
    \ min = min.wrapping_add(max.wrapping_sub(*min).unwrap());\n   |             \
    \                                    +\n\nerror[E0599]: no method named `unwrap`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpfbpspxei.rs:20:54\n\
    \   |\n20 |         min = min.wrapping_add(max.wrapping_sub(min).unwrap());\n\
    \   |                                                      ^^^^^^ method not found\
    \ in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfbpspxei.rs:20:15\n\
    \   |\n13 |     let mut min = lst.iter().min().unwrap();\n   |               \
    \    ------------------------- expected du"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    for value in lst {\n        if value < min_value\
    \ {\n            sorted_list.push(value);\n        }\n        if value > max_value\
    \ {\n            sorted_list.push(value);\n        }\n    }\n    for value in\
    \ lst {\n        if value < max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value > min_value {\n  \
    \          sorted_list.push(value);\n        }\n    }\n    sorted_list\n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpar725ggo.rs:23:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n23  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror[E0382]: use of moved value: `lst`\n  -->\
    \ /tmp/tmpar725ggo.rs:31:18\n   |\n11 | fn strange_sort_list(lst: Vec<isize>)\
    \ -> Vec<isize> {\n   |                      --- move occurs because `lst` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n23 |    \
    \ for value in lst {\n   |                  --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n31 |     for value in lst {\n   |             \
    \     ^^^ value used here after move\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n23\
    \ |     for value in &lst {\n   |                  +\n\nerror[E0382]: use of moved\
    \ value: `lst`\n  --> /tmp/tmpar725ggo.rs:36:18\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |                      --- move occurs because\
    \ `lst` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n\
    31 |     for value in lst {\n   |                  --- `lst` moved due to this\
    \ implicit call to `.into_iter()`\n...\n36 |     for value in lst {\n   |    \
    \              ^^^ value used here after move\n   |\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \   |\n31 |     for value in &lst {\n   |                  +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: -1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut tmp;\n  \
    \  while min_idx != max_idx {\n        tmp = min;\n        min = max;\n      \
    \  max = tmp;\n        min_idx = lst.iter().position(|x| x == min).unwrap();\n\
    \        max_idx = lst.iter().position(|x| x == max).unwrap();\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010627
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        lst[min_idx] = lst[max_idx];\n        lst[max_idx] = min;\n\
    \        min = lst[min_idx];\n        max = lst[max_idx];\n        min_idx = lst.iter().position(|x|\
    \ x == min).unwrap();\n        max_idx = lst.iter().position(|x| x == max).unwrap();\n\
    \    }\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp16i9iana.rs:19:24\n   |\n\
    19 |         lst[max_idx] = min;\n   |         ------------   ^^^ expected `isize`,\
    \ found `&isize`\n   |         |\n   |         expected due to the type of this\
    \ binding\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |         lst[max_idx]\
    \ = *min;\n   |                        +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp16i9iana.rs:20:15\n   |\n13 |     let mut min = lst.iter().min().unwrap();\n\
    \   |                   ------------------------- expected due to this value\n\
    ...\n20 |         min = lst[min_idx];\n   |               ^^^^^^^^^^^^\n   | \
    \              |\n   |               expected `&isize`, found `isize`\n   |  \
    \             help: consider borrowing here: `&lst[min_idx]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp16i9iana.rs:21:15\n   |\n14 |     let mut max\
    \ = lst.iter().max().unwrap();\n   |                   -------------------------\
    \ expected due to this value\n...\n21 |         max = lst[max_idx];\n   |    \
    \           ^^^^^^^^^^^^\n   |               |\n   |               expected `&isize`,\
    \ found `isize`\n   |               help: consider borrowing here: `&lst[max_idx]`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    sorted_list.push(min_value);\n    sorted_list.push(max_value);\n\
    \    for value in lst {\n        if value < min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpxwdt8m74.rs:25:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    let mut min_idx\
    \ = min_idx as usize;\n    let mut max_idx = max_idx as usize;\n    let mut min_idx2\
    \ = min_idx as usize;\n    let mut max_idx2 = max_idx as usize;\n    let mut min_idx3\
    \ = min_idx as usize;\n    let mut max_idx3 = max_idx as usize;\n    let mut min_idx4\
    \ = min_idx as usize;\n    let mut max_idx4 = max_idx as usize;\n    let mut min_idx5\
    \ = min_idx as usize;\n    let mut max_idx5 = max_idx as usize;\n    let mut min_idx6\
    \ = min_idx as usize;\n    let mut max_idx6 = max_idx as usize;\n    let mut min_idx7\
    \ = min_idx as usize;\n    let mut max_idx7 = max_idx as usize;\n    let mut min_idx8\
    \ = min_idx as usize;\n    let mut max_idx8 = max_idx as usize;\n    let mut min_idx9\
    \ = min_idx as usize;\n    let mut max_idx9 = max_idx as usize;\n    let mut min_idx10\
    \ = min_idx as usize;\n    let mut max_idx10 = max_idx as usize;\n    let mut\
    \ min_idx11 = min_idx as usize;\n    let mut max_idx11 = max_idx as usize;\n \
    \   let mut min_idx12 = min_idx as usize;\n    let mut max_idx12 = max_idx as\
    \ usize;\n    let mut min_idx13 = min_idx as usize;\n    let mut max_idx13 = max_idx\
    \ as usize;\n    let mut min_idx14 = min_idx as usize;\n    let mut max_idx14\
    \ = max_idx as usize;\n    let mut min_idx15 = min_idx as usize;\n    let mut\
    \ max_idx15 = max_idx as usize;\n    let mut min_idx16 = min_idx as usize;\n \
    \   let mut max_idx16 = max_idx as usize;\n    let mut min_idx17 = min_idx as\
    \ usize;\n    let mut max_idx17 = max_idx as usize;\n    let mut min_idx18 = min_idx\
    \ as usize;\n    let mut max_idx18 = max_\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuhx8s1ig.rs:52:29\n   |\n\
    52 |     let mut max_idx18 = max_\n   |                             ^ help: add\
    \ `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `max_` in this scope\n  --> /tmp/tmpuhx8s1ig.rs:52:25\n   |\n52 |     let mut\
    \ max_idx18 = max_\n   |                         ^^^^ help: a local variable with\
    \ a similar name exists: `max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuhx8s1ig.rs:15:53\n\
    \   |\n15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n\
    \   |                                                     ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \   let mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |    \
    \                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuhx8s1ig.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuhx8s1ig.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for value\
    \ in lst {\n        if value < min_value {\n            min_value = value;\n \
    \       }\n        if value > max_value {\n            max_value = value;\n  \
    \      }\n    }\n    for value in lst {\n        if value < min_value {\n    \
    \        result.push(value);\n        }\n        if value > max_value {\n    \
    \        result.push(value);\n        }\n    }\n    for value in lst {\n     \
    \   if value < max_value {\n            result.push(value);\n        }\n    }\n\
    \    for value in lst {\n        if value > min_value {\n            result.push(value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp7p4jqnfr.rs:23:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n23  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror[E0382]: use of moved value: `lst`\n  -->\
    \ /tmp/tmp7p4jqnfr.rs:31:18\n   |\n11 | fn strange_sort_list(lst: Vec<isize>)\
    \ -> Vec<isize> {\n   |                      --- move occurs because `lst` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n23 |    \
    \ for value in lst {\n   |                  --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n31 |     for value in lst {\n   |             \
    \     ^^^ value used here after move\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n23\
    \ |     for value in &lst {\n   |                  +\n\nerror[E0382]: use of moved\
    \ value: `lst`\n  --> /tmp/tmp7p4jqnfr.rs:36:18\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |                      --- move occurs because\
    \ `lst` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n\
    31 |     for value in lst {\n   |                  --- `lst` moved due to this\
    \ implicit call to `.into_iter()`\n...\n36 |     for value in lst {\n   |    \
    \              ^^^ value used here after move\n   |\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \   |\n31 |     for value in &lst {\n   |                  +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx + (min - min_idx);\n    let mut max_idx = max_idx + (max - max_idx);\n\
    \    let mut i = min_idx;\n    while i < max_idx {\n        let mut j = i;\n \
    \       while j < max_idx && lst[j] < min {\n            j += 1\n        }\n \
    \       let mut k = i;\n        while k < max_idx && lst[k] > max {\n        \
    \    k += 1\n        }\n        lst[i] = lst[k];\n        lst[k] = lst[j];\n \
    \       i += 1;\n        j += 1;\n        k += 1;\n    }\n    lst\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprp0o1m5w.rs:17:40\n   |\n\
    17 |     let mut min_idx = min_idx + (min - min_idx);\n   |                  \
    \                      ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot subtract `usize` from `&isize`\n  --> /tmp/tmprp0o1m5w.rs:17:38\n   |\n\
    17 |     let mut min_idx = min_idx + (min - min_idx);\n   |                  \
    \                    ^ no implementation for `&isize - usize`\n   |\n   = help:\
    \ the trait `Sub<usize>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprp0o1m5w.rs:17:33\n   |\n17 |     let mut min_idx = min_idx\
    \ + (min - min_idx);\n   |                                 ^^^^^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmprp0o1m5w.rs:17:31\n   |\n17 |     let mut min_idx = min_idx + (min -\
    \ min_idx);\n   |                               ^ no implementation for `usize\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprp0o1m5w.rs:18:40\n   |\n18 |     let mut max_idx\
    \ = max_idx + (max - max_idx);\n   |                                        ^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from\
    \ `&isize`\n  --> /tmp/tmprp0o1m5w.rs:18:38\n   |\n18 |     l"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    sorted_list.sort();\n    sorted_list\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3osj0gyl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = vec![];\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    for value in lst {\n        if value < min_value\
    \ {\n            sorted_list.push(value);\n        }\n        if value > max_value\
    \ {\n            sorted_list.push(value);\n        }\n    }\n    for value in\
    \ lst {\n        if value < min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_\n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpdtmm6vx8.rs:137:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    119 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n...\n124 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n137 | }\n    |   ^\n\nerror: expected `{`, found\
    \ `}`\n   --> /tmp/tmpdtmm6vx8.rs:124:1\n    |\n123 |         if value > max_\n\
    \    |         -- this `if` expression has a condition, but no block\n124 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdtmm6vx8.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp9h0_gvbx.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut mid = lst.iter().skip(1).take(2).min().unwrap();\n    while min !=\
    \ max {\n        res.push(mid);\n        min = mid;\n        mid = lst.iter().skip(1).take(2).min().unwrap();\n\
    \    }\n    res.push(mid);\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp89hciyr2.rs:22:5\n   |\n\
    11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n22 |     res\n   |     ^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for x in\
    \ lst {\n        if x < min_value {\n            min_value = x;\n        }\n \
    \       if x > max_value {\n            max_value = x;\n        }\n    }\n   \
    \ let mut lst = lst.to_vec();\n    lst.sort();\n    lst.insert(0, min_value);\n\
    \    lst.insert(0, max_value);\n    lst\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmphe714vf_.rs:12:9\n\
    \   |\n12 |     let mut lst = lst.to_vec();\n   |         ----^^^\n   |      \
    \   |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `lst`\n   --> /tmp/tmphe714vf_.rs:23:19\n\
    \    |\n12  |     let mut lst = lst.to_vec();\n    |         ------- move occurs\
    \ because `lst` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    ...\n15  |     for x in lst {\n    |              --- `lst` moved due to this\
    \ implicit call to `.into_iter()`\n...\n23  |     let mut lst = lst.to_vec();\n\
    \    |                   ^^^^^^^^^^^^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `lst`\n\
    \    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n15  |     for x in &lst {\n    |              +\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut mid = lst.iter().skip(1).take(2).min().unwrap();\n    while !lst.is_empty()\
    \ {\n        if *lst.iter().min().unwrap() < *mid {\n            res.push(mid);\n\
    \            mid = mid.saturating_add(1);\n        } else {\n            res.push(min);\n\
    \            min = min.saturating_add(1);\n        }\n        if *max < *mid {\n\
    \            res.push(mid);\n            mid = mid.saturating_add(1);\n      \
    \  } else {\n            res.push(max);\n            max = max.saturating_add(1);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp10d660i.rs:19:19\n   |\n\
    15 |     let mut mid = lst.iter().skip(1).take(2).min().unwrap();\n   |      \
    \             ----------------------------------------- expected due to this value\n\
    ...\n19 |             mid = mid.saturating_add(1);\n   |                   ^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&mid.saturating_add(1)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp10d660i.rs:22:19\n   |\n13 |\
    \     let mut min = lst.iter().min().unwrap();\n   |                   -------------------------\
    \ expected due to this value\n...\n22 |             min = min.saturating_add(1);\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^\n   |                   |\n   |\
    \                   expected `&isize`, found `isize`\n   |                   help:\
    \ consider borrowing here: `&min.saturating_add(1)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp10d660i.rs:26:19\n   |\n15 |     let mut mid = lst.iter().skip(1).take(2).min().unwrap();\n\
    \   |                   ----------------------------------------- expected due\
    \ to this value\n...\n26 |             mid = mid.saturating_add(1);\n   |    \
    \               ^^^^^^^^^^^^^^^^^^^^^\n   |                   |\n   |        \
    \           expected `&isize`, found `isize`\n   |                   help: consider\
    \ borrowing here: `&mid.saturating_add(1)`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpp10d660i.rs:29:19\n   |\n14 |     let mut max = lst.iter().max().unwrap();\n\
    \   |                   ------------------------- expected due to this value\n\
    ...\n29 |             max = max.saturating_add(1);\n   |                   ^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&max.saturating_add(1)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp10d660i.rs:32:5\n   |\n11 | fn\
    \ strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                       ---------- e"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        res.push(min);\n        min = lst.iter().nth(min_idx).unwrap();\n\
    \        min_idx = lst.iter().position(|x| x == min).unwrap();\n    }\n    res.push(max);\n\
    \    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm3vbb473.rs:23:5\n   |\n\
    11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n23 |     res\n   |     ^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = lst;\n    let mut min_value = sorted_list[0];\n    let mut max_value = sorted_list[0];\n\
    \    for value in sorted_list.iter().rev() {\n        if value < min_value {\n\
    \            min_value = value;\n        }\n        if value > max_value {\n \
    \           max_value = value;\n        }\n    }\n    let mut new_list = vec![];\n\
    \    for value in sorted_list.iter() {\n        if value < min_value {\n     \
    \       new_list.push(value);\n        }\n        if value > max_value {\n   \
    \         new_list.push(value);\n        }\n    }\n    new_list\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpld_ojktp.rs:16:20\n   |\n\
    16 |         if value < min_value {\n   |                    ^^^^^^^^^\n   | \
    \                   |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&min_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpld_ojktp.rs:17:25\n   |\n13 |     let mut min_value\
    \ = sorted_list[0];\n   |                         -------------- expected due\
    \ to this value\n...\n17 |             min_value = value;\n   |              \
    \           ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n17 |             min_value = *value;\n   |               \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpld_ojktp.rs:19:20\n\
    \   |\n19 |         if value > max_value {\n   |                    ^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpld_ojktp.rs:20:25\n   |\n14 |     let mut max_value\
    \ = sorted_list[0];\n   |                         -------------- expected due\
    \ to this value\n...\n20 |             max_value = value;\n   |              \
    \           ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n20 |             max_value = *value;\n   |               \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpld_ojktp.rs:25:20\n\
    \   |\n25 |         if value < min_value {\n   |                    ^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&min_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpld_ojktp.rs:28:20\n   |\n28 |         if value\
    \ > max_value {\n   |                    ^^^^^^^^^\n   |                    |\n\
    \   |                    expected `&isize`, found `isize`\n   |              \
    \      help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpld_ojktp.rs:32:5\n   |"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_owned();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx2\
    \ = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx2 = lst.iter().position(|x|\
    \ x == max).unwrap();\n    while min_idx != max_idx {\n        if min_idx2 ==\
    \ max_idx2 {\n            lst.swap(min_idx, max_idx);\n            min_idx = lst.iter().position(|x|\
    \ x == min).unwrap();\n            max_idx = lst.iter().position(|x| x == max).unwrap();\n\
    \            min_idx2 = lst.iter().position(|x| x == min).unwrap();\n        \
    \    max_idx2 = lst.iter().position(|x| x == max).unwrap();\n        } else {\n\
    \            lst.swap(min_idx, max_idx);\n            min_idx = lst.iter().position(|x|\
    \ x == min).unwrap();\n            max_idx = lst.iter().position(|x| x == max).unwrap();\n\
    \            min_idx2 = lst.iter().position(|x| x == min).unwrap();\n        \
    \    max_idx2 = lst.iter().position(|x| x == max).unwrap();\n        }\n    }\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp87kcasya.rs:13:9\n\
    \   |\n13 |     let mut min = lst.iter().min().unwrap();\n   |         ----^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp87kcasya.rs:14:9\n\
    \   |\n14 |     let mut max = lst.iter().max().unwrap();\n   |         ----^^^\n\
    \   |         |\n   |         help: remove this `mut`\n\nerror[E0502]: cannot\
    \ borrow `lst` as mutable because it is also borrowed as immutable\n  --> /tmp/tmp87kcasya.rs:21:13\n\
    \   |\n13 |     let mut min = lst.iter().min().unwrap();\n   |               \
    \    ---------- immutable borrow occurs here\n...\n21 |             lst.swap(min_idx,\
    \ max_idx);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs\
    \ here\n22 |             min_idx = lst.iter().position(|x| x == min).unwrap();\n\
    \   |                                                    --- immutable borrow\
    \ later captured here by closure\n\nerror[E0502]: cannot borrow `lst` as mutable\
    \ because it is also borrowed as immutable\n  --> /tmp/tmp87kcasya.rs:27:13\n\
    \   |\n13 |     let mut min = lst.iter().min().unwrap();\n   |               \
    \    ---------- immutable borrow occurs here\n...\n27 |             lst.swap(min_idx,\
    \ max_idx);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs\
    \ here\n28 |             min_idx = lst.iter().position(|x| x == min).unwrap();\n\
    \   |                                                    --- immutable borrow\
    \ later captured here by closure\n\nerror: aborting due to 2 previous errors;\
    \ 2 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0502`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for v in lst {\n        if v < min_value {\n            min_value = v;\n\
    \        }\n        if v > max_value {\n            max_value = v;\n        }\n\
    \    }\n    for v in lst {\n        if v == min_value {\n            sorted_list.push(max_value);\n\
    \        } else {\n            sorted_list.push(min_value);\n            sorted_list.push(v);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpjt5jk2jk.rs:23:14\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for v in lst {\n    |  \
    \            --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    23  |     for v in lst {\n    |              ^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n15  |     for v in &lst {\n    |  \
    \            +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx = lst.iter().position(|x| *x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    }\n    lst.sort();\n   \
    \ lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu8as4287.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpu8as4287.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu8as4287.rs:21:49\n   |\n21 |         min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n21 |         min_idx = lst.iter().position(|x| *x == *min).unwrap();\n\
    \   |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu8as4287.rs:22:49\n   |\n22 |         max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n22 |         max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                 +\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx + (min - 1);\n    let mut max_idx = max_idx + (max - 1);\n    while\
    \ min_idx < max_idx {\n        result.push(lst.swap_remove(min_idx).unwrap());\n\
    \        min_idx += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8wtlbi92.rs:17:33\n   |\n\
    17 |     let mut min_idx = min_idx + (min - 1);\n   |                        \
    \         ^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add\
    \ `isize` to `usize`\n  --> /tmp/tmp8wtlbi92.rs:17:31\n   |\n17 |     let mut\
    \ min_idx = min_idx + (min - 1);\n   |                               ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8wtlbi92.rs:18:33\n\
    \   |\n18 |     let mut max_idx = max_idx + (max - 1);\n   |                 \
    \                ^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add `isize` to `usize`\n  --> /tmp/tmp8wtlbi92.rs:18:31\n   |\n18 |     let\
    \ mut max_idx = max_idx + (max - 1);\n   |                               ^ no\
    \ implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0599]: no method named `unwrap` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp8wtlbi92.rs:20:46\n   |\n20 |  \
    \       result.push(lst.swap_remove(min_idx).unwrap());\n   |                \
    \                              ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for el\
    \ in lst {\n        if el < min_value {\n            min_value = el;\n       \
    \ }\n        if el > max_value {\n            max_value = el;\n        }\n   \
    \ }\n    for el in lst {\n        if el == min_value {\n            result.push(max_value);\n\
    \            result.push(el);\n            result.push(min_value);\n        }\
    \ else {\n            result.push(el);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmptiimgvrg.rs:23:15\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for el in lst {\n    | \
    \              --- `lst` moved due to this implicit call to `.into_iter()`\n...\n\
    23  |     for el in lst {\n    |               ^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n15  |     for el in &lst {\n    | \
    \              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmjckeyi2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx2\
    \ = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx2 = lst.iter().position(|x|\
    \ x == max).unwrap();\n    let mut min_idx3 = lst.iter().position(|x| x == min).unwrap();\n\
    \    let mut max_idx3 = lst.iter().position(|x| x == max).unwrap();\n    let mut\
    \ min_idx4 = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx4\
    \ = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx5 = lst.iter().position(|x|\
    \ x == min).unwrap();\n    let mut max_idx5 = lst.iter().position(|x| x == max).unwrap();\n\
    \    let mut min_idx6 = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx6 = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx7\
    \ = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx7 = lst.iter().position(|x|\
    \ x == max).unwrap();\n    let mut min_idx8 = lst.iter().position(|x| x == min).unwrap();\n\
    \    let mut max_idx8 = lst.iter().position(|x| x == max).unwrap();\n    let mut\
    \ min_idx9 = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx9\
    \ = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx10 = lst.iter().position(|x|\
    \ x == min).unwrap();\n    let mut max_idx10 = lst.iter().position(|x| x == max).unwrap();\n\
    \    let mut min_idx11 = lst.iter().position(|x| x == min).unwrap();\n    let\
    \ mut max_idx11 = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx12\
    \ = lst.iter().position(|x| x == min).unwrap();\n    let mut max_idx12 = lst.iter().position(|x|\
    \ x == max).unwrap();\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpurir0ecd.rs:11:42\n   |\n\
    11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.clone();\n\
    \    let mut min = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut i = min_idx;\n\
    \    while i != max_idx {\n        let tmp = lst[i];\n        lst[i] = lst[max_idx];\n\
    \        lst[max_idx] = tmp;\n        i += 1;\n        max_idx -= 1;\n    }\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpnkfcxj3y.rs:23:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010622
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 101
  program: "/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\n\
    fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3ntkwtle.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010621
