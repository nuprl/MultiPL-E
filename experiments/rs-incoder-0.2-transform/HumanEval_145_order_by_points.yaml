name: HumanEval_145_order_by_points
language: rs
prompt: "/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n\
  /// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\n\
  fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ["    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n   \
    \ for num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|num|\
    \ {\n        sum - num\n    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        index += 1;\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x.digits().sum()\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = 0;\n    let mut\
    \ min_idx = nums.len();\n    let mut max_sum = 0;\n    let mut max_idx = nums.len();\n\
    \    for i in 0..nums.len() {\n        sum += nums_copy[i];\n        if sum <\
    \ min_sum {\n            min_sum = sum;\n            min_idx = i;\n        }\n\
    \        if sum > max_sum {\n            max_sum = sum;\n            max_idx =\
    \ i;\n        }\n    }\n    nums_copy[min_idx] = nums[min_idx];\n    nums_copy[max_idx]\
    \ = nums[max_idx];\n    nums_copy", "    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    for &num in nums_sorted {\n        sum += num;\n  \
    \  }\n    nums_sorted.sort_by_key(|&num| {\n        sum - num\n    });\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted", "    let\
    \ mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n   \
    \ let mut nums_sum = 0;\n    let mut nums_index = 0;\n    while nums_index < nums_copy.len()\
    \ {\n        nums_sum += nums_copy[nums_index];\n        while nums_sum > 0 {\n\
    \            nums_sorted[nums_index] = nums_sum % 10;\n            nums_sum +=\
    \ nums_sum / 10;\n            nums_index += 1;\n        }\n    }\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n      \
    \  let mut sum = 0;\n        for x in nums_copy {\n            sum += x;\n   \
    \     }\n        sum\n    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut nums_sum: isize = 0;\n \
    \   let mut nums_index: usize = 0;\n    while nums_index < nums.len() {\n    \
    \    nums_sum += nums_copy[nums_index];\n        if nums_sum < 0 {\n         \
    \   nums_sum = 0;\n            nums_index += 1;\n        }\n        if nums_sum\
    \ > 0 {\n            nums_sorted.swap(nums_index, nums_sum);\n            nums_index\
    \ += 1;\n        }\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut i\
    \ = 0;\n    while i < nums_copy.len() {\n        sum += nums_copy[i];\n      \
    \  if sum > 0 {\n            nums_sorted.swap(i, nums_sorted.len() - 1);\n   \
    \     }\n        i += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in nums_copy\
    \ {\n            sum += x;\n        }\n        sum\n    });\n    nums_copy", " \
    \   let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum\
    \ = nums.iter().min().unwrap();\n    let mut max_sum = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx\
    \ = nums.iter().max_by_key(|&x| x).unwrap();\n\n    while let Some(idx) = min_idx\
    \ {\n        sum += nums_copy[idx];\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n            min_idx = idx;\n        }\n        idx += 1;\n    }\n\n\
    \    while let Some(idx) = max_idx {\n        sum += nums_copy[idx];\n       \
    \ if sum > max_sum {\n            max_sum = sum;\n            max_idx = idx;\n\
    \        }\n        idx += 1;\n    }\n\n    if min_sum < max_sum {\n        nums_copy.swap_remove(min_idx);\n\
    \        nums_copy.swap_remove(max_idx);\n    }\n\n    nums_copy", "    let mut\
    \ sorted_nums = Vec::<isize>::new();\n    let mut sum_of_digits = nums.iter().map(|x|\
    \ x.digits()).sum::<isize>();\n    let mut index = 0;\n    while sum_of_digits\
    \ > 0 {\n        if sum_of_digits % 10 == 0 {\n            sorted_nums.push(nums[index]);\n\
    \            index += 1;\n        }\n        sum_of_digits /= 10;\n    }\n   \
    \ sorted_nums", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums_copy.clone();\n    let mut nums_sorted_by_sum: Vec<isize> = Vec::new();\n\
    \    let mut nums_sorted_by_index: Vec<isize> = Vec::new();\n\n    while nums_sorted.len()\
    \ > 0 {\n        let mut min_sum: isize = 0;\n        let mut min_index: usize\
    \ = 0;\n        for &num in nums_sorted {\n            let sum = num % 10;\n \
    \           if sum < min_sum {\n                min_sum = sum;\n             \
    \   min_index = num;\n            }\n        }\n        nums_sorted_by_sum.push(min_sum);\n\
    \        nums_sorted_by_index.push(min_index);\n        nums_sorted.remove(min_index);\n\
    \    }\n\n    nums_sorted_by_sum", "    let mut nums_copy = nums.clone();\n  \
    \  nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in nums_copy\
    \ {\n            sum += x;\n        }\n        sum\n    });\n    nums_copy", " \
    \   let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut min_sum = 0;\n    let mut max_sum = 0;\n  \
    \  let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    while nums_sorted.len() > 0 {\n        sum += nums_sorted.pop();\n      \
    \  if sum < min_sum {\n            min_sum = sum;\n            min_idx = nums_sorted.len()\
    \ - 1;\n        }\n        if sum > max_sum {\n            max_sum = sum;\n  \
    \          max_idx = nums_sorted.len() - 1;\n        }\n    }\n    nums_sorted.sort_by_key(|&x|\
    \ {\n        let mut y = x;\n        y += 1;\n        y - x;\n    });\n    nums_sorted.reverse();\n\
    \    nums_sorted.push(min_idx);\n    nums_sorted.push(max_idx);\n    nums_sorted.reverse();\n\
    \    nums_sorted", "    let mut nums_sorted = nums.clone();\n    let mut sum =\
    \ 0;\n    for &num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|&num|\
    \ {\n        sum - num\n    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in nums_copy\
    \ {\n            sum += x;\n        }\n        sum\n    });\n    nums_copy", " \
    \   let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        index += 1;\n    }\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x;\n    });\n    nums_copy", "    nums.sort_by_key(|x| {\n\
    \        let mut sum = 0;\n        for &d in &x {\n            sum += d as isize;\n\
    \        }\n        sum\n    });\n    nums", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \        index += 1;\n    }\n    nums_sorted", "    let mut sorted_nums = nums.clone();\n\
    \    sorted_nums.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in\
    \ &mut sorted_nums {\n            sum += *x;\n        }\n        sum\n    });\n\
    \    sorted_nums", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x == sum).unwrap());\n        index += 1;\n\
    \    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n    \
    \    sum += nums_copy[index];\n        index += 1;\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x.to_digits().unwrap().sum()\n    });\n    nums_copy", "  \
    \  let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_sorted.len()\
    \ {\n        sum += nums_sorted[index];\n        match sum {\n            0 =>\
    \ nums_sorted.swap_remove(index),\n            x => index += 1,\n        }\n \
    \   }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x == sum).unwrap());\n        index += 1;\n\
    \    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut\
    \ nums_sorted = nums_copy.clone();\n    let mut sum = 0;\n    let mut i = 0;\n\
    \    while i < nums_copy.len() {\n        sum += nums_copy[i];\n        i += 1;\n\
    \    }\n    while i < nums_copy.len() {\n        let mut j = i;\n        while\
    \ j < nums_copy.len() && nums_copy[j] == sum {\n            sum += nums_copy[j];\n\
    \            j += 1;\n        }\n        nums_sorted.swap(i, j);\n        i +=\
    \ 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        index += 1;\n    }\n    let mut nums_copy\
    \ = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        sum - x.to_digits().unwrap().sum()\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < nums_copy.len() {\n        sum += nums_copy[i];\n        nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x == sum).unwrap());\n        i += 1;\n   \
    \ }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n    let mut\
    \ min_sum = 0;\n    let mut max_index = -1;\n    let mut min_index = -1;\n   \
    \ for i in nums_copy.iter() {\n        sum += *i;\n        if sum > max_sum {\n\
    \            max_sum = sum;\n            max_index = i;\n        }\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n            min_index = i;\n  \
    \      }\n    }\n    for i in nums_sorted.iter_mut() {\n        *i = *max_index;\n\
    \    }\n    nums_sorted.swap_remove(max_index);\n    nums_sorted", "    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut min_sum = 0;\n    let mut\
    \ max_index = -1;\n    let mut min_index = -1;\n    let mut max_digit = 0;\n \
    \   let mut min_digit = 0;\n    let mut max_digits = Vec::new();\n    let mut\
    \ min_digits = Vec::new();\n    let mut max_digits_copy = max_digits.clone();\n\
    \    let mut min_digits_copy = min_digits.clone();\n    let mut max_digits_sorted\
    \ = max_digits.clone();\n    let mut min_digits_sorted = min_digits.clone();\n\
    \    let mut max_digits_copy = max_digits.clone();\n    let mut min_digits_copy\
    \ = min_digits.clone();\n    let mut max_digits_sorted = max_digits.clone();\n\
    \    let mut min_digits_sorted = min_digits.clone();\n    let mut max_digits_copy\
    \ = max_digits.clone();\n    let mut min_digits_copy = min_digits.clone();\n \
    \   let mut max_digits_sorted = max_digits.clone();\n    let mut min_digits_sorted\
    \ = min_digits.clone();\n    let mut max_digits_copy = max_digits.clone();\n \
    \   let mut min_digits_copy = min_digits.clone();\n    let mut max_digits_sorted\
    \ = max_digits.clone();\n    let mut min_digits_sorted = min_digits.clone();\n\
    \    let mut max_digits_copy = max_digits.clone();\n    let mut min_digits_copy\
    \ = min_digits.clone();\n    let mut max_digits_sorted = max_digits.clone();\n\
    \    let mut min_digits_sorted = min_digits.clone();\n    let mut max_digits_copy\
    \ = max_digits.clone();\n    let mut min_digits_copy = min_digits.clone();\n \
    \   let mut max_digits_sorted = max_digits.clone();\n    let mut min_digits_sorted\
    \ = min_digits.clone();\n    let mut max_digits_copy = max_digits.clone();\n \
    \   let mut min_digits_copy = min_digits.clone();\n    let mut max_digits_sorted\
    \ = max_digits.clone();\n    let mut min_digits_sorted = min_digits.clone();\n\
    \    let mut max_digits_copy = max_digits.clone();\n    let mut min_digits_copy\
    \ = min_digits.clone();\n    let mut max_digits_sorted = max_digits.clone();\n\
    \    let mut min_digits_sorted = min_digits.clone();\n    let mut max_digits_copy\
    \ = max_digits.clone();\n    let mut min_digits_copy = min_digits.clone();\n \
    \   let mut max_digits_sorted = max_digits.clone();\n    let mut min_digits_sorted\
    \ = min_digits.clone();\n    let mut max_digits_copy = ", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        index += 1;\n\
    \    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.digits().sum().unwrap()\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n    \
    \    sum += nums_copy[index];\n        index += 1;\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x;\n    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut max_sum\
    \ = 0;\n    let mut max_index = 0;\n    for i in nums_copy {\n        sum += i;\n\
    \        if sum > max_sum {\n            max_sum = sum;\n            max_index\
    \ = i;\n        }\n    }\n    for i in nums_copy {\n        if i != max_index\
    \ {\n            nums_sorted.swap(i, max_index);\n        }\n    }\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        index += 1; // increment index\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut digit = x.to_digits();\n        digit.iter().for_each(|&x|\
    \ {\n            sum += x;\n        });\n        sum\n    });\n    nums_copy",
  "    let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        let mut digit = 0;\n        while nums_copy[index] >= 10 {\n    \
    \        digit += nums_copy[index] / 10;\n            index += 1;\n        }\n\
    \        sum += digit;\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted", "    let\
    \ mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n   \
    \ let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted", "    let\
    \ mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for &n in &nums_copy {\n            sum += *n as isize;\n\
    \        }\n        sum\n    });\n    nums_copy", "    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    for &num in &nums_sorted {\n        sum += num;\n \
    \   }\n    nums_sorted.sort_by_key(|&num| {\n        sum - num\n    });\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        let digit = nums_copy[index]\
    \ / 10;\n        sum += digit;\n        if sum > 0 {\n            nums_copy[index]\
    \ -= digit * 10;\n        } else {\n            index += 1;\n        }\n    }\n\
    \    nums_copy.sort_by_key(|x| x.partial_cmp(&sum).unwrap());\n    nums_copy",
  "    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    for i in nums_sorted.iter()\
    \ {\n        sum += *i;\n        nums_sorted.swap(i, nums_sorted.iter().position(|&x|\
    \ x > sum).unwrap());\n    }\n    nums_sorted", "    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    for i in nums_sorted.iter() {\n        sum += *i;\n\
    \    }\n    for i in nums_sorted.iter_mut() {\n        *i -= sum;\n    }\n   \
    \ nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n\
    \    let mut index = 0;\n    while nums_copy.len() > 0 {\n        sum += nums_copy.remove(0);\n\
    \        if sum < 0 {\n            sum = 0;\n            index += 1;\n       \
    \ }\n    }\n    nums_copy.sort_by_key(|x| {\n        x.checked_mul(10).ok().unwrap_or(0)\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        sum += nums_copy[index];\n     \
    \   if sum < 0 {\n            sum = 0;\n            index += 1;\n        } else\
    \ {\n            nums_sorted[index] = sum;\n            index += 1;\n        \
    \    sum = 0;\n        }\n    }\n    nums_sorted", "    let mut sorted_nums =\
    \ nums.clone();\n    sorted_nums.sort_unstable_by_key(|x| {\n        let mut sum\
    \ = 0;\n        for x in &nums {\n            sum += *x;\n        }\n        sum\n\
    \    });\n    sorted_nums", "    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    for &i in\
    \ nums_copy {\n        sum += i;\n        if sum > max_sum {\n            max_sum\
    \ = sum;\n            max_index = i;\n        }\n    }\n    nums_copy.swap_remove(max_index);\n\
    \    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        if sum < 0 {\n\
    \            sum = 0;\n        }\n        if sum > 0 {\n            nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n        }\n        index\
    \ += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n   \
    \ let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \        index += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        index += 1; // increment index\n\
    \    }\n    nums_copy.sort_by_key(|x| {\n        sum - x;\n    });\n    nums_copy",
  "    let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums_copy.clone();\n\
    \    let mut sum = 0;\n    let mut min_sum = nums_copy[0];\n    let mut min_idx\
    \ = nums_copy.iter().min_by_key(|&x| {\n        sum += x;\n        sum\n    });\n\
    \    let mut max_sum = nums_copy[0];\n    let mut max_idx = nums_copy.iter().max_by_key(|&x|\
    \ {\n        sum += x;\n        sum\n    });\n    while let Some(idx) = min_idx.clone()\
    \ {\n        nums_sorted.swap(0, idx);\n        let mut min_sum = nums_copy[0];\n\
    \        let mut min_idx = nums_copy.iter().min_by_key(|&x| {\n            sum\
    \ += x;\n            sum\n        });\n        while let Some(idx) = min_idx.clone()\
    \ {\n            nums_sorted.swap(0, idx);\n            let mut max_sum = nums_copy[0];\n\
    \            let mut max_idx = nums_copy.iter().max_by_key(|&x| {\n          \
    \      sum += x;\n                sum\n            });\n        }\n    }\n   \
    \ while let Some(idx) = max_idx.clone() {\n        nums_sorted.swap(0, idx);\n\
    \        let mut max_sum = nums_copy[0];\n        let mut max_idx = nums_copy.iter().max_by_key(|&x|\
    \ {\n            sum += x;\n            sum\n        });\n        while let Some(idx)\
    \ = max_idx.clone() {\n            nums_sorted.swap(0, idx);\n            let\
    \ mut min_sum = nums_copy[0];\n            let mut min_idx = nums_copy.iter().min_by_key(|&x|\
    \ {\n                sum += x;\n                sum\n            });\n       \
    \ }\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let\
    \ mut nums_sorted = nums_copy.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_sorted.len() {\n        sum += nums_sorted[index];\n\
    \        let mut index = index + 1; // increment index\n        while index <\
    \ nums_sorted.len() {\n            if sum < 0 {\n                nums_sorted.swap(index,\
    \ nums_sorted.len() - 1);\n                nums_sorted.pop();\n              \
    \  sum -= nums_sorted[index];\n                index -= 1;\n            } else\
    \ if sum > 0 {\n                nums_sorted.swap(index, nums_sorted.len() - 1);\n\
    \                nums_sorted.pop();\n                sum -= nums_sorted[index];\n\
    \                index -= 1;\n            } else {\n                break;\n \
    \           }\n        }\n    }\n    nums_sorted", "    let mut nums_sorted =\
    \ nums.clone();\n    nums_sorted.sort_unstable_by_key(|x| {\n        let mut sum\
    \ = 0;\n        for &d in &nums_sorted {\n            sum += d;\n        }\n \
    \       sum\n    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while nums_sorted.len() > 0 {\n        sum += nums_sorted.pop();\n\
    \        if sum < 0 {\n            sum = 0;\n            index += 1;\n       \
    \ }\n        if index == nums_sorted.len() {\n            nums_sorted.push(nums_sorted.pop());\n\
    \        }\n    }\n    nums_sorted.reverse();\n    nums_sorted", "    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sorted = nums_sorted.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut nums_sorted = nums_sorted.sort_by_key(|&x| x.checked_add(x).unwrap());\n\
    \    nums_sorted.reverse();\n    nums_sorted.extend(nums_copy);\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n      \
    \  let mut sum = 0;\n        for x in nums_copy {\n            sum += x;\n   \
    \     }\n        sum\n    });\n    nums_copy", "    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    for num in nums_sorted {\n        sum += num;\n   \
    \ }\n    nums_sorted.sort_by_key(|x| sum + x);\n    nums_sorted", "    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums_copy.clone();\n  \
    \  let mut sum = 0;\n    let mut i = 0;\n    while i < nums_sorted.len() {\n \
    \       sum += nums_sorted[i];\n        while i < nums_sorted.len() && nums_sorted[i]\
    \ < sum {\n            i += 1;\n        }\n        nums_sorted.swap(i, nums_sorted.len()\
    \ - 1);\n        i += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums_copy.clone();\n    let mut sum = 0;\n    let mut\
    \ max_sum = 0;\n    let mut min_sum = 0;\n    let mut max_index = 0;\n    let\
    \ mut min_index = 0;\n    let mut i = 0;\n    while i < nums_copy.len() {\n  \
    \      sum += nums_copy[i];\n        if sum > max_sum {\n            max_sum =\
    \ sum;\n            max_index = i;\n        }\n        if sum < min_sum {\n  \
    \          min_sum = sum;\n            min_index = i;\n        }\n        i +=\
    \ 1;\n    }\n    nums_sorted.swap_remove(min_index);\n    nums_sorted.swap_remove(max_index);\n\
    \    nums_sorted", "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        let digit = nums_copy[index].unwrap();\n      \
    \  sum += digit;\n        index += 1; // skip the digit to compare with next one\n\
    \    }\n    nums_copy.sort_by_key(|x| {\n        let digit = x.unwrap();\n   \
    \     sum - digit\n    });\n    nums_copy", "    let mut nums_sorted = nums.clone();\n\
    \    nums_sorted.sort_by_key(|x| {\n        let mut sum = 0;\n        for &i in\
    \ &nums_sorted {\n            sum += i;\n        }\n        sum\n    });\n   \
    \ nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x == sum).unwrap());\n        index += 1;\n\
    \    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut sum =\
    \ 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n        sum\
    \ += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n         \
    \   index += 1;\n        } else {\n            nums_sorted.swap(index, nums_sorted.len());\n\
    \            index += 1;\n        }\n    }\n    nums_sorted", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut sum =\
    \ 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n        sum\
    \ += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted", "    let\
    \ mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        sum += nums_copy[index];\n     \
    \   index +=\n            match nums_copy[index] % 10 {\n                0 =>\
    \ 1,\n                1 => 2,\n                2 => 3,\n                3 => 4,\n\
    \                4 => 5,\n                5 => 6,\n                6 => 7,\n \
    \               7 => 8,\n                8 => 9,\n                _ => panic!(\"\
    Invalid input\"),\n            };\n    }\n    nums_copy.sort_by_key(|&x| sum -\
    \ x);\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut sum\
    \ = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n        sum\
    \ += nums_copy[index];\n        index += 1; // skip the digit\n        while index\
    \ < nums_copy.len() {\n            let digit = nums_copy[index];\n           \
    \ if digit < 0 {\n                nums_copy[index] = -digit;\n               \
    \ sum += -digit;\n                index += 1;\n            } else {\n        \
    \        break;\n            }\n        }\n        if sum < 0 {\n            nums_copy.swap(0,\
    \ index);\n            sum = -sum;\n        }\n    }\n    nums_copy", "    let\
    \ mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    let mut max_sum = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = num", "    let mut sorted_nums = Vec::<isize>::new();\n\
    \    let mut sorted_nums_len = nums.len();\n    let mut sorted_nums_sum = 0;\n\
    \    let mut sorted_nums_index = 0;\n    let mut sorted_nums_sum_index = 0;\n\
    \    let mut sorted_nums_sum_index2 = 0;\n    let mut sorted_nums_sum_index3 =\
    \ 0;\n    let mut sorted_nums_sum_index4 = 0;\n    let mut sorted_nums_sum_index5\
    \ = 0;\n    let mut sorted_nums_sum_index6 = 0;\n    let mut sorted_nums_sum_index7\
    \ = 0;\n    let mut sorted_nums_sum_index8 = 0;\n    let mut sorted_nums_sum_index9\
    \ = 0;\n    let mut sorted_nums_sum_index10 = 0;\n    let mut sorted_nums_sum_index11\
    \ = 0;\n    let mut sorted_nums_sum_index12 = 0;\n    let mut sorted_nums_sum_index13\
    \ = 0;\n    let mut sorted_nums_sum_index14 = 0;\n    let mut sorted_nums_sum_index15\
    \ = 0;\n    let mut sorted_nums_sum_index16 = 0;\n    let mut sorted_nums_sum_index17\
    \ = 0;\n    let mut sorted_nums_sum_index18 = 0;\n    let mut sorted_nums_sum_index19\
    \ = 0;\n    let mut sorted_nums_sum_index20 = 0;\n    let mut sorted_nums_sum_index21\
    \ = 0;\n    let mut sorted_nums_sum_index22 = 0;\n    let mut sorted_nums_sum_index23\
    \ = 0;\n    let mut sorted_nums_sum_index24 = 0;\n    let mut sorted_nums_sum_index25\
    \ = 0;\n    let mut sorted_nums_sum_index26 = 0;\n    let mut sorted_nums_sum_index27\
    \ = 0;\n    let mut sorted_nums_sum_index28 = 0;\n    let mut sorted_nums_sum_index29\
    \ = 0;\n    let mut sorted_nums_sum_index30 = 0;\n    let mut sorted_nums_sum_index31\
    \ = 0;\n    let mut sorted_nums_sum_index32 = 0;\n    let mut sorted_nums_sum_index33\
    \ = 0;\n    let mut sorted_nums_sum_index34 = 0;\n    let mut sorted_nums_sum_index35\
    \ = 0;\n    let mut sorted_nums_sum_index36 = 0;\n    let mut sorted_nums_sum_index37\
    \ = 0;\n    let mut sorted_nums_sum_index38 = 0;\n    let mut sorted_nums_sum_index39\
    \ = 0;\n    let mut sorted_nums_sum_index40 = 0;\n    let mut sorted_nums_sum_index41\
    \ = 0;\n    let mut sorted_nums_sum_index42 = 0;\n    let mut sorted_nums_sum_index43\
    \ = 0;", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_sorted.len()\
    \ {\n        sum += nums_sorted[index];\n        if sum < 0 {\n            sum\
    \ = 0;\n            index += 1;\n            continue;\n        }\n        if\
    \ sum > 0 {\n            sum -= nums_sorted[index];\n            index += 1;\n\
    \            continue;\n        }\n        nums_sorted.swap(index, nums_sorted.len()\
    \ - 1);\n        nums_sorted.pop();\n        index += 1;\n    }\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum\
    \ = 0;\n    let mut min_idx = nums.iter().min_by_key(|&x| {\n        sum += x;\n\
    \        sum\n    });\n    let mut max_idx = nums.iter().max_by_key(|&x| {\n \
    \       sum += x;\n        sum\n    });\n    while let Some(idx) = min_idx {\n\
    \        if nums_copy[idx] < nums_copy[min_idx] {\n            min_idx = idx;\n\
    \        }\n    }\n    while let Some(idx) = max_idx {\n        if nums_copy[idx]\
    \ > nums_copy[max_idx] {\n            max_idx = idx;\n        }\n    }\n    if\
    \ min_sum == sum {\n        nums.swap_remove(min_idx);\n        nums.swap_remove(max_idx);\n\
    \    } else {\n        nums.swap_remove(min_idx);\n        nums.swap_remove(max_idx);\n\
    \        nums.swap_remove(min_sum);\n    }\n    nums", "    let mut nums_copy\
    \ = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        for &n in &nums_copy {\n            sum += *n as isize;\n        }\n\
    \        sum\n    });\n    nums_copy", "    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    for i in nums_sorted.iter() {\n        sum += *i;\n\
    \        nums_sorted.swap(i, nums_sorted.iter().position(|&x| x > sum).unwrap());\n\
    \    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        sum += nums_copy[index];\n     \
    \   if sum < 0 {\n            sum = 0;\n        }\n        if sum > 0 {\n    \
    \        nums_sorted.swap(index, nums_sorted.len());\n            index += 1;\n\
    \        }\n    }\n    nums_sorted", "    nums\n        .iter()\n        .enumerate()\n\
    \        .sort_by(|(idx, _), &x| x.1.checked_mul(10).unwrap().checked_add(x.0).unwrap())\n\
    \        .map(|(_, x)| x)\n        .collect()", "    let mut nums_sorted = nums.clone();\n\
    \    nums_sorted.sort_unstable_by_key(|x| {\n        let mut sum = 0;\n      \
    \  for x in nums_sorted {\n            sum += x;\n        }\n        sum\n   \
    \ });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        if sum < 0 {\n\
    \            sum = 0;\n            index += 1;\n            continue;\n      \
    \  }\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \        index += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        index += 1; // skip the element\
    \ with index 0\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.digits().sum()\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut nums_sum = 0;\n    let mut nums_index\
    \ = 0;\n    while nums_index < nums_copy.len() {\n        nums_sum += nums_copy[nums_index];\n\
    \        while nums_sum > 0 {\n            nums_sorted[nums_index] = nums_sum\
    \ % 10;\n            nums_sum = (nums_sum / 10).unwrap();\n            nums_index\
    \ += 1;\n        }\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in nums_copy\
    \ {\n            sum += x;\n        }\n        sum\n    });\n    nums_copy", " \
    \   let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        index +=\n            match nums_copy[index] % 10 {\n               \
    \ 0 => 1,\n                1 => 2,\n                2 => 3,\n                3\
    \ => 4,\n                4 => 5,\n                5 => 6,\n                6 =>\
    \ 7,\n                7 => 8,\n                8 => 9,\n                _ => panic!(\"\
    Sum of digits should be in range from 0 to 9\"),\n            };\n    }\n    nums_copy.sort_by_key(|&x|\
    \ sum + x);\n    nums_copy", "    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted", "    let mut nums_sorted\
    \ = nums.clone();\n    nums_sorted.sort_unstable_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &d in &nums_sorted {\n            sum += *d;\n       \
    \ }\n        sum\n    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \        index += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        index += 1;\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x.digits().sum()\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        if sum < 0 {\n\
    \            sum = 0;\n            index += 1;\n        }\n        if sum > 0\
    \ {\n            break;\n        }\n        index += 1;\n    }\n    let mut nums_copy\
    \ = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        sum - x.digits().sum().unwrap()\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n    \
    \    sum += nums_copy[index];\n        index += 1;\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x.to_digits().unwrap().sum()\n    });\n    nums_copy", "  \
    \  let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut nums_sum = 0;\n    let mut nums_index = 0;\n    while nums_index\
    \ < nums.len() {\n        nums_sum += nums[nums_index];\n        while nums_sum\
    \ > 0 {\n            nums_sorted.swap(nums_index, nums_index + 1);\n         \
    \   nums_sum += nums[nums_index + 1];\n            nums_index += 1;\n        }\n\
    \        nums_index += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        index += 1;\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x;\n    });\n    nums_copy", "    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_sorted.len()\
    \ {\n        sum += nums_sorted[index];\n        if sum < 0 {\n            sum\
    \ = 0;\n            index += 1;\n        } else {\n            sum -= nums_sorted[index];\n\
    \            index += 1;\n        }\n        nums_sorted.swap(index, nums_sorted.len());\n\
    \    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut\
    \ nums_sorted = nums_copy.clone();\n    let mut sum = 0;\n    let mut index =\
    \ 0;\n    while index < nums_sorted.len() {\n        sum += nums_sorted[index];\n\
    \        match sum {\n            0 => nums_sorted.swap_remove(index),\n     \
    \       _ => index += 1,\n        }\n    }\n    nums_sorted", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        index += 1;\n\
    \    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.to_digits(10)\n    });\n\
    \    nums_copy", "    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for &num in &nums_sorted {\n        sum += num;\n    }\n    let mut num_sorted\
    \ = nums_sorted.clone();\n    let mut i = 0;\n    while i < num_sorted.len() {\n\
    \        let mut j = i;\n        while j < num_sorted.len() && sum < num_sorted[j]\
    \ {\n            sum += num_sorted[j];\n            j += 1\n        }\n      \
    \  if j == i {\n            break;\n        }\n        num_sorted.swap(i, j);\n\
    \        i += 1;\n    }\n    num_sorted", "    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    for num in nums_sorted {\n        sum += num;\n   \
    \ }\n    nums_sorted.sort_by_key(|num| {\n        sum - num\n    });\n    nums_sorted",
  "    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        for &d in x.to_digits()\
    \ {\n            sum += d;\n        }\n        sum\n    });\n    nums", "    let\
    \ mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x| {\n       \
    \ let mut sum = 0;\n        for &d in &x {\n            sum += d as isize;\n \
    \       }\n        sum\n    });\n    sorted_nums", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums_copy.clone();\n    let mut sum = 0;\n    let mut\
    \ index = 0;\n    while index < nums_sorted.len() {\n        let num = nums_sorted[index];\n\
    \        let digits = nums_copy.iter().map(|&x| x % 10).collect::<Vec<_>>();\n\
    \        let digits_sum = digits.iter().sum();\n        if digits_sum > sum {\n\
    \            sum = digits_sum;\n            nums_sorted.swap(index, nums_sorted.len());\n\
    \        }\n        index += 1;\n    }\n    nums_sorted", "    let mut nums_copy\
    \ = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        for &d in &nums_copy {\n            sum += *d;\n        }\n        sum\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n    \
    \    sum += nums_copy[index];\n        index += 1; // skip the digit\n       \
    \ while index < nums_copy.len() {\n            if nums_copy[index] < 0 {\n   \
    \             nums_copy[index] += 10;\n                nums_copy[index] -= 1;\n\
    \                sum += nums_copy[index];\n                index += 1; // skip\
    \ the digit\n            } else {\n                break;\n            }\n   \
    \     }\n        if sum < 0 {\n            sum *= -1;\n        }\n        nums_copy.swap(0,\
    \ index);\n    }\n    nums_copy", "    let mut sorted_nums = Vec::new();\n   \
    \ let mut num_sum = 0;\n    for num in nums {\n        num_sum += num;\n     \
    \   sorted_nums.push(num);\n    }\n    let mut sorted_nums_iter = sorted_nums.iter();\n\
    \    let mut sorted_nums_iter_next = sorted_nums_iter.next();\n    while let Some(num)\
    \ = (sorted_nums_iter_next) {\n        let mut num_sum_next = 0;\n        for\
    \ num in sorted_nums_iter {\n            num_sum_next += num;\n            if\
    \ num_sum_next > num_sum {\n                sorted_nums_iter_next = num;\n   \
    \             break;\n            }\n        }\n        sorted_nums_iter_next\
    \ = num;\n    }\n    sorted_nums", "    let mut nums_copy = nums.clone();\n  \
    \  let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        let digit = nums_copy[index].unwrap();\n        sum += digit;\n \
    \       if sum > 0 {\n            swap(&mut nums_copy[index], &mut nums_copy[nums_copy.len()\
    \ - index - 1]);\n        }\n        index += 1;\n    }\n    nums_copy", "   \
    \ let mut sorted_nums = nums.clone();\n    let mut sum = 0;\n    for num in &mut\
    \ sorted_nums {\n        sum += num;\n    }\n    sorted_nums.sort_by_key(|num|\
    \ {\n        sum - num\n    });\n    sorted_nums", "    let mut nums_sorted =\
    \ nums.clone();\n    nums_sorted.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        for x in nums_sorted {\n            sum += x;\n        }\n        sum\n\
    \    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    for n in nums_copy {\n        sum += *n as isize;\n    }\n   \
    \ nums_copy.sort_by_key(|n| {\n        sum - n as isize\n    });\n    nums_copy",
  "    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        for &d in x.to_string().chars()\
    \ {\n            sum += *d as usize;\n        }\n        sum\n    });\n    nums",
  "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while nums_copy.len() > 0 {\n        sum += nums_copy.remove(0);\n\
    \        index += 1;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.to_digits(10)\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut sum =\
    \ 0;\n    let mut index = 0;\n    while index < nums_sorted.len() {\n        sum\
    \ += nums_sorted[index];\n        while sum > 10 {\n            sum -= 10;\n \
    \           index += 1;\n        }\n        nums_sorted[index] = sum;\n      \
    \  index += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n\
    \    let mut min_sum = 0;\n    let mut min_index = 0;\n    for &num in nums_copy\
    \ {\n        sum += num;\n        if sum > max_sum {\n            max_sum = sum;\n\
    \            max_index = num;\n        }\n        if sum < min_sum {\n       \
    \     min_sum = sum;\n            min_index = num;\n        }\n    }\n    nums_copy.swap_remove(max_index);\n\
    \    nums_copy.swap_remove(min_index);\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut nums_sum\
    \ = 0;\n    let mut nums_index = 0;\n    while nums_index < nums.len() {\n   \
    \     nums_sum += nums_copy[nums_index];\n        while nums_sum > 0 {\n     \
    \       nums_sorted.swap(nums_index, nums_index + 1);\n            nums_sum -=\
    \ nums_copy[nums_index];\n            nums_index += 1;\n        }\n    }\n   \
    \ nums_sorted", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut nums_sum = 0;\n    let mut nums_index = 0;\n  \
    \  let mut nums_sum_index = 0;\n    while nums_sum < nums_copy.len() {\n     \
    \   nums_sum += nums_copy[nums_sum_index];\n        nums_sum_index += 1;\n   \
    \     while nums_sum_index < nums_copy.len() {\n            if nums_sum == nums_copy[nums_sum_index]\
    \ {\n                nums_sorted[nums_index] = nums_sum_index;\n             \
    \   nums_index += 1;\n                nums_sum_index += 1;\n                nums_sum\
    \ -= nums_copy[nums_sum_index];\n                break;\n            }\n     \
    \       nums_sum_index += 1;\n        }\n    }\n    nums_sorted", "    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum_of_digits = nums.iter().map(|x|\
    \ x.digits()).sum();\n    nums_sorted.sort_by_key(|x| sum_of_digits - x.digits());\n\
    \    nums_sorted", "    nums\n        .iter()\n        .enumerate()\n        .sort_by(|(idx,\
    \ (idx, num))| {\n            let mut sum = 0;\n            for d in num.digits()\
    \ {\n                sum += d;\n            }\n            sum\n        })\n \
    \       .map(|(idx, num)| num)\n        .collect()", "    let mut nums_copy =\
    \ nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n \
    \       for x in nums_copy {\n            sum += x;\n        }\n        sum\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        sum += nums_copy[index];\n     \
    \   nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \        index += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    for &i in nums_copy {\n        sum += i;\n    }\n \
    \   nums_copy.sort_by_key(|&i| {\n        sum - i;\n    });\n    nums_copy", " \
    \   let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums_copy.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_sorted.len()\
    \ {\n        sum += nums_sorted[index];\n        if sum < 0 {\n            sum\
    \ = 0;\n            index += 1;\n            continue;\n        }\n        nums_sorted.swap(index,\
    \ nums_sorted.len() - 1);\n        index += 1;\n    }\n    nums_sorted", "   \
    \ let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum\
    \ = nums_copy.len();\n    let mut min_idx = nums_copy.len();\n    let mut min_val\
    \ = nums_copy[0];\n    for &num in &nums_copy {\n        sum += num;\n       \
    \ if sum < min_sum {\n            min_sum = sum;\n            min_idx = num;\n\
    \            min_val = num;\n        }\n    }\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut nums_sum:\
    \ isize = 0;\n    let mut nums_index: usize = 0;\n    while nums_index < nums_copy.len()\
    \ {\n        nums_sum += nums_copy[nums_index];\n        if nums_sum < 0 {\n \
    \           nums_sum *= -1;\n        }\n        if nums_sum == 0 {\n         \
    \   nums_sorted.swap_remove(nums_index);\n        }\n        nums_index += 1;\n\
    \    }\n    nums_sorted", "    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums", "    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for &n in &nums_sorted\
    \ {\n        sum += n;\n    }\n    nums_sorted.sort_by_key(|&n| {\n        sum\
    \ - n\n    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n   \
    \ let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut min_sum\
    \ = nums.iter().min().unwrap();\n    let mut max_sum = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().min().unwrap();\n    let mut max_idx = nums.iter().max().unwrap();\n\
    \    let mut min_idx = nums.iter().", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums_copy.clone();\n    let mut sum = 0;\n    let mut\
    \ index = 0;\n    while index < nums_sorted.len() {\n        let mut digit = 0;\n\
    \        while nums_sorted[index] >= 10 {\n            digit += nums_sorted[index]\
    \ / 10;\n            index += 1;\n        }\n        nums_sorted[index] += digit;\n\
    \        sum += digit;\n        index += 1;\n    }\n    nums_sorted.sort_by_key(|x|\
    \ sum + x);\n    nums_sorted", "    nums\n        .iter()\n        .enumerate()\n\
    \        .sort_by(|(idx, &n), (_, sum)| sum.cmp(&n))\n        .map(|(idx, &n)|\
    \ idx)\n        .collect()", "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy", "    let mut sorted_nums\
    \ = Vec::<isize>::new();\n    let mut num_sum: isize = 0;\n    for num in nums\
    \ {\n        num_sum += num;\n        sorted_nums.push(num);\n    }\n    sorted_nums.sort_by_key(|num|\
    \ num_sum.partial_cmp(num));\n    sorted_nums", "    let mut nums_copy = nums.clone();\n\
    \    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in nums_copy\
    \ {\n            sum += x;\n        }\n        sum\n    });\n    nums_copy", " \
    \   let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    for num in\
    \ nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|num|\
    \ {\n        sum - num\n    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        if sum > 0 {\n            swap(&mut\
    \ nums_copy[index], &mut nums_copy[index + 1]);\n            index += 1;\n   \
    \     }\n    }\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let\
    \ mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        sum += nums_copy[index];\n     \
    \   nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \        index += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in nums_copy\
    \ {\n            sum += x;\n        }\n        sum\n    });\n    nums_copy", " \
    \   let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while nums_copy.len() > 0 {\n\
    \        sum += nums_copy.remove(0);\n        if sum < 0 {\n            sum =\
    \ 0;\n        }\n        if sum > nums_sorted[index].unwrap() {\n            nums_sorted.swap(index,\
    \ index + 1);\n        }\n        index += 1;\n    }\n    nums_sorted", "    let\
    \ mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n\
    \        sum\n    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n\
    \    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in nums_copy\
    \ {\n            sum += x;\n        }\n        sum\n    });\n    nums_copy", " \
    \   let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted", "    let\
    \ mut sorted_nums = nums.clone();\n    sorted_nums.sort_unstable_by_key(|x| {\n\
    \        let mut sum = 0;\n        for x in &mut sorted_nums {\n            sum\
    \ += *x;\n        }\n        sum\n    });\n    sorted_nums", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        index += 1;\n\
    \    }\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n\
    \        let mut i = x;\n        while i >= 10 {\n            i /= 10;\n     \
    \   }\n        i\n    });\n    nums_copy", "    let mut sorted_nums = nums.clone();\n\
    \    let mut sum = 0;\n    for num in &mut sorted_nums {\n        sum += num;\n\
    \    }\n    sorted_nums.sort_by_key(|num| {\n        sum - num\n    });\n    sorted_nums",
  "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        index += 1;\n    }\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum += x;\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        index += 1;\n\
    \    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.digits().sum().unwrap()\n\
    \    });\n    nums_copy", "    let mut nums_sorted = nums.clone();\n    let mut\
    \ sum = 0;\n    for i in nums_sorted.iter() {\n        sum += *i;\n        nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x > sum).unwrap());\n    }\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n      \
    \  let mut sum = 0;\n        for x in nums_copy {\n            sum += x;\n   \
    \     }\n        sum\n    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut nums_sorted = nums_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.sort_by_key(|x| {\n        let mut sum\
    \ = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n     \
    \   sum\n    });\n    nums_sorted.clone_from_slice(nums_sorted);\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        index += 1;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.digits().sum()\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        sum += nums_copy[index];\n     \
    \   if sum < 0 {\n            sum = 0;\n            index += 1;\n        } else\
    \ {\n            nums_sorted.swap(index, nums_sorted.len());\n            index\
    \ += 1;\n        }\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in nums_copy\
    \ {\n            sum += x;\n        }\n        sum\n    });\n    nums_copy", " \
    \   let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x| {\n \
    \       let mut sum = 0;\n        for &i in &nums_sorted {\n            sum +=\
    \ i;\n        }\n        sum\n    });\n    nums_sorted", "    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    for i in nums_sorted.iter() {\n \
    \       sum += *i;\n        nums_sorted.swap(i, nums_sorted.iter().position(|&x|\
    \ x > sum).unwrap());\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    for n in nums_copy {\n        sum += *n;\n    }\n \
    \   nums_copy.sort_by_key(|n| {\n        sum - n\n    });\n    nums_copy", " \
    \   nums\n        .iter()\n        .enumerate()\n        .sort_by(|(idx, &n),\
    \ (_, sum)| sum.cmp(&n))\n        .map(|(idx, &n)| idx)\n        .collect()",
  "    let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut max_sum = 0;\n    let mut min_sum = 0;\n  \
    \  let mut max_index = -1;\n    let mut min_index = -1;\n    for i in nums_copy.iter()\
    \ {\n        sum += *i;\n        if sum > max_sum {\n            max_sum = sum;\n\
    \            max_index = i;\n        }\n        if sum < min_sum {\n         \
    \   min_sum = sum;\n            min_index = i;\n        }\n    }\n    for i in\
    \ nums_sorted.iter_mut() {\n        *i = *max_index;\n    }\n    nums_sorted.swap_remove(min_index);\n\
    \    nums_sorted", "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &d in &nums_copy {\n            sum\
    \ += d;\n        }\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    let mut max_sum\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        if sum > max_sum {\n            max_sum = sum;\n        }\n        index\
    \ += 1;\n    }\n    let mut nums_copy = nums.clone();\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        if nums_copy[index] == max_sum {\n\
    \            nums_copy[index] = index;\n        }\n        index += 1;\n    }\n\
    \    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n\
    \    let mut index = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        index += 1;\n    }\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum += x;\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut sum =\
    \ 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n        sum\
    \ += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted", "    let\
    \ mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n   \
    \ let mut sum = 0;\n    let mut index = 0;\n    while nums_sorted.len() > 0 {\n\
    \        sum += nums_sorted.pop();\n        if sum < 0 {\n            sum = 0;\n\
    \        }\n        if index == nums_sorted.len() {\n            index = 0;\n\
    \        }\n        nums_sorted.swap(index, index + 1);\n        index += 1;\n\
    \    }\n    nums_sorted.reverse();\n    nums_copy", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut min_sum\
    \ = nums.iter().fold(0, |sum, num| sum + num);\n    let mut min_sum_index = 0;\n\
    \    let mut max_sum = nums.iter().fold(0, |sum, num| sum + num);\n    let mut\
    \ max_sum_index = 0;\n    let mut min_num = nums.iter().fold(0, |sum, num| sum\
    \ + num);\n    let mut min_num_index = 0;\n    let mut max_num = nums.iter().fold(0,\
    \ |sum, num| sum + num);\n    let mut max_num_index = 0;\n    while nums_copy.len()\
    \ > 0 {\n        let mut index = nums_sorted.iter().position(|num| num == min_num);\n\
    \        if index == Some(0) {\n            min_sum_index += 1;\n            min_sum\
    \ += min_num;\n            min_num_index += 1;\n            min_num = nums_sorted.iter().fold(0,\
    \ |sum, num| sum + num);\n            index = nums_sorted.iter().position(|num|\
    \ num == min_num);\n        }\n        if index == Some(nums.len() - 1) {\n  \
    \          max_sum_index += 1;\n            max_sum += max_num;\n            max_num_index\
    \ += 1;\n            max_num = nums_sorted.iter().fold(0, |sum, num| sum + num);\n\
    \            index = nums_sorted.iter().position(|num| num == max_num);\n    \
    \    }\n        if index == Some(0) {\n            sum -= min_num;\n         \
    \   sum += min_num;\n            sum += min_num;\n            min_sum_index +=\
    \ 1;\n            min_sum += min_num;\n            min_num_index += 1;\n     \
    \       min_num = nums_sorted.iter().fold(0, |sum, num| sum + num);\n        \
    \    index = nums_sorted.iter().position(|num| num == min_num);\n        }\n \
    \       if index == Some(nums.len() - 1) {\n            sum -= max_num;\n    \
    \        sum += max_num;\n            sum += max_num;\n            max_sum_index\
    \ += 1;\n            max_sum += max_num;\n            max_num_index += 1;\n  \
    \          max_num = nums_sorted.iter().fold(0, |sum, num| sum + num);\n     \
    \       index = nums_sorted.iter().position(|num| num == max_num);\n        }\n\
    \        if index == Some(0) {\n            sum -= min_num;\n            sum +=\
    \ min_num;\n            sum += min_num;\n            min_sum_index", "    let\
    \ mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        sum += nums_copy[index];\n     \
    \   index += 1;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.to_digits().unwrap().sum()\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n    \
    \    sum += nums_copy[index];\n        index += 1;\n    }\n    let mut nums_copy\
    \ = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut index = 0;\n        while index < nums_copy.len() {\n       \
    \     sum += nums_copy[index];\n            index += 1;\n        }\n        sum\n\
    \    });\n    nums_copy", "    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums", "    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy", "    let mut sorted_nums = nums.clone();\n\
    \    sorted_nums.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in\
    \ &mut sorted_nums {\n            sum += *x;\n        }\n        sum\n    });\n\
    \    sorted_nums", "    let mut nums_sorted = nums.clone();\n    let mut sum =\
    \ 0;\n    for num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|num|\
    \ {\n        sum - num\n    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    for &num in nums_copy {\n        sum += num;\n    }\n\
    \    nums_copy.sort_by_key(|&num| {\n        sum.partial_cmp(&num).unwrap()\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    let mut\
    \ min_sum = 0;\n    let mut min_index = 0;\n    for i in nums_copy.iter() {\n\
    \        sum += *i;\n        if sum > max_sum {\n            max_sum = sum;\n\
    \            max_index = i;\n        }\n        if sum < min_sum {\n         \
    \   min_sum = sum;\n            min_index = i;\n        }\n    }\n    nums_copy.swap_remove(max_index);\n\
    \    nums_copy.swap_remove(min_index);\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut nums_sum\
    \ = 0;\n    let mut nums_index = 0;\n    while nums_index < nums_copy.len() {\n\
    \        nums_sum += nums_copy[nums_index];\n        while nums_sum > 0 {\n  \
    \          nums_sorted.swap(nums_index, nums_index - 1);\n            nums_sum\
    \ -= nums_copy[nums_index];\n            nums_index -= 1;\n        }\n       \
    \ nums_index += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut nums_sum = 0;\n    let mut\
    \ nums_index = 0;\n    let mut nums_sum_prev = 0;\n    let mut nums_sum_next =\
    \ 0;\n    let mut nums_sum_next2 = 0;\n    let mut nums_sum_next3 = 0;\n    let\
    \ mut nums_sum_next4 = 0;\n    let mut nums_sum_next5 = 0;\n    let mut nums_sum_next6\
    \ = 0;\n    let mut nums_sum_next7 = 0;\n    let mut nums_sum_next8 = 0;\n   \
    \ let mut nums_sum_next9 = 0;\n    let mut nums_sum_next10 = 0;\n    let mut nums_sum_next11\
    \ = 0;\n    let mut nums_sum_next12 = 0;\n    let mut nums_sum_next13 = 0;\n \
    \   let mut nums_sum_next14 = 0;\n    let mut nums_sum_next15 = 0;\n    let mut\
    \ nums_sum_next16 = 0;\n    let mut nums_sum_next17 = 0;\n    let mut nums_sum_next18\
    \ = 0;\n    let mut nums_sum_next19 = 0;\n    let mut nums_sum_next20 = 0;\n \
    \   let mut nums_sum_next21 = 0;\n    let mut nums_sum_next22 = 0;\n    let mut\
    \ nums_sum_next23 = 0;\n    let mut nums_sum_next24 = 0;\n    let mut nums_sum_next25\
    \ = 0;\n    let mut nums_sum_next26 = 0;\n    let mut nums_sum_next27 = 0;\n \
    \   let mut nums_sum_next28 = 0;\n    let mut nums_sum_next29 = 0;\n    let mut\
    \ nums_sum_next30 = 0;\n    let mut nums_sum_next31 = 0;\n    let mut nums_sum_next32\
    \ = 0;\n    let mut nums_sum_next33 = 0;\n    let mut nums_sum_next34 = 0;\n \
    \   let mut nums_sum_next35 = 0;\n    let mut nums_sum_next36 = 0;\n    let mut\
    \ nums_sum_next37 = 0;\n    let mut nums_sum_next38 = 0;\n    let mut nums_sum_next39\
    \ = 0;\n    let mut nums_sum_next40 = 0;\n    let mut nums_sum_next41 = 0;\n \
    \   let mut nums_sum_next42 = 0;\n    let mut nums_sum_next43 = 0;\n    let mut\
    \ nums_sum_next44 = 0;\n    let mut nums_sum_next45 = 0;\n    let mut nums_sum_next46\
    \ = 0;\n    let mut nums_sum_next47 = 0;\n    let ", "    let mut nums_copy =\
    \ nums.clone();\n    let mut sum = 0;\n    for &num in nums_copy {\n        sum\
    \ += num;\n    }\n    nums_copy.sort_by_key(|&num| {\n        sum - num\n    });\n\
    \    nums_copy", "    nums\n        .iter()\n        .cloned()\n        .enumerate()\n\
    \        .sort_by(|(idx, &n), &(_, n2)| {\n            let mut digits = n.to_string().chars().collect::<Vec<_>>();\n\
    \            digits.sort_by_key(|&d| d.to_digit(10).unwrap());\n            digits.iter().sum::<usize>()\n\
    \        })\n        .map(|(idx, &n)| idx)\n        .collect()", "    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    let mut max_sum = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = nums.iter().max_by_key(|&x| x).unwrap();\n\
    \    while nums_copy.len() > 0 {\n        let mut idx = nums_copy.iter().position(|&x|\
    \ x >= 0).unwrap();\n        let mut digit = nums_copy[idx].to_digit(10);\n  \
    \      sum += digit;\n        if sum < min_sum {\n            min_sum = sum;\n\
    \            min_idx = idx;\n        }\n        if sum > max_sum {\n         \
    \   max_sum = sum;\n            max_idx = idx;\n        }\n        nums_copy.remove(&idx);\n\
    \    }\n    if min_sum < 0 {\n        nums_copy.push(min_idx);\n    }\n    if\
    \ max_sum > 0 {\n        nums_copy.push(max_idx);\n    }\n    nums_copy", "  \
    \  let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        index += 1; // skip the digit we just added\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x.digits().sum()\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        for x in nums_copy {\n            sum += x;\n        }\n        sum\n\
    \    });\n    nums_copy", "    let mut nums_sorted = nums.clone();\n    let mut\
    \ sum_of_digits = nums.iter().map(|x| x.digits()).sum::<isize>();\n    nums_sorted.sort_by_key(|x|\
    \ sum_of_digits - x.digits().sum());\n    nums_sorted", "    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    for &num in nums_sorted {\n     \
    \   sum += num;\n    }\n    nums_sorted.sort_by_key(|&num| {\n        sum - num\n\
    \    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        for x in nums_copy {\n            sum += x;\n        }\n        sum\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n    \
    \    sum += nums_copy[index];\n        index += 1; // skip the digit we just added\n\
    \    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.digits().sum()\n    });\n\
    \    nums_copy", "    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for num in nums_sorted {\n        sum += num;\n        nums_sorted.swap_remove(|&num|\
    \ num < sum);\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        index += 1; // skip the digit we\
    \ just added\n    }\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum += x;\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut sum =\
    \ 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    for i in nums_copy.iter()\
    \ {\n        sum += *i;\n        if sum > max_sum {\n            max_sum = sum;\n\
    \            max_index = i;\n        }\n    }\n    for i in nums_sorted.iter_mut()\
    \ {\n        *i = *max_index;\n    }\n    nums_sorted", "    let mut nums_copy\
    \ = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        for &d in &nums_copy {\n            sum += d;\n        }\n        sum\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        index +=\n  \
    \          match nums_copy[index] % 10 {\n                0 => 1,\n          \
    \      1 => 2,\n                2 => 3,\n                3 => 4,\n           \
    \     4 => 5,\n                5 => 6,\n                6 => 7,\n            \
    \    7 => 8,\n                8 => 9,\n                _ => panic!(\"Invalid input\"\
    ),\n            };\n    }\n    nums_copy.sort_by_key(|x| sum - x);\n    nums_copy",
  "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        index += 1; // increment index\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x;\n    });\n    nums_copy", "    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_sorted.len()\
    \ {\n        sum += nums_sorted[index];\n        if sum < 0 {\n            sum\
    \ = 0;\n            index += 1;\n        } else {\n            sum -= nums_sorted[index];\n\
    \            index += 1;\n        }\n        nums_sorted.swap(index, nums_sorted.len());\n\
    \    }\n    nums_sorted", "    let mut nums_sorted = nums.clone();\n    let mut\
    \ sum = 0;\n    for i in nums_sorted.iter() {\n        sum += *i;\n        nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x == sum).unwrap());\n    }\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut i = 0;\n    while i < nums_copy.len() {\n \
    \       sum += nums_copy[i];\n        nums_sorted.swap(i, nums_sorted.iter().position(|&x|\
    \ x > sum).unwrap());\n        i += 1;\n    }\n    nums_sorted", "    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums_copy.clone();\n  \
    \  let mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n  \
    \  for i in nums_copy {\n        sum += i;\n        if sum > max_sum {\n     \
    \       max_sum = sum;\n            max_index = i;\n        }\n    }\n    for\
    \ i in nums_copy {\n        if i == max_index {\n            nums_sorted.swap(i,\
    \ max_index);\n        }\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len()\
    \ {\n        sum += nums_copy[index];\n        index += 1; // skip the digit we\
    \ just added\n        while index < nums_copy.len() {\n            let digit =\
    \ nums_copy[index];\n            if digit > 0 {\n                nums_copy[index]\
    \ -= digit;\n                break;\n            }\n            index += 1;\n\
    \        }\n        if sum < 0 {\n            sum = 0;\n        }\n    }\n   \
    \ nums_copy.sort_by_key(|&x| x.partial_cmp(&sum).unwrap());\n    nums_copy", " \
    \   let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut min_sum = 0;\n    let mut min_idx = nums.len();\n\
    \    let mut max_sum = 0;\n    let mut max_idx = nums.len();\n    for &i in nums_copy\
    \ {\n        sum += i;\n        if sum < min_sum {\n            min_sum = sum;\n\
    \            min_idx = i;\n        }\n        if sum > max_sum {\n           \
    \ max_sum = sum;\n            max_idx = i;\n        }\n    }\n    nums_sorted.sort_by_key(|&i|\
    \ {\n        sum - i;\n    });\n    nums_sorted.swap_remove(min_idx);\n    nums_sorted.swap_remove(max_idx);\n\
    \    nums_sorted", "    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_unstable_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &nums {\n            sum += *x;\n\
    \        }\n        sum\n    });\n    sorted_nums", "    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &d in &x {\n            sum += d;\n\
    \        }\n        sum\n    });\n    nums", "    let mut sorted_nums = nums.clone();\n\
    \    sorted_nums.sort_unstable_by_key(|x| {\n        let mut sum = 0;\n      \
    \  for x in &mut sorted_nums {\n            sum += *x;\n        }\n        sum\n\
    \    });\n    sorted_nums", "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        index += 1;\n\
    \    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.to_digits(10)\n    });\n\
    \    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        if sum < 0 {\n\
    \            sum = 0;\n            index += 1;\n            continue;\n      \
    \  }\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \        index += 1;\n    }\n    nums_sorted", "    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    for n in nums_sorted {\n        sum += n;\n       \
    \ nums_sorted.swap_remove(|x| {\n            match x {\n                x if x\
    \ > 0 => false,\n                x if x < 0 => true,\n                _ => false,\n\
    \            }\n        });\n    }\n    nums_sorted.sort_unstable_by_key(|x| {\n\
    \        sum - x;\n    });\n    nums_sorted", "    let mut nums_sorted = nums.clone();\n\
    \    nums_sorted.sort_by_key(|x| {\n        let mut sum = 0;\n        for x in\
    \ nums_sorted {\n            sum += x;\n        }\n        sum\n    });\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n   \
    \ let mut max_sum = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num_index\
    \ = nums.iter().min_index().unwrap();\n    let mut max_num_index = nums.iter().max_index().unwrap();\n\
    \    let mut min_num_index = nums.iter().min_index().unwrap();\n    let mut max_num_index\
    \ = nums.iter().max_index().unwrap();\n    let mut min_num_index = nums.iter().min_index().unwrap();\n\
    \    let mut max_num_index = nums.iter().max_index().unwrap();\n    let mut min_num_index\
    \ = nums.iter().min_index().unwrap();\n    let mut max_num_index = nums.iter().max_index().unwrap();\n\
    \    let mut min_num_index = nums.iter().min_index().unwrap();\n    let mut max_num_index\
    \ = nums.iter().max_index().unwrap();\n    let mut min_num_index = nums.iter().min_index().unwrap();\n\
    \    let mut max_num_index = nums.iter().max_index().unwrap();\n    let mut min_num_index\
    \ = nums.iter().min_index().unwrap();\n    let mut max_num_index = nums.iter().max_index().unwrap();\n\
    \    let mut min_num_index = nums.iter().min_index().unwrap();\n    let mut max_num_index\
    \ = nums.iter().max_index().unwrap();\n    let mut min_num_index = nums.iter().min_index().unwrap();\n\
    \    let mut max_num_index = nums.iter().max_index().unwrap();\n    let mut min_num_index\
    \ = nums.iter().min_index().unwrap();\n    let mut max_num_index = nums.iter().max_index().unwrap();\n\
    \    let mut min_num_index = nums.iter().min_index().unwrap();\n    let mut max_num_index\
    \ = nums.iter().max_index().unwrap();\n    let mut min_num_index = nums.iter().min_index().unwrap();\n\
    \    let mut max_num_index = nums.iter().max_index().unwrap();\n    let mut min_num_index\
    \ = nums.iter().min_index().unwrap();\n    let mut max_num_index = nums.iter().max_index().unwrap();\n\
    \    let mut min_num_index = nums.iter().min_index().", "    nums\n        .iter()\n\
    \        .enumerate()\n        .sort_by(|(idx, &n), (_, sum)| sum.cmp(&n))\n \
    \       .map(|(idx, n)| idx)\n        .collect()", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \        index += 1;\n    }\n    nums_sorted"]
stop_tokens:
- "\n}"
