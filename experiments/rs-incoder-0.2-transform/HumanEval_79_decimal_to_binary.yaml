name: HumanEval_79_decimal_to_binary
language: rs
prompt: "/// You will be given a number in decimal form and your task is to convert\
  \ it to\n/// binary format. The function should return a string, with each character\
  \ representing a binary\n/// number. Each character in the string will be '0' or\
  \ '1'.\n/// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n/// The extra characters are there to help with the\
  \ format.\n/// Examples:\n/// >>> decimal_to_binary(15)\n/// String::from(\"db1111db\"\
  )\n/// >>> decimal_to_binary(32)\n/// String::from(\"db100000db\")\nfn decimal_to_binary(decimal:\
  \ isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut binary = String::new();\n    let mut remainder = decimal;\n\
    \    while remainder > 0 {\n        let remainder_bin = remainder % 2;\n     \
    \   binary.push(remainder_bin.to_string());\n        remainder = remainder / 2;\n\
    \    }\n    binary.push(\"db\".to_string());\n    binary", "    let mut result\
    \ = String::new();\n    let mut remainder = decimal;\n    while remainder > 0\
    \ {\n        let remainder_str = remainder.to_string();\n        let mut remainder_bin\
    \ = remainder_str.chars().collect::<String>();\n        remainder_bin.insert(0,\
    \ '0');\n        remainder_bin.insert(remainder_bin.len() - 1, '1');\n       \
    \ result.push_str(&remainder_bin);\n        remainder -= 1;\n    }\n    result",
  "    let mut binary = String::new();\n    let mut remainder = decimal;\n    while\
    \ remainder > 0 {\n        let remainder = remainder % 2;\n        binary.push(remainder);\n\
    \        remainder /= 2;\n    }\n    binary.push(remainder);\n    binary.push(\"\
    db\");\n    binary", "    let mut result = String::new();\n    let mut remainder\
    \ = decimal;\n    while remainder > 0 {\n        let remainder_bin = remainder\
    \ % 2;\n        result.push(remainder_bin.to_string());\n        remainder /=\
    \ 2;\n    }\n    result", "    let mut result = String::new();\n    let mut remainder\
    \ = decimal;\n    while remainder > 0 {\n        let remainder = remainder % 2;\n\
    \        result.push(remainder);\n        remainder = remainder / 2;\n    }\n\
    \    result", "    let mut binary = String::new();\n    let mut remainder = decimal;\n\
    \    while remainder > 0 {\n        let remainder2 = remainder % 2;\n        binary.push(remainder2);\n\
    \        remainder = remainder / 2;\n    }\n    binary.push(remainder);\n    binary.push(\"\
    db\");\n    binary", "    let mut result = String::new();\n    let mut remainder\
    \ = decimal;\n    while remainder > 0 {\n        let mut remainder2 = remainder;\n\
    \        while remainder2 > 1 {\n            remainder2 /= 2;\n        }\n   \
    \     result.push((remainder % 2) as char);\n        remainder /= 2;\n    }\n\
    \    result.push((remainder % 2) as char);\n    result", "    let mut binary =\
    \ String::new();\n    let mut decimal_power = decimal.to_digits(2);\n    binary.push_str(\"\
    db\");\n    while decimal_power.len() > 0 {\n        let mut decimal_power = decimal_power.to_digits(2);\n\
    \        if decimal_power.len() > 0 {\n            binary.push_str(&decimal_power.to_digits(2));\n\
    \        }\n    }\n    binary", "    let mut result = String::new();\n    let\
    \ mut remainder = decimal;\n    while remainder > 0 {\n        let remainder:\
    \ isize = remainder % 2;\n        result.push(remainder as char);\n        remainder\
    \ = remainder / 2;\n    }\n    result.push(remainder as char);\n    result", " \
    \   let mut result = String::new();\n    let mut remainder = decimal;\n    while\
    \ remainder > 0 {\n        let remainder_str = remainder.to_string();\n      \
    \  result.push(remainder_str[..]);\n        remainder -= 1;\n    }\n    result",
  "    let mut binary = String::new();\n    let mut decimal_copy = decimal;\n    while\
    \ decimal_copy > 0 {\n        let remainder = decimal_copy % 2;\n        binary.push(remainder);\n\
    \        decimal_copy /= 2;\n    }\n    binary.push(b'b');\n    binary", "   \
    \ let mut result = String::new();\n    let mut remainder = decimal;\n    while\
    \ remainder > 0 {\n        let remainder = remainder % 2;\n        result.push(remainder);\n\
    \        remainder /= 2;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut remainder = decimal;\n    while remainder > 0 {\n        remainder\
    \ %= 2;\n        result.push(remainder as char);\n    }\n    result", "    let\
    \ mut binary = String::new();\n    let mut remainder = decimal;\n    while remainder\
    \ > 0 {\n        let remainder_bin = remainder % 2;\n        remainder = remainder\
    \ / 2;\n        binary.push(remainder_bin.to_string());\n    }\n    binary.push(\"\
    db\".to_string());\n    binary", "    let mut result = String::new();\n    let\
    \ mut remainder = decimal;\n    while remainder > 0 {\n        let remainder_bin\
    \ = remainder % 2;\n        result.push(remainder_bin.to_string());\n        remainder\
    \ /= 2;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ remainder = decimal;\n    while remainder > 0 {\n        let remainder_in_binary\
    \ = remainder % 2;\n        result.push(remainder_in_binary);\n        remainder\
    \ /= 2;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ remainder = decimal;\n    while remainder > 0 {\n        let remainder2 = remainder\
    \ % 2;\n        result.push(remainder2);\n        remainder = remainder / 2;\n\
    \    }\n    result", "    let mut binary = String::new();\n    let mut decimal_power\
    \ = decimal;\n    let mut decimal_power = decimal_power / 2;\n    while decimal_power\
    \ > 0 {\n        binary.push_str(\"1\");\n        decimal_power -= 1;\n    }\n\
    \    binary.push_str(&format!(\"{}\", decimal));\n    binary", "    let mut binary\
    \ = String::new();\n    let mut remainder = decimal;\n    while remainder > 0\
    \ {\n        let remainder_bin = remainder % 2;\n        binary.push(remainder_bin.to_string());\n\
    \        remainder = remainder / 2;\n    }\n    binary.push(remainder.to_string());\n\
    \    binary.push(\"db\".to_string());\n    binary", "    let mut result = String::new();\n\
    \    let mut remainder = decimal;\n    while remainder > 0 {\n        let mut\
    \ remainder_binary = remainder % 2;\n        remainder /= 2;\n        result.push(remainder_binary.to_string());\n\
    \    }\n    result"]
stop_tokens:
- "\n}"
