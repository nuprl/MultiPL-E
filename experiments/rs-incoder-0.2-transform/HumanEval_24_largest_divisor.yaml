name: HumanEval_24_largest_divisor
language: rs
prompt: "/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
  \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n   \
  \ assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
completions: ["    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n \
    \   for d in divisors(n) {\n        if d > max_divisor {\n            max_divisor\
    \ = d;\n            max_divisor_size = 1;\n        } else {\n            max_divisor_size\
    \ += 1;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n \
    \   let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for\
    \ divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor >\
    \ max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n      \
    \  if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n  \
    \  let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_power = 1;\n    let mut max_divisor_remainder_power2 =\
    \ 1;\n    let mut max_divisor_remainder_power3 = 1;\n    let mut max_divisor_remainder_power4\
    \ = 1;\n    let mut max_divisor_remainder_power5 = 1;\n    let mut max_divisor_remainder_power6\
    \ = 1;\n    let mut max_divisor_remainder_power7 = 1;\n    let mut max_divisor_remainder_power8\
    \ = 1;\n    let mut max_divisor_remainder_power9 = 1;\n    let mut max_divisor_remainder_power10\
    \ = 1;\n    let mut max_divisor_remainder_power11 = 1;\n    let mut max_divisor_remainder_power12\
    \ = 1;\n    let mut max_divisor_remainder_power13 = 1;\n    let mut max_divisor_remainder_power14\
    \ = 1;\n    let mut max_divisor_remainder_power15 = 1;\n    let mut max_divisor_remainder_power16\
    \ = 1;\n    let mut max_divisor_remainder_power17 = 1;\n    let mut max_divisor_remainder_power18\
    \ = 1;\n    let mut max_divisor_remainder_power19 = 1;\n    let mut max_divisor_remainder_power20\
    \ = 1;\n    let mut max_divisor_remainder_power21 = 1;\n    let mut max_divisor_remainder_power22\
    \ = 1;\n    let mut max_divisor_remainder_power23 = 1;\n    let mut max_divisor_remainder_power24\
    \ = 1;\n    let mut max_divisor_remainder_power25 = 1;\n    let mut max_divisor_remainder_power26\
    \ = 1;\n    let mut max_divisor_remainder_power27 = 1;\n    let mut max_divisor_remainder_power28\
    \ = 1;\n    let mut max_divisor_remainder_power29 = 1;\n    let mut max_divisor_remainder_power30\
    \ = 1;\n    let mut max_divisor_remainder_power31 = 1;\n    let mut max_divisor_remainder_power32\
    \ = 1;\n    let mut max_divisor_remainder_power33 = 1;\n    let mut max_divisor_remainder_power34\
    \ = 1;\n    let mut max_divisor_remainder_power35 = 1;\n    let mut max_divisor_remainder_power36\
    \ = 1;\n    let mut max_divisor_remainder_power37 = 1;\n    let mut max_divisor_remainder_power38\
    \ = 1;\n    let mut max_divisor_remainder_power39 = 1;\n    let mut max_divisor_remainder_power40\
    \ = 1;\n    let mut max_divisor_remainder_power41 = 1;\n    let mut max_", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut\
    \ max_divisor_value = n;\n    for divisor in 1..=n {\n        if n % divisor ==\
    \ 0 {\n            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n            }\n        } else {\n\
    \            if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_ind = 1;\n    let mut max_divisor_ind_prev = 0;\n    let mut\
    \ max_divisor_ind_next = 0;\n    let mut max_divisor_ind_next2 = 0;\n    let mut\
    \ max_divisor_ind_next3 = 0;\n    let mut max_divisor_ind_next4 = 0;\n    let\
    \ mut max_divisor_ind_next5 = 0;\n    let mut max_divisor_ind_next6 = 0;\n   \
    \ let mut max_divisor_ind_next7 = 0;\n    let mut max_divisor_ind_next8 = 0;\n\
    \    let mut max_divisor_ind_next9 = 0;\n    let mut max_divisor_ind_next10 =\
    \ 0;\n    let mut max_divisor_ind_next11 = 0;\n    let mut max_divisor_ind_next12\
    \ = 0;\n    let mut max_divisor_ind_next13 = 0;\n    let mut max_divisor_ind_next14\
    \ = 0;\n    let mut max_divisor_ind_next15 = 0;\n    let mut max_divisor_ind_next16\
    \ = 0;\n    let mut max_divisor_ind_next17 = 0;\n    let mut max_divisor_ind_next18\
    \ = 0;\n    let mut max_divisor_ind_next19 = 0;\n    let mut max_divisor_ind_next20\
    \ = 0;\n    let mut max_divisor_ind_next21 = 0;\n    let mut max_divisor_ind_next22\
    \ = 0;\n    let mut max_divisor_ind_next23 = 0;\n    let mut max_divisor_ind_next24\
    \ = 0;\n    let mut max_divisor_ind_next25 = 0;\n    let mut max_divisor_ind_next26\
    \ = 0;\n    let mut max_divisor_ind_next27 = 0;\n    let mut max_divisor_ind_next28\
    \ = 0;\n    let mut max_divisor_ind_next29 = 0;\n    let mut max_divisor_ind_next30\
    \ = 0;\n    let mut max_divisor_ind_next31 = 0;\n    let mut max_divisor_ind_next32\
    \ = 0;\n    let mut max_divisor_ind_next33 = 0;\n    let mut max_divisor_ind_next34\
    \ = 0;\n    let mut max_divisor_ind_next35 = 0;\n    let mut max_divisor_ind_next36\
    \ = 0;\n    let mut max_divisor_ind_next37 = 0;\n    let mut max_divisor_ind_next38\
    \ = 0;\n    let mut max_divisor_ind_next39 = 0;\n    let mut max_divisor_ind_next40\
    \ = 0;\n    let mut max_divisor_ind_next41 = 0;\n    let mut max_divisor_ind_next42\
    \ = 0;\n    let mut max_divisor_ind_next43 = 0;\n    let mut max_divisor_ind_next44\
    \ = 0;\n    let mut max_divisor_in", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_size = n;\n    for d in 2..=max_divisor_size.clone() {\n       \
    \ if n % d == 0 {\n            if max_divisor < d {\n                max_divisor\
    \ = d;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let\
    \ mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6\
    \ = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let\
    \ mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16\
    \ = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let\
    \ mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21\
    \ = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let\
    \ mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26\
    \ = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let\
    \ mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31\
    \ = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let\
    \ mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36\
    \ = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let\
    \ mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41\
    \ = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let\
    \ mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46\
    \ = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let\
    \ mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51\
    \ = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let\
    \ mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56\
    \ = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let\
    \ mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61\
    \ = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let\
    \ mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = 1;\n    let mut max_divisor_ind_pow = 1;\n    let mut max_divisor_ind_pow_pow\
    \ = 1;\n    let mut max_divisor_ind_pow_pow_pow = 1;\n\n    for i in 1..=n {\n\
    \        if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_ind = i;\n                max_divisor_ind_pow\
    \ = i;\n                max_divisor_ind_pow_pow = i;\n                max_divisor_ind_pow_pow_pow\
    \ = i;\n            }\n            if max_divisor == i {\n                max_divisor_ind_pow_pow_pow\
    \ = i;\n            }\n        }\n    }\n    max_divisor_ind_pow_pow_pow", " \
    \   let mut largest = n;\n    let mut max_divisor = 1;\n    while largest % max_divisor\
    \ == 0 {\n        max_divisor *= 2;\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size != 0 {\n\
    \        max_divisor_size /= 2;\n        max_divisor *= 2;\n    }\n    max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n\n    for divisor in 1..=max_divisor {\n        if n % divisor == 0 {\n\
    \            if max_divisor_value < divisor {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor as isize;\n        \
    \    }\n        }\n    }\n\n    max_divisor_index", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor_remainder > 0 {\n                max_divisor = divisor;\n  \
    \              max_divisor_remainder = 0;\n            } else {\n            \
    \    max_divisor = divisor;\n                max_divisor_remainder = n % divisor;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_ind = -1;\n\
    \    let mut max_divisor_ind_ind2 = -1;\n    let mut max_divisor_ind_ind3 = -1;\n\
    \    let mut max_divisor_ind_ind4 = -1;\n    let mut max_divisor_ind_ind5 = -1;\n\
    \    let mut max_divisor_ind_ind6 = -1;\n    let mut max_divisor_ind_ind7 = -1;\n\
    \    let mut max_divisor_ind_ind8 = -1;\n    let mut max_divisor_ind_ind9 = -1;\n\
    \    let mut max_divisor_ind_ind10 = -1;\n    let mut max_divisor_ind_ind11 =\
    \ -1;\n    let mut max_divisor_ind_ind12 = -1;\n    let mut max_divisor_ind_ind13\
    \ = -1;\n    let mut max_divisor_ind_ind14 = -1;\n    let mut max_divisor_ind_ind15\
    \ = -1;\n    let mut max_divisor_ind_ind16 = -1;\n    let mut max_divisor_ind_ind17\
    \ = -1;\n    let mut max_divisor_ind_ind18 = -1;\n    let mut max_divisor_ind_ind19\
    \ = -1;\n    let mut max_divisor_ind_ind20 = -1;\n    let mut max_divisor_ind_ind21\
    \ = -1;\n    let mut max_divisor_ind_ind22 = -1;\n    let mut max_divisor_ind_ind23\
    \ = -1;\n    let mut max_divisor_ind_ind24 = -1;\n    let mut max_divisor_ind_ind25\
    \ = -1;\n    let mut max_divisor_ind_ind26 = -1;\n    let mut max_divisor_ind_ind27\
    \ = -1;\n    let mut max_divisor_ind_ind28 = -1;\n    let mut max_divisor_ind_ind29\
    \ = -1;\n    let mut max_divisor_ind_ind30 = -1;\n    let mut max_divisor_ind_ind31\
    \ = -1;\n    let mut max_divisor_ind_ind32 = -1;\n    let mut max_divisor_ind_ind33\
    \ = -1;\n    let mut max_divisor_ind_ind34 = -1;\n    let mut max_divisor_ind_ind35\
    \ = -1;\n    let mut max_divisor_ind_ind36 = -1;\n    let mut max_divisor_ind_ind37\
    \ = -1;\n    let mut max_divisor_ind_ind38 = -1;\n    let mut max_divisor_ind_ind39\
    \ = -1;\n    let mut max_divisor_ind_ind40 = -1;\n    let mut max_divisor_ind_ind41\
    \ = -1;\n    let mut max_divisor_ind_ind42 = -1;\n    let mut max_", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n            }\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n   \
    \ let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for\
    \ divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n         \
    \   if max_divisor < divisor {\n                max_divisor = divisor;\n     \
    \           max_divisor_index = divisor as usize;\n                max_divisor_value\
    \ = n / divisor;\n            }\n        }\n    }\n    max_divisor_index", " \
    \   let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 0;\n    let mut max_divisor5 = 0;\n    let\
    \ mut max_divisor6 = 0;\n    let mut max_divisor7 = 0;\n    let mut max_divisor8\
    \ = 0;\n    let mut max_divisor9 = 0;\n    let mut max_divisor10 = 0;\n    let\
    \ mut max_divisor11 = 0;\n    let mut max_divisor12 = 0;\n    let mut max_divisor13\
    \ = 0;\n    let mut max_divisor14 = 0;\n    let mut max_divisor15 = 0;\n    let\
    \ mut max_divisor16 = 0;\n    let mut max_divisor17 = 0;\n    let mut max_divisor18\
    \ = 0;\n    let mut max_divisor19 = 0;\n    let mut max_divisor20 = 0;\n    let\
    \ mut max_divisor21 = 0;\n    let mut max_divisor22 = 0;\n    let mut max_divisor23\
    \ = 0;\n    let mut max_divisor24 = 0;\n    let mut max_divisor25 = 0;\n    let\
    \ mut max_divisor26 = 0;\n    let mut max_divisor27 = 0;\n    let mut max_divisor28\
    \ = 0;\n    let mut max_divisor29 = 0;\n    let mut max_divisor30 = 0;\n    let\
    \ mut max_divisor31 = 0;\n    let mut max_divisor32 = 0;\n    let mut max_divisor33\
    \ = 0;\n    let mut max_divisor34 = 0;\n    let mut max_divisor35 = 0;\n    let\
    \ mut max_divisor36 = 0;\n    let mut max_divisor37 = 0;\n    let mut max_divisor38\
    \ = 0;\n    let mut max_divisor39 = 0;\n    let mut max_divisor40 = 0;\n    let\
    \ mut max_divisor41 = 0;\n    let mut max_divisor42 = 0;\n    let mut max_divisor43\
    \ = 0;\n    let mut max_divisor44 = 0;\n    let mut max_divisor45 = 0;\n    let\
    \ mut max_divisor46 = 0;\n    let mut max_divisor47 = 0;\n    let mut max_divisor48\
    \ = 0;\n    let mut max_divisor49 = 0;\n    let mut max_divisor50 = 0;\n    let\
    \ mut max_divisor51 = 0;\n    let mut max_divisor52 = 0;\n    let mut max_divisor53\
    \ = 0;\n    let mut max_divisor54 = 0;\n    let mut max_divisor55 = 0;\n    let\
    \ mut max_divisor56 = 0;\n    let mut max_divisor57 = 0;\n    let mut max_divisor58\
    \ = 0;\n    let mut max_divisor59 = 0;\n    let mut max_divisor60 = 0;\n    let\
    \ mut max_divisor61 = 0;\n    let mut max_divisor62 = 0;\n    let mut max_divisor63\
    \ = 0;\n    let mut max_divisor64 = 0;\n    let mut max_", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n      \
    \  if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d == max_divisor {\n            max_divisor_size\
    \ += 1;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n \
    \   let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n\n    for divisor in &[max_divisor, max_divisor2,\
    \ max_divisor3, max_divisor4, max_divisor5, max_divisor6, max_divisor7, max_divisor8,\
    \ max_divisor9, max_divisor10, max_divisor11, max_divisor12, max_divisor13, max_divisor14,\
    \ max_divisor15] {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n            }\n            if divisor\
    \ > max_divisor2 {\n                max_divisor2 = divisor;\n            }\n \
    \           if divisor > max_divisor3 {\n                max_divisor3 = divisor;\n\
    \            }\n            if divisor > max_divisor4 {\n                max_divisor4\
    \ = divisor;\n            }\n            if divisor > max_divisor5 {\n       \
    \         max_divisor5 = divisor;\n            }\n            if divisor > max_divisor6\
    \ {\n                max_divisor6 = divisor;\n            }\n            if divisor\
    \ > max_divisor7 {\n                max_divisor7 = divisor;\n            }\n \
    \           if divisor > max_divisor8 {\n                max_divisor8 = divisor;\n\
    \            }\n            if divisor > max_divisor9 {\n                max_divisor9\
    \ = divisor;\n            }\n            if divisor > max_divisor10 {\n      \
    \          max_divisor10 = divisor;\n            }\n            if divisor > max_divisor11\
    \ {\n                max_divisor11 = divisor;\n            }\n            if divisor\
    \ > max_divisor12 {\n                max_divisor12 = divisor;\n            }\n\
    \            if divisor > max_divisor13 {\n                max_divisor13 = divisor;\n\
    \            }\n            if divisor > max_divisor14 {\n                max_divisor14\
    \ = divisor;\n            }\n            if divisor > max_divisor15 {\n      \
    \          max_divisor15 = divisor;\n            }\n        }\n    }\n\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = n;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_ind = 1;\n\n    for i in 1..=max_divisor {\n \
    \       if n % i == 0 {\n            if max_divisor > i {\n                max_divisor\
    \ = i;\n                max_divisor_ind = 1;\n            } else {\n         \
    \       max_divisor_ind += 1;\n            }\n        }\n    }\n\n    max_divisor_ind",
  "    let mut largest = n;\n    let mut i = 1;\n    while i <= n {\n        if n\
    \ % i == 0 {\n            largest = i;\n        }\n        i += 1;\n    }\n  \
    \  largest", "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n\
    \    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_num = 0;\n\
    \    let mut max_divisor_size_num_size = 0;\n    let mut max_divisor_size_num_num\
    \ = 0;\n    let mut max_divisor_size_num_num_size = 0;\n    let mut max_divisor_size_num_num_num\
    \ = 0;\n    let mut max_divisor_size_num_num_num_size = 0;\n    let mut max_divisor_size_num_num_num_num\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_size = 0;\n    let mut max_divisor_size_num_num_num_num_num\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_size = 0;\n    let mut max_divisor_size_num_num_num_num_num\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_num_size = 0;\n    let mut\
    \ max_divisor_size_num_num_num_num_num_num = 0;\n    let mut max_divisor_size_num_num_num_num_num_size\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_num_num = 0;\n    let mut\
    \ max_divisor_size_num_num_num_num_num_size = 0;\n    let mut max_divisor_size_num_num_num_num_num_num\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_num_size = 0;\n    let mut\
    \ max_divisor_size_num_num_num_num_num_num = 0;\n    let mut max_divisor_size_num_num_num_num_num_size\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_num_num = 0;\n    let mut\
    \ max_divisor_size_num_num_num_num_num_size = 0;\n    let mut max_divisor_size_num_num_num_num_num_num\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_num_size = 0;\n    let mut\
    \ max_divisor_size_num_num_num_num_num_num = 0;\n    let mut max_divisor_size_num_num_num_num_num_size\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_num_num = 0;\n    let mut\
    \ max_divisor_size_num_num_num_num_num_size = 0;\n    let mut max_divisor_size_num_num_num_num_num_num\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_num_size = 0;\n    let mut\
    \ max_divisor_size_num_num_num_num_num_num = 0;\n    let mut max_divisor_size_num_num_num_num_num_size\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_num_num = 0;\n    let mut\
    \ max_divisor_size_num_num_num_num_num_size = 0;\n    let mut max_divisor_size_num_num_num_num_num_num\
    \ = 0;\n    let mut max_divisor_size_num_num_num_num_num_size = 0;\n    let mut\
    \ max_divisor_size_num_num_num_num_num_", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = n;\n    while max_divisor_size != 0 {\n        max_divisor\
    \ += 1;\n        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_value = 0;\n    for d in\
    \ divisors(n) {\n        if d > max_divisor {\n            max_divisor = d;\n\
    \            max_divisor_value = n;\n        }\n    }\n    max_divisor_value",
  "    let mut max_divisor = 0;\n    let mut max_divisor_idx = 1;\n    let mut max_divisor_value\
    \ = n;\n    let mut max_divisor_value_mod = n;\n\n    for divisor in &[2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97] {\n        if n % divisor == 0 {\n            if max_divisor < divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_idx =\
    \ 1;\n                max_divisor_value = n;\n                max_divisor_value_mod\
    \ = n;\n            }\n            else {\n                max_divisor_value =\
    \ n / divisor;\n                max_divisor_value_mod = n % divisor;\n       \
    \         max_divisor_idx++;\n            }\n        }\n    }\n\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = n;\n            }\n        } else {\n            break;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \            }\n        }\n    }\n    max_divisor_ind", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_2\
    \ = 1;\n    let mut max_divisor_ind_3 = 1;\n    let mut max_divisor_ind_4 = 1;\n\
    \    let mut max_divisor_ind_5 = 1;\n    let mut max_divisor_ind_6 = 1;\n    let\
    \ mut max_divisor_ind_7 = 1;\n    let mut max_divisor_ind_8 = 1;\n    let mut\
    \ max_divisor_ind_9 = 1;\n    let mut max_divisor_ind_10 = 1;\n    let mut max_divisor_ind_11\
    \ = 1;\n    let mut max_divisor_ind_12 = 1;\n    let mut max_divisor_ind_13 =\
    \ 1;\n    let mut max_divisor_ind_14 = 1;\n    let mut max_divisor_ind_15 = 1;\n\
    \    let mut max_divisor_ind_16 = 1;\n    let mut max_divisor_ind_17 = 1;\n  \
    \  let mut max_divisor_ind_18 = 1;\n    let mut max_divisor_ind_19 = 1;\n    let\
    \ mut max_divisor_ind_20 = 1;\n    let mut max_divisor_ind_21 = 1;\n    let mut\
    \ max_divisor_ind_22 = 1;\n    let mut max_divisor_ind_23 = 1;\n    let mut max_divisor_ind_24\
    \ = 1;\n    let mut max_divisor_ind_25 = 1;\n    let mut max_divisor_ind_26 =\
    \ 1;\n    let mut max_divisor_ind_27 = 1;\n    let mut max_divisor_ind_28 = 1;\n\
    \    let mut max_divisor_ind_29 = 1;\n    let mut max_divisor_ind_30 = 1;\n  \
    \  let mut max_divisor_ind_31 = 1;\n    let mut max_divisor_ind_32 = 1;\n    let\
    \ mut max_divisor_ind_33 = 1;\n    let mut max_divisor_ind_34 = 1;\n    let mut\
    \ max_divisor_ind_35 = 1;\n    let mut max_divisor_ind_36 = 1;\n    let mut max_divisor_ind_37\
    \ = 1;\n    let mut max_divisor_ind_38 = 1;\n    let mut max_divisor_ind_39 =\
    \ 1;\n    let mut max_divisor_ind_40 = 1;\n    let mut max_divisor_ind_41 = 1;\n\
    \    let mut max_divisor_ind_42 = 1;\n    let mut max_divisor_ind_43 = 1;\n  \
    \  let mut max_divisor_ind_44 = 1;\n    let mut max_divisor_ind_45 = 1;\n    let\
    \ mut max_divisor_ind_46 = 1;\n    let mut max_divisor_ind_47 = 1;\n    let mut\
    \ max_divisor_ind_48 = 1;\n    let mut max_divisor_ind_49 = 1;\n    let mut max_divisor_ind_50\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_size = 0;\n    let\
    \ mut max_divisor_size_divisor_divisor_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor =\
    \ 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    let mut max_divisor_ind_inv = -1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n", "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n\
    \    for d in 2..=max_divisor_size.clone() {\n        if n % d == 0 {\n      \
    \      if d > max_divisor {\n                max_divisor = d;\n            }\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = n;\n    let mut\
    \ max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in 1..=max_divisor {\n        if n % divisor == 0 {\n            if max_divisor_value\
    \ < divisor {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for divisor in\
    \ 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = 1;\n            } else {\n                max_divisor_index += 1;\n      \
    \      }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in 1..=n {\n   \
    \     if n % divisor == 0 {\n            if max_divisor_remainder < divisor {\n\
    \                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_index = 0;\n    for i in 1..=max_divisor {\n        if n % i\
    \ == 0 {\n            if max_divisor > i {\n                max_divisor = i;\n\
    \                max_divisor_index = i;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if max_divisor < divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        }\n    }\n    max_divisor_value", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n \
    \           if max_divisor < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n                max_divisor_value\
    \ = n;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = n;\n  \
    \  let mut max_divisor_index = 0;\n    for i in 1..=max_divisor {\n        if\
    \ n % i == 0 {\n            if max_divisor > i {\n                max_divisor\
    \ = i;\n                max_divisor_index = i;\n            }\n        }\n   \
    \ }\n    max_divisor_index", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for divisor in 1..=max_divisor {\n        if n % divisor == 0 {\n\
    \            max_divisor = divisor;\n            max_divisor_index = divisor;\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n    let\
    \ mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..n {\n        if n % i == 0 {\n            if max_divisor < i {\n        \
    \        max_divisor = i;\n                max_divisor_index = i;\n          \
    \  }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = 0;\n    for i in 1..=n {\n        if n % i ==\
    \ 0 {\n            if max_divisor < i {\n                max_divisor = i;\n  \
    \              max_divisor_size = 1;\n            }\n            else {\n    \
    \            max_divisor += 1;\n                max_divisor_size += 1;\n     \
    \       }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n        if n %\
    \ d == 0 {\n            if d > max_divisor {\n                max_divisor = d;\n\
    \                max_divisor_size = 1;\n            } else {\n               \
    \ max_divisor_size = max_divisor_size + 1;\n            }\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n   \
    \ let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = n;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_size = n;\n            }\n \
    \       }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut\
    \ max_divisor_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let ", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_ind = -1;\n    for i in 1..n {\n        if n %\
    \ i == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_ind = i;\n            }\n        }\n    }\n    max_divisor_ind",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 0 {\n        if n % max_divisor_size == 0 {\n            max_divisor_size\
    \ /= max_divisor_size;\n        } else {\n            max_divisor += 1;\n    \
    \        max_divisor_size = max_divisor_size / max_divisor;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 0 {\n        max_divisor += 1;\n        max_divisor_size = max_divisor_size\
    \ / 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \            }\n        }\n    }\n    max_divisor_ind", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor2 = 1;\n    for d in 2..=n {\n        if n % d\
    \ == 0 {\n            if d > max_divisor {\n                max_divisor = d;\n\
    \            }\n            if d > max_divisor2 {\n                max_divisor2\
    \ = d;\n            }\n        }\n    }\n    if max_divisor > max_divisor2 {\n\
    \        max_divisor\n    } else {\n        max_divisor2\n    }", "    let mut\
    \ max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = n;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut largest = n;\n    let mut divisor = 1;\n    while divisor < n {\n      \
    \  if n % divisor == 0 {\n            largest = divisor;\n        }\n        divisor\
    \ += 1;\n    }\n    largest", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 1 {\n        max_divisor += 1;\n       \
    \ max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor_remainder == 0 {\n  \
    \              max_divisor = i;\n                max_divisor_remainder = n % i;\n\
    \            } else {\n                if max_divisor_remainder > max_divisor\
    \ {\n                    max_divisor = max_divisor_remainder;\n              \
    \      max_divisor_remainder = n % max_divisor;\n                }\n         \
    \   }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_prime = 0;\n    let\
    \ mut max_divisor_ind_prime_prime = 0;\n    let mut max_divisor_ind_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime = 0;\n    let mut\
    \ max_divisor_ind_prime_prime_prime_prime_prime = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_ind_prime", "    let mut max_divisor = 1;\n  \
    \  let mut max_divisor_size = n;\n    for d in 2..=max_divisor_size {\n      \
    \  if n % d == 0 {\n            if d > max_divisor {\n                max_divisor\
    \ = d;\n                max_divisor_size = n;\n            }\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor_remainder < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_remainder = n % divisor;\n            }\n       \
    \ }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size % 2 == 0 {\n        max_divisor += 1;\n   \
    \     max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "   \
    \ let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_value = n;\n    for d in divisors(n) {\n     \
    \   if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = n;\n        }\n        if d > max_divisor_value {\n            max_divisor_value\
    \ = d;\n        }\n    }\n    max_divisor_value", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=max_divisor {\n        if n % i == 0 {\n            if\
    \ max_divisor > i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = n;\n\n    for divisor in 1..=n\
    \ {\n        if n % divisor == 0 {\n            if divisor > max_divisor {\n \
    \               max_divisor = divisor;\n                max_divisor_size = n;\n\
    \            }\n        } else {\n            break;\n        }\n    }\n\n   \
    \ max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index =\
    \ 0;\n    let mut max_divisor_value = n;\n\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        } else {\n\
    \            if max_divisor == i {\n                max_divisor_value = i;\n \
    \           }\n        }\n    }\n\n    max_divisor_value", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_index = 0;\n\
    \    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size\
    \ < i {\n                max_divisor_size = i;\n                max_divisor_index\
    \ = i;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = n % i;\n            }\n      \
    \  }\n    }\n    max_divisor_remainder", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 1;\n    let mut max_divisor_size\
    \ = n;\n    for divisor in 2..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = n;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i\
    \ in 1..n {\n        if n % i == 0 {\n            if max_divisor < i {\n     \
    \           max_divisor = i;\n                max_divisor_remainder = n % i;\n\
    \            }\n        }\n    }\n    if max_divisor == 0 {\n        max_divisor\
    \ = 1;\n    }\n    max_divisor_remainder", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_remainder = 0;\n    for i in 1..n {\n        let mut divisor\
    \ = i;\n        while divisor % 2 == 0 {\n            divisor /= 2;\n        }\n\
    \        if divisor > max_divisor {\n            max_divisor = divisor;\n    \
    \        max_divisor_remainder = i;\n        }\n    }\n    max_divisor_remainder",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_n = 0;\n    let mut max_divisor_remainder_n2 = 0;\n  \
    \  let mut max_divisor_remainder_n3 = 0;\n    let mut max_divisor_remainder_n4\
    \ = 0;\n    let mut max_divisor_remainder_n5 = 0;\n    let mut max_divisor_remainder_n6\
    \ = 0;\n    let mut max_divisor_remainder_n7 = 0;\n    let mut max_divisor_remainder_n8\
    \ = 0;\n    let mut max_divisor_remainder_n9 = 0;\n    let mut max_divisor_remainder_n10\
    \ = 0;\n    let mut max_divisor_remainder_n11 = 0;\n    let mut max_divisor_remainder_n12\
    \ = 0;\n    let mut max_divisor_remainder_n13 = 0;\n    let mut max_divisor_remainder_n14\
    \ = 0;\n    let mut max_divisor_remainder_n15 = 0;\n    let mut max_divisor_remainder_n16\
    \ = 0;\n    let mut max_divisor_remainder_n17 = 0;\n    let mut max_divisor_remainder_n18\
    \ = 0;\n    let mut max_divisor_remainder_n19 = 0;\n    let mut max_divisor_remainder_n20\
    \ = 0;\n    let mut max_divisor_remainder_n21 = 0;\n    let mut max_divisor_remainder_n22\
    \ = 0;\n    let mut max_divisor_remainder_n23 = 0;\n    let mut max_divisor_remainder_n24\
    \ = 0;\n    let mut max_divisor_remainder_n25 = 0;\n    let mut max_divisor_remainder_n26\
    \ = 0;\n    let mut max_divisor_remainder_n27 = 0;\n    let mut max_divisor_remainder_n28\
    \ = 0;\n    let mut max_divisor_remainder_n29 = 0;\n    let mut max_divisor_remainder_n30\
    \ = 0;\n    let mut max_divisor_remainder_n31 = 0;\n    let mut max_divisor_remainder_n32\
    \ = 0;\n    let mut max_divisor_remainder_n33 = 0;\n    let mut max_divisor_remainder_n34\
    \ = 0;\n    let mut max_divisor_remainder_n35 = 0;\n    let mut max_divisor_remainder_n36\
    \ = 0;\n    let mut max_divisor_remainder_n37 = 0;\n    let mut max_divisor_remainder_n38\
    \ = 0;\n    let mut max_divisor_remainder_n39 = 0;\n    let mut max_divisor_remainder_n40\
    \ = 0;\n    let mut max_divisor_remainder_n41 = 0;\n    let mut max_divisor_remainder_",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n\n   \
    \ for i in 1..=n {\n        let mut divisor = 1;\n        let mut divisor2 = 1;\n\
    \        let mut divisor3 = 1;\n        let mut divisor4 = 1;\n        let mut\
    \ divisor5 = 1;\n        let mut divisor6 = 1;\n        let mut divisor7 = 1;\n\
    \        let mut divisor8 = 1;\n        let mut divisor9 = 1;\n        let mut\
    \ divisor10 = 1;\n        let mut divisor11 = 1;\n        let mut divisor12 =\
    \ 1;\n        let mut divisor13 = 1;\n        let mut divisor14 = 1;\n       \
    \ let mut divisor15 = 1;\n\n        for j in 1..=i {\n            if i % j ==\
    \ 0 {\n                divisor *= j;\n            }\n            if i % j == 1\
    \ {\n                divisor2 *= j;\n            }\n            if i % j == 2\
    \ {\n                divisor3 *= j;\n            }\n            if i % j == 3\
    \ {\n                divisor4 *= j;\n            }\n            if i % j == 4\
    \ {\n                divisor5 *= j;\n            }\n            if i % j == 5\
    \ {\n                divisor6 *= j;\n            }\n            if i % j == 6\
    \ {\n                divisor7 *= j;\n            }\n            if i % j == 7\
    \ {\n                divisor8 *= j;\n            }\n            if i % j == 8\
    \ {\n                divisor9 *= j;\n            }\n            if i % j == 9\
    \ {\n                divisor10 *= j;\n            }\n            if i % j == 10\
    \ {\n                divisor11 *= j;\n            }\n            if i % j == 11\
    \ {\n                divisor12 *= j;\n            }\n            if i % j == 12\
    \ {\n                divisor13 *= j;\n            }\n            if i % j == 13\
    \ {\n                divisor14 *= j;\n            }\n            if i % j == 14\
    \ {\n                divisor15 *= j;\n            }\n        }\n\n        if divisor\
    \ > max_divisor {\n            max_divisor = divisor;\n        }\n        if divisor2\
    \ > max_divisor2 {\n            max_divisor2 = divisor2;\n        }\n        if\
    \ divisor3 > max_divisor3 {\n            max_divisor3 = divisor3;\n        }",
  "    let mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    for i in 1..n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_ind = i;\n            }\n  \
    \      }\n    }\n    max_divisor_ind", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_ind = -1;\n    for i in 1..=n {\n        if n % i == 0 {\n \
    \           if max_divisor < i {\n                max_divisor = i;\n         \
    \       max_divisor_ind = i;\n            }\n        }\n    }\n    max_divisor_ind",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes: Vec<isize>\
    \ = vec![];\n    while max_divisor % 2 == 0 {\n        max_divisor /= 2;\n   \
    \     max_divisor_indexes.push(max_divisor);\n    }\n    for i in max_divisor_indexes.iter()\
    \ {\n        if max_divisor % i == 0 {\n            max_divisor = i;\n       \
    \     max_divisor_index = i;\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_idx\
    \ = 1;\n    let mut max_divisor_remainder = 0;\n\n    while max_divisor_remainder\
    \ != 0 {\n        let mut max_divisor_remainder = max_divisor % max_divisor_remainder;\n\
    \        max_divisor = max_divisor_remainder;\n        max_divisor_idx++;\n  \
    \  }\n\n    max_divisor_idx", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n   \
    \ let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor_remainder == 0 {\n             \
    \   max_divisor = i;\n                max_divisor_remainder = n % i;\n       \
    \     } else {\n                if max_divisor_remainder > max_divisor {\n   \
    \                 max_divisor = i;\n                    max_divisor_remainder\
    \ = n % i;\n                }\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = n;\n\
    \            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor_remainder == 0 {\n                max_divisor = divisor;\n \
    \               max_divisor_remainder = n;\n                max_divisor_remainder_count\
    \ = 1;\n            } else {\n                if max_divisor_remainder > n {\n\
    \                    max_divisor = divisor;\n                    max_divisor_remainder\
    \ = n;\n                    max_divisor_remainder_count = 1;\n               \
    \ } else {\n                    if max_divisor_remainder == n {\n            \
    \            max_divisor = divisor;\n                        max_divisor_remainder\
    \ = n;\n                        max_divisor_remainder_count = 1;\n           \
    \         } else {\n                        if max_divisor_remainder > n {\n \
    \                           max_divisor = divisor;\n                         \
    \   max_divisor_remainder = n;\n                            max_divisor_remainder_count\
    \ = 1;\n                        } else {\n                            max_divisor_remainder_count\
    \ += 1;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisors = vec![];\n    for i in 1..=n {\n        if n %\
    \ i == 0 {\n            if max_divisor > i {\n                max_divisor = i;\n\
    \            }\n        } else {\n            if max_divisor > max_divisors.len()\
    \ {\n                max_divisors = vec![i];\n            } else {\n         \
    \       max_divisors.push(max_divisor);\n                max_divisor = i;\n  \
    \          }\n        }\n    }\n    if max_divisor > max_divisors.len() {\n  \
    \      max_divisors.push(max_divisor);\n    }\n    max_divisors", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in\
    \ 1..=n {\n        if n % divisor == 0 {\n            if max_divisor_remainder\
    \ < divisor {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n = 0;\n    let mut max_divisor_remainder_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n\
    \    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_", "    let mut max_divisor =\
    \ n;\n    let mut max_divisor_ind = 1;\n    for d in 2..=max_divisor {\n     \
    \   if n % d == 0 {\n            if d > max_divisor {\n                max_divisor\
    \ = d;\n                max_divisor_ind = 1;\n            } else {\n         \
    \       max_divisor_ind += 1;\n            }\n        }\n    }\n    max_divisor_ind",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = 0;\n    let mut max_divisor_value_index = 0;\n    let mut max_divisor_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let ", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor = n;\n    while max_divisor % 2 ==\
    \ 0 {\n        max_divisor /= 2;\n    }\n    while max_divisor % 3 == 0 {\n  \
    \      max_divisor /= 3;\n    }\n    while max_divisor % 5 == 0 {\n        max_divisor\
    \ /= 5;\n    }\n    while max_divisor % 7 == 0 {\n        max_divisor /= 7;\n\
    \    }\n    while max_divisor % 11 == 0 {\n        max_divisor /= 11;\n    }\n\
    \    while max_divisor % 13 == 0 {\n        max_divisor /= 13;\n    }\n    while\
    \ max_divisor % 17 == 0 {\n        max_divisor /= 17;\n    }\n    while max_divisor\
    \ % 19 == 0 {\n        max_divisor /= 19;\n    }\n    while max_divisor % 23 ==\
    \ 0 {\n        max_divisor /= 23;\n    }\n    while max_divisor % 29 == 0 {\n\
    \        max_divisor /= 29;\n    }\n    while max_divisor % 31 == 0 {\n      \
    \  max_divisor /= 31;\n    }\n    while max_divisor % 37 == 0 {\n        max_divisor\
    \ /= 37;\n    }\n    while max_divisor % 41 == 0 {\n        max_divisor /= 41;\n\
    \    }\n    while max_divisor % 43 == 0 {\n        max_divisor /= 43;\n    }\n\
    \    while max_divisor % 47 == 0 {\n        max_divisor /= 47;\n    }\n    while\
    \ max_divisor % 53 == 0 {\n        max_divisor /= 53;\n    }\n    while max_divisor\
    \ % 59 == 0 {\n        max_divisor /= 59;\n    }\n    while max_divisor % 61 ==\
    \ 0 {\n        max_divisor /= 61;\n    }\n    while max_divisor % 67 == 0 {\n\
    \        max_divisor /= 67;\n    }\n    while max_divisor % 71 == 0 {\n      \
    \  max_divisor /= 71;\n    }\n    while max_divisor % 73 == 0 {\n        max_divisor\
    \ /= 73;\n    }\n    while max_divisor % 79 == 0 {\n        max_divisor /= 79;\n\
    \    }\n    while max_divisor % 83 == 0 {\n        max_divisor /= 83;\n    }\n\
    \    while max_divisor % 89 == 0 {\n        max_divisor /= 89;\n    }\n    while\
    \ max_divisor % 97 == 0 {\n        max_divisor /= 97;\n    }\n    while max_divisor\
    \ % 103 == 0 {\n        max_divisor /= 103;\n    }\n    while max_divisor % 109\
    \ == 0 {\n        max_divisor /= 109;\n    }\n    while max_divisor % 113 == 0\
    \ {\n        max_divisor /= 113;\n    }\n    while max_", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes: Vec<usize>\
    \ = vec![];\n    for i in 1..=max_divisor {\n        if n % i == 0 {\n       \
    \     if max_divisor > i {\n                max_divisor = i;\n               \
    \ max_divisor_index = i;\n            }\n        } else {\n            if max_divisor\
    \ > i {\n                max_divisor = i;\n                max_divisor_indexes\
    \ = vec![i];\n            }\n        }\n    }\n    if max_divisor > n {\n    \
    \    max_divisor = n;\n        max_divisor_indexes = vec![n];\n    }\n    max_divisor_indexes.sort_unstable();\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for d in divisors(n) {\n        if d > max_divisor {\n           \
    \ max_divisor = d;\n            max_divisor_size = 1;\n        }\n        if d\
    \ > max_divisor_size {\n            max_divisor_size = d;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = n;\n            }\n        } else {\n          \
    \  break;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut largest = n;\n    let mut max_divisor = 1;\n    while largest % max_divisor\
    \ == 0 {\n        max_divisor *= 2;\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor {\n   \
    \             max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value = 0;\n\
    \    for d in divisors(n) {\n        if d > max_divisor {\n            max_divisor\
    \ = d;\n            max_divisor_size = n;\n            max_divisor_value = n;\n\
    \        }\n        if n % d == 0 {\n            n /= d;\n            if n > max_divisor_value\
    \ {\n                max_divisor_value = n;\n                max_divisor_size\
    \ = d;\n            }\n        }\n    }\n    max_divisor_value", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_remainder = n % d;\n       \
    \     }\n        }\n    }\n    if max_divisor_remainder == 0 {\n        max_divisor\n\
    \    } else {\n        max_divisor\n    }", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_size = n;\n    while max_divisor_size != 0 {\n        if\
    \ n % max_divisor_size == 0 {\n            max_divisor += max_divisor_size;\n\
    \        }\n        max_divisor_size /= 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind2 = -1;\n    let mut max_divisor_ind_ind3\
    \ = -1;\n    let mut max_divisor_ind_ind4 = -1;\n    let mut max_divisor_ind_ind5\
    \ = -1;\n    let mut max_divisor_ind_ind6 = -1;\n    let mut max_divisor_ind_ind7\
    \ = -1;\n    let mut max_divisor_ind_ind8 = -1;\n    let mut max_divisor_ind_ind9\
    \ = -1;\n    let mut max_divisor_ind_ind10 = -1;\n    let mut max_divisor_ind_ind11\
    \ = -1;\n    let mut max_divisor_ind_ind12 = -1;\n    let mut max_divisor_ind_ind13\
    \ = -1;\n    let mut max_divisor_ind_ind14 = -1;\n    let mut max_divisor_ind_ind15\
    \ = -1;\n    let mut max_divisor_ind_ind16 = -1;\n    let mut max_divisor_ind_ind17\
    \ = -1;\n    let mut max_divisor_ind_ind18 = -1;\n    let mut max_divisor_ind_ind19\
    \ = -1;\n    let mut max_divisor_ind_ind20 = -1;\n    let mut max_divisor_ind_ind21\
    \ = -1;\n    let mut max_divisor_ind_ind22 = -1;\n    let mut max_divisor_ind_ind23\
    \ = -1;\n    let mut max_divisor_ind_ind24 = -1;\n    let mut max_divisor_ind_ind25\
    \ = -1;\n    let mut max_divisor_ind_ind26 = -1;\n    let mut max_divisor_ind_ind27\
    \ = -1;\n    let mut max_divisor_ind_ind28 = -1;\n    let mut max_divisor_ind_ind29\
    \ = -1;\n    let mut max_divisor_ind_ind30 = -1;\n    let mut max_divisor_ind_ind31\
    \ = -1;\n    let mut max_divisor_ind_ind32 = -1;\n    let mut max_divisor_ind_ind33\
    \ = -1;\n    let mut max_divisor_ind_ind34 = -1;\n    let mut max_divisor_ind_ind35\
    \ = -1;\n    let mut max_divisor_ind_ind36 = -1;\n    let mut max_divisor_ind_ind37\
    \ = -1;\n    let mut max_divisor_ind_ind38 = -1;\n    let mut max_divisor_ind_ind39\
    \ = -1;\n    let mut max_divisor_ind_ind40 = -1;\n    let mut max_divisor_ind_ind41\
    \ = -1;\n    let mut max_divisor_ind_ind42 = -1;\n    let mut max_", "    let\
    \ mut largest = n;\n    let mut i = 1;\n    while i <= n {\n        if n % i ==\
    \ 0 {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for\
    \ divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor >\
    \ max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n\n   \
    \ for i in 1..=n {\n        if n % i == 0 {\n            if i % 2 == 0 {\n   \
    \             max_divisor2 = i;\n            }\n            if i % 3 == 0 {\n\
    \                max_divisor3 = i;\n            }\n            if i % 4 == 0 {\n\
    \                max_divisor4 = i;\n            }\n            if i % 5 == 0 {\n\
    \                max_divisor5 = i;\n            }\n            if i % 6 == 0 {\n\
    \                max_divisor6 = i;\n            }\n            if i % 7 == 0 {\n\
    \                max_divisor7 = i;\n            }\n            if i % 8 == 0 {\n\
    \                max_divisor8 = i;\n            }\n            if i % 9 == 0 {\n\
    \                max_divisor9 = i;\n            }\n            if i % 10 == 0\
    \ {\n                max_divisor10 = i;\n            }\n            if i % 11\
    \ == 0 {\n                max_divisor11 = i;\n            }\n            if i\
    \ % 12 == 0 {\n                max_divisor12 = i;\n            }\n           \
    \ if i % 13 == 0 {\n                max_divisor13 = i;\n            }\n      \
    \      if i % 14 == 0 {\n                max_divisor14 = i;\n            }\n \
    \           if i % 15 == 0 {\n                max_divisor15 = i;\n           \
    \ }\n        }\n    }\n\n    if max_divisor2 > max_divisor {\n        max_divisor\
    \ = max_divisor2;\n    }\n    if max_divisor3 > max_divisor {\n        max_divisor\
    \ = max_divisor3;\n    }\n    if max_divisor4 > max_divisor {\n        max_divisor\
    \ = max_divisor4;\n    }\n    if max_divisor5 > max_divisor {\n        max_divisor\
    \ = max_divisor5;\n    }\n    if max_divisor6 > max_divisor {\n        max_divisor\
    \ = max_divisor6;\n    }\n    if max_divisor7 > max_divisor {\n        max_divisor\
    \ = max_divisor7;\n    }\n    if max_divisor8 > max_divisor {\n        max_divisor\
    \ = max_divisor8;\n    }\n    if max_divisor9 > max_divisor {\n        max_divisor\
    \ = max_divisor9;\n    }\n    if max_divisor10 > max_divisor {\n        max_divisor\
    \ = max_divisor10;\n    }\n    if max_divisor11 > max_divisor {\n        max_divisor\
    \ = max_divisor11;\n    }\n    if max_divisor12 > ", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_size = i;\n            }\n        } else {\n\
    \            if max_divisor_size > i {\n                max_divisor = i;\n   \
    \             max_divisor_size = i;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = 0;\n    for i in 0..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n                max_divisor_value = i;\n            }\n            if max_divisor_value\
    \ < i {\n                max_divisor_value = i;\n            }\n        }\n  \
    \  }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for d in divisors(n) {\n        if d > max_divisor {\n           \
    \ max_divisor = d;\n            max_divisor_size = 1;\n        }\n        if d\
    \ == max_divisor {\n            max_divisor_size += 1;\n        }\n    }\n   \
    \ max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size =\
    \ 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if\
    \ divisor > max_divisor {\n                max_divisor = divisor;\n          \
    \      max_divisor_size = divisor;\n            } else {\n                max_divisor_size\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_remainder = n % i;\n       \
    \     }\n        }\n    }\n    max_divisor_remainder", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = n;\n    for divisor in &[2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97] {\n        if n % divisor == 0 {\n            if divisor > max_divisor {\n\
    \                max_divisor = divisor;\n                max_divisor_size = n;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n %\
    \ i == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_index = i;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if max_divisor_remainder\
    \ < divisor {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = 1;\n    for i in 1..=max_divisor {\n        if n % i == 0 {\n            if\
    \ max_divisor_value < i {\n                max_divisor_value = i;\n          \
    \      max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_value",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes:\
    \ Vec<isize> = vec![];\n    for i in 1..=max_divisor {\n        if n % i == 0\
    \ {\n            max_divisor = i;\n            max_divisor_indexes.push(i);\n\
    \        }\n    }\n    for i in max_divisor_indexes.iter() {\n        if max_divisor\
    \ % i == 0 {\n            max_divisor = max_divisor / i;\n            max_divisor_index\
    \ = i;\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 0;\n    let mut max_divisor5 = 0;\n    let mut max_divisor6 = 0;\n    let\
    \ mut max_divisor7 = 0;\n    let mut max_divisor8 = 0;\n    let mut max_divisor9\
    \ = 0;\n    let mut max_divisor10 = 0;\n    let mut max_divisor11 = 0;\n    let\
    \ mut max_divisor12 = 0;\n    let mut max_divisor13 = 0;\n    let mut max_divisor14\
    \ = 0;\n    let mut max_divisor15 = 0;\n\n    for i in 1..n {\n        if n %\
    \ i == 0 {\n            if i % 2 == 0 {\n                max_divisor2 = i;\n \
    \           }\n            if i % 3 == 0 {\n                max_divisor3 = i;\n\
    \            }\n            if i % 4 == 0 {\n                max_divisor4 = i;\n\
    \            }\n            if i % 5 == 0 {\n                max_divisor5 = i;\n\
    \            }\n            if i % 6 == 0 {\n                max_divisor6 = i;\n\
    \            }\n            if i % 7 == 0 {\n                max_divisor7 = i;\n\
    \            }\n            if i % 8 == 0 {\n                max_divisor8 = i;\n\
    \            }\n            if i % 9 == 0 {\n                max_divisor9 = i;\n\
    \            }\n            if i % 10 == 0 {\n                max_divisor10 =\
    \ i;\n            }\n            if i % 11 == 0 {\n                max_divisor11\
    \ = i;\n            }\n            if i % 12 == 0 {\n                max_divisor12\
    \ = i;\n            }\n            if i % 13 == 0 {\n                max_divisor13\
    \ = i;\n            }\n            if i % 14 == 0 {\n                max_divisor14\
    \ = i;\n            }\n            if i % 15 == 0 {\n                max_divisor15\
    \ = i;\n            }\n        }\n    }\n\n    if max_divisor2 > max_divisor {\n\
    \        max_divisor = max_divisor2;\n    }\n    if max_divisor3 > max_divisor\
    \ {\n        max_divisor = max_divisor3;\n    }\n    if max_divisor4 > max_divisor\
    \ {\n        max_divisor = max_divisor4;\n    }\n    if max_divisor5 > max_divisor\
    \ {\n        max_divisor = max_divisor5;\n    }\n    if max_divisor6 > max_divisor\
    \ {\n        max_divisor = max_divisor6;\n    }\n    if max_divisor7 > max_divisor\
    \ {\n        max_divisor = max_divisor7;\n    }\n    if max_divisor8 > max_divisor\
    \ {\n        max_divisor = max_divisor8;\n    }\n    if max_divisor9 > max_divisor\
    \ {\n        max_divisor = max_divisor9;\n    }\n    if max_divisor10 > max_divisor\
    \ {\n        max_divisor = max_divisor10;\n    }\n    if max_divisor11 > max_divisor\
    \ {\n        max_divisor = max_divisor11;\n    }\n    if max_divisor12 > max_divisor ",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for divisor\
    \ in 1..=max_divisor {\n        if n % divisor == 0 {\n            max_divisor\
    \ = divisor;\n            max_divisor_index = divisor;\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_size = 0;\n    let\
    \ mut max_divisor_size_divisor_divisor_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor =\
    \ 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n\n   \
    \ for i in 1..n {\n        if n % i == 0 {\n            if max_divisor < i {\n\
    \                max_divisor = i;\n            }\n            if max_divisor2\
    \ < i {\n                max_divisor2 = i;\n            }\n            if max_divisor3\
    \ < i {\n                max_divisor3 = i;\n            }\n            if max_divisor4\
    \ < i {\n                max_divisor4 = i;\n            }\n            if max_divisor5\
    \ < i {\n                max_divisor5 = i;\n            }\n            if max_divisor6\
    \ < i {\n                max_divisor6 = i;\n            }\n            if max_divisor7\
    \ < i {\n                max_divisor7 = i;\n            }\n            if max_divisor8\
    \ < i {\n                max_divisor8 = i;\n            }\n            if max_divisor9\
    \ < i {\n                max_divisor9 = i;\n            }\n            if max_divisor10\
    \ < i {\n                max_divisor10 = i;\n            }\n            if max_divisor11\
    \ < i {\n                max_divisor11 = i;\n            }\n            if max_divisor12\
    \ < i {\n                max_divisor12 = i;\n            }\n            if max_divisor13\
    \ < i {\n                max_divisor13 = i;\n            }\n            if max_divisor14\
    \ < i {\n                max_divisor14 = i;\n            }\n            if max_divisor15\
    \ < i {\n                max_divisor15 = i;\n            }\n        }\n    }\n\
    \n    if max_divisor == 1 {\n        max_divisor\n    } else if max_divisor2 ==\
    \ 1 {\n        max_divisor2\n    } else if max_divisor3 == 1 {\n        max_divisor3\n\
    \    } else if max_divisor4 == 1 {\n        max_divisor4\n    } else if max_divisor5\
    \ == 1 {\n        max_divisor5\n    } else if max_divisor6 == 1 {\n        max_divisor6\n\
    \    } else if max_divisor7 == 1 {\n        max_divisor7\n    } else if max_divisor8\
    \ == 1 {\n        max_divisor8\n    } else if max_divisor9 == 1 {\n        max_divisor9\n\
    \    } else if max_divisor10 == 1 {\n        max_divisor10\n    } else if max_divisor11\
    \ == 1 {\n        max_divisor11\n    } else if max_divisor12 == 1 {\n        max_divisor12\n\
    \    } else ", "    let mut max_divisor = 1;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_remainder = n % divisor;\n            }\n        }\n  \
    \  }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n   \
    \ let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_value = 0;\n    let mut max_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let mut max_divisor_value_value_value = 0;\n    let mut max_divisor_value_value_size\
    \ = 0;\n    let ", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n      \
    \  if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_size = 0;\n    for i in 1..=n {\n        if n % i == 0\
    \ {\n            if max_divisor_size == i {\n                max_divisor = i;\n\
    \            }\n            else {\n                max_divisor = i;\n       \
    \         max_divisor_size = i;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for divisor\
    \ in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if max_divisor\
    \ % divisor == 0 {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor as usize;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if max_divisor < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as usize;\n                max_divisor_value\
    \ = n / divisor;\n            }\n        }\n    }\n    max_divisor_index", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_idx = -1;\n    let mut max_divisor_value\
    \ = n;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_idx = i;\n\
    \            }\n            if max_divisor_value < i {\n                max_divisor_value\
    \ = i;\n            }\n        }\n    }\n    max_divisor_idx", "    let mut largest\
    \ = n;\n    let mut divisor = 1;\n    while divisor < n {\n        if n % divisor\
    \ == 0 {\n            largest = divisor;\n        }\n        divisor += 1;\n \
    \   }\n    largest", "    let mut max_divisor = 1;\n    let mut max_divisors =\
    \ Vec::new();\n    let mut max_divisors_index = 0;\n    let mut max_divisors_index2\
    \ = 0;\n    let mut max_divisors_index3 = 0;\n    let mut max_divisors_index4\
    \ = 0;\n    let mut max_divisors_index5 = 0;\n    let mut max_divisors_index6\
    \ = 0;\n    let mut max_divisors_index7 = 0;\n    let mut max_divisors_index8\
    \ = 0;\n    let mut max_divisors_index9 = 0;\n    let mut max_divisors_index10\
    \ = 0;\n    let mut max_divisors_index11 = 0;\n    let mut max_divisors_index12\
    \ = 0;\n    let mut max_divisors_index13 = 0;\n    let mut max_divisors_index14\
    \ = 0;\n    let mut max_divisors_index15 = 0;\n    let mut max_divisors_index16\
    \ = 0;\n    let mut max_divisors_index17 = 0;\n    let mut max_divisors_index18\
    \ = 0;\n    let mut max_divisors_index19 = 0;\n    let mut max_divisors_index20\
    \ = 0;\n    let mut max_divisors_index21 = 0;\n    let mut max_divisors_index22\
    \ = 0;\n    let mut max_divisors_index23 = 0;\n    let mut max_divisors_index24\
    \ = 0;\n    let mut max_divisors_index25 = 0;\n    let mut max_divisors_index26\
    \ = 0;\n    let mut max_divisors_index27 = 0;\n    let mut max_divisors_index28\
    \ = 0;\n    let mut max_divisors_index29 = 0;\n    let mut max_divisors_index30\
    \ = 0;\n    let mut max_divisors_index31 = 0;\n    let mut max_divisors_index32\
    \ = 0;\n    let mut max_divisors_index33 = 0;\n    let mut max_divisors_index34\
    \ = 0;\n    let mut max_divisors_index35 = 0;\n    let mut max_divisors_index36\
    \ = 0;\n    let mut max_divisors_index37 = 0;\n    let mut max_divisors_index38\
    \ = 0;\n    let mut max_divisors_index39 = 0;\n    let mut max_divisors_index40\
    \ = 0;\n    let mut max_divisors_index41 = 0;\n    let mut max_divisors_index42\
    \ = 0;\n    let mut max_divisors_index43 = 0;\n    let mut max_divisors_index44\
    \ = 0;\n    let mut max_divisors_index45 = 0;\n    let mut max_divisors_index46\
    \ = 0;\n    let mut max_divisors_index47 = 0;\n    let mut max_divisors_index48\
    \ = 0;\n    let mut max_divisors_index49 = 0;\n    let mut max_divisors_index50\
    \ = 0;", "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n \
    \   let mut max_divisor_value = n;\n    for divisor in 1..=max_divisor {\n   \
    \     if n % divisor == 0 {\n            if divisor > max_divisor {\n        \
    \        max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = n;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 1;\n    let\
    \ mut max_divisor_square = n;\n    while max_divisor_square > 1 {\n        max_divisor\
    \ = max_divisor + 1;\n        max_divisor_square = max_divisor_square * max_divisor;\n\
    \    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..n\
    \ {\n        if n % i == 0 {\n            if max_divisor_remainder == 0 {\n  \
    \              max_divisor = i;\n                max_divisor_remainder = n % i;\n\
    \            } else {\n                if max_divisor_remainder > max_divisor\
    \ {\n                    max_divisor = max_divisor_remainder;\n              \
    \      max_divisor_remainder = n % max_divisor;\n                }\n         \
    \   }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for\
    \ divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n         \
    \   if max_divisor < divisor {\n                max_divisor = divisor;\n     \
    \           max_divisor_index = divisor;\n                max_divisor_value =\
    \ n;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if max_divisor < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as usize;\n                max_divisor_value\
    \ = n / divisor;\n            }\n        }\n    }\n    max_divisor_index", " \
    \   let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut\
    \ max_divisor_index2 = 0;\n    let mut max_divisor_index3 = 0;\n    let mut max_divisor_index4\
    \ = 0;\n    let mut max_divisor_index5 = 0;\n    let mut max_divisor_index6 =\
    \ 0;\n    let mut max_divisor_index7 = 0;\n    let mut max_divisor_index8 = 0;\n\
    \    let mut max_divisor_index9 = 0;\n    let mut max_divisor_index10 = 0;\n \
    \   let mut max_divisor_index11 = 0;\n    let mut max_divisor_index12 = 0;\n \
    \   let mut max_divisor_index13 = 0;\n    let mut max_divisor_index14 = 0;\n \
    \   let mut max_divisor_index15 = 0;\n    let mut max_divisor_index16 = 0;\n \
    \   let mut max_divisor_index17 = 0;\n    let mut max_divisor_index18 = 0;\n \
    \   let mut max_divisor_index19 = 0;\n    let mut max_divisor_index20 = 0;\n \
    \   let mut max_divisor_index21 = 0;\n    let mut max_divisor_index22 = 0;\n \
    \   let mut max_divisor_index23 = 0;\n    let mut max_divisor_index24 = 0;\n \
    \   let mut max_divisor_index25 = 0;\n    let mut max_divisor_index26 = 0;\n \
    \   let mut max_divisor_index27 = 0;\n    let mut max_divisor_index28 = 0;\n \
    \   let mut max_divisor_index29 = 0;\n    let mut max_divisor_index30 = 0;\n \
    \   let mut max_divisor_index31 = 0;\n    let mut max_divisor_index32 = 0;\n \
    \   let mut max_divisor_index33 = 0;\n    let mut max_divisor_index34 = 0;\n \
    \   let mut max_divisor_index35 = 0;\n    let mut max_divisor_index36 = 0;\n \
    \   let mut max_divisor_index37 = 0;\n    let mut max_divisor_index38 = 0;\n \
    \   let mut max_divisor_index39 = 0;\n    let mut max_divisor_index40 = 0;\n \
    \   let mut max_divisor_index41 = 0;\n    let mut max_divisor_index42 = 0;\n \
    \   let mut max_divisor_index43 = 0;\n    let mut max_divisor_index44 = 0;\n \
    \   let mut max_divisor_index45 = 0;\n    let mut max_divisor_index46 = 0;\n \
    \   let mut max_divisor_index47 = 0;\n    let mut max_divisor_index48 = 0;\n \
    \   let mut max_divisor_index49 = 0;\n    let mut max_divisor_index50 = 0;\n \
    \   let mut max_divisor_index51 = 0;\n    let mut max_divisor_index52 = 0;\n \
    \   let mut max_divisor_index53 = 0;\n    let mut max_divisor_index54 = 0;\n \
    \   let mut max_divisor_index55 = 0;\n    let mut max_divisor_index56 = 0;\n \
    \   let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n\n    for divisor in 1..=n {\n   \
    \     if n % divisor == 0 {\n            if divisor > max_divisor {\n        \
    \        max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n\n    max_divisor_index", "   \
    \ let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    let mut max_divisor_size\
    \ = max_divisor_size / 2;\n    while max_divisor_size != 0 {\n        if n % max_divisor_size\
    \ == 0 {\n            max_divisor = max_divisor_size * max_divisor;\n        }\n\
    \        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut\
    \ max_divisor_value = n;\n    for divisor in 1..=n {\n        if n % divisor ==\
    \ 0 {\n            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n            }\n        } else {\n\
    \            if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count = 0;\n\
    \    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor", "    let mut largest = n;\n    let mut divisor\
    \ = 1;\n    while divisor <= n {\n        if n % divisor == 0 {\n            largest\
    \ = divisor;\n        }\n        divisor += 1;\n    }\n    largest", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    let mut max_divisor_value_pow = 1;\n\n    for divisor in 1..=n {\n\
    \        if n % divisor == 0 {\n            if divisor > max_divisor {\n     \
    \           max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = max_divisor_value_pow * divisor;\n      \
    \      }\n        } else {\n            max_divisor_value_pow *= divisor;\n  \
    \      }\n    }\n\n    max_divisor_value_pow", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_n =\
    \ 0;\n    let mut max_divisor_remainder_n2 = 0;\n    let mut max_divisor_remainder_n3\
    \ = 0;\n    let mut max_divisor_remainder_n4 = 0;\n    let mut max_divisor_remainder_n5\
    \ = 0;\n    let mut max_divisor_remainder_n6 = 0;\n    let mut max_divisor_remainder_n7\
    \ = 0;\n    let mut max_divisor_remainder_n8 = 0;\n    let mut max_divisor_remainder_n9\
    \ = 0;\n    let mut max_divisor_remainder_n10 = 0;\n    let mut max_divisor_remainder_n11\
    \ = 0;\n    let mut max_divisor_remainder_n12 = 0;\n    let mut max_divisor_remainder_n13\
    \ = 0;\n    let mut max_divisor_remainder_n14 = 0;\n    let mut max_divisor_remainder_n15\
    \ = 0;\n    let mut max_divisor_remainder_n16 = 0;\n    let mut max_divisor_remainder_n17\
    \ = 0;\n    let mut max_divisor_remainder_n18 = 0;\n    let mut max_divisor_remainder_n19\
    \ = 0;\n    let mut max_divisor_remainder_n20 = 0;\n    let mut max_divisor_remainder_n21\
    \ = 0;\n    let mut max_divisor_remainder_n22 = 0;\n    let mut max_divisor_remainder_n23\
    \ = 0;\n    let mut max_divisor_remainder_n24 = 0;\n    let mut max_divisor_remainder_n25\
    \ = 0;\n    let mut max_divisor_remainder_n26 = 0;\n    let mut max_divisor_remainder_n27\
    \ = 0;\n    let mut max_divisor_remainder_n28 = 0;\n    let mut max_divisor_remainder_n29\
    \ = 0;\n    let mut max_divisor_remainder_n30 = 0;\n    let mut max_divisor_remainder_n31\
    \ = 0;\n    let mut max_divisor_remainder_n32 = 0;\n    let mut max_divisor_remainder_n33\
    \ = 0;\n    let mut max_divisor_remainder_n34 = 0;\n    let mut max_divisor_remainder_n35\
    \ = 0;\n    let mut max_divisor_remainder_n36 = 0;\n    let mut max_divisor_remainder_n37\
    \ = 0;\n    let mut max_divisor_remainder_n38 = 0;\n    let mut max_divisor_remainder_n39\
    \ = 0;\n    let mut max_divisor_remainder_n40 = 0;\n    let mut max_divisor_remainder_n41\
    \ = 0;\n    let mut max_divisor_remainder_", "    let mut max_divisor = 1;\n \
    \   let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            let mut\
    \ divisor_size = d.checked_mul(n as isize).unwrap();\n            if divisor_size\
    \ > max_divisor_size {\n                max_divisor = d;\n                max_divisor_size\
    \ = divisor_size;\n                max_divisor_size_size = max_divisor_size.checked_mul(n\
    \ as isize).unwrap();\n            }\n        }\n    }\n    max_divisor_size",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = n;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_value", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if d\
    \ > max_divisor {\n                max_divisor = d;\n                max_divisor_remainder\
    \ = n % d;\n            }\n        }\n    }\n    if max_divisor_remainder == 0\
    \ {\n        max_divisor\n    } else {\n        max_divisor + 1\n    }", "   \
    \ let mut max_divisor = 1;\n    let mut max_divisors = Vec::new();\n    let mut\
    \ max_divisors_idx = 1;\n    let mut max_divisors_idxs = Vec::new();\n    let\
    \ mut max_divisors_idxs_idx = 1;\n    let mut max_divisors_idxs_idxs = Vec::new();\n\
    \    let mut max_divisors_idxs_idxs_idx = 1;\n    let mut max_divisors_idxs_idxs_idxs\
    \ = Vec::new();\n    let mut max_divisors_idxs_idxs_idxs_idx = 1;\n    let mut\
    \ max_divisors_idxs_idxs_idxs_idxs = Vec::new();\n    let mut max_divisors_idxs_idxs_idxs_idxs_idx\
    \ = 1;\n    let mut max_divisors_idxs_idxs_idxs_idxs_idxs = Vec::new();\n    let\
    \ mut max_divisors_idxs_idxs_idxs_idxs_idxs_idx = 1;\n    let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs\
    \ = Vec::new();\n    let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idx =\
    \ 1;\n    let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs = Vec::new();\n\
    \    let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idx = 1;\n    let\
    \ mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs = Vec::new();\n   \
    \ let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idx = 1;\n    let\
    \ mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs = Vec::new();\n\
    \    let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idx = 1;\n\
    \    let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs =\
    \ Vec::new();\n    let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idx\
    \ = 1;\n    let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs\
    \ = Vec::new();\n    let mut max_divisors_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idx\
    \ = 1;", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n\
    \    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count2\
    \ = 0;\n    let mut max_divisor_remainder_count3 = 0;\n    let mut max_divisor_remainder_count4\
    \ = 0;\n    let mut max_divisor_remainder_count5 = 0;\n    let mut max_divisor_remainder_count6\
    \ = 0;\n    let mut max_divisor_remainder_count7 = 0;\n    let mut max_divisor_remainder_count8\
    \ = 0;\n    let mut max_divisor_remainder_count9 = 0;\n    let mut max_divisor_remainder_count10\
    \ = 0;\n    let mut max_divisor_remainder_count11 = 0;\n    let mut max_divisor_remainder_count12\
    \ = 0;\n    let mut max_divisor_remainder_count13 = 0;\n    let mut max_divisor_remainder_count14\
    \ = 0;\n    let mut max_divisor_remainder_count15 = 0;\n    let mut max_divisor_remainder_count16\
    \ = 0;\n    let mut max_divisor_remainder_count17 = 0;\n    let mut max_divisor_remainder_count18\
    \ = 0;\n    let mut max_divisor_remainder_count19 = 0;\n    let mut max_divisor_remainder_count20\
    \ = 0;\n    let mut max_divisor_remainder_count21 = 0;\n    let mut max_divisor_remainder_count22\
    \ = 0;\n    let mut max_divisor_remainder_count23 = 0;\n    let mut max_divisor_remainder_count24\
    \ = 0;\n    let mut max_divisor_remainder_count25 = 0;\n    let mut max_divisor_remainder_count26\
    \ = 0;\n    let mut max_divisor_remainder_count27 = 0;\n    let mut max_divisor_remainder_count28\
    \ = 0;\n    let mut max_divisor_remainder_count29 = 0;\n    let mut max_divisor_remainder_count30\
    \ = 0;\n    let mut max_divisor_remainder_count31 = 0;\n    let mut max_divisor_remainder_count32\
    \ = 0;\n    let mut max_divisor_remainder_count33 = 0;\n    let mut max_divisor_remainder_count34\
    \ = 0;\n    let mut max_divisor_remainder_count35 = 0;\n    let mut max_divisor_remainder_count36\
    \ = 0;\n    let mut max_divisor_remainder_count37 = 0;\n    let mut max_divisor_remainder_count38\
    \ = 0;\n    let mut max_divisor_remainder_count39 = 0;\n    let mut max_divisor_remainder_count40\
    \ = 0;\n    let mut max_divisor_remainder_count41 = 0;\n    let mut max_divisor_remainder_count",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_size = n;\n    let mut max_divisor_value = n;\n\n    for\
    \ divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor >\
    \ max_divisor {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = max_divisor_value - divisor;\n            }\n        }\n    }\n\n    max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisor_ind = 1;\n    while max_divisor\
    \ % 2 == 0 {\n        max_divisor /= 2;\n        max_divisor_ind++;\n    }\n \
    \   max_divisor_ind", "    let mut max_divisor = 1;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        max_divisor_size /= 2;\n  \
    \      max_divisor *= 2;\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n\
    \    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_ind = i;\n            }\n  \
    \      }\n    }\n    max_divisor_ind", "    let mut max_divisor = 1;\n    let\
    \ mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = 1;\n    let mut max_divisor_ind_2 = 1;\n    let mut max_divisor_ind_3 = 1;\n\
    \    let mut max_divisor_ind_4 = 1;\n    let mut max_divisor_ind_5 = 1;\n    let\
    \ mut max_divisor_ind_6 = 1;\n    let mut max_divisor_ind_7 = 1;\n    let mut\
    \ max_divisor_ind_8 = 1;\n    let mut max_divisor_ind_9 = 1;\n    let mut max_divisor_ind_10\
    \ = 1;\n    let mut max_divisor_ind_11 = 1;\n    let mut max_divisor_ind_12 =\
    \ 1;\n    let mut max_divisor_ind_13 = 1;\n    let mut max_divisor_ind_14 = 1;\n\
    \    let mut max_divisor_ind_15 = 1;\n\n    for i in 1..n {\n        if n % i\
    \ == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_ind = i;\n            }\n            if max_divisor_ind\
    \ != i {\n                max_divisor_ind_2 = i;\n            }\n            if\
    \ max_divisor_ind_2 != i {\n                max_divisor_ind_3 = i;\n         \
    \   }\n            if max_divisor_ind_3 != i {\n                max_divisor_ind_4\
    \ = i;\n            }\n            if max_divisor_ind_4 != i {\n             \
    \   max_divisor_ind_5 = i;\n            }\n            if max_divisor_ind_5 !=\
    \ i {\n                max_divisor_ind_6 = i;\n            }\n            if max_divisor_ind_6\
    \ != i {\n                max_divisor_ind_7 = i;\n            }\n            if\
    \ max_divisor_ind_7 != i {\n                max_divisor_ind_8 = i;\n         \
    \   }\n            if max_divisor_ind_8 != i {\n                max_divisor_ind_9\
    \ = i;\n            }\n            if max_divisor_ind_9 != i {\n             \
    \   max_divisor_ind_10 = i;\n            }\n            if max_divisor_ind_10\
    \ != i {\n                max_divisor_ind_11 = i;\n            }\n           \
    \ if max_divisor_ind_11 != i {\n                max_divisor_ind_12 = i;\n    \
    \        }\n            if max_divisor_ind_12 != i {\n                max_divisor_ind_13\
    \ = i;\n            }\n            if max_divisor_ind_13 != i {\n            \
    \    max_divisor_ind_14 = i;\n            }\n            if max_divisor_ind_14\
    \ != i {\n                max_divisor_ind_15 = i;\n            }\n        }\n\
    \    }\n\n    max_divisor_ind_15", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_value", "    let\
    \ mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes:\
    \ Vec<usize> = vec![max_divisor_index];\n\n    for divisor in 1..=max_divisor\
    \ {\n        if n % divisor == 0 {\n            max_divisor = divisor;\n     \
    \       max_divisor_index = divisor;\n        }\n    }\n\n    max_divisor_indexes.push(max_divisor_index);\n\
    \n    for divisor in max_divisor_indexes.iter().rev() {\n        if divisor >\
    \ max_divisor {\n            max_divisor = divisor;\n            max_divisor_index\
    \ = divisor;\n        }\n    }\n\n    max_divisor_index", "    let mut largest\
    \ = n;\n    let mut divisor = 1;\n    while divisor < n {\n        if n % divisor\
    \ == 0 {\n            largest = divisor;\n        }\n        divisor += 1;\n \
    \   }\n    largest", "    let mut max_divisor = 1;\n    let mut max_divisor2 =\
    \ 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut\
    \ max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 =\
    \ 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut\
    \ max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in\
    \ 1..=n {\n        if n % divisor == 0 {\n            if max_divisor_remainder\
    \ > divisor {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = max_divisor_remainder - divisor;\n            }\n        } else {\n      \
    \      max_divisor_remainder += divisor;\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n\n    for i in 1..n {\n        if n % i == 0 {\n   \
    \         if i % 2 == 0 {\n                max_divisor2 = i;\n            }\n\
    \            if i % 3 == 0 {\n                max_divisor3 = i;\n            }\n\
    \            if i % 4 == 0 {\n                max_divisor4 = i;\n            }\n\
    \            if i % 5 == 0 {\n                max_divisor5 = i;\n            }\n\
    \            if i % 6 == 0 {\n                max_divisor6 = i;\n            }\n\
    \            if i % 7 == 0 {\n                max_divisor7 = i;\n            }\n\
    \            if i % 8 == 0 {\n                max_divisor8 = i;\n            }\n\
    \            if i % 9 == 0 {\n                max_divisor9 = i;\n            }\n\
    \            if i % 10 == 0 {\n                max_divisor10 = i;\n          \
    \  }\n            if i % 11 == 0 {\n                max_divisor11 = i;\n     \
    \       }\n            if i % 12 == 0 {\n                max_divisor12 = i;\n\
    \            }\n            if i % 13 == 0 {\n                max_divisor13 =\
    \ i;\n            }\n            if i % 14 == 0 {\n                max_divisor14\
    \ = i;\n            }\n            if i % 15 == 0 {\n                max_divisor15\
    \ = i;\n            }\n        }\n    }\n\n    if max_divisor2 > max_divisor {\n\
    \        max_divisor = max_divisor2;\n    }\n    if max_divisor3 > max_divisor\
    \ {\n        max_divisor = max_divisor3;\n    }\n    if max_divisor4 > max_divisor\
    \ {\n        max_divisor = max_divisor4;\n    }\n    if max_divisor5 > max_divisor\
    \ {\n        max_divisor = max_divisor5;\n    }\n    if max_divisor6 > max_divisor\
    \ {\n        max_divisor = max_divisor6;\n    }\n    if max_divisor7 > max_divisor\
    \ {\n        max_divisor = max_divisor7;\n    }\n    if max_divisor8 > max_divisor\
    \ {\n        max_divisor = max_divisor8;\n    }\n    if max_divisor9 > max_divisor\
    \ {\n        max_divisor = max_divisor9;\n    }\n    if max_divisor10 > max_divisor\
    \ {\n        max_divisor = max_divisor10;\n    }\n    if max_divisor11 > max_divisor\
    \ {\n        max_divisor = max_divisor11;\n    }\n    if max_divisor12 > max_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i\
    \ in 1..=n {\n        if n % i == 0 {\n            if max_divisor_remainder ==\
    \ 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            } else {\n                if max_divisor_remainder > max_divisor\
    \ {\n                    max_divisor = max_divisor_remainder;\n              \
    \      max_divisor_remainder = n % max_divisor;\n                }\n         \
    \   }\n        }\n    }\n    max_divisor", "    let mut max_divisor = n;\n   \
    \ let mut max_divisor_ind = 1;\n\n    for divisor in 1..=max_divisor {\n     \
    \   if n % divisor == 0 {\n            max_divisor = divisor;\n            max_divisor_ind\
    \ = 1;\n        }\n        else {\n            max_divisor_ind += 1;\n       \
    \ }\n    }\n\n    max_divisor_ind", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_size = 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n\
    \            if max_divisor_size == 0 {\n                max_divisor = d;\n  \
    \              max_divisor_size = 1;\n            } else {\n                if\
    \ d > max_divisor {\n                    max_divisor = d;\n                  \
    \  max_divisor_size = 1;\n                } else {\n                    max_divisor_size\
    \ += 1;\n                }\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_value = 0;\n    let\
    \ mut max_divisor_value_found = false;\n    for divisor in 1..=n {\n        if\
    \ n % divisor == 0 {\n            if max_divisor < divisor {\n               \
    \ max_divisor = divisor;\n                max_divisor_index = divisor;\n     \
    \           max_divisor_value = divisor;\n                max_divisor_value_found\
    \ = true;\n            }\n        } else {\n            if max_divisor_value_found\
    \ {\n                if max_divisor < divisor {\n                    max_divisor\
    \ = divisor;\n                    max_divisor_index = divisor;\n             \
    \       max_divisor_value = divisor;\n                }\n            } else {\n\
    \                max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = divisor;\n                max_divisor_value_found\
    \ = true;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = n;\n    for divisor in 1..=n {\n      \
    \  if n % divisor == 0 {\n            if divisor > max_divisor {\n           \
    \     max_divisor = divisor;\n                max_divisor_size = n;\n        \
    \    }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_index = 0;\n    for divisor in 1..=n {\n        if n %\
    \ divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_index = 1;\n            } else if divisor\
    \ == max_divisor {\n                max_divisor_index += 1;\n            }\n \
    \       }\n    }\n    max_divisor_index", "    let mut max_divisor = 1;\n    let\
    \ mut max_divisor_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let ", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut\
    \ max_divisor_value = n;\n    for divisor in 1..=n {\n        if n % divisor ==\
    \ 0 {\n            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n                max_divisor_value\
    \ = n;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value\
    \ = 0;\n    let mut max_divisor_value_divisor = 0;\n    let mut max_divisor_value_divisor_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size != 0 {\n\
    \        if n % max_divisor == 0 {\n            max_divisor += 1;\n        }\n\
    \        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", " \
    \   let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = n;\n            }\n        }\n    }\n    max_divisor",
  "    let mut largest = n;\n    let mut i = 1;\n    while i <= n {\n        if n\
    \ % i == 0 {\n            largest = i;\n        }\n        i += 1;\n    }\n  \
    \  largest", "    let mut max_divisor = 1;\n    let mut max_divisor_ind = 1;\n\
    \    let mut max_divisor_ind_2 = 1;\n    let mut max_divisor_ind_3 = 1;\n    let\
    \ mut max_divisor_ind_4 = 1;\n    let mut max_divisor_ind_5 = 1;\n    let mut\
    \ max_divisor_ind_6 = 1;\n    let mut max_divisor_ind_7 = 1;\n    let mut max_divisor_ind_8\
    \ = 1;\n    let mut max_divisor_ind_9 = 1;\n    let mut max_divisor_ind_10 = 1;\n\
    \    let mut max_divisor_ind_11 = 1;\n    let mut max_divisor_ind_12 = 1;\n  \
    \  let mut max_divisor_ind_13 = 1;\n    let mut max_divisor_ind_14 = 1;\n    let\
    \ mut max_divisor_ind_15 = 1;\n\n    for i in 1..n {\n        if n % i == 0 {\n\
    \            if max_divisor < i {\n                max_divisor = i;\n        \
    \        max_divisor_ind = i;\n                max_divisor_ind_2 = i;\n      \
    \          max_divisor_ind_3 = i;\n                max_divisor_ind_4 = i;\n  \
    \              max_divisor_ind_5 = i;\n                max_divisor_ind_6 = i;\n\
    \                max_divisor_ind_7 = i;\n                max_divisor_ind_8 = i;\n\
    \                max_divisor_ind_9 = i;\n                max_divisor_ind_10 =\
    \ i;\n                max_divisor_ind_11 = i;\n                max_divisor_ind_12\
    \ = i;\n                max_divisor_ind_13 = i;\n                max_divisor_ind_14\
    \ = i;\n                max_divisor_ind_15 = i;\n            }\n            if\
    \ max_divisor_ind != i {\n                max_divisor_ind = i;\n             \
    \   max_divisor_ind_2 = i;\n                max_divisor_ind_3 = i;\n         \
    \       max_divisor_ind_4 = i;\n                max_divisor_ind_5 = i;\n     \
    \           max_divisor_ind_6 = i;\n                max_divisor_ind_7 = i;\n \
    \               max_divisor_ind_8 = i;\n                max_divisor_ind_9 = i;\n\
    \                max_divisor_ind_10 = i;\n                max_divisor_ind_11 =\
    \ i;\n                max_divisor_ind_12 = i;\n                max_divisor_ind_13\
    \ = i;\n                max_divisor_ind_14 = i;\n                max_divisor_ind_15\
    \ = i;\n            }\n            if max_divisor_ind_2 != i {\n             \
    \   max_divisor_ind_2 = i;\n                max_divisor_ind_3 = i;\n         \
    \       max_divisor_ind_4 = i;\n                max_divisor_ind_5 = i;\n     \
    \           max_divisor_ind_6 = i;\n                max_divisor_ind_7 = i;\n \
    \               max_divisor_ind_8 = i;\n                max_divisor_ind_9 = i;\n\
    \                max_divisor_ind_10 = i;\n                max_divisor_ind_11 =\
    \ i;\n                max_divisor_ind_12 = i;\n                max_divisor_ind_13\
    \ = i;\n                max_divisor_ind_14 = i;\n                max_divisor_in",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_size = 1;\n            } else\
    \ {\n                max_divisor += d;\n                max_divisor_size = 2;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n \
    \           if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n                max_divisor_value\
    \ = n;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut "]
stop_tokens:
- "\n}"
