name: HumanEval_24_largest_divisor
language: rs
prompt: "/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n\
    \    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_remainder\
    \ > 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = max_divisor_remainder % i;\n            } else {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = 0;\n            }\n        }\n\
    \    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 1;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size % 2 == 0 {\n        max_divisor_size /= 2;\n\
    \        max_divisor *= 2;\n    }\n    while max_divisor_size % 3 == 0 {\n   \
    \     max_divisor_size /= 3;\n        max_divisor *= 3;\n    }\n    while max_divisor_size\
    \ % 5 == 0 {\n        max_divisor_size /= 5;\n        max_divisor *= 5;\n    }\n\
    \    while max_divisor_size % 7 == 0 {\n        max_divisor_size /= 7;\n     \
    \   max_divisor *= 7;\n    }\n    while max_divisor_size % 11 == 0 {\n       \
    \ max_divisor_size /= 11;\n        max_divisor *= 11;\n    }\n    while max_divisor_size\
    \ % 13 == 0 {\n        max_divisor_size /= 13;\n        max_divisor *= 13;\n \
    \   }\n    while max_divisor_size % 17 == 0 {\n        max_divisor_size /= 17;\n\
    \        max_divisor *= 17;\n    }\n    while max_divisor_size % 19 == 0 {\n \
    \       max_divisor_size /= 19;\n        max_divisor *= 19;\n    }\n    while\
    \ max_divisor_size % 23 == 0 {\n        max_divisor_size /= 23;\n        max_divisor\
    \ *= 23;\n    }\n    while max_divisor_size % 29 == 0 {\n        max_divisor_size\
    \ /= 29;\n        max_divisor *= 29;\n    }\n    while max_divisor_size % 31 ==\
    \ 0 {\n        max_divisor_size /= 31;\n        max_divisor *= 31;\n    }\n  \
    \  while max_divisor_size % 37 == 0 {\n        max_divisor_size /= 37;\n     \
    \   max_divisor *= 37;\n    }\n    while max_divisor_size % 41 == 0 {\n      \
    \  max_divisor_size /= 41;\n        max_divisor *= 41;\n    }\n    while max_divisor_size\
    \ % 43 == 0 {\n        max_divisor_size /= 43;\n        max_divisor *= 43;\n \
    \   }\n    while max_divisor_size % 47 == 0 {\n        max_divisor_size /= 47;\n\
    \        max_divisor *= 47;\n    }\n    while max_divisor_size % 53 == 0 {\n \
    \       max_divisor_size /= 53;\n        max_divisor *= 53;\n    }\n    while\
    \ max_divisor_size % 59 == 0 {\n        max_divisor_size /= 59;\n        max_divisor\
    \ *= 59;\n    }\n    while max_divisor_size % 61 == 0 {\n        max_divisor_size\
    \ /= 61;\n        max_divisor *= 61;\n    }\n    while max_divisor_size % 67 ==\
    \ 0 {\n        max_divisor_size /= 67;\n        max_divisor *= 67;\n    }\n  \
    \  while max_divisor_size % 71 == 0 {\n        max_divisor_size /= 71;\n     \
    \   max_", "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let\
    \ mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5\
    \ = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let\
    \ mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10\
    \ = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let\
    \ mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15\
    \ = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let\
    \ mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20\
    \ = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let\
    \ mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25\
    \ = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let\
    \ mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30\
    \ = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let\
    \ mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35\
    \ = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let\
    \ mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40\
    \ = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let\
    \ mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45\
    \ = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let\
    \ mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50\
    \ = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let\
    \ mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55\
    \ = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let\
    \ mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60\
    \ = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let\
    \ mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_pow = 1;\n\
    \    let mut max_divisor_ind_pow2 = 1;\n    let mut max_divisor_ind_pow3 = 1;\n\
    \    let mut max_divisor_ind_pow4 = 1;\n    let mut max_divisor_ind_pow5 = 1;\n\
    \    let mut max_divisor_ind_pow6 = 1;\n    let mut max_divisor_ind_pow7 = 1;\n\
    \    let mut max_divisor_ind_pow8 = 1;\n    let mut max_divisor_ind_pow9 = 1;\n\
    \    let mut max_divisor_ind_pow10 = 1;\n    let mut max_divisor_ind_pow11 = 1;\n\
    \    let mut max_divisor_ind_pow12 = 1;\n    let mut max_divisor_ind_pow13 = 1;\n\
    \    let mut max_divisor_ind_pow14 = 1;\n    let mut max_divisor_ind_pow15 = 1;\n\
    \    let mut max_divisor_ind_pow16 = 1;\n    let mut max_divisor_ind_pow17 = 1;\n\
    \    let mut max_divisor_ind_pow18 = 1;\n    let mut max_divisor_ind_pow19 = 1;\n\
    \    let mut max_divisor_ind_pow20 = 1;\n    let mut max_divisor_ind_pow21 = 1;\n\
    \    let mut max_divisor_ind_pow22 = 1;\n    let mut max_divisor_ind_pow23 = 1;\n\
    \    let mut max_divisor_ind_pow24 = 1;\n    let mut max_divisor_ind_pow25 = 1;\n\
    \    let mut max_divisor_ind_pow26 = 1;\n    let mut max_divisor_ind_pow27 = 1;\n\
    \    let mut max_divisor_ind_pow28 = 1;\n    let mut max_divisor_ind_pow29 = 1;\n\
    \    let mut max_divisor_ind_pow30 = 1;\n    let mut max_divisor_ind_pow31 = 1;\n\
    \    let mut max_divisor_ind_pow32 = 1;\n    let mut max_divisor_ind_pow33 = 1;\n\
    \    let mut max_divisor_ind_pow34 = 1;\n    let mut max_divisor_ind_pow35 = 1;\n\
    \    let mut max_divisor_ind_pow36 = 1;\n    let mut max_divisor_ind_pow37 = 1;\n\
    \    let mut max_divisor_ind_pow38 = 1;\n    let mut max_divisor_ind_pow39 = 1;\n\
    \    let mut max_divisor_ind_pow40 = 1;\n    let mut max_divisor_ind_pow41 = 1;\n\
    \    let mut max_divisor_ind_pow42 = 1;\n    let mut max_divisor_ind_pow43 = 1;\n\
    \    let mut max_divisor_ind_pow44 = 1;\n    let mut max_divisor_ind_pow45 = 1;\n\
    \    let mu", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n\n    for i in 1..=n {\n\
    \        if n % i == 0 {\n            let divisor = i as isize;\n            if\
    \ divisor > max_divisor {\n                max_divisor = divisor;\n          \
    \      max_divisor_remainder = i;\n                max_divisor_remainder_count\
    \ = 0;\n            }\n            if divisor == max_divisor {\n             \
    \   max_divisor_remainder_count += 1;\n            }\n        }\n    }\n\n   \
    \ if max_divisor_remainder_count == 0 {\n        max_divisor_remainder_count =\
    \ 1;\n    }\n\n    max_divisor_remainder / max_divisor_remainder_count", "   \
    \ let mut largest = n;\n    let mut max_divisor = 1;\n    while largest % max_divisor\
    \ == 0 {\n        max_divisor *= 2;\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = n % i;\n            }\n      \
    \  }\n    }\n    if max_divisor_remainder == 0 {\n        max_divisor\n    } else\
    \ {\n        max_divisor + 1\n    }", "    let mut max_divisor = n;\n    let mut\
    \ max_divisor_ind = 1;\n    let mut max_divisor_ind_2 = 1;\n    let mut max_divisor_ind_3\
    \ = 1;\n    let mut max_divisor_ind_4 = 1;\n\n    while max_divisor % 2 == 0 {\n\
    \        max_divisor /= 2;\n        max_divisor_ind += 1;\n    }\n\n    while\
    \ max_divisor % 3 == 0 {\n        max_divisor /= 3;\n        max_divisor_ind +=\
    \ 1;\n    }\n\n    while max_divisor % 4 == 0 {\n        max_divisor /= 4;\n \
    \       max_divisor_ind += 1;\n    }\n\n    while max_divisor % 5 == 0 {\n   \
    \     max_divisor /= 5;\n        max_divisor_ind += 1;\n    }\n\n    while max_divisor\
    \ % 6 == 0 {\n        max_divisor /= 6;\n        max_divisor_ind += 1;\n    }\n\
    \n    while max_divisor % 7 == 0 {\n        max_divisor /= 7;\n        max_divisor_ind\
    \ += 1;\n    }\n\n    while max_divisor % 8 == 0 {\n        max_divisor /= 8;\n\
    \        max_divisor_ind += 1;\n    }\n\n    while max_divisor % 9 == 0 {\n  \
    \      max_divisor /= 9;\n        max_divisor_ind += 1;\n    }\n\n    while max_divisor\
    \ % 10 == 0 {\n        max_divisor /= 10;\n        max_divisor_ind += 1;\n   \
    \ }\n\n    while max_divisor % 11 == 0 {\n        max_divisor /= 11;\n       \
    \ max_divisor_ind += 1;\n    }\n\n    while max_divisor % 12 == 0 {\n        max_divisor\
    \ /= 12;\n        max_divisor_ind += 1;\n    }\n\n    while max_divisor % 13 ==\
    \ 0 {\n        max_divisor /= 13;\n        max_divisor_ind += 1;\n    }\n\n  \
    \  while max_divisor % 14 == 0 {\n        max_divisor /= 14;\n        max_divisor_ind\
    \ += 1;\n    }\n\n    while max_divisor % 15 == 0 {\n        max_divisor /= 15;\n\
    \        max_divisor_ind += 1;\n    }\n\n    max_divisor_ind_2", "    let mut\
    \ max_divisor = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 0 {\n        max_divisor = max_divisor_size / 2;\n        max_divisor_size\
    \ = max_divisor % n;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = 0;\n    let mut max_divisor_value = 0;\n    for\
    \ i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size == i\
    \ {\n                max_divisor_value = i;\n            }\n            if max_divisor_size\
    \ > i {\n                max_divisor_size = i;\n            }\n        }\n   \
    \ }\n    max_divisor_value", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor = n;\n    for divisor in 1..=max_divisor\
    \ {\n        if n % divisor == 0 {\n            max_divisor = divisor;\n     \
    \   }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor_size < i {\n                max_divisor\
    \ = i;\n                max_divisor_size = i;\n                max_divisor_size_size\
    \ = 1;\n            }\n            if max_divisor_size == i {\n              \
    \  max_divisor_size_size++;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if max_divisor < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as isize;\n                max_divisor_value\
    \ = n;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count_index = 0;\n    let mut max_divisor_remainder_count_index2\
    \ = 0;\n    let mut max_divisor_remainder_count_index3 = 0;\n    let mut max_divisor_remainder_count_index4\
    \ = 0;\n    let mut max_divisor_remainder_count_index5 = 0;\n    let mut max_divisor_remainder_count_index6\
    \ = 0;\n    let mut max_divisor_remainder_count_index7 = 0;\n    let mut max_divisor_remainder_count_index8\
    \ = 0;\n    let mut max_divisor_remainder_count_index9 = 0;\n    let mut max_divisor_remainder_count_index10\
    \ = 0;\n    let mut max_divisor_remainder_count_index11 = 0;\n    let mut max_divisor_remainder_count_index12\
    \ = 0;\n    let mut max_divisor_remainder_count_index13 = 0;\n    let mut max_divisor_remainder_count_index14\
    \ = 0;\n    let mut max_divisor_remainder_count_index15 = 0;\n    let mut max_divisor_remainder_count_index16\
    \ = 0;\n    let mut max_divisor_remainder_count_index17 = 0;\n    let mut max_divisor_remainder_count_index18\
    \ = 0;\n    let mut max_divisor_remainder_count_index19 = 0;\n    let mut max_divisor_remainder_count_index20\
    \ = 0;\n    let mut max_divisor_remainder_count_index21 = 0;\n    let mut max_divisor_remainder_count_index22\
    \ = 0;\n    let mut max_divisor_remainder_count_index23 = 0;\n    let mut max_divisor_remainder_count_index24\
    \ = 0;\n    let mut max_divisor_remainder_count_index25 = 0;\n    let mut max_divisor_remainder_count_index26\
    \ = 0;\n    let mut max_divisor_remainder_count_index27 = 0;\n    let mut max_divisor_remainder_count_index28\
    \ = 0;\n    let mut max_divisor_remainder_count_index29 = 0;\n    let mut max_divisor_remainder_count_index30\
    \ = 0;\n    let mut max_divisor_remainder_count_index31 = 0;\n    let mut max_divisor_remainder_count_index32\
    \ = 0;\n    let mut max_divisor_remainder_count_index33 = 0;\n    let mut max_divisor_remainder_count_index34\
    \ = 0;\n    let mut max_divisor_remainder_count_index35 = 0;\n    let mut max_divisor_remainder_count_index36\
    \ = 0;\n    let mut max_divisor_remainder_count_index37 = 0;\n    let mut max_divisor_remainder_count_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    max_divisor_remainder",
  "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ % 2 == 0 {\n        max_divisor_size /= 2;\n        max_divisor *= 2;\n    }\n\
    \    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n\
    \    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5\
    \ = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let\
    \ mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10\
    \ = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let\
    \ mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15\
    \ = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let\
    \ mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20\
    \ = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let\
    \ mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25\
    \ = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let\
    \ mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30\
    \ = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let\
    \ mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35\
    \ = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let\
    \ mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40\
    \ = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let\
    \ mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45\
    \ = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let\
    \ mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50\
    \ = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let\
    \ mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55\
    \ = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let\
    \ mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60\
    \ = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let\
    \ mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut\
    \ max_divisor4 = 0;\n    let mut max_divisor5 = 0;\n    let mut max_divisor6 =\
    \ 0;\n    let mut max_divisor7 = 0;\n    let mut max_divisor8 = 0;\n    let mut\
    \ max_divisor9 = 0;\n    let mut max_divisor10 = 0;\n    let mut max_divisor11\
    \ = 0;\n    let mut max_divisor12 = 0;\n    let mut max_divisor13 = 0;\n    let\
    \ mut max_divisor14 = 0;\n    let mut max_divisor15 = 0;\n    let mut max_divisor16\
    \ = 0;\n    let mut max_divisor17 = 0;\n    let mut max_divisor18 = 0;\n    let\
    \ mut max_divisor19 = 0;\n    let mut max_divisor20 = 0;\n    let mut max_divisor21\
    \ = 0;\n    let mut max_divisor22 = 0;\n    let mut max_divisor23 = 0;\n    let\
    \ mut max_divisor24 = 0;\n    let mut max_divisor25 = 0;\n    let mut max_divisor26\
    \ = 0;\n    let mut max_divisor27 = 0;\n    let mut max_divisor28 = 0;\n    let\
    \ mut max_divisor29 = 0;\n    let mut max_divisor30 = 0;\n    let mut max_divisor31\
    \ = 0;\n    let mut max_divisor32 = 0;\n    let mut max_divisor33 = 0;\n    let\
    \ mut max_divisor34 = 0;\n    let mut max_divisor35 = 0;\n    let mut max_divisor36\
    \ = 0;\n    let mut max_divisor37 = 0;\n    let mut max_divisor38 = 0;\n    let\
    \ mut max_divisor39 = 0;\n    let mut max_divisor40 = 0;\n    let mut max_divisor41\
    \ = 0;\n    let mut max_divisor42 = 0;\n    let mut max_divisor43 = 0;\n    let\
    \ mut max_divisor44 = 0;\n    let mut max_divisor45 = 0;\n    let mut max_divisor46\
    \ = 0;\n    let mut max_divisor47 = 0;\n    let mut max_divisor48 = 0;\n    let\
    \ mut max_divisor49 = 0;\n    let mut max_divisor50 = 0;\n    let mut max_divisor51\
    \ = 0;\n    let mut max_divisor52 = 0;\n    let mut max_divisor53 = 0;\n    let\
    \ mut max_divisor54 = 0;\n    let mut max_divisor55 = 0;\n    let mut max_divisor56\
    \ = 0;\n    let mut max_divisor57 = 0;\n    let mut max_divisor58 = 0;\n    let\
    \ mut max_divisor59 = 0;\n    let mut max_divisor60 = 0;\n    let mut max_divisor61\
    \ = 0;\n    let mut max_divisor62 = 0;\n    let mut max_divisor63 = 0;\n    let\
    \ mut max_divisor64 = 0;\n    let mut max_", "    let mut max_divisor = 0;\n \
    \   let mut max_divisor_size = 0;\n    for divisor in 1..=n {\n        if n %\
    \ divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_size = divisor;\n            }\n   \
    \     } else {\n            if divisor > max_divisor_size {\n                max_divisor\
    \ = divisor;\n                max_divisor_size = divisor;\n            }\n   \
    \     }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let\
    \ mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6\
    \ = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let\
    \ mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16\
    \ = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let\
    \ mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21\
    \ = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let\
    \ mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26\
    \ = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let\
    \ mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31\
    \ = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let\
    \ mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36\
    \ = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let\
    \ mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41\
    \ = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let\
    \ mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46\
    \ = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let\
    \ mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51\
    \ = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let\
    \ mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56\
    \ = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let\
    \ mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61\
    \ = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let\
    \ mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor_remainder == 0 {\n                max_divisor = divisor;\n \
    \               max_divisor_remainder = n % divisor;\n            } else {\n \
    \               if max_divisor_remainder > n % divisor {\n                   \
    \ max_divisor = divisor;\n                    max_divisor_remainder = n % divisor;\n\
    \                }\n            }\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_n\
    \ = 0;\n    let mut max_divisor_size_n_n = 0;\n    let mut max_divisor_size_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n  \
    \  let mut max_divisor_size_n_n_n_n_", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n    let mut\
    \ max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor = 1;\n    let mut max_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value = n;\n    let mut max_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_index = 0;\n    let\
    \ mut max_divisor_value_divisor_value_divisor_value = n;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor\
    \ = 1;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_index\
    \ = 0;\n    let mut max_divisor_value_divisor_value_divisor_value_divisor_value_divisor_value\
    \ = n;\n    let mut max_divisor_value_divisor_value_", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 1;\n    let mut max_divisor_remainder = 0;\n    for i\
    \ in 1..=n {\n        if n % i == 0 {\n            if max_divisor_remainder ==\
    \ 0 {\n                max_divisor = i;\n            } else {\n              \
    \  max_divisor_remainder = max_divisor_remainder % i;\n            }\n       \
    \ }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor\
    \ = n;\n    while max_divisor % 2 == 0 {\n        max_divisor /= 2;\n    }\n \
    \   while max_divisor % 3 == 0 {\n        max_divisor /= 3;\n    }\n    while\
    \ max_divisor % 5 == 0 {\n        max_divisor /= 5;\n    }\n    while max_divisor\
    \ % 7 == 0 {\n        max_divisor /= 7;\n    }\n    while max_divisor % 11 ==\
    \ 0 {\n        max_divisor /= 11;\n    }\n    while max_divisor % 13 == 0 {\n\
    \        max_divisor /= 13;\n    }\n    while max_divisor % 17 == 0 {\n      \
    \  max_divisor /= 17;\n    }\n    while max_divisor % 19 == 0 {\n        max_divisor\
    \ /= 19;\n    }\n    while max_divisor % 23 == 0 {\n        max_divisor /= 23;\n\
    \    }\n    while max_divisor % 29 == 0 {\n        max_divisor /= 29;\n    }\n\
    \    while max_divisor % 31 == 0 {\n        max_divisor /= 31;\n    }\n    while\
    \ max_divisor % 37 == 0 {\n        max_divisor /= 37;\n    }\n    while max_divisor\
    \ % 41 == 0 {\n        max_divisor /= 41;\n    }\n    while max_divisor % 43 ==\
    \ 0 {\n        max_divisor /= 43;\n    }\n    while max_divisor % 47 == 0 {\n\
    \        max_divisor /= 47;\n    }\n    while max_divisor % 53 == 0 {\n      \
    \  max_divisor /= 53;\n    }\n    while max_divisor % 59 == 0 {\n        max_divisor\
    \ /= 59;\n    }\n    while max_divisor % 61 == 0 {\n        max_divisor /= 61;\n\
    \    }\n    while max_divisor % 67 == 0 {\n        max_divisor /= 67;\n    }\n\
    \    while max_divisor % 71 == 0 {\n        max_divisor /= 71;\n    }\n    while\
    \ max_divisor % 73 == 0 {\n        max_divisor /= 73;\n    }\n    while max_divisor\
    \ % 79 == 0 {\n        max_divisor /= 79;\n    }\n    while max_divisor % 83 ==\
    \ 0 {\n        max_divisor /= 83;\n    }\n    while max_divisor % 89 == 0 {\n\
    \        max_divisor /= 89;\n    }\n    while max_divisor % 97 == 0 {\n      \
    \  max_divisor /= 97;\n    }\n    while max_divisor % 103 == 0 {\n        max_divisor\
    \ /= 103;\n    }\n    while max_divisor % 109 == 0 {\n        max_divisor /= 109;\n\
    \    }\n    while max_divisor % 113 == 0 {\n        max_divisor /= 113;\n    }\n\
    \    while max_", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_n\
    \ = -1;\n    let mut max_divisor_ind_n2 = -1;\n    let mut max_divisor_ind_n3\
    \ = -1;\n    let mut max_divisor_ind_n4 = -1;\n    let mut max_divisor_ind_n5\
    \ = -1;\n    let mut max_divisor_ind_n6 = -1;\n    let mut max_divisor_ind_n7\
    \ = -1;\n    let mut max_divisor_ind_n8 = -1;\n    let mut max_divisor_ind_n9\
    \ = -1;\n    let mut max_divisor_ind_n10 = -1;\n    let mut max_divisor_ind_n11\
    \ = -1;\n    let mut max_divisor_ind_n12 = -1;\n    let mut max_divisor_ind_n13\
    \ = -1;\n    let mut max_divisor_ind_n14 = -1;\n    let mut max_divisor_ind_n15\
    \ = -1;\n    let mut max_divisor_ind_n16 = -1;\n    let mut max_divisor_ind_n17\
    \ = -1;\n    let mut max_divisor_ind_n18 = -1;\n    let mut max_divisor_ind_n19\
    \ = -1;\n    let mut max_divisor_ind_n20 = -1;\n    let mut max_divisor_ind_n21\
    \ = -1;\n    let mut max_divisor_ind_n22 = -1;\n    let mut max_divisor_ind_n23\
    \ = -1;\n    let mut max_divisor_ind_n24 = -1;\n    let mut max_divisor_ind_n25\
    \ = -1;\n    let mut max_divisor_ind_n26 = -1;\n    let mut max_divisor_ind_n27\
    \ = -1;\n    let mut max_divisor_ind_n28 = -1;\n    let mut max_divisor_ind_n29\
    \ = -1;\n    let mut max_divisor_ind_n30 = -1;\n    let mut max_divisor_ind_n31\
    \ = -1;\n    let mut max_divisor_ind_n32 = -1;\n    let mut max_divisor_ind_n33\
    \ = -1;\n    let mut max_divisor_ind_n34 = -1;\n    let mut max_divisor_ind_n35\
    \ = -1;\n    let mut max_divisor_ind_n36 = -1;\n    let mut max_divisor_ind_n37\
    \ = -1;\n    let mut max_divisor_ind_n38 = -1;\n    let mut max_divisor_ind_n39\
    \ = -1;\n    let mut max_divisor_ind_n40 = -1;\n    let mut max_divisor_ind_n41\
    \ = -1;\n    let mut max_divisor_ind_n42 = -1;\n    let mut max_divisor_in", " \
    \   let mut largest = n;\n    let mut i = 1;\n    while i <= n {\n        if n\
    \ % i == 0 {\n            largest = i;\n        }\n        i += 1;\n    }\n  \
    \  largest", "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_index2 = 0;\n    let mut max_divisor_index3 = 0;\n  \
    \  let mut max_divisor_index4 = 0;\n    let mut max_divisor_index5 = 0;\n    let\
    \ mut max_divisor_index6 = 0;\n    let mut max_divisor_index7 = 0;\n    let mut\
    \ max_divisor_index8 = 0;\n    let mut max_divisor_index9 = 0;\n    let mut max_divisor_index10\
    \ = 0;\n    let mut max_divisor_index11 = 0;\n    let mut max_divisor_index12\
    \ = 0;\n    let mut max_divisor_index13 = 0;\n    let mut max_divisor_index14\
    \ = 0;\n    let mut max_divisor_index15 = 0;\n    let mut max_divisor_index16\
    \ = 0;\n    let mut max_divisor_index17 = 0;\n    let mut max_divisor_index18\
    \ = 0;\n    let mut max_divisor_index19 = 0;\n    let mut max_divisor_index20\
    \ = 0;\n    let mut max_divisor_index21 = 0;\n    let mut max_divisor_index22\
    \ = 0;\n    let mut max_divisor_index23 = 0;\n    let mut max_divisor_index24\
    \ = 0;\n    let mut max_divisor_index25 = 0;\n    let mut max_divisor_index26\
    \ = 0;\n    let mut max_divisor_index27 = 0;\n    let mut max_divisor_index28\
    \ = 0;\n    let mut max_divisor_index29 = 0;\n    let mut max_divisor_index30\
    \ = 0;\n    let mut max_divisor_index31 = 0;\n    let mut max_divisor_index32\
    \ = 0;\n    let mut max_divisor_index33 = 0;\n    let mut max_divisor_index34\
    \ = 0;\n    let mut max_divisor_index35 = 0;\n    let mut max_divisor_index36\
    \ = 0;\n    let mut max_divisor_index37 = 0;\n    let mut max_divisor_index38\
    \ = 0;\n    let mut max_divisor_index39 = 0;\n    let mut max_divisor_index40\
    \ = 0;\n    let mut max_divisor_index41 = 0;\n    let mut max_divisor_index42\
    \ = 0;\n    let mut max_divisor_index43 = 0;\n    let mut max_divisor_index44\
    \ = 0;\n    let mut max_divisor_index45 = 0;\n    let mut max_divisor_index46\
    \ = 0;\n    let mut max_divisor_index47 = 0;\n    let mut max_divisor_index48\
    \ = 0;\n    let mut max_divisor_index49 = 0;\n    let mut max_divisor_index50\
    \ = 0;\n    let mut max_divisor_index51 = 0;\n    let mut max_divisor_index52\
    \ = 0;\n    let mut max_divisor_index53 = 0;\n    let mut max_divisor_index54\
    \ = 0;\n    let mut max_divisor_index55 = 0;\n    let mut max_divisor_index56\
    \ = 0;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \            }\n        }\n    }\n    max_divisor_ind", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 0..n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        max_divisor += 1;\n       \
    \ max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count_index = 0;\n    let mut max_divisor_remainder_count_index2\
    \ = 0;\n    let mut max_divisor_remainder_count_index3 = 0;\n    let mut max_divisor_remainder_count_index4\
    \ = 0;\n    let mut max_divisor_remainder_count_index5 = 0;\n    let mut max_divisor_remainder_count_index6\
    \ = 0;\n    let mut max_divisor_remainder_count_index7 = 0;\n    let mut max_divisor_remainder_count_index8\
    \ = 0;\n    let mut max_divisor_remainder_count_index9 = 0;\n    let mut max_divisor_remainder_count_index10\
    \ = 0;\n    let mut max_divisor_remainder_count_index11 = 0;\n    let mut max_divisor_remainder_count_index12\
    \ = 0;\n    let mut max_divisor_remainder_count_index13 = 0;\n    let mut max_divisor_remainder_count_index14\
    \ = 0;\n    let mut max_divisor_remainder_count_index15 = 0;\n    let mut max_divisor_remainder_count_index16\
    \ = 0;\n    let mut max_divisor_remainder_count_index17 = 0;\n    let mut max_divisor_remainder_count_index18\
    \ = 0;\n    let mut max_divisor_remainder_count_index19 = 0;\n    let mut max_divisor_remainder_count_index20\
    \ = 0;\n    let mut max_divisor_remainder_count_index21 = 0;\n    let mut max_divisor_remainder_count_index22\
    \ = 0;\n    let mut max_divisor_remainder_count_index23 = 0;\n    let mut max_divisor_remainder_count_index24\
    \ = 0;\n    let mut max_divisor_remainder_count_index25 = 0;\n    let mut max_divisor_remainder_count_index26\
    \ = 0;\n    let mut max_divisor_remainder_count_index27 = 0;\n    let mut max_divisor_remainder_count_index28\
    \ = 0;\n    let mut max_divisor_remainder_count_index29 = 0;\n    let mut max_divisor_remainder_count_index30\
    \ = 0;\n    let mut max_divisor_remainder_count_index31 = 0;\n    let mut max_divisor_remainder_count_index32\
    \ = 0;\n    let mut max_divisor_remainder_count_index33 = 0;\n    let mut max_divisor_remainder_count_index34\
    \ = 0;\n    let mut max_divisor_remainder_count_index35 = 0;\n    let mut max_divisor_remainder_count_index36\
    \ = 0;\n    let mut max_divisor_remainder_count_index37 = 0;\n    let mut max_divisor_remainder_count_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size\
    \ < i {\n                max_divisor_size = i;\n                max_divisor_size_size\
    \ = i;\n            }\n            if max_divisor_size == i {\n              \
    \  max_divisor_size_size = i;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        let mut max_divisor = max_divisor_size\
    \ % 2;\n        max_divisor_size /= 2;\n        max_divisor = max_divisor + 1;\n\
    \    }\n    max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if max_divisor % divisor == 0 {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as isize;\n            }\n      \
    \  }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_remainder = 0;\n    let mut max_divisor_remainder_power = 1;\n\n\
    \    for divisor in 1..=n {\n        let remainder = n % divisor;\n        if\
    \ remainder == 0 {\n            if max_divisor_remainder < divisor {\n       \
    \         max_divisor = divisor;\n                max_divisor_remainder = remainder;\n\
    \                max_divisor_remainder_power = 1;\n            } else {\n    \
    \            max_divisor_remainder += remainder;\n                max_divisor_remainder_power\
    \ += 1;\n            }\n        }\n    }\n\n    max_divisor_remainder += max_divisor_remainder_power;\n\
    \    max_divisor_remainder", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        }\n    }\n    max_divisor_value", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size\
    \ < i {\n                max_divisor = i;\n                max_divisor_size =\
    \ i;\n                max_divisor_size_size = 1;\n            } else {\n     \
    \           max_divisor_size = i;\n                max_divisor_size_size = 1;\n\
    \            }\n        }\n    }\n    if max_divisor_size == n {\n        max_divisor_size_size\
    \ = 1;\n    }\n    max_divisor_size_size", "    let mut max_divisor = n;\n   \
    \ let mut max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n\
    \        if n % divisor == 0 {\n            if max_divisor < divisor {\n     \
    \           max_divisor = divisor;\n                max_divisor_index = 0;\n \
    \           }\n            if max_divisor == divisor {\n                max_divisor_index\
    \ += 1;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 0 {\n        if n % max_divisor == 0 {\n            max_divisor = max_divisor\
    \ + 1;\n        }\n        max_divisor_size = max_divisor_size / 2;\n    }\n \
    \   max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=max_divisor {\n        if n % i == 0 {\n            max_divisor\
    \ = i;\n            max_divisor_index = i;\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    if max_divisor_remainder\
    \ == 0 {\n        max_divisor\n    } else {\n        max_divisor\n    }", "  \
    \  let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count =\
    \ 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i\
    \ in 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n    \
    \            max_divisor = i;\n                max_divisor_remainder = n % i;\n\
    \            }\n        }\n    }\n    max_divisor_remainder", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            let divisor_size\
    \ = i as isize;\n            if divisor_size > max_divisor_size {\n          \
    \      max_divisor = i;\n                max_divisor_size = divisor_size;\n  \
    \              max_divisor_size_size = divisor_size_size;\n            }\n   \
    \     }\n    }\n    if max_divisor_size == 0 {\n        max_divisor = n;\n   \
    \ }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_remainder = n % divisor;\n            }\n        }\n  \
    \  }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n   \
    \ let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        let mut divisor = i;\n        while divisor\
    \ % 2 == 0 {\n            divisor /= 2;\n        }\n        if divisor > max_divisor\
    \ {\n            max_divisor = divisor;\n            max_divisor_remainder = i;\n\
    \        }\n    }\n    max_divisor_remainder", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_ind = -1;\n    for i in 1..n {\n        if n % i == 0\
    \ {\n            if max_divisor < i {\n                max_divisor = i;\n    \
    \            max_divisor_ind = i;\n            }\n        }\n    }\n    max_divisor_ind",
  "    let mut max_divisor = 1;\n    let mut max_divisors = vec![];\n    for d in\
    \ 2..=n {\n        if n % d == 0 {\n            if d > max_divisor {\n       \
    \         max_divisor = d;\n            }\n        } else {\n            if d\
    \ > max_divisor {\n                max_divisors = vec![max_divisor];\n       \
    \         max_divisor = d;\n            } else {\n                max_divisors.push(max_divisor);\n\
    \                max_divisor = d;\n            }\n        }\n    }\n    max_divisors.push(max_divisor);\n\
    \    max_divisors.sort_unstable();\n    max_divisors.last()", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if d >\
    \ max_divisor {\n                max_divisor = d;\n                max_divisor_size\
    \ = n;\n                max_divisor_size_size = n;\n            }\n          \
    \  if d > max_divisor_size {\n                max_divisor_size = d;\n        \
    \        max_divisor_size_size = n;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for divisor in 1..=max_divisor {\n        if n % divisor == 0 {\n\
    \            max_divisor = divisor;\n            max_divisor_index = divisor -\
    \ 1;\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n        if n %\
    \ i == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_remainder = n % i;\n            }\n        }\n  \
    \  }\n    max_divisor_remainder", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_val\
    \ = -1;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \                max_divisor_ind_val = i;\n            }\n        }\n    }\n \
    \   if max_divisor == 0 {\n        max_divisor = 1;\n        max_divisor_ind =\
    \ 1;\n        max_divisor_ind_val = 1;\n    }\n    max_divisor_ind", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if max_divisor_remainder\
    \ > divisor {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = max_divisor_remainder - divisor;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..n {\n        if n % i == 0 {\n            if max_divisor < i {\n        \
    \        max_divisor = i;\n                max_divisor_index = i;\n          \
    \  }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_remainder = 0;\n    for i in 1..n {\n        if n % i\
    \ == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_remainder = n % i;\n            }\n        }\n  \
    \  }\n    max_divisor_remainder", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = n;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut largest = n;\n    let mut\
    \ divisor = 1;\n    while divisor < n {\n        if n % divisor == 0 {\n     \
    \       largest = divisor;\n        }\n        divisor += 1;\n    }\n    largest",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    for d in divisors(n) {\n        if d > max_divisor {\n           \
    \ max_divisor = d;\n            max_divisor_size = n;\n            max_divisor_size_size\
    \ = n;\n        }\n        if n % d == 0 {\n            max_divisor_size = d;\n\
    \            max_divisor_size_size = n;\n        }\n    }\n    if max_divisor_size\
    \ == n {\n        max_divisor_size_size\n    } else {\n        max_divisor_size_size\n\
    \    }", "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n \
    \   let mut max_divisor_value = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n\
    \        if n % divisor == 0 {\n            if max_divisor < divisor {\n     \
    \           max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = n;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 1;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        if n % max_divisor == 0 {\n\
    \            max_divisor = max_divisor + 1;\n        }\n        max_divisor_size\
    \ = max_divisor_size / 2;\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut\
    \ max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 =\
    \ 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut\
    \ max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16\
    \ = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let\
    \ mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21\
    \ = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let\
    \ mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26\
    \ = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let\
    \ mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31\
    \ = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let\
    \ mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36\
    \ = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let\
    \ mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41\
    \ = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let\
    \ mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46\
    \ = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let\
    \ mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51\
    \ = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let\
    \ mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56\
    \ = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let\
    \ mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61\
    \ = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let\
    \ mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if d\
    \ > max_divisor {\n                max_divisor = d;\n                max_divisor_remainder\
    \ = n % d;\n            }\n        }\n    }\n    if max_divisor_remainder == 0\
    \ {\n        max_divisor\n    } else {\n        max_divisor_remainder\n    }",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=max_divisor {\n        if n % divisor == 0 {\n\
    \            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n                max_divisor_value\
    \ = n;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 0 {\n        max_divisor += 1;\n        max_divisor_size = max_divisor_size\
    \ / 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        }\n    }\n    max_divisor_value", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_inv = -1;\n\
    \    for d in divisors(n) {\n        if d > max_divisor {\n            max_divisor\
    \ = d;\n            max_divisor_ind = max_divisor_ind_inv;\n        }\n      \
    \  if d > max_divisor {\n            max_divisor = d;\n            max_divisor_ind\
    \ = max_divisor_ind_inv;\n        }\n        if d > max_divisor {\n          \
    \  max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n    \
    \    }\n        if d > max_divisor {\n            max_divisor = d;\n         \
    \   max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_n\
    \ = 0;\n    let mut max_divisor_size_n_n = 0;\n    let mut max_divisor_size_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n  \
    \  let mut max_divisor_size_n_n_n_n_", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_index = 0;\n    for divisor in 1..=n {\n        if n % divisor\
    \ == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_ind = 1;\n    let mut max_divisor_ind_2 = 1;\n    let mut max_divisor_ind_3\
    \ = 1;\n    let mut max_divisor_ind_4 = 1;\n    let mut max_divisor_ind_5 = 1;\n\
    \    let mut max_divisor_ind_6 = 1;\n    let mut max_divisor_ind_7 = 1;\n    let\
    \ mut max_divisor_ind_8 = 1;\n    let mut max_divisor_ind_9 = 1;\n    let mut\
    \ max_divisor_ind_10 = 1;\n    let mut max_divisor_ind_11 = 1;\n    let mut max_divisor_ind_12\
    \ = 1;\n    let mut max_divisor_ind_13 = 1;\n    let mut max_divisor_ind_14 =\
    \ 1;\n    let mut max_divisor_ind_15 = 1;\n    let mut max_divisor_ind_16 = 1;\n\
    \    let mut max_divisor_ind_17 = 1;\n    let mut max_divisor_ind_18 = 1;\n  \
    \  let mut max_divisor_ind_19 = 1;\n    let mut max_divisor_ind_20 = 1;\n    let\
    \ mut max_divisor_ind_21 = 1;\n    let mut max_divisor_ind_22 = 1;\n    let mut\
    \ max_divisor_ind_23 = 1;\n    let mut max_divisor_ind_24 = 1;\n    let mut max_divisor_ind_25\
    \ = 1;\n    let mut max_divisor_ind_26 = 1;\n    let mut max_divisor_ind_27 =\
    \ 1;\n    let mut max_divisor_ind_28 = 1;\n    let mut max_divisor_ind_29 = 1;\n\
    \    let mut max_divisor_ind_30 = 1;\n    let mut max_divisor_ind_31 = 1;\n  \
    \  let mut max_divisor_ind_32 = 1;\n    let mut max_divisor_ind_33 = 1;\n    let\
    \ mut max_divisor_ind_34 = 1;\n    let mut max_divisor_ind_35 = 1;\n    let mut\
    \ max_divisor_ind_36 = 1;\n    let mut max_divisor_ind_37 = 1;\n    let mut max_divisor_ind_38\
    \ = 1;\n    let mut max_divisor_ind_39 = 1;\n    let mut max_divisor_ind_40 =\
    \ 1;\n    let mut max_divisor_ind_41 = 1;\n    let mut max_divisor_ind_42 = 1;\n\
    \    let mut max_divisor_ind_43 = 1;\n    let mut max_divisor_ind_44 = 1;\n  \
    \  let mut max_divisor_ind_45 = 1;\n    let mut max_divisor_ind_46 = 1;\n    let\
    \ mut max_divisor_ind_47 = 1;\n    let mut max_divisor_ind_48 = 1;\n    let mut\
    \ max_divisor_ind_49 = 1;\n    let mut max_divisor_ind_50 = 1;\n    let mut max_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..n {\n        if n % i == 0 {\n            if max_divisor < i {\n        \
    \        max_divisor = i;\n                max_divisor_index = i;\n          \
    \  }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_val = -1;\n  \
    \  let mut max_divisor_ind_val_val = -1;\n    let mut max_divisor_ind_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val = -1;\n    let mut max_divisor_ind_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val = -1;\n    let mut\
    \ max_divisor_ind_val_val_val_val_val_val_val = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val = -1;\n \
    \   let mut max_divisor_ind_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val = -1;\n\
    \    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val = -1;\n \
    \   let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val = -1;\n  \
    \  let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val = -1;\n   \
    \ let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val_val = -1;\n\
    \    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val_val =\
    \ -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val\
    \ = -1;", "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n \
    \   while max_divisor_size % 2 == 0 {\n        max_divisor_size /= 2;\n      \
    \  max_divisor *= 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n \
    \   for d in divisors(n) {\n        if n % d == 0 {\n            if d > max_divisor\
    \ {\n                max_divisor = d;\n                max_divisor_size = n;\n\
    \                max_divisor_size_size = n;\n            } else {\n          \
    \      max_divisor_size = max_divisor_size_size;\n                max_divisor_size\
    \ = d;\n                max_divisor_size_size = d;\n            }\n        }\n\
    \    }\n    max_divisor_size", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_value = n;\n\n    for divisor in 1..=n {\n   \
    \     if n % divisor == 0 {\n            if divisor > max_divisor {\n        \
    \        max_divisor = divisor;\n                max_divisor_size = divisor;\n\
    \            } else {\n                max_divisor = max_divisor;\n          \
    \      max_divisor_size = max_divisor_size;\n            }\n        }\n    }\n\
    \n    if max_divisor_value > n {\n        max_divisor_value = n;\n    }\n\n  \
    \  max_divisor_value", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_size = 0;\n    let\
    \ mut max_divisor_size_divisor_divisor_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor =\
    \ 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut largest = n;\n    let mut i = 1;\n    while i <= n {\n        if n\
    \ % i == 0 {\n            largest = i;\n        }\n        i += 1;\n    }\n  \
    \  largest", "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n\
    \    let mut max_divisor_size = max_divisor_size / 2;\n    while max_divisor_size\
    \ != 1 {\n        if n % max_divisor_size == 0 {\n            max_divisor = max_divisor_size;\n\
    \        }\n        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \            }\n        }\n    }\n    max_divisor_ind", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let\
    \ mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6\
    \ = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let\
    \ mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n\n    for i in 1..n\
    \ {\n        let mut divisor = 1;\n        let mut divisor2 = 1;\n        let\
    \ mut divisor3 = 1;\n        let mut divisor4 = 1;\n        let mut divisor5 =\
    \ 1;\n        let mut divisor6 = 1;\n        let mut divisor7 = 1;\n        let\
    \ mut divisor8 = 1;\n        let mut divisor9 = 1;\n        let mut divisor10\
    \ = 1;\n        let mut divisor11 = 1;\n        let mut divisor12 = 1;\n     \
    \   let mut divisor13 = 1;\n        let mut divisor14 = 1;\n        let mut divisor15\
    \ = 1;\n\n        for j in 1..i {\n            if i % j == 0 {\n             \
    \   divisor *= j;\n            }\n            if i % j == 1 {\n              \
    \  divisor2 *= j;\n            }\n            if i % j == 2 {\n              \
    \  divisor3 *= j;\n            }\n            if i % j == 3 {\n              \
    \  divisor4 *= j;\n            }\n            if i % j == 4 {\n              \
    \  divisor5 *= j;\n            }\n            if i % j == 5 {\n              \
    \  divisor6 *= j;\n            }\n            if i % j == 6 {\n              \
    \  divisor7 *= j;\n            }\n            if i % j == 7 {\n              \
    \  divisor8 *= j;\n            }\n            if i % j == 8 {\n              \
    \  divisor9 *= j;\n            }\n            if i % j == 9 {\n              \
    \  divisor10 *= j;\n            }\n            if i % j == 10 {\n            \
    \    divisor11 *= j;\n            }\n            if i % j == 11 {\n          \
    \      divisor12 *= j;\n            }\n            if i % j == 12 {\n        \
    \        divisor13 *= j;\n            }\n            if i % j == 13 {\n      \
    \          divisor14 *= j;\n            }\n            if i % j == 14 {\n    \
    \            divisor15 *= j;\n            }\n        }\n\n        if divisor >\
    \ max_divisor {\n            max_divisor = divisor;\n        }\n        if divisor2\
    \ > max_divisor2 {\n            max_divisor2 = divisor2;\n        }\n        if\
    \ divisor3 > max_divisor3 {\n            max_divisor3 = divisor3;\n        }\n\
    \        if ", "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n\
    \    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_pow2 = 0;\n\
    \    let mut max_divisor_size_pow3 = 0;\n    let mut max_divisor_size_pow4 = 0;\n\
    \    let mut max_divisor_size_pow5 = 0;\n    let mut max_divisor_size_pow6 = 0;\n\
    \    let mut max_divisor_size_pow7 = 0;\n    let mut max_divisor_size_pow8 = 0;\n\
    \    let mut max_divisor_size_pow9 = 0;\n    let mut max_divisor_size_pow10 =\
    \ 0;\n    let mut max_divisor_size_pow11 = 0;\n    let mut max_divisor_size_pow12\
    \ = 0;\n    let mut max_divisor_size_pow13 = 0;\n    let mut max_divisor_size_pow14\
    \ = 0;\n    let mut max_divisor_size_pow15 = 0;\n    let mut max_divisor_size_pow16\
    \ = 0;\n    let mut max_divisor_size_pow17 = 0;\n    let mut max_divisor_size_pow18\
    \ = 0;\n    let mut max_divisor_size_pow19 = 0;\n    let mut max_divisor_size_pow20\
    \ = 0;\n    let mut max_divisor_size_pow21 = 0;\n    let mut max_divisor_size_pow22\
    \ = 0;\n    let mut max_divisor_size_pow23 = 0;\n    let mut max_divisor_size_pow24\
    \ = 0;\n    let mut max_divisor_size_pow25 = 0;\n    let mut max_divisor_size_pow26\
    \ = 0;\n    let mut max_divisor_size_pow27 = 0;\n    let mut max_divisor_size_pow28\
    \ = 0;\n    let mut max_divisor_size_pow29 = 0;\n    let mut max_divisor_size_pow30\
    \ = 0;\n    let mut max_divisor_size_pow31 = 0;\n    let mut max_divisor_size_pow32\
    \ = 0;\n    let mut max_divisor_size_pow33 = 0;\n    let mut max_divisor_size_pow34\
    \ = 0;\n    let mut max_divisor_size_pow35 = 0;\n    let mut max_divisor_size_pow36\
    \ = 0;\n    let mut max_divisor_size_pow37 = 0;\n    let mut max_divisor_size_pow38\
    \ = 0;\n    let mut max_divisor_size_pow39 = 0;\n    let mut max_divisor_size_pow40\
    \ = 0;\n    let mut max_divisor_size_pow41 = 0;\n    let mut max_divisor_size_pow42\
    \ = 0;\n    let mut max_divisor_size_pow43 = 0;\n    let mut max_divisor_size_pow44\
    \ = 0;\n    let mut max_divisor_size_pow45 = 0;\n    let mut max_divisor_size_pow46\
    \ = 0;\n    let mut max_divisor_size_pow47 = 0;\n    let mut max_divisor_size_pow48\
    \ = 0;\n    let mut max_divisor_size_pow49 = 0;\n    let mut max_divisor_size_pow50\
    \ = 0;\n    let mu", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = 0;\n    for divisor in &[2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97] {\n        if n % divisor == 0 {\n            if max_divisor < divisor {\n\
    \                max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = divisor;\n            }\n            if max_divisor\
    \ == divisor {\n                max_divisor_value = divisor;\n            }\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_size = n;\n    for d in 2..=max_divisor_size.clone() {\n\
    \        if n % d == 0 {\n            if max_divisor < d {\n                max_divisor\
    \ = d;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let ", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in 1..=n {\n \
    \       if n % divisor == 0 {\n            if divisor > max_divisor {\n      \
    \          max_divisor = divisor;\n                max_divisor_remainder = n %\
    \ divisor;\n            }\n        }\n    }\n    if max_divisor_remainder == 0\
    \ {\n        max_divisor\n    } else {\n        max_divisor\n    }", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_n\
    \ = -1;\n    let mut max_divisor_ind_n_ind = -1;\n    for i in 1..=n {\n     \
    \   if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_ind = i;\n                max_divisor_ind_n\
    \ = i;\n                max_divisor_ind_n_ind = i;\n            }\n          \
    \  if max_divisor == i {\n                max_divisor_ind_n_ind = i;\n       \
    \     }\n        }\n    }\n    if max_divisor == 0 {\n        return n;\n    }\n\
    \    if max_divisor_ind == max_divisor_ind_n_ind {\n        return max_divisor_ind_n_ind;\n\
    \    }\n    if max_divisor_ind > max_divisor_ind_n_ind {\n        return max_divisor_ind;\n\
    \    }\n    return max_divisor_ind_n_ind;", "    let mut max_divisor = 1;\n  \
    \  let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        } else if d == max_divisor {\n            max_divisor_size +=\
    \ 1;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n                max_divisor_value = n;\n            }\n        }\
    \ else {\n            if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n\
    \            if max_divisor < i {\n                max_divisor = i;\n        \
    \        max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for d\
    \ in divisors(n) {\n        if n % d == 0 {\n            if d > max_divisor {\n\
    \                max_divisor = d;\n                max_divisor_remainder = n %\
    \ d;\n            }\n        }\n    }\n    if max_divisor_remainder == 0 {\n \
    \       max_divisor\n    } else {\n        max_divisor + 1\n    }", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_remainder = n % i;\n       \
    \     }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n \
    \   let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 0;\n    let mut max_divisor5 = 0;\n    let mut max_divisor6 = 0;\n    let\
    \ mut max_divisor7 = 0;\n    let mut max_divisor8 = 0;\n    let mut max_divisor9\
    \ = 0;\n    let mut max_divisor10 = 0;\n    let mut max_divisor11 = 0;\n    let\
    \ mut max_divisor12 = 0;\n    let mut max_divisor13 = 0;\n    let mut max_divisor14\
    \ = 0;\n    let mut max_divisor15 = 0;\n    let mut max_divisor16 = 0;\n    let\
    \ mut max_divisor17 = 0;\n    let mut max_divisor18 = 0;\n    let mut max_divisor19\
    \ = 0;\n    let mut max_divisor20 = 0;\n    let mut max_divisor21 = 0;\n    let\
    \ mut max_divisor22 = 0;\n    let mut max_divisor23 = 0;\n    let mut max_divisor24\
    \ = 0;\n    let mut max_divisor25 = 0;\n    let mut max_divisor26 = 0;\n    let\
    \ mut max_divisor27 = 0;\n    let mut max_divisor28 = 0;\n    let mut max_divisor29\
    \ = 0;\n    let mut max_divisor30 = 0;\n    let mut max_divisor31 = 0;\n    let\
    \ mut max_divisor32 = 0;\n    let mut max_divisor33 = 0;\n    let mut max_divisor34\
    \ = 0;\n    let mut max_divisor35 = 0;\n    let mut max_divisor36 = 0;\n    let\
    \ mut max_divisor37 = 0;\n    let mut max_divisor38 = 0;\n    let mut max_divisor39\
    \ = 0;\n    let mut max_divisor40 = 0;\n    let mut max_divisor41 = 0;\n    let\
    \ mut max_divisor42 = 0;\n    let mut max_divisor43 = 0;\n    let mut max_divisor44\
    \ = 0;\n    let mut max_divisor45 = 0;\n    let mut max_divisor46 = 0;\n    let\
    \ mut max_divisor47 = 0;\n    let mut max_divisor48 = 0;\n    let mut max_divisor49\
    \ = 0;\n    let mut max_divisor50 = 0;\n    let mut max_divisor51 = 0;\n    let\
    \ mut max_divisor52 = 0;\n    let mut max_divisor53 = 0;\n    let mut max_divisor54\
    \ = 0;\n    let mut max_divisor55 = 0;\n    let mut max_divisor56 = 0;\n    let\
    \ mut max_divisor57 = 0;\n    let mut max_divisor58 = 0;\n    let mut max_divisor59\
    \ = 0;\n    let mut max_divisor60 = 0;\n    let mut max_divisor61 = 0;\n    let\
    \ mut max_divisor62 = 0;\n    let mut max_divisor63 = 0;\n    let mut max_divisor64\
    \ = 0;\n    let mut max_", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_max = 0;\n    let mut max_divisor_remainder_pow_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc = 0;\n    let mut max_divisor_remainder_pow_max_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc = 0;\n    let mut max_divisor_remainder_pow_max_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc = 0;\n    let mut\
    \ max_divisor_remainder_pow_max_inc_inc_inc = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_max_inc_inc_inc_inc = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc = 0;\n    let mut max_divisor_remainder_pow_max_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc = 0;\n\
    \    let mut max_divisor_remainder_pow_max_inc_inc_inc_inc_inc_inc = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc = 0;\n    let\
    \ mut max_divisor_remainder_pow_max_inc_inc_inc_inc_inc_inc_inc = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc = 0;\n   \
    \ let mut max_divisor_remainder_pow_max_inc_inc_inc_inc_inc_inc_inc_inc = 0;\n\
    \    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_max_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_max_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor < i\
    \ {\n                max_divisor = i;\n                max_divisor_index = i;\n\
    \            }\n            if max_divisor_value < i {\n                max_divisor_value\
    \ = i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 =\
    \ 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut\
    \ max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 =\
    \ 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut\
    \ max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n\n   \
    \ for i in 1..=n {\n        if n % i == 0 {\n            if i % 2 == 0 {\n   \
    \             max_divisor2 = i;\n            }\n            if i % 3 == 0 {\n\
    \                max_divisor3 = i;\n            }\n            if i % 4 == 0 {\n\
    \                max_divisor4 = i;\n            }\n            if i % 5 == 0 {\n\
    \                max_divisor5 = i;\n            }\n            if i % 6 == 0 {\n\
    \                max_divisor6 = i;\n            }\n            if i % 7 == 0 {\n\
    \                max_divisor7 = i;\n            }\n            if i % 8 == 0 {\n\
    \                max_divisor8 = i;\n            }\n            if i % 9 == 0 {\n\
    \                max_divisor9 = i;\n            }\n            if i % 10 == 0\
    \ {\n                max_divisor10 = i;\n            }\n            if i % 11\
    \ == 0 {\n                max_divisor11 = i;\n            }\n            if i\
    \ % 12 == 0 {\n                max_divisor12 = i;\n            }\n           \
    \ if i % 13 == 0 {\n                max_divisor13 = i;\n            }\n      \
    \      if i % 14 == 0 {\n                max_divisor14 = i;\n            }\n \
    \           if i % 15 == 0 {\n                max_divisor15 = i;\n           \
    \ }\n        }\n    }\n\n    if max_divisor2 > max_divisor {\n        max_divisor\
    \ = max_divisor2;\n    }\n    if max_divisor3 > max_divisor {\n        max_divisor\
    \ = max_divisor3;\n    }\n    if max_divisor4 > max_divisor {\n        max_divisor\
    \ = max_divisor4;\n    }\n    if max_divisor5 > max_divisor {\n        max_divisor\
    \ = max_divisor5;\n    }\n    if max_divisor6 > max_divisor {\n        max_divisor\
    \ = max_divisor6;\n    }\n    if max_divisor7 > max_divisor {\n        max_divisor\
    \ = max_divisor7;\n    }\n    if max_divisor8 > max_divisor {\n        max_divisor\
    \ = max_divisor8;\n    }\n    if max_divisor9 > max_divisor {\n        max_divisor\
    \ = max_divisor9;\n    }\n    if max_divisor10 > max_divisor {\n        max_divisor\
    \ = max_divisor10;\n    }\n    if max_divisor11 > max_divisor {\n        max_divisor\
    \ = max_divisor11;\n    }\n    if max_divisor12 > ", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n \
    \           if divisor > max_divisor_size {\n                max_divisor_size\
    \ = divisor;\n                max_divisor_value = n / divisor;\n            }\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut\
    \ max_divisors = Vec::new();\n    for i in 1..=n {\n        if n % i == 0 {\n\
    \            if max_divisor > i {\n                max_divisor = i;\n        \
    \    }\n        } else {\n            if max_divisor > max_divisors.len() {\n\
    \                max_divisors = vec![max_divisor];\n            }\n          \
    \  max_divisors.push(max_divisor);\n            max_divisor = 1;\n        }\n\
    \    }\n    max_divisors.sort_unstable();\n    max_divisors[0]", "    let mut\
    \ max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 =\
    \ 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut\
    \ max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 =\
    \ 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut\
    \ max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisors\
    \ = 1;\n\n    while max_divisor % 2 == 0 {\n        max_divisor /= 2;\n      \
    \  max_divisors += 1;\n    }\n\n    while max_divisor % 3 == 0 {\n        max_divisor\
    \ /= 3;\n        max_divisors += 1;\n    }\n\n    while max_divisor % 5 == 0 {\n\
    \        max_divisor /= 5;\n        max_divisors += 1;\n    }\n\n    while max_divisor\
    \ % 7 == 0 {\n        max_divisor /= 7;\n        max_divisors += 1;\n    }\n\n\
    \    while max_divisor % 11 == 0 {\n        max_divisor /= 11;\n        max_divisors\
    \ += 1;\n    }\n\n    while max_divisor % 13 == 0 {\n        max_divisor /= 13;\n\
    \        max_divisors += 1;\n    }\n\n    while max_divisor % 17 == 0 {\n    \
    \    max_divisor /= 17;\n        max_divisors += 1;\n    }\n\n    while max_divisor\
    \ % 19 == 0 {\n        max_divisor /= 19;\n        max_divisors += 1;\n    }\n\
    \n    while max_divisor % 23 == 0 {\n        max_divisor /= 23;\n        max_divisors\
    \ += 1;\n    }\n\n    while max_divisor % 29 == 0 {\n        max_divisor /= 29;\n\
    \        max_divisors += 1;\n    }\n\n    while max_divisor % 31 == 0 {\n    \
    \    max_divisor /= 31;\n        max_divisors += 1;\n    }\n\n    while max_divisor\
    \ % 37 == 0 {\n        max_divisor /= 37;\n        max_divisors += 1;\n    }\n\
    \n    while max_divisor % 41 == 0 {\n        max_divisor /= 41;\n        max_divisors\
    \ += 1;\n    }\n\n    while max_divisor % 43 == 0 {\n        max_divisor /= 43;\n\
    \        max_divisors += 1;\n    }\n\n    while max_divisor % 47 == 0 {\n    \
    \    max_divisor /= 47;\n        max_divisors += 1;\n    }\n\n    while max_divisor\
    \ % 53 == 0 {\n        max_divisor /= 53;\n        max_divisors += 1;\n    }\n\
    \n    while max_divisor % 59 == 0 {\n        max_divisor /= 59;\n        max_divisors\
    \ += 1;\n    }\n\n    while max_divisor % 61 == 0 {\n        max_divisor /= 61;\n\
    \        max_divisors += 1;\n    }\n\n    while max_divisor % 67 == 0 {\n    \
    \    max_divisor /= 67;\n        max_divisors += 1;\n    }\n\n    while max_divisor\
    \ % 71 == 0 {\n        max_divisor /= 71;\n        max_divisors += 1;\n    }\n\
    \n    while max_divisor % 73 == 0 {\n        max_divisor /= 73;\n        max_divisors\
    \ += 1;\n    }\n\n    while max_divisor % 79 == 0 {\n        max_divisor /= 79;\n\
    \        max_divisors += 1;\n    }", "    let mut max_divisor = n;\n    let mut\
    \ max_divisor_index = 0;\n    let mut max_divisor_index2 = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n               \
    \ max_divisor_index2 = i;\n            }\n            if max_divisor_index2 <\
    \ i {\n                max_divisor_index2 = i;\n            }\n        }\n   \
    \ }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            let divisor\
    \ = i / n;\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_remainder = i;\n            }\n    \
    \    }\n    }\n    max_divisor_remainder", "    let mut largest = n;\n    let\
    \ mut max_divisor = 1;\n    while largest % max_divisor == 0 {\n        max_divisor\
    \ *= 2;\n    }\n    largest = max_divisor;\n    while largest % n == 0 {\n   \
    \     largest /= n;\n    }\n    largest", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_ind = 1;\n    while max_divisor % 2 == 0 {\n        max_divisor\
    \ /= 2;\n        max_divisor_ind += 1;\n    }\n    max_divisor_ind += 1;\n   \
    \ max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index =\
    \ 0;\n    let mut max_divisor_value = n;\n\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n\n    max_divisor_index", "   \
    \ let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = 1;\n    let mut max_divisor_value_index\
    \ = 0;\n    let mut max_divisor_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n    let mut max_divisor_value_value_value = 1;\n    let mut max_divisor_value_value_index\
    \ = 0;\n", "    let mut max_divisor = 0;\n    let mut max_divisor_value = 0;\n\
    \    let mut max_divisor_value_remainder = 0;\n    let mut max_divisor_value_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder = 0;\n   \
    \ let mut max_divisor_value_remainder_remainder_remainder_remainder = 0;\n   \
    \ let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_value_remainder_remain", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_n = 0;\n\
    \    let mut max_divisor_size_n_n = 0;\n    let mut max_divisor_size_n_n_n = 0;\n\
    \    let mut max_divisor_size_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_index = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n    \
    \        if max_divisor < i {\n                max_divisor = i;\n            \
    \    max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        if n % max_divisor_size ==\
    \ 0 {\n            max_divisor = max_divisor_size as isize;\n            max_divisor_size\
    \ = 0;\n        }\n        max_divisor_size = max_divisor_size / 2;\n    }\n \
    \   max_divisor", "    let mut largest = n;\n    let mut divisor = 1;\n    while\
    \ divisor < n {\n        if n % divisor == 0 {\n            largest = divisor;\n\
    \        }\n        divisor += 1;\n    }\n    largest", "    let mut largest =\
    \ n;\n    let mut i = 1;\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i;\n        }\n        i += 1;\n    }\n    largest", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count2 = 0;\n    let mut max_divisor_remainder_count3\
    \ = 0;\n    let mut max_divisor_remainder_count4 = 0;\n    let mut max_divisor_remainder_count5\
    \ = 0;\n    let mut max_divisor_remainder_count6 = 0;\n    let mut max_divisor_remainder_count7\
    \ = 0;\n    let mut max_divisor_remainder_count8 = 0;\n    let mut max_divisor_remainder_count9\
    \ = 0;\n    let mut max_divisor_remainder_count10 = 0;\n    let mut max_divisor_remainder_count11\
    \ = 0;\n    let mut max_divisor_remainder_count12 = 0;\n    let mut max_divisor_remainder_count13\
    \ = 0;\n    let mut max_divisor_remainder_count14 = 0;\n    let mut max_divisor_remainder_count15\
    \ = 0;\n    let mut max_divisor_remainder_count16 = 0;\n    let mut max_divisor_remainder_count17\
    \ = 0;\n    let mut max_divisor_remainder_count18 = 0;\n    let mut max_divisor_remainder_count19\
    \ = 0;\n    let mut max_divisor_remainder_count20 = 0;\n    let mut max_divisor_remainder_count21\
    \ = 0;\n    let mut max_divisor_remainder_count22 = 0;\n    let mut max_divisor_remainder_count23\
    \ = 0;\n    let mut max_divisor_remainder_count24 = 0;\n    let mut max_divisor_remainder_count25\
    \ = 0;\n    let mut max_divisor_remainder_count26 = 0;\n    let mut max_divisor_remainder_count27\
    \ = 0;\n    let mut max_divisor_remainder_count28 = 0;\n    let mut max_divisor_remainder_count29\
    \ = 0;\n    let mut max_divisor_remainder_count30 = 0;\n    let mut max_divisor_remainder_count31\
    \ = 0;\n    let mut max_divisor_remainder_count32 = 0;\n    let mut max_divisor_remainder_count33\
    \ = 0;\n    let mut max_divisor_remainder_count34 = 0;\n    let mut max_divisor_remainder_count35\
    \ = 0;\n    let mut max_divisor_remainder_count36 = 0;\n    let mut max_divisor_remainder_count37\
    \ = 0;\n    let mut max_divisor_remainder_count38 = 0;\n    let mut max_divisor_remainder_count39\
    \ = 0;\n    let mut max_divisor_remainder_count40 = 0;\n    let mut max_divisor_remainder_count41\
    \ = 0;\n    let mut max_divisor_remainder_count", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for d in divisors(n) {\n        if d > max_divisor {\n           \
    \ max_divisor = d;\n            max_divisor_size = 1;\n        }\n        if d\
    \ > max_divisor_size {\n            max_divisor_size = d;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = n;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n\
    \n    for divisor in 1..=max_divisor {\n        if n % divisor == 0 {\n      \
    \      max_divisor = divisor;\n            max_divisor_index = 1;\n        }\n\
    \        if max_divisor == n {\n            break;\n        }\n        if max_divisor\
    \ > n {\n            break;\n        }\n        max_divisor_indexes.push(max_divisor_index);\n\
    \        max_divisor_index += 1;\n    }\n\n    max_divisor_indexes.sort_unstable();\n\
    \    max_divisor_indexes.pop();\n    max_divisor_indexes.pop();\n\n    max_divisor_indexes.last()",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i\
    \ in 1..=n {\n        if n % i == 0 {\n            if max_divisor == 0 {\n   \
    \             max_divisor = i;\n                max_divisor_remainder = n % i;\n\
    \            } else {\n                if max_divisor_remainder > 0 {\n      \
    \              max_divisor = i;\n                    max_divisor_remainder = max_divisor_remainder\
    \ % i;\n                }\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for d\
    \ in divisors(n) {\n        if n % d == 0 {\n            if d > max_divisor {\n\
    \                max_divisor = d;\n                max_divisor_remainder = n %\
    \ d;\n            }\n        }\n    }\n    if max_divisor_remainder == 0 {\n \
    \       max_divisor\n    } else {\n        max_divisor + 1\n    }", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = n;\n    for d in 2..=max_divisor_size.clone()\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n            }\n        }\n    }\n    max_divisor", "   \
    \ let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_inv\
    \ = -1;\n    while max_divisor % 2 == 0 {\n        max_divisor /= 2;\n       \
    \ max_divisor_ind += 1;\n    }\n    while max_divisor % 3 == 0 {\n        max_divisor\
    \ /= 3;\n        max_divisor_ind += 1;\n    }\n    while max_divisor % 5 == 0\
    \ {\n        max_divisor /= 5;\n        max_divisor_ind += 1;\n    }\n    while\
    \ max_divisor % 7 == 0 {\n        max_divisor /= 7;\n        max_divisor_ind +=\
    \ 1;\n    }\n    while max_divisor % 11 == 0 {\n        max_divisor /= 11;\n \
    \       max_divisor_ind += 1;\n    }\n    while max_divisor % 13 == 0 {\n    \
    \    max_divisor /= 13;\n        max_divisor_ind += 1;\n    }\n    while max_divisor\
    \ % 17 == 0 {\n        max_divisor /= 17;\n        max_divisor_ind += 1;\n   \
    \ }\n    while max_divisor % 19 == 0 {\n        max_divisor /= 19;\n        max_divisor_ind\
    \ += 1;\n    }\n    while max_divisor % 23 == 0 {\n        max_divisor /= 23;\n\
    \        max_divisor_ind += 1;\n    }\n    while max_divisor % 29 == 0 {\n   \
    \     max_divisor /= 29;\n        max_divisor_ind += 1;\n    }\n    while max_divisor\
    \ % 31 == 0 {\n        max_divisor /= 31;\n        max_divisor_ind += 1;\n   \
    \ }\n    while max_divisor % 37 == 0 {\n        max_divisor /= 37;\n        max_divisor_ind\
    \ += 1;\n    }\n    while max_divisor % 41 == 0 {\n        max_divisor /= 41;\n\
    \        max_divisor_ind += 1;\n    }\n    while max_divisor % 43 == 0 {\n   \
    \     max_divisor /= 43;\n        max_divisor_ind += 1;\n    }\n    while max_divisor\
    \ % 47 == 0 {\n        max_divisor /= 47;\n        max_divisor_ind += 1;\n   \
    \ }\n    while max_divisor % 53 == 0 {\n        max_divisor /= 53;\n        max_divisor_ind\
    \ += 1;\n    }\n    while max_divisor % 59 == 0 {\n        max_divisor /= 59;\n\
    \        max_divisor_ind += 1;\n    }\n    while max_divisor % 61 == 0 {\n   \
    \     max_divisor /= 61;\n        max_divisor_ind += 1;\n    }\n    while max_divisor\
    \ % 67 == 0 {\n        max_divisor /= 67;\n        max_divisor_ind += 1;\n   \
    \ }\n    while max_divisor % 71 == 0 {\n        max_divisor /= 71;\n        max_divisor",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \                max_divisor_ind_ind = i;\n            }\n            if max_divisor_ind\
    \ != i {\n                max_divisor_ind = i;\n                max_divisor_ind_ind\
    \ = i;\n            }\n        }\n    }\n    max_divisor_ind", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            let size\
    \ = d.checked_mul(n).ok().unwrap_or(0);\n            if size > max_divisor_size\
    \ {\n                max_divisor = d;\n                max_divisor_size = size;\n\
    \                max_divisor_size_size = size;\n            }\n        }\n   \
    \ }\n    if max_divisor_size == 0 {\n        max_divisor = 1;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut largest = n;\n    let mut max_divisor = 1;\n    while largest % max_divisor\
    \ != 0 {\n        max_divisor *= 2;\n    }\n    largest", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 1;\n    let mut max_divisor_size = n;\n    for d in 2..=max_divisor_size.clone()\
    \ {\n        if n % d == 0 {\n            if max_divisor_size % d == 0 {\n   \
    \             max_divisor = d;\n                max_divisor_size = max_divisor_size\
    \ / d;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n                max_divisor_value = n;\n            }\n        }\n\
    \    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 1 {\n        max_divisor_size /= 2;\n  \
    \      max_divisor += 1;\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in 1..=n {\n   \
    \     if n % divisor == 0 {\n            if max_divisor_remainder < divisor {\n\
    \                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value = n;\n\
    \    for d in divisors(n) {\n        if n % d == 0 {\n            if d > max_divisor\
    \ {\n                max_divisor = d;\n                max_divisor_size = n;\n\
    \                max_divisor_value = n;\n            }\n        } else {\n   \
    \         if d > max_divisor_value {\n                max_divisor_value = d;\n\
    \                max_divisor_size = n;\n                max_divisor = d;\n   \
    \         }\n        }\n    }\n    max_divisor_value", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        }\n    }\n    max_divisor_value", "    let mut largest\
    \ = n;\n    let mut i = 1;\n    while i <= n {\n        if n % i == 0 {\n    \
    \        largest = i;\n        }\n        i += 1;\n    }\n    largest", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value\
    \ = 0;\n    let mut max_divisor_value_divisor = 0;\n\n    for i in 1..=n {\n \
    \       let mut divisor = 1;\n        let mut divisor_size = 0;\n        let mut\
    \ divisor_value = 0;\n        let mut divisor_value_divisor = 0;\n\n        while\
    \ divisor <= n {\n            if n % divisor == 0 {\n                divisor_size\
    \ += 1;\n                divisor_value += divisor;\n                divisor_value_divisor\
    \ += divisor / divisor;\n            }\n            divisor += 1;\n        }\n\
    \n        if divisor_size > max_divisor_size {\n            max_divisor_size =\
    \ divisor_size;\n            max_divisor_value = divisor_value;\n            max_divisor_value_divisor\
    \ = divisor_value_divisor;\n        }\n    }\n\n    max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..n {\n\
    \        if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_index = i;\n            }\n        }\n   \
    \ }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        max_divisor += 1;\n       \
    \ max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n            }\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 1;\n   \
    \ let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let\
    \ mut max_divisor_ind_ind2 = 1;\n    let mut max_divisor_ind_ind3 = 1;\n    let\
    \ mut max_divisor_ind_ind4 = 1;\n    let mut max_divisor_ind_ind5 = 1;\n    let\
    \ mut max_divisor_ind_ind6 = 1;\n    let mut max_divisor_ind_ind7 = 1;\n    let\
    \ mut max_divisor_ind_ind8 = 1;\n    let mut max_divisor_ind_ind9 = 1;\n    let\
    \ mut max_divisor_ind_ind10 = 1;\n    let mut max_divisor_ind_ind11 = 1;\n   \
    \ let mut max_divisor_ind_ind12 = 1;\n    let mut max_divisor_ind_ind13 = 1;\n\
    \    let mut max_divisor_ind_ind14 = 1;\n    let mut max_divisor_ind_ind15 = 1;\n\
    \    let mut max_divisor_ind_ind16 = 1;\n    let mut max_divisor_ind_ind17 = 1;\n\
    \    let mut max_divisor_ind_ind18 = 1;\n    let mut max_divisor_ind_ind19 = 1;\n\
    \    let mut max_divisor_ind_ind20 = 1;\n    let mut max_divisor_ind_ind21 = 1;\n\
    \    let mut max_divisor_ind_ind22 = 1;\n    let mut max_divisor_ind_ind23 = 1;\n\
    \    let mut max_divisor_ind_ind24 = 1;\n    let mut max_divisor_ind_ind25 = 1;\n\
    \    let mut max_divisor_ind_ind26 = 1;\n    let mut max_divisor_ind_ind27 = 1;\n\
    \    let mut max_divisor_ind_ind28 = 1;\n    let mut max_divisor_ind_ind29 = 1;\n\
    \    let mut max_divisor_ind_ind30 = 1;\n    let mut max_divisor_ind_ind31 = 1;\n\
    \    let mut max_divisor_ind_ind32 = 1;\n    let mut max_divisor_ind_ind33 = 1;\n\
    \    let mut max_divisor_ind_ind34 = 1;\n    let mut max_divisor_ind_ind35 = 1;\n\
    \    let mut max_divisor_ind_ind36 = 1;\n    let mut max_divisor_ind_ind37 = 1;\n\
    \    let mut max_divisor_ind_ind38 = 1;\n    let mut max_divisor_ind_ind39 = 1;\n\
    \    let mut max_divisor_ind_ind40 = 1;\n    let mut max_divisor_ind_ind41 = 1;\n\
    \    let mut max_divisor_ind_ind42 = 1;\n    let mut max_divisor_ind_ind43 = 1;\n\
    \    let mut max_divisor_ind_ind44 = 1;\n    let mut max_divisor_ind_ind45 = 1;\n\
    \    let ", "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n\
    \    while max_divisor_size != 0 {\n        if n % max_divisor_size == 0 {\n \
    \           max_divisor += max_divisor_size;\n        }\n        max_divisor_size\
    \ /= 2;\n    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = 1;\n\n    for divisor in 1..=max_divisor {\n        if n % divisor == 0 {\n\
    \            if max_divisor_value < divisor {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor - 1;\n            }\n\
    \        }\n    }\n\n    max_divisor_index", "    let mut max_divisor = 0;\n \
    \   let mut max_divisor_size = n;\n    while max_divisor_size != 0 {\n       \
    \ max_divisor += max_divisor_size;\n        max_divisor_size = max_divisor_size\
    \ / 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \            }\n        }\n    }\n    max_divisor_ind", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 1;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor_remainder < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_remainder = n % divisor;\n            }\n       \
    \ }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor\
    \ = n;\n    for divisor in 1..=max_divisor {\n        if n % divisor == 0 {\n\
    \            max_divisor = divisor;\n        }\n    }\n    max_divisor", "   \
    \ let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for divisor\
    \ in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            max_divisor\
    \ = divisor;\n            max_divisor_index = divisor as isize;\n        }\n \
    \   }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \            }\n        }\n    }\n    max_divisor_ind", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_val = -1;\n\
    \    let mut max_divisor_ind_val_val = -1;\n    let mut max_divisor_ind_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val = -1;\n    let mut max_divisor_ind_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val = -1;\n    let mut\
    \ max_divisor_ind_val_val_val_val_val_val_val = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val = -1;\n \
    \   let mut max_divisor_ind_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val = -1;\n\
    \    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val = -1;\n \
    \   let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val = -1;\n  \
    \  let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val = -1;\n   \
    \ let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val = -1;\n    let\
    \ mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val_val = -1;\n\
    \    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val_val =\
    \ -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val_val\
    \ = -1;\n    let mut max_divisor_ind_val_val_val_val_val_val_val_val_val_val_val\
    \ = -1;", "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n \
    \   let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n   \
    \ let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 1;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        if n % max_divisor == 0 {\n\
    \            max_divisor = max_divisor + 1;\n        }\n        max_divisor_size\
    \ = max_divisor_size / 2;\n    }\n    max_divisor", "    let mut max_divisor =\
    \ n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_2 = 1;\n \
    \   let mut max_divisor_ind_3 = 1;\n    let mut max_divisor_ind_4 = 1;\n    let\
    \ mut max_divisor_ind_5 = 1;\n    let mut max_divisor_ind_6 = 1;\n    let mut\
    \ max_divisor_ind_7 = 1;\n    let mut max_divisor_ind_8 = 1;\n    let mut max_divisor_ind_9\
    \ = 1;\n    let mut max_divisor_ind_10 = 1;\n    let mut max_divisor_ind_11 =\
    \ 1;\n    let mut max_divisor_ind_12 = 1;\n    let mut max_divisor_ind_13 = 1;\n\
    \    let mut max_divisor_ind_14 = 1;\n    let mut max_divisor_ind_15 = 1;\n\n\
    \    for d in 1..=n {\n        if n % d == 0 {\n            if d > max_divisor\
    \ {\n                max_divisor = d;\n                max_divisor_ind = 1;\n\
    \            }\n            if d > max_divisor_2 {\n                max_divisor_ind_2\
    \ = 1;\n            }\n            if d > max_divisor_3 {\n                max_divisor_ind_3\
    \ = 1;\n            }\n            if d > max_divisor_4 {\n                max_divisor_ind_4\
    \ = 1;\n            }\n            if d > max_divisor_5 {\n                max_divisor_ind_5\
    \ = 1;\n            }\n            if d > max_divisor_6 {\n                max_divisor_ind_6\
    \ = 1;\n            }\n            if d > max_divisor_7 {\n                max_divisor_ind_7\
    \ = 1;\n            }\n            if d > max_divisor_8 {\n                max_divisor_ind_8\
    \ = 1;\n            }\n            if d > max_divisor_9 {\n                max_divisor_ind_9\
    \ = 1;\n            }\n            if d > max_divisor_10 {\n                max_divisor_ind_10\
    \ = 1;\n            }\n            if d > max_divisor_11 {\n                max_divisor_ind_11\
    \ = 1;\n            }\n            if d > max_divisor_12 {\n                max_divisor_ind_12\
    \ = 1;\n            }\n            if d > max_divisor_13 {\n                max_divisor_ind_13\
    \ = 1;\n            }\n            if d > max_divisor_14 {\n                max_divisor_ind_14\
    \ = 1;\n            }\n            if d > max_divisor_15 {\n                max_divisor_ind_15\
    \ = 1;\n            }\n        }\n    }\n\n    if max_divisor == n {\n       \
    \ max_divisor_ind\n    } else if max_divisor_2 == n {\n        max_divisor_ind_2\n\
    \    } else if max_divisor_3 == n {\n        max_divisor_ind_3\n    } else if\
    \ max_divisor_4 == n {\n        max_divisor_ind_4\n    } else if max_divisor_5\
    \ == n ", "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n \
    \   while max_divisor_size != 0 {\n        if n % max_divisor_size == 0 {\n  \
    \          max_divisor = max_divisor_size as isize;\n        }\n        max_divisor_size\
    \ /= 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_remainder = n % divisor;\n            }\n        }\n  \
    \  }\n    if max_divisor_remainder == 0 {\n        max_divisor\n    } else {\n\
    \        max_divisor_remainder\n    }", "    let mut max_divisor = 1;\n    let\
    \ mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisors = Vec::new();\n    while\
    \ max_divisor % 2 == 0 {\n        max_divisor /= 2;\n        max_divisors.push(max_divisor);\n\
    \    }\n    max_divisors.push(max_divisor);\n    max_divisors.sort_by_key(|x|\
    \ x.partial_cmp(n).unwrap());\n    max_divisors.last()", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor = n;\n    while max_divisor % 2 == 0 {\n     \
    \   max_divisor /= 2;\n    }\n    while max_divisor % 3 == 0 {\n        max_divisor\
    \ /= 3;\n    }\n    while max_divisor % 5 == 0 {\n        max_divisor /= 5;\n\
    \    }\n    while max_divisor % 7 == 0 {\n        max_divisor /= 7;\n    }\n \
    \   while max_divisor % 11 == 0 {\n        max_divisor /= 11;\n    }\n    while\
    \ max_divisor % 13 == 0 {\n        max_divisor /= 13;\n    }\n    while max_divisor\
    \ % 17 == 0 {\n        max_divisor /= 17;\n    }\n    while max_divisor % 19 ==\
    \ 0 {\n        max_divisor /= 19;\n    }\n    while max_divisor % 23 == 0 {\n\
    \        max_divisor /= 23;\n    }\n    while max_divisor % 29 == 0 {\n      \
    \  max_divisor /= 29;\n    }\n    while max_divisor % 31 == 0 {\n        max_divisor\
    \ /= 31;\n    }\n    while max_divisor % 37 == 0 {\n        max_divisor /= 37;\n\
    \    }\n    while max_divisor % 41 == 0 {\n        max_divisor /= 41;\n    }\n\
    \    while max_divisor % 43 == 0 {\n        max_divisor /= 43;\n    }\n    while\
    \ max_divisor % 47 == 0 {\n        max_divisor /= 47;\n    }\n    while max_divisor\
    \ % 53 == 0 {\n        max_divisor /= 53;\n    }\n    while max_divisor % 59 ==\
    \ 0 {\n        max_divisor /= 59;\n    }\n    while max_divisor % 61 == 0 {\n\
    \        max_divisor /= 61;\n    }\n    while max_divisor % 67 == 0 {\n      \
    \  max_divisor /= 67;\n    }\n    while max_divisor % 71 == 0 {\n        max_divisor\
    \ /= 71;\n    }\n    while max_divisor % 73 == 0 {\n        max_divisor /= 73;\n\
    \    }\n    while max_divisor % 79 == 0 {\n        max_divisor /= 79;\n    }\n\
    \    while max_divisor % 83 == 0 {\n        max_divisor /= 83;\n    }\n    while\
    \ max_divisor % 89 == 0 {\n        max_divisor /= 89;\n    }\n    while max_divisor\
    \ % 97 == 0 {\n        max_divisor /= 97;\n    }\n    while max_divisor % 103\
    \ == 0 {\n        max_divisor /= 103;\n    }\n    while max_divisor % 109 == 0\
    \ {\n        max_divisor /= 109;\n    }\n    while max_divisor % 113 == 0 {\n\
    \        max_divisor /= 113;\n    }\n    while max_", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_index2 = 0;\n    let mut max_divisor_index3 =\
    \ 0;\n    let mut max_divisor_index4 = 0;\n    let mut max_divisor_index5 = 0;\n\
    \    let mut max_divisor_index6 = 0;\n    let mut max_divisor_index7 = 0;\n  \
    \  let mut max_divisor_index8 = 0;\n    let mut max_divisor_index9 = 0;\n    let\
    \ mut max_divisor_index10 = 0;\n    let mut max_divisor_index11 = 0;\n    let\
    \ mut max_divisor_index12 = 0;\n    let mut max_divisor_index13 = 0;\n    let\
    \ mut max_divisor_index14 = 0;\n    let mut max_divisor_index15 = 0;\n    let\
    \ mut max_divisor_index16 = 0;\n    let mut max_divisor_index17 = 0;\n    let\
    \ mut max_divisor_index18 = 0;\n    let mut max_divisor_index19 = 0;\n    let\
    \ mut max_divisor_index20 = 0;\n    let mut max_divisor_index21 = 0;\n    let\
    \ mut max_divisor_index22 = 0;\n    let mut max_divisor_index23 = 0;\n    let\
    \ mut max_divisor_index24 = 0;\n    let mut max_divisor_index25 = 0;\n    let\
    \ mut max_divisor_index26 = 0;\n    let mut max_divisor_index27 = 0;\n    let\
    \ mut max_divisor_index28 = 0;\n    let mut max_divisor_index29 = 0;\n    let\
    \ mut max_divisor_index30 = 0;\n    let mut max_divisor_index31 = 0;\n    let\
    \ mut max_divisor_index32 = 0;\n    let mut max_divisor_index33 = 0;\n    let\
    \ mut max_divisor_index34 = 0;\n    let mut max_divisor_index35 = 0;\n    let\
    \ mut max_divisor_index36 = 0;\n    let mut max_divisor_index37 = 0;\n    let\
    \ mut max_divisor_index38 = 0;\n    let mut max_divisor_index39 = 0;\n    let\
    \ mut max_divisor_index40 = 0;\n    let mut max_divisor_index41 = 0;\n    let\
    \ mut max_divisor_index42 = 0;\n    let mut max_divisor_index43 = 0;\n    let\
    \ mut max_divisor_index44 = 0;\n    let mut max_divisor_index45 = 0;\n    let\
    \ mut max_divisor_index46 = 0;\n    let mut max_divisor_index47 = 0;\n    let\
    \ mut max_divisor_index48 = 0;\n    let mut max_divisor_index49 = 0;\n    let\
    \ mut max_divisor_index50 = 0;\n    let mut max_divisor_index51 = 0;\n    let\
    \ mut max_divisor_index52 = 0;\n    let mut max_divisor_index53 = 0;\n    let\
    \ mut max_divisor_index54 = 0;\n    let mut max_divisor_index55 = 0;\n    let\
    \ mut max_divisor_index56 = 0;\n    let mut max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n      \
    \  if n % d == 0 {\n            if max_divisor < d {\n                max_divisor\
    \ = d;\n                max_divisor_size = 1;\n            } else {\n        \
    \        max_divisor_size += 1;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_n = 0;\n    let mut max_divisor_remainder_n2 = 0;\n  \
    \  let mut max_divisor_remainder_n3 = 0;\n    let mut max_divisor_remainder_n4\
    \ = 0;\n    let mut max_divisor_remainder_n5 = 0;\n    let mut max_divisor_remainder_n6\
    \ = 0;\n    let mut max_divisor_remainder_n7 = 0;\n    let mut max_divisor_remainder_n8\
    \ = 0;\n    let mut max_divisor_remainder_n9 = 0;\n    let mut max_divisor_remainder_n10\
    \ = 0;\n    let mut max_divisor_remainder_n11 = 0;\n    let mut max_divisor_remainder_n12\
    \ = 0;\n    let mut max_divisor_remainder_n13 = 0;\n    let mut max_divisor_remainder_n14\
    \ = 0;\n    let mut max_divisor_remainder_n15 = 0;\n    let mut max_divisor_remainder_n16\
    \ = 0;\n    let mut max_divisor_remainder_n17 = 0;\n    let mut max_divisor_remainder_n18\
    \ = 0;\n    let mut max_divisor_remainder_n19 = 0;\n    let mut max_divisor_remainder_n20\
    \ = 0;\n    let mut max_divisor_remainder_n21 = 0;\n    let mut max_divisor_remainder_n22\
    \ = 0;\n    let mut max_divisor_remainder_n23 = 0;\n    let mut max_divisor_remainder_n24\
    \ = 0;\n    let mut max_divisor_remainder_n25 = 0;\n    let mut max_divisor_remainder_n26\
    \ = 0;\n    let mut max_divisor_remainder_n27 = 0;\n    let mut max_divisor_remainder_n28\
    \ = 0;\n    let mut max_divisor_remainder_n29 = 0;\n    let mut max_divisor_remainder_n30\
    \ = 0;\n    let mut max_divisor_remainder_n31 = 0;\n    let mut max_divisor_remainder_n32\
    \ = 0;\n    let mut max_divisor_remainder_n33 = 0;\n    let mut max_divisor_remainder_n34\
    \ = 0;\n    let mut max_divisor_remainder_n35 = 0;\n    let mut max_divisor_remainder_n36\
    \ = 0;\n    let mut max_divisor_remainder_n37 = 0;\n    let mut max_divisor_remainder_n38\
    \ = 0;\n    let mut max_divisor_remainder_n39 = 0;\n    let mut max_divisor_remainder_n40\
    \ = 0;\n    let mut max_divisor_remainder_n41 = 0;\n    let mut max_divisor_remainder_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_power = 1;\n    let mut max_divisor_remainder_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power = 1;\n    let mut\
    \ max_divisor_remainder_power_power_power_power = 1;\n    let mut max_divisor_remainder_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = 1;\n    let mut max_divisor_remainder_power_power_power_power_power_power_power_power_power_power_power_power_power_pow",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        } else {\n            if max_divisor == i {\n   \
    \             max_divisor_value = i;\n            }\n        }\n    }\n    max_divisor_value",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ % 2 == 0 {\n        max_divisor_size /= 2;\n        max_divisor *= 2;\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = n;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_prev\
    \ = 1;\n    let mut max_divisor_ind_prev2 = 1;\n    let mut max_divisor_ind_prev3\
    \ = 1;\n    let mut max_divisor_ind_prev4 = 1;\n    let mut max_divisor_ind_prev5\
    \ = 1;\n    let mut max_divisor_ind_prev6 = 1;\n    let mut max_divisor_ind_prev7\
    \ = 1;\n    let mut max_divisor_ind_prev8 = 1;\n    let mut max_divisor_ind_prev9\
    \ = 1;\n    let mut max_divisor_ind_prev10 = 1;\n    let mut max_divisor_ind_prev11\
    \ = 1;\n    let mut max_divisor_ind_prev12 = 1;\n    let mut max_divisor_ind_prev13\
    \ = 1;\n    let mut max_divisor_ind_prev14 = 1;\n    let mut max_divisor_ind_prev15\
    \ = 1;\n    let mut max_divisor_ind_prev16 = 1;\n    let mut max_divisor_ind_prev17\
    \ = 1;\n    let mut max_divisor_ind_prev18 = 1;\n    let mut max_divisor_ind_prev19\
    \ = 1;\n    let mut max_divisor_ind_prev20 = 1;\n    let mut max_divisor_ind_prev21\
    \ = 1;\n    let mut max_divisor_ind_prev22 = 1;\n    let mut max_divisor_ind_prev23\
    \ = 1;\n    let mut max_divisor_ind_prev24 = 1;\n    let mut max_divisor_ind_prev25\
    \ = 1;\n    let mut max_divisor_ind_prev26 = 1;\n    let mut max_divisor_ind_prev27\
    \ = 1;\n    let mut max_divisor_ind_prev28 = 1;\n    let mut max_divisor_ind_prev29\
    \ = 1;\n    let mut max_divisor_ind_prev30 = 1;\n    let mut max_divisor_ind_prev31\
    \ = 1;\n    let mut max_divisor_ind_prev32 = 1;\n    let mut max_divisor_ind_prev33\
    \ = 1;\n    let mut max_divisor_ind_prev34 = 1;\n    let mut max_divisor_ind_prev35\
    \ = 1;\n    let mut max_divisor_ind_prev36 = 1;\n    let mut max_divisor_ind_prev37\
    \ = 1;\n    let mut max_divisor_ind_prev38 = 1;\n    let mut max_divisor_ind_prev39\
    \ = 1;\n    let mut max_divisor_ind_prev40 = 1;\n    let mut max_divisor_ind_prev41\
    \ = 1;\n    let mut max_divisor_ind_prev42 = 1;\n    let mut max_divisor_ind_prev43\
    \ = 1;\n    let mut max_divisor_ind_prev44 = 1;\n    let mut max_divisor_ind_prev45\
    \ = 1;\n    let ", "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n\
    \    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5\
    \ = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let\
    \ mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10\
    \ = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let\
    \ mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15\
    \ = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let\
    \ mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20\
    \ = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let\
    \ mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25\
    \ = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let\
    \ mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30\
    \ = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let\
    \ mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35\
    \ = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let\
    \ mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40\
    \ = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let\
    \ mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45\
    \ = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let\
    \ mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50\
    \ = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let\
    \ mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55\
    \ = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let\
    \ mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60\
    \ = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let\
    \ mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n        if\
    \ n % i == 0 {\n            if max_divisor_remainder == 0 {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = n % i;\n            } else {\n\
    \                if max_divisor_remainder > max_divisor {\n                  \
    \  max_divisor = max_divisor_remainder;\n                    max_divisor_remainder\
    \ = n % max_divisor;\n                }\n            }\n        }\n    }\n   \
    \ max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index =\
    \ 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if\
    \ divisor > max_divisor {\n                max_divisor = divisor;\n          \
    \      max_divisor_index = divisor;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n\n   \
    \ for i in 1..n {\n        let mut divisor = 1;\n        let mut divisor2 = 1;\n\
    \        let mut divisor3 = 1;\n        let mut divisor4 = 1;\n        let mut\
    \ divisor5 = 1;\n        let mut divisor6 = 1;\n        let mut divisor7 = 1;\n\
    \        let mut divisor8 = 1;\n        let mut divisor9 = 1;\n        let mut\
    \ divisor10 = 1;\n        let mut divisor11 = 1;\n        let mut divisor12 =\
    \ 1;\n        let mut divisor13 = 1;\n        let mut divisor14 = 1;\n       \
    \ let mut divisor15 = 1;\n\n        for j in 0..i {\n            if i % j == 0\
    \ {\n                divisor *= j;\n                divisor2 *= j;\n         \
    \       divisor3 *= j;\n                divisor4 *= j;\n                divisor5\
    \ *= j;\n                divisor6 *= j;\n                divisor7 *= j;\n    \
    \            divisor8 *= j;\n                divisor9 *= j;\n                divisor10\
    \ *= j;\n                divisor11 *= j;\n                divisor12 *= j;\n  \
    \              divisor13 *= j;\n                divisor14 *= j;\n            \
    \    divisor15 *= j;\n            }\n        }\n\n        if divisor > max_divisor\
    \ {\n            max_divisor = divisor;\n        }\n\n        if divisor2 > max_divisor2\
    \ {\n            max_divisor2 = divisor2;\n        }\n\n        if divisor3 >\
    \ max_divisor3 {\n            max_divisor3 = divisor3;\n        }\n\n        if\
    \ divisor4 > max_divisor4 {\n            max_divisor4 = divisor4;\n        }\n\
    \n        if divisor5 > max_divisor5 {\n            max_divisor5 = divisor5;\n\
    \        }\n\n        if divisor6 > max_divisor6 {\n            max_divisor6 =\
    \ divisor6;\n        }\n\n        if divisor7 > max_divisor7 {\n            max_divisor7\
    \ = divisor7;\n        }\n\n        if divisor8 > max_divisor8 {\n           \
    \ max_divisor8 = divisor8;\n        }\n\n        if divisor9 > max_divisor9 {\n\
    \            max_divisor9 = divisor9;\n        }\n\n        if divisor10 > max_divisor10\
    \ {\n            max_divisor10 = divisor10;"]
stop_tokens:
- "\n}"
