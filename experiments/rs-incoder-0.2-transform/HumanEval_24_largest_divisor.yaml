name: HumanEval_24_largest_divisor
language: rs
prompt: "/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n\
    \    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_remainder\
    \ > 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = max_divisor_remainder % i;\n            } else {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = 0;\n            }\n        }\n\
    \    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 1;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size % 2 == 0 {\n        max_divisor_size /= 2;\n\
    \        max_divisor *= 2;\n    }\n    while max_divisor_size % 3 == 0 {\n   \
    \     max_divisor_size /= 3;\n        max_divisor *= 3;\n    }\n    while max_divisor_size\
    \ % 5 == 0 {\n        max_divisor_size /= 5;\n        max_divisor *= 5;\n    }\n\
    \    while max_divisor_size % 7 == 0 {\n        max_divisor_size /= 7;\n     \
    \   max_divisor *= 7;\n    }\n    while max_divisor_size % 11 == 0 {\n       \
    \ max_divisor_size /= 11;\n        max_divisor *= 11;\n    }\n    while max_divisor_size\
    \ % 13 == 0 {\n        max_divisor_size /= 13;\n        max_divisor *= 13;\n \
    \   }\n    while max_divisor_size % 17 == 0 {\n        max_divisor_size /= 17;\n\
    \        max_divisor *= 17;\n    }\n    while max_divisor_size % 19 == 0 {\n \
    \       max_divisor_size /= 19;\n        max_divisor *= 19;\n    }\n    while\
    \ max_divisor_size % 23 == 0 {\n        max_divisor_size /= 23;\n        max_divisor\
    \ *= 23;\n    }\n    while max_divisor_size % 29 == 0 {\n        max_divisor_size\
    \ /= 29;\n        max_divisor *= 29;\n    }\n    while max_divisor_size % 31 ==\
    \ 0 {\n        max_divisor_size /= 31;\n        max_divisor *= 31;\n    }\n  \
    \  while max_divisor_size % 37 == 0 {\n        max_divisor_size /= 37;\n     \
    \   max_divisor *= 37;\n    }\n    while max_divisor_size % 41 == 0 {\n      \
    \  max_divisor_size /= 41;\n        max_divisor *= 41;\n    }\n    while max_divisor_size\
    \ % 43 == 0 {\n        max_divisor_size /= 43;\n        max_divisor *= 43;\n \
    \   }\n    while max_divisor_size % 47 == 0 {\n        max_divisor_size /= 47;\n\
    \        max_divisor *= 47;\n    }\n    while max_divisor_size % 53 == 0 {\n \
    \       max_divisor_size /= 53;\n        max_divisor *= 53;\n    }\n    while\
    \ max_divisor_size % 59 == 0 {\n        max_divisor_size /= 59;\n        max_divisor\
    \ *= 59;\n    }\n    while max_divisor_size % 61 == 0 {\n        max_divisor_size\
    \ /= 61;\n        max_divisor *= 61;\n    }\n    while max_divisor_size % 67 ==\
    \ 0 {\n        max_divisor_size /= 67;\n        max_divisor *= 67;\n    }\n  \
    \  while max_divisor_size % 71 == 0 {\n        max_divisor_size /= 71;\n     \
    \   max_", "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let\
    \ mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5\
    \ = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let\
    \ mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10\
    \ = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let\
    \ mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15\
    \ = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let\
    \ mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20\
    \ = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let\
    \ mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25\
    \ = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let\
    \ mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30\
    \ = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let\
    \ mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35\
    \ = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let\
    \ mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40\
    \ = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let\
    \ mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45\
    \ = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let\
    \ mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50\
    \ = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let\
    \ mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55\
    \ = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let\
    \ mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60\
    \ = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let\
    \ mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_pow = 1;\n\
    \    let mut max_divisor_ind_pow2 = 1;\n    let mut max_divisor_ind_pow3 = 1;\n\
    \    let mut max_divisor_ind_pow4 = 1;\n    let mut max_divisor_ind_pow5 = 1;\n\
    \    let mut max_divisor_ind_pow6 = 1;\n    let mut max_divisor_ind_pow7 = 1;\n\
    \    let mut max_divisor_ind_pow8 = 1;\n    let mut max_divisor_ind_pow9 = 1;\n\
    \    let mut max_divisor_ind_pow10 = 1;\n    let mut max_divisor_ind_pow11 = 1;\n\
    \    let mut max_divisor_ind_pow12 = 1;\n    let mut max_divisor_ind_pow13 = 1;\n\
    \    let mut max_divisor_ind_pow14 = 1;\n    let mut max_divisor_ind_pow15 = 1;\n\
    \    let mut max_divisor_ind_pow16 = 1;\n    let mut max_divisor_ind_pow17 = 1;\n\
    \    let mut max_divisor_ind_pow18 = 1;\n    let mut max_divisor_ind_pow19 = 1;\n\
    \    let mut max_divisor_ind_pow20 = 1;\n    let mut max_divisor_ind_pow21 = 1;\n\
    \    let mut max_divisor_ind_pow22 = 1;\n    let mut max_divisor_ind_pow23 = 1;\n\
    \    let mut max_divisor_ind_pow24 = 1;\n    let mut max_divisor_ind_pow25 = 1;\n\
    \    let mut max_divisor_ind_pow26 = 1;\n    let mut max_divisor_ind_pow27 = 1;\n\
    \    let mut max_divisor_ind_pow28 = 1;\n    let mut max_divisor_ind_pow29 = 1;\n\
    \    let mut max_divisor_ind_pow30 = 1;\n    let mut max_divisor_ind_pow31 = 1;\n\
    \    let mut max_divisor_ind_pow32 = 1;\n    let mut max_divisor_ind_pow33 = 1;\n\
    \    let mut max_divisor_ind_pow34 = 1;\n    let mut max_divisor_ind_pow35 = 1;\n\
    \    let mut max_divisor_ind_pow36 = 1;\n    let mut max_divisor_ind_pow37 = 1;\n\
    \    let mut max_divisor_ind_pow38 = 1;\n    let mut max_divisor_ind_pow39 = 1;\n\
    \    let mut max_divisor_ind_pow40 = 1;\n    let mut max_divisor_ind_pow41 = 1;\n\
    \    let mut max_divisor_ind_pow42 = 1;\n    let mut max_divisor_ind_pow43 = 1;\n\
    \    let mut max_divisor_ind_pow44 = 1;\n    let mut max_divisor_ind_pow45 = 1;\n\
    \    let mu", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n\n    for i in 1..=n {\n\
    \        if n % i == 0 {\n            let divisor = i as isize;\n            if\
    \ divisor > max_divisor {\n                max_divisor = divisor;\n          \
    \      max_divisor_remainder = i;\n                max_divisor_remainder_count\
    \ = 0;\n            }\n            if divisor == max_divisor {\n             \
    \   max_divisor_remainder_count += 1;\n            }\n        }\n    }\n\n   \
    \ if max_divisor_remainder_count == 0 {\n        max_divisor_remainder_count =\
    \ 1;\n    }\n\n    max_divisor_remainder / max_divisor_remainder_count", "   \
    \ let mut largest = n;\n    let mut max_divisor = 1;\n    while largest % max_divisor\
    \ == 0 {\n        max_divisor *= 2;\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = n % i;\n            }\n      \
    \  }\n    }\n    if max_divisor_remainder == 0 {\n        max_divisor\n    } else\
    \ {\n        max_divisor + 1\n    }", "    let mut max_divisor = n;\n    let mut\
    \ max_divisor_ind = 1;\n    let mut max_divisor_ind_2 = 1;\n    let mut max_divisor_ind_3\
    \ = 1;\n    let mut max_divisor_ind_4 = 1;\n\n    while max_divisor % 2 == 0 {\n\
    \        max_divisor /= 2;\n        max_divisor_ind += 1;\n    }\n\n    while\
    \ max_divisor % 3 == 0 {\n        max_divisor /= 3;\n        max_divisor_ind +=\
    \ 1;\n    }\n\n    while max_divisor % 4 == 0 {\n        max_divisor /= 4;\n \
    \       max_divisor_ind += 1;\n    }\n\n    while max_divisor % 5 == 0 {\n   \
    \     max_divisor /= 5;\n        max_divisor_ind += 1;\n    }\n\n    while max_divisor\
    \ % 6 == 0 {\n        max_divisor /= 6;\n        max_divisor_ind += 1;\n    }\n\
    \n    while max_divisor % 7 == 0 {\n        max_divisor /= 7;\n        max_divisor_ind\
    \ += 1;\n    }\n\n    while max_divisor % 8 == 0 {\n        max_divisor /= 8;\n\
    \        max_divisor_ind += 1;\n    }\n\n    while max_divisor % 9 == 0 {\n  \
    \      max_divisor /= 9;\n        max_divisor_ind += 1;\n    }\n\n    while max_divisor\
    \ % 10 == 0 {\n        max_divisor /= 10;\n        max_divisor_ind += 1;\n   \
    \ }\n\n    while max_divisor % 11 == 0 {\n        max_divisor /= 11;\n       \
    \ max_divisor_ind += 1;\n    }\n\n    while max_divisor % 12 == 0 {\n        max_divisor\
    \ /= 12;\n        max_divisor_ind += 1;\n    }\n\n    while max_divisor % 13 ==\
    \ 0 {\n        max_divisor /= 13;\n        max_divisor_ind += 1;\n    }\n\n  \
    \  while max_divisor % 14 == 0 {\n        max_divisor /= 14;\n        max_divisor_ind\
    \ += 1;\n    }\n\n    while max_divisor % 15 == 0 {\n        max_divisor /= 15;\n\
    \        max_divisor_ind += 1;\n    }\n\n    max_divisor_ind_2", "    let mut\
    \ max_divisor = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 0 {\n        max_divisor = max_divisor_size / 2;\n        max_divisor_size\
    \ = max_divisor % n;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = 0;\n    let mut max_divisor_value = 0;\n    for\
    \ i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size == i\
    \ {\n                max_divisor_value = i;\n            }\n            if max_divisor_size\
    \ > i {\n                max_divisor_size = i;\n            }\n        }\n   \
    \ }\n    max_divisor_value", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor = n;\n    for divisor in 1..=max_divisor\
    \ {\n        if n % divisor == 0 {\n            max_divisor = divisor;\n     \
    \   }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor_size < i {\n                max_divisor\
    \ = i;\n                max_divisor_size = i;\n                max_divisor_size_size\
    \ = 1;\n            }\n            if max_divisor_size == i {\n              \
    \  max_divisor_size_size++;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if max_divisor < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as isize;\n                max_divisor_value\
    \ = n;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count_index = 0;\n    let mut max_divisor_remainder_count_index2\
    \ = 0;\n    let mut max_divisor_remainder_count_index3 = 0;\n    let mut max_divisor_remainder_count_index4\
    \ = 0;\n    let mut max_divisor_remainder_count_index5 = 0;\n    let mut max_divisor_remainder_count_index6\
    \ = 0;\n    let mut max_divisor_remainder_count_index7 = 0;\n    let mut max_divisor_remainder_count_index8\
    \ = 0;\n    let mut max_divisor_remainder_count_index9 = 0;\n    let mut max_divisor_remainder_count_index10\
    \ = 0;\n    let mut max_divisor_remainder_count_index11 = 0;\n    let mut max_divisor_remainder_count_index12\
    \ = 0;\n    let mut max_divisor_remainder_count_index13 = 0;\n    let mut max_divisor_remainder_count_index14\
    \ = 0;\n    let mut max_divisor_remainder_count_index15 = 0;\n    let mut max_divisor_remainder_count_index16\
    \ = 0;\n    let mut max_divisor_remainder_count_index17 = 0;\n    let mut max_divisor_remainder_count_index18\
    \ = 0;\n    let mut max_divisor_remainder_count_index19 = 0;\n    let mut max_divisor_remainder_count_index20\
    \ = 0;\n    let mut max_divisor_remainder_count_index21 = 0;\n    let mut max_divisor_remainder_count_index22\
    \ = 0;\n    let mut max_divisor_remainder_count_index23 = 0;\n    let mut max_divisor_remainder_count_index24\
    \ = 0;\n    let mut max_divisor_remainder_count_index25 = 0;\n    let mut max_divisor_remainder_count_index26\
    \ = 0;\n    let mut max_divisor_remainder_count_index27 = 0;\n    let mut max_divisor_remainder_count_index28\
    \ = 0;\n    let mut max_divisor_remainder_count_index29 = 0;\n    let mut max_divisor_remainder_count_index30\
    \ = 0;\n    let mut max_divisor_remainder_count_index31 = 0;\n    let mut max_divisor_remainder_count_index32\
    \ = 0;\n    let mut max_divisor_remainder_count_index33 = 0;\n    let mut max_divisor_remainder_count_index34\
    \ = 0;\n    let mut max_divisor_remainder_count_index35 = 0;\n    let mut max_divisor_remainder_count_index36\
    \ = 0;\n    let mut max_divisor_remainder_count_index37 = 0;\n    let mut max_divisor_remainder_count_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    max_divisor_remainder",
  "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ % 2 == 0 {\n        max_divisor_size /= 2;\n        max_divisor *= 2;\n    }\n\
    \    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n\
    \    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5\
    \ = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let\
    \ mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10\
    \ = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let\
    \ mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15\
    \ = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let\
    \ mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20\
    \ = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let\
    \ mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25\
    \ = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let\
    \ mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30\
    \ = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let\
    \ mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35\
    \ = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let\
    \ mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40\
    \ = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let\
    \ mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45\
    \ = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let\
    \ mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50\
    \ = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let\
    \ mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55\
    \ = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let\
    \ mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60\
    \ = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let\
    \ mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut\
    \ max_divisor4 = 0;\n    let mut max_divisor5 = 0;\n    let mut max_divisor6 =\
    \ 0;\n    let mut max_divisor7 = 0;\n    let mut max_divisor8 = 0;\n    let mut\
    \ max_divisor9 = 0;\n    let mut max_divisor10 = 0;\n    let mut max_divisor11\
    \ = 0;\n    let mut max_divisor12 = 0;\n    let mut max_divisor13 = 0;\n    let\
    \ mut max_divisor14 = 0;\n    let mut max_divisor15 = 0;\n    let mut max_divisor16\
    \ = 0;\n    let mut max_divisor17 = 0;\n    let mut max_divisor18 = 0;\n    let\
    \ mut max_divisor19 = 0;\n    let mut max_divisor20 = 0;\n    let mut max_divisor21\
    \ = 0;\n    let mut max_divisor22 = 0;\n    let mut max_divisor23 = 0;\n    let\
    \ mut max_divisor24 = 0;\n    let mut max_divisor25 = 0;\n    let mut max_divisor26\
    \ = 0;\n    let mut max_divisor27 = 0;\n    let mut max_divisor28 = 0;\n    let\
    \ mut max_divisor29 = 0;\n    let mut max_divisor30 = 0;\n    let mut max_divisor31\
    \ = 0;\n    let mut max_divisor32 = 0;\n    let mut max_divisor33 = 0;\n    let\
    \ mut max_divisor34 = 0;\n    let mut max_divisor35 = 0;\n    let mut max_divisor36\
    \ = 0;\n    let mut max_divisor37 = 0;\n    let mut max_divisor38 = 0;\n    let\
    \ mut max_divisor39 = 0;\n    let mut max_divisor40 = 0;\n    let mut max_divisor41\
    \ = 0;\n    let mut max_divisor42 = 0;\n    let mut max_divisor43 = 0;\n    let\
    \ mut max_divisor44 = 0;\n    let mut max_divisor45 = 0;\n    let mut max_divisor46\
    \ = 0;\n    let mut max_divisor47 = 0;\n    let mut max_divisor48 = 0;\n    let\
    \ mut max_divisor49 = 0;\n    let mut max_divisor50 = 0;\n    let mut max_divisor51\
    \ = 0;\n    let mut max_divisor52 = 0;\n    let mut max_divisor53 = 0;\n    let\
    \ mut max_divisor54 = 0;\n    let mut max_divisor55 = 0;\n    let mut max_divisor56\
    \ = 0;\n    let mut max_divisor57 = 0;\n    let mut max_divisor58 = 0;\n    let\
    \ mut max_divisor59 = 0;\n    let mut max_divisor60 = 0;\n    let mut max_divisor61\
    \ = 0;\n    let mut max_divisor62 = 0;\n    let mut max_divisor63 = 0;\n    let\
    \ mut max_divisor64 = 0;\n    let mut max_"]
stop_tokens:
- "\n}"
