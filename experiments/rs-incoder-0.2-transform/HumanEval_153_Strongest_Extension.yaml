name: HumanEval_153_Strongest_Extension
language: rs
prompt: "/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(String::from(\"\
  my_class\"), vec![String::from(\"AA\"), String::from(\"Be\"), String::from(\"CC\"\
  )])\n/// String::from(\"my_class.AA\")\nfn Strongest_Extension(class_name: String,\
  \ extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut class_name = class_name.clone();\n\
    \        let mut extension = extension.clone();\n        let mut cap = 0;\n  \
    \      let mut sm = 0;\n        while cap < extension.chars().count() && sm <\
    \ extension.chars().count() {\n            let cap_char = extension.chars().nth(cap).unwrap();\n\
    \            let sm_char = extension.chars().nth(sm).unwrap();\n            if\
    \ cap_char == sm_char {\n                cap += 1;\n                sm += 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if cap == extension.chars().count() {\n            strength = -1;\n     \
    \   } else {\n            strength = cap - sm;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for letter in extension.chars() {\n            extension_map.insert(letter,\
    \ 0);\n        }\n        extensions_map.insert(extension, extension_map);\n \
    \   }\n    let mut strength = -1;\n    let mut best_extension = String::from(\"\
    \");\n    for (extension, extension_map) in extensions_map.iter() {\n        let\
    \ mut extension_strength = 0;\n        for letter in extension.chars() {\n   \
    \         extension_strength += extension_map.get(letter).unwrap();\n        }\n\
    \        if extension_strength > strength {\n            strength = extension_strength;\n\
    \            best_extension = extension;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + best_extension.to_string()", "    let mut strength = -1;\n    let\
    \ mut extension = String::from(\"\");\n    for extension in extensions {\n   \
    \     let mut extension_len = extension.len();\n        let mut class_len = class_name.len();\n\
    \        let mut i = 0;\n        while i < extension_len {\n            if extension[i]\
    \ >= class_name[i] {\n                extension_len = i;\n            } else {\n\
    \                class_len = i;\n            }\n            i += 1;\n        }\n\
    \        if strength == -1 || strength > extension_len - class_len {\n       \
    \     strength = extension_len - class_len;\n            extension = extension.to_string();\n\
    \        }\n    }\n    extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut counter\
    \ = 0;\n        while counter < class_name.len() {\n            if class_name.chars().all(|c|\
    \ c.is_uppercase() && c.to_ascii_lowercase() == c) {\n                class_name\
    \ = class_name[..class_name.length() - counter];\n                counter = 0;\n\
    \            } else {\n                counter++;\n            }\n        }\n\
    \        let mut counter = 0;\n        while counter < extension.len() {\n   \
    \         if extension.chars().all(|c| c.is_lowercase() && c.to_ascii_uppercase()\
    \ == c) {\n                extension = extension[..extension.length() - counter];\n\
    \                counter = 0;\n            } else {\n                counter++;\n\
    \            }\n        }\n        if strength == -1 || strength > extension.chars().count()\
    \ - class_name.chars().count() {\n            strength = extension.chars().count()\
    \ - class_name.chars().count();\n            extension = class_name;\n       \
    \ }\n    }\n    class_name\n        .to_ascii_lowercase()\n        .to_string()\n\
    \        + \"_\"\n        + extension\n        .to_ascii_lowercase()\n       \
    \ .to_string()", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.clone();\n \
    \           break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(c) {\n                extension_strength = strength;\n \
    \           }\n            extension_map.insert(c, extension_strength);\n    \
    \    }\n        extensions_map.insert(extension_strength, extension);\n    }\n\
    \    let mut max_strength = -1;\n    let mut max_extension = String::from(\"\"\
    );\n    for (strength, extension) in extensions_map.iter() {\n        if strength\
    \ > max_strength {\n            max_strength = strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    class_name.to_string() + \".\" + max_extension",
  "    let mut strength: usize = 0;\n    let mut extension = String::from(\"\");\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        if strength > 0 {\n            extension = e;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut i = 0;\n        while i < class_name.len() {\n            let\
    \ mut j = i;\n            while j < class_name.len() {\n                if class_name[j]\
    \ == class_name[i].to_lowercase() {\n                    j += 1;\n           \
    \     } else {\n                    break;\n                }\n            }\n\
    \            let mut k = i;\n            while k < class_name.len() {\n      \
    \          if class_name[k] == class_name[i].to_uppercase() {\n              \
    \      k += 1;\n                } else {\n                    break;\n       \
    \         }\n            }\n            if strength == -1 || strength > k - j\
    \ {\n                strength = k - j;\n                extension = extension;\n\
    \            }\n            i += 1;\n        }\n    }\n    class_name.to_string()\
    \ + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut i = 0;\n\
    \        while i < class_name.len() {\n            if class_name[i] == extension[0]\
    \ {\n                class_name = &class_name[i..];\n                i += 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    let mut j = 0;\n        while j < extension.len() {\n            if extension[j]\
    \ == class_name[0] {\n                extension = &extension[j..];\n         \
    \       j += 1;\n            } else {\n                break;\n            }\n\
    \        }\n        if strength == -1 || strength > extension.len() / class_name.len()\
    \ {\n            strength = extension.len() / class_name.len();\n            extension\
    \ = class_name;\n        }\n    }\n    extension", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut cap = class_name.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = class_name.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            cap = cap - sm;\n            class_name =\
    \ class_name.to_string();\n        }\n        if cap > strength {\n          \
    \  strength = cap;\n            extension = extension.to_string();\n        }\n\
    \    }\n    class_name + extension", "    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = extension.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut extension_len = extension.len();\n        let mut class_len\
    \ = class_name.len();\n        while extension_len > class_len {\n           \
    \ extension_len -= class_len;\n            class_len -= 1;\n        }\n      \
    \  let mut diff = extension_len - class_len;\n        while diff > 0 {\n     \
    \       if extension[diff] != class_name[diff] {\n                break;\n   \
    \         }\n            diff -= 1;\n        }\n        if diff == 0 {\n     \
    \       strength = extension_len;\n            break;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extensions[strength])", "    let mut strength: usize = 0;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut cap = class_name.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = class_name.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n        } else {\n \
    \           strength = sm - cap;\n        }\n        if strength > 0 {\n     \
    \       break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut max_strength = -1;\n    let mut max_extension\
    \ = String::from(\"\");\n    for (extension, extension_map) in extensions_map.iter()\
    \ {\n        let strength = extension_map.iter().filter(|(_, count)| count > 0).count();\n\
    \        if strength > max_strength {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + max_extension.to_string()", "    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let mut class_name = class_name;\n        let mut extension = extension;\n \
    \       let mut strength = -1;\n        for c in extension.chars() {\n       \
    \     if c.is_uppercase() {\n                strength += 1;\n                class_name\
    \ = class_name.to_lowercase();\n            } else if c.is_lowercase() {\n   \
    \             strength += 1;\n                class_name = class_name.to_uppercase();\n\
    \            }\n        }\n        if strength > strength {\n            extension\
    \ = class_name;\n            strength = strength;\n        }\n    }\n    class_name\
    \ + extension", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm\n        };\n        if strength > 0 {\n            break;\n   \
    \     }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut i = 0;\n        while i < class_name.len() {\n            if\
    \ class_name[i] == extension[0] {\n                class_name = &class_name[i..];\n\
    \                i += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut j = 0;\n        while j < extension.len()\
    \ {\n            if extension[j] == class_name[0] {\n                extension\
    \ = &extension[j..];\n                j += 1;\n            } else {\n        \
    \        break;\n            }\n        }\n        let mut cap = 0;\n        let\
    \ mut sm = 0;\n        for c in class_name {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let mut strength = cap - sm;\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        let strength = if cap > sm {\n     \
    \       cap - sm\n        } else {\n            sm - cap\n        };\n       \
    \ if strength > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for letter in extension {\n            extension_map.insert(letter, 0);\n\
    \        }\n        extensions_map.insert(extension, extension_map);\n    }\n\
    \    let mut strength = -1;\n    let mut best_extension = String::from(\"\");\n\
    \    for (extension, extension_map) in extensions_map.iter() {\n        let mut\
    \ letter_map = HashMap::new();\n        for letter in extension {\n          \
    \  letter_map.insert(letter, 0);\n        }\n        for letter in extension {\n\
    \            letter_map.insert(letter, 1);\n        }\n        let mut letter_count\
    \ = 1;\n        for (key, value) in letter_map.iter() {\n            letter_count\
    \ *= value;\n        }\n        let strength = letter_count / extension.chars().count();\n\
    \        if strength > strength {\n            strength = strength;\n        \
    \    best_extension = extension;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + best_extension.to_string()", "    let mut strength: i64 = 0;\n   \
    \ let mut extension = String::from(\"\");\n    for e in extensions {\n       \
    \ let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm =\
    \ e.chars().filter(|c| c.is_lowercase()).count();\n        let strength = cap\
    \ - sm;\n        if strength > 0 {\n            extension = e.clone();\n     \
    \       break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for letter in extension\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extensions_iter\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter2 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter3 = extensions_map.iter().cloned();\n    let mut extensions_iter4\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter5 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter6 = extensions_map.iter().cloned();\n    let mut extensions_iter7\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter8 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter9 = extensions_map.iter().cloned();\n    let mut extensions_iter10\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter11 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter12 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter13 = extensions_map.iter().cloned();\n    let mut extensions_iter14\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter15 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter16 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter17 = extensions_map.iter().cloned();\n    let mut extensions_iter18\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter19 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter20 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter21 = extensions_map.iter().cloned();\n    let mut extensions_iter22\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter23 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter24 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter25 = extensions_map.iter().cloned();\n    let mut extensions_iter26\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter27 = extensions_map.iter().cloned",
  "    let mut strength: i32 = 0;\n    let mut extension = String::from(\"\");\n \
    \   for extension in extensions {\n        let mut c = extension.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count();\n        let mut s = extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').count();\n        if c > s {\n            strength =\
    \ -1;\n            break;\n        }\n        strength = c as i32 - s as i32;\n\
    \    }\n    format!(\"{}.{}\", class_name, extensions[extensions.iter().min_by_key(|&x|\
    \ strength).unwrap()])", "    let mut extensions_map = HashMap::new();\n    for\
    \ extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(c) {\n            \
    \    extension_map.insert(c, strength + 1);\n            } else {\n          \
    \      extension_map.insert(c, 1);\n            }\n            if strength > extension_strength\
    \ {\n                extension_strength = strength;\n            }\n        }\n\
    \        extensions_map.insert(extension.clone(), extension_map);\n    }\n   \
    \ let mut strength = -1;\n    let mut best_extension = String::from(\"\");\n \
    \   for extension in extensions_map.keys() {\n        let mut extension_map =\
    \ extensions_map.get(extension);\n        let mut extension_strength = -1;\n \
    \       for c in extension.chars() {\n            if let Some(strength) = extension_map.get(c)\
    \ {\n                extension_map.insert(c, strength + 1);\n            } else\
    \ {\n                extension_map.insert(c, 1);\n            }\n            if\
    \ strength > extension_strength {\n                extension_strength = strength;\n\
    \            }\n        }\n        if extension_strength > strength {\n      \
    \      strength = extension_strength;\n            best_extension = extension.clone();\n\
    \        }\n    }\n    class_name\n        .to_lowercase()\n        .concat(\"\
    .\".to_lowercase())\n        .concat(best_extension)", "    let mut strength =\
    \ -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = 0;\n        let mut extension_letters = String::new();\n        for letter\
    \ in extension.chars() {\n            if letter == letter::CAPITAL {\n       \
    \         extension_strength += 1;\n                extension_letters += letter;\n\
    \            } else {\n                extension_map.insert(letter, 0);\n    \
    \        }\n        }\n        extensions_map.insert(extension, extension_strength);\n\
    \    }\n    let mut max_strength = -1;\n    let mut max_extension = String::new();\n\
    \    for (extension, strength) in extensions_map.iter() {\n        if strength\
    \ > max_strength {\n            max_strength = strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    class_name.to_string() + \".\" + max_extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut num_upper = 0;\n        let\
    \ mut num_lower = 0;\n        while class_name.len() > 0 {\n            let c\
    \ = class_name[0];\n            if c.is_uppercase() {\n                num_upper\
    \ += 1;\n            } else {\n                num_lower += 1;\n            }\n\
    \            class_name = &class_name[1..];\n        }\n        let strength =\
    \ num_upper - num_lower;\n        if strength > strength {\n            extension\
    \ = extension;\n            strength = num_upper - num_lower;\n        }\n   \
    \ }\n    class_name + extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut c\
    \ = extension.chars();\n        let mut c = c.collect::<Vec<_>>();\n        let\
    \ mut c = c.iter().filter(|&x| x.is_uppercase()).count();\n        let mut c =\
    \ c.iter().filter(|&x| x.is_lowercase()).count();\n        let mut c = c.iter().filter(|&x|\
    \ x.is_digit()).count();\n        let mut c = c.iter().filter(|&x| x.is_punct()).count();\n\
    \        let mut c = c.iter().filter(|&x| x.is_whitespace()).count();\n      \
    \  let mut c = c.iter().filter(|&x| x.is_ascii_letter()).count();\n        let\
    \ mut c = c.iter().filter(|&x| x.is_ascii_digit()).count();\n        let mut c\
    \ = c.iter().filter(|&x| x.is_ascii_letter()).count();\n        let mut c = c.iter().filter(|&x|\
    \ x.is_ascii_digit()).count();\n        let mut c = c.iter().filter(|&x| x.is_ascii_letter()).count();\n\
    \        let mut c = c.iter().filter(|&x| x.is_ascii_digit()).count();\n     \
    \   let mut c = c.iter().filter(|&x| x.is_ascii_letter()).count();\n        let\
    \ mut c = c.iter().filter(|&x| x.is_ascii_digit()).count();\n        let mut c\
    \ = c.iter().filter(|&x| x.is_ascii_letter()).count();\n        let mut c = c.iter().filter(|&x|\
    \ x.is_ascii_digit()).count();\n        let mut c = c.iter().filter(|&x| x.is_ascii_letter()).count();\n\
    \        let mut c = c.iter().filter(|&x| x.is_ascii_digit()).count();\n     \
    \   let mut c = c.iter().filter(|&x| x.is_ascii_letter()).count();\n        let\
    \ mut c = c.iter().filter(|&x| x.is_ascii_digit()).count();\n        let mut c\
    \ = c.iter().filter(|&x| x.is_ascii_letter()).count();\n        let mut c = c.iter().filter(|&x|\
    \ x.is_ascii_digit()).count();\n        let mut c = c.iter().filter(|&x| x.is_ascii_letter()).count();\n\
    \        let mut c = c.iter().filter(|&x| x.is_ascii_digit()).count();\n     \
    \   let mut c = c.iter().filter(|&x", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = 0;\n        for letter in extension.chars()\
    \ {\n            if letter.is_uppercase() {\n                extension_map.insert(letter,\
    \ 1);\n            } else {\n                extension_map.insert(letter, -1);\n\
    \            }\n        }\n        for (key, value) in extension_map.iter() {\n\
    \            extension_strength += value;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut max_strength = -1;\n    let mut max_extension\
    \ = String::from(\"\");\n    for extension in extensions_map.iter() {\n      \
    \  if extensions_map.get(extension).unwrap() > max_strength {\n            max_strength\
    \ = extensions_map.get(extension).unwrap();\n            max_extension = extension;\n\
    \        }\n    }\n    class_name.to_string() + \".\" + max_extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut letters = String::from(\"\"\
    );\n        let mut letters_count = String::from(\"\");\n        for letter in\
    \ extension.chars() {\n            if letter.is_uppercase() {\n              \
    \  letters += letter;\n                letters_count += 1;\n            } else\
    \ {\n                letters += '_';\n                letters_count += 1;\n  \
    \          }\n        }\n        let mut letters_count = letters_count.to_string();\n\
    \        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        let mut letters = letters.to_string();\n\
    \        let mut letters_count = letters_count.to_string();\n        let mut letters\
    \ = letters.to_string();\n        let mut letters_count = letters_count.to_string();\n\
    \        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        let mut letters = letters.to_string();\n\
    \        let mut letters_count = letters_count.to_string();\n        let mut letters\
    \ = letters.to_string();\n        let mut letters_count = letters_count.to_string();\n\
    \        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        let mut letters = letters.to_string();\n\
    \        let mut letters_count = letters_count.to_string();\n        let mut letters\
    \ = letters.to_string();\n        let mut letters_count = letters_count.to_string();\n\
    \        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        let mut letters = letters.to_string();\n\
    \        let mut letters_count = letters_count.to_string();\n        let mut letters\
    \ = letters.to_string();\n        let mut letters_count = letters_count.to_string();\n\
    \        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        let mut letters = letters.to_string();\n\
    \        let mut letters_count = letters_count.to_string();\n        let mut letters\
    \ = letters.to_string();\n        let mut letters_count = letters_count.to_string();\n\
    \        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        let mut letters = letters.to_string();\n\
    \        let mut letters_count = letters_count.to_string();\n        let mut letters\
    \ = letters.to_string();\n        let mut letters_count = letters_count.", " \
    \   let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut i = 0;\n        while i < class_name.len()\
    \ {\n            if class_name[i] == extension[i] {\n                i += 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    let mut j = 0;\n        while j < extension.len() {\n            if extension[j]\
    \ == class_name[i] {\n                i += 1;\n                j += 1;\n     \
    \       } else {\n                break;\n            }\n        }\n        if\
    \ i == class_name.len() && j == extension.len() {\n            strength = -1;\n\
    \        } else {\n            strength = i as i32 - j as i32;\n        }\n  \
    \  }\n    if strength == -1 {\n        class_name\n    } else {\n        class_name.to_string()\
    \ + extension.to_string() + &format!(\"{}.{}\", class_name, extensions[strength])\n\
    \    }", "    let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extensions_iter\
    \ = extensions_map.iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut extensions_iter\
    \ = extensions_iter.into_iter", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        let mut extension_class_name = \"\";\n        let mut extension_class_name_length\
    \ = 0;\n        for c in extension {\n            if c.is_uppercase() {\n    \
    \            extension_strength += 1;\n                extension_class_name +=\
    \ c;\n                extension_class_name_length += 1;\n            } else if\
    \ c.is_lowercase() {\n                extension_strength += 1;\n             \
    \   extension_class_name += c.to_lowercase();\n                extension_class_name_length\
    \ += 1;\n            } else {\n                extension_strength += 1;\n    \
    \            extension_class_name += c.to_lowercase();\n                extension_class_name_length\
    \ += 1;\n            }\n        }\n        extension_map.insert(extension_class_name.to_string(),\
    \ extension_strength);\n        extensions_map.insert(extension_class_name.to_string(),\
    \ extension_map);\n    }\n    let mut extensions_strength = -1;\n    let mut extensions_class_name\
    \ = \"\";\n    let mut extensions_class_name_length = 0;\n    for extension in\
    \ extensions {\n        let mut extension_map = HashMap::new();\n        let mut\
    \ extension_strength = -1;\n        let mut extension_class_name = \"\";\n   \
    \     let mut extension_class_name_length = 0;\n        for c in extension {\n\
    \            if c.is_uppercase() {\n                extension_strength += 1;\n\
    \                extension_class_name += c;\n                extension_class_name_length\
    \ += 1;\n            } else if c.is_lowercase() {\n                extension_strength\
    \ += 1;\n                extension_class_name += c.to_lowercase();\n         \
    \       extension_class_name_length += 1;\n            } else {\n            \
    \    extension_strength += 1;\n                extension_class_name += c.to_lowercase();\n\
    \                extension_class_name_length += 1;\n            }\n        }\n\
    \        extension_map.insert(extension_class_name.to_string(), extension_strength);\n\
    \        extensions_strength += extension_strength;\n        extensions_class_name\
    \ += extension_class_name;\n        extensions_class_name_length += extension_class_name_length;\n\
    \    }\n    let mut extensions_strength_map = HashMap::new();\n    extensions_strength_map.insert(extensions_class_name.to_string(),\
    \ extensions_strength);\n    let mut extensions_class_name_map = HashMap::new();\n\
    \    extensions_class_name_map.insert(extensions_class_name.to_string(), extensions_class_name_length);\n\
    \    let mut extensions_class_name_strength = -1;\n    let mut extensions_class_name_length\
    \ = 0;\n    for extension", "    let mut strength: i32 = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut counter\
    \ = 0;\n        while class_name.len() > 0 && extension.len() > 0 {\n        \
    \    if class_name.chars().any(|c| c.is_uppercase() && extension.chars().any(|c|\
    \ c.is_lowercase())) {\n                counter += 1;\n            }\n       \
    \     class_name = &class_name[..class_name.len() - 1];\n            extension\
    \ = &extension[..extension.len() - 1];\n        }\n        if counter > strength\
    \ {\n            strength = counter;\n            extension = extension;\n   \
    \     }\n    }\n    class_name + extension", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_ascii_lowercase(),\
    \ 1);\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut extensions_strength = HashMap::new();\n    for extension in\
    \ extensions {\n        let mut extension_map = extensions_map.get(extension.clone());\n\
    \        if extension_map.is_none() {\n            continue;\n        }\n    \
    \    for (key, value) in extension_map.iter() {\n            extensions_strength.insert(key.clone(),\
    \ value.clone());\n        }\n    }\n    let mut max_strength = -1;\n    let mut\
    \ max_extension = String::from(\"\");\n    for extension in extensions {\n   \
    \     let mut extension_map = extensions_map.get(extension.clone());\n       \
    \ if extension_map.is_none() {\n            continue;\n        }\n        let\
    \ mut extension_strength = extensions_strength.get(extension.clone());\n     \
    \   if extension_strength.is_none() {\n            continue;\n        }\n    \
    \    let strength = extension_strength.unwrap();\n        if strength > max_strength\
    \ {\n            max_strength = strength;\n            max_extension = extension.clone();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, max_extension)", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            if class_name[i] == extension[i] {\n                i += 1;\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ if i < class_name.len() {\n            strength = extension.len() - i;\n   \
    \         break;\n        }\n    }\n    if strength == -1 {\n        String::from(\"\
    \")\n    } else {\n        class_name + String::from(extensions[extensions.len()\
    \ - strength].to_lowercase())\n    }", "    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = extension.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut counter = 0;\n        while class_name.len() > 0 {\n        \
    \    if class_name.chars().all(|c| c.is_uppercase() && counter < CAPITALS) {\n\
    \                class_name = class_name.remove(0);\n                counter +=\
    \ 1;\n            } else if class_name.chars().all(|c| c.is_lowercase() && counter\
    \ < SMALLS) {\n                class_name = class_name.remove(0);\n          \
    \      counter += 1;\n            } else {\n                break;\n         \
    \   }\n        }\n        if strength == -1 || strength > counter * CAPITALS /\
    \ SMALLS {\n            strength = counter * CAPITALS / SMALLS;\n            extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    class_name.to_string() + \".\" +\
    \ extension.to_string()", "    let mut strength = -1;\n    let mut extension =\
    \ String::from(\"\");\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut num_upper\
    \ = 0;\n        let mut num_lower = 0;\n        while let Some(letter) = class_name.chars().next()\
    \ {\n            if letter == letter::UPPER {\n                num_upper += 1;\n\
    \            } else if letter == letter::LOWER {\n                num_lower +=\
    \ 1;\n            }\n        }\n        let strength = num_upper - num_lower;\n\
    \        if strength > strength {\n            extension = extension;\n      \
    \      strength = num_upper - num_lower;\n        }\n    }\n    class_name + extension",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = 0;\n        let mut extension_letters = String::new();\n        for letter\
    \ in extension.chars() {\n            if let Some(strength) = extension_map.get(&letter)\
    \ {\n                extension_map.insert(letter, strength + 1);\n           \
    \ } else {\n                extension_map.insert(letter, 1);\n            }\n\
    \            if let Some(letters) = extension_letters.as_ref() {\n           \
    \     extension_letters.push_str(&letters);\n            } else {\n          \
    \      extension_letters.push_str(&letter);\n            }\n        }\n      \
    \  extensions_map.insert(extension.clone(), extension_map.clone());\n    }\n \
    \   let mut max_extension_strength = -1;\n    let mut max_extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_map = extensions_map.get(&extension);\n\
    \        if let Some(strength) = extension_map.get(&'.') {\n            if strength\
    \ > max_extension_strength {\n                max_extension_strength = strength;\n\
    \                max_extension = extension;\n            }\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, max_extension)", "    let mut strength: i32\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut i = 0;\n        while i < class_name.len() {\n            if\
    \ class_name[i] == extension[0] {\n                class_name = &class_name[i..];\n\
    \                i += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut j = 0;\n        while j < extension.len()\
    \ {\n            if extension[j] == class_name[0] {\n                extension\
    \ = &extension[j..];\n                j += 1;\n            } else {\n        \
    \        break;\n            }\n        }\n        if strength == -1 || strength\
    \ > i - j {\n            strength = i - j;\n            extension = &extension[j..];\n\
    \        }\n    }\n    class_name.to_string() + extension.to_string()", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            if class_name[i] == class_name[i].to_lowercase() {\n            \
    \    i += 1;\n            } else {\n                break;\n            }\n  \
    \      }\n        let mut j = 0;\n        while j < extension.len() {\n      \
    \      if extension[j] == extension[j].to_lowercase() {\n                j +=\
    \ 1;\n            } else {\n                break;\n            }\n        }\n\
    \        let cap = class_name.len() - i;\n        let sm = extension.len() - j;\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    class_name\n        .to_lowercase()\n\
    \        .concat(\".\".to_lowercase().to_lowercase())\n        .concat(&extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut i = 0;\n        while i < class_name.len()\
    \ {\n            let mut c = class_name[i];\n            if c >= 'A' && c <= 'Z'\
    \ {\n                c -= ('A' as usize);\n            }\n            if c >=\
    \ 'a' && c <= 'z' {\n                c -= ('a' as usize);\n            }\n   \
    \         class_name = &class_name[i..];\n            i += 1;\n        }\n   \
    \     let mut i = 0;\n        while i < extension.len() {\n            let mut\
    \ c = extension[i];\n            if c >= 'A' && c <= 'Z' {\n                c\
    \ -= ('A' as usize);\n            }\n            if c >= 'a' && c <= 'z' {\n \
    \               c -= ('a' as usize);\n            }\n            extension = &extension[i..];\n\
    \            i += 1;\n        }\n        let mut c = class_name.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let mut s = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        if c > s {\n            strength = -1;\n\
    \        } else {\n            strength = c as i32;\n        }\n    }\n    match\
    \ strength {\n        -1 => class_name + extension,\n        s => class_name +\
    \ extensions[s..].iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\".\"\
    )\n    }", "    let mut extensions_map = HashMap::new();\n    for extension in\
    \ extensions {\n        let mut extension_map = HashMap::new();\n        let mut\
    \ extension_strength = -1;\n        for c in extension.chars() {\n           \
    \ if let Some(strength) = extension_map.get(c) {\n                extension_map.insert(c,\
    \ strength + 1);\n            } else {\n                extension_map.insert(c,\
    \ 1);\n            }\n        }\n        if let Some(strength) = extension_map.get(&'.')\
    \ {\n            extension_strength = strength;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut max_extension_strength = -1;\n    let\
    \ mut max_extension = String::from(\"\");\n    for extension, strength in extensions_map.iter()\
    \ {\n        if strength > max_extension_strength {\n            max_extension_strength\
    \ = strength;\n            max_extension = extension;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + max_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        strength = if cap > sm {\n            cap - sm\n\
    \        } else {\n            sm - cap\n        };\n        if strength > 0 {\n\
    \            extension = e.clone();\n            break;\n        }\n    }\n  \
    \  class_name.to_string() + \".\" + extension.to_string()", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    class_name.to_string() + \".\" +\
    \ extension.to_string()", "    let mut extensions_map = HashMap::new();\n    for\
    \ extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                extension_map.insert(c,\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_strength += 1;\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut max_extension_strength = -1;\n    let mut\
    \ max_extension = String::from(\"\");\n    for extension in extensions_map.keys()\
    \ {\n        let extension_map = extensions_map.get(extension);\n        let mut\
    \ extension_strength = -1;\n        for c in extension.chars() {\n           \
    \ if c.is_uppercase() {\n                extension_strength += 1;\n          \
    \  }\n            if c.is_lowercase() {\n                extension_strength +=\
    \ 1;\n            }\n        }\n        if extension_strength > max_extension_strength\
    \ {\n            max_extension_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, max_extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut count = 0;\n        while class_name.len() > 0\
    \ {\n            let mut class_name = class_name.to_lowercase();\n           \
    \ let mut extension = extension.to_lowercase();\n            let mut count = 0;\n\
    \            while class_name.len() > 0 {\n                if class_name == extension\
    \ {\n                    count++;\n                }\n                class_name\
    \ = class_name.to_lowercase();\n                extension = extension.to_lowercase();\n\
    \            }\n            strength = strength * count / extension.len();\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            let letter_count = extension.chars().filter(|c| c.is_ascii_uppercase()).count()\
    \ as i32;\n            let letter_count_lower = extension.chars().filter(|c| c.is_ascii_lowercase()).count()\
    \ as i32;\n            let strength = letter_count - letter_count_lower;\n   \
    \         extension_map.insert(letter, strength);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut max_strength = -1;\n    let mut max_extension\
    \ = String::from(\"\");\n    for extension in extensions_map.keys() {\n      \
    \  let strength = extensions_map.get(extension).iter().max().unwrap().1;\n   \
    \     if strength > max_strength {\n            max_strength = strength;\n   \
    \         max_extension = extension;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + max_extension.to_string()", "    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let mut class_name = class_name;\n        let mut extension = extension;\n \
    \       let mut i = 0;\n        while i < class_name.len() {\n            if class_name[i]\
    \ == extension[0] {\n                i += 1;\n            } else {\n         \
    \       break;\n            }\n        }\n        if i < class_name.len() {\n\
    \            strength = extension.len() - class_name.len();\n        }\n    }\n\
    \    if strength == -1 {\n        String::from(\"\")\n    } else {\n        String::from(class_name\
    \ + extension.split_ascii_lowercase().collect::<Vec<_>>().iter().max().unwrap()\
    \ + \".\")\n    }", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        let strength = if cap > sm {\n     \
    \       cap - sm\n        } else {\n            sm - cap\n        };\n       \
    \ if strength > strength {\n            extension = extension;\n            strength\
    \ = strength;\n        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extensions_iter\
    \ = extensions_map.iter().cloned();\n    while let Some(extension) = extensions_iter.next()\
    \ {\n        let mut extension_map = extension.clone();\n        for letter in\
    \ extension.chars() {\n            extension_map.remove(letter);\n        }\n\
    \        let strength = extension_map.iter().filter(|(_, v)| v != 0).count();\n\
    \        if strength > strength {\n            strength = strength;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extensions_map.iter().filter(|(_, v)|\
    \ v == 0).next().unwrap().0)", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut class_name = class_name;\n\
    \        let mut extension = extension;\n        let mut i = 0;\n        while\
    \ i < class_name.len() {\n            if class_name[i] == extension[0] {\n   \
    \             class_name = &class_name[i..];\n                i += 1;\n      \
    \      } else {\n                break;\n            }\n        }\n        let\
    \ mut j = 0;\n        while j < extension.len() {\n            if extension[j]\
    \ == class_name[0] {\n                extension = &extension[j..];\n         \
    \       j += 1;\n            } else {\n                break;\n            }\n\
    \        }\n        let mut cap = class_name.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap - sm > strength {\n            strength = cap - sm;\n        \
    \    extension = class_name + extension;\n        }\n    }\n    extension", " \
    \   let mut strength: i32 = -1;\n    let mut extension = String::from(\"\");\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.clone();\n \
    \           break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut counter = 0;\n        while\
    \ class_name.len() > 0 && extension.len() > 0 {\n            if class_name.chars().any(|c|\
    \ c.is_uppercase() == true) {\n                counter += 1;\n               \
    \ class_name = &class_name[..class_name.len() - counter];\n            } else\
    \ {\n                counter += 1;\n                extension = &extension[..extension.len()\
    \ - counter];\n            }\n        }\n        if strength == -1 || strength\
    \ > counter {\n            strength = counter;\n            extension = extension;\n\
    \        }\n    }\n    class_name + extension", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength = if\
    \ cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n \
    \       };\n        if strength > 0 {\n            extension = e.to_string() +\
    \ extension;\n        }\n    }\n    class_name + extension", "    let mut strength:\
    \ i32 = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = if strength == -1 {\n            e.to_string()\n\
    \        } else {\n            format!(\"{}.{}\", class_name, e)\n        };\n\
    \    }\n    extension", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(c) {\n                extension_map.insert(c, strength +\
    \ 1);\n            } else {\n                extension_map.insert(c, 1);\n   \
    \         }\n            if strength > extension_strength {\n                extension_strength\
    \ = strength;\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut extensions_strength = -1;\n    for\
    \ extension in extensions_map.keys() {\n        if extensions_strength < extensions_map.get(extension).unwrap()\
    \ {\n            extensions_strength = extensions_map.get(extension).unwrap();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extensions_map.get(&extensions_strength).unwrap())",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut cap = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut sm = class_name.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if cap > sm {\n            cap = cap - sm;\n\
    \            sm = sm;\n        }\n        if cap > strength {\n            strength\
    \ = cap;\n            extension = extension;\n        }\n    }\n    class_name\
    \ + extension", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        let\
    \ mut extension_strength = -1;\n        for c in extension.chars() {\n       \
    \     if let Some(strength) = extension_map.get(c) {\n                extension_map.insert(c,\
    \ strength + 1);\n            } else {\n                extension_map.insert(c,\
    \ 1);\n            }\n        }\n        if let Some(strength) = extension_map.get(&'.')\
    \ {\n            extension_strength = strength;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut extensions_strength = -1;\n    for\
    \ extension in extensions_map.keys() {\n        if let Some(strength) = extensions_map.get(extension)\
    \ {\n            extensions_strength = strength;\n        }\n    }\n    let mut\
    \ extensions_strongest = String::from(\"\");\n    let mut extensions_strength_counter\
    \ = HashMap::new();\n    for extension in extensions_map.keys() {\n        if\
    \ let Some(strength) = extensions_map.get(extension) {\n            if strength\
    \ > extensions_strength {\n                extensions_strength = strength;\n \
    \               extensions_strongest = extension;\n            }\n           \
    \ if let Some(counter) = extensions_strength_counter.get(&extension) {\n     \
    \           counter.0 += strength;\n            } else {\n                extensions_strength_counter.insert(extension,\
    \ strength);\n            }\n        }\n    }\n    extensions_strongest", "  \
    \  let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    class_name.to_string() + \".\" +\
    \ extension.to_string()", "    let mut strength: usize = 0;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength += cap - sm;\n    }\n    if strength\
    \ == 0 {\n        class_name\n    } else {\n        class_name.to_string() + extensions[strength].to_string()\n\
    \    }", "    let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for letter in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(&letter) {\n                extension_map.insert(letter,\
    \ strength + 1);\n            } else {\n                extension_map.insert(letter,\
    \ 1);\n            }\n        }\n        if let Some(strength) = extension_map.get(&'.')\
    \ {\n            extension_strength = strength;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut max_strength = -1;\n    let mut max_extension\
    \ = String::from(\"\");\n    for (_, strength) in extensions_map.iter() {\n  \
    \      if strength > max_strength {\n            max_strength = strength;\n  \
    \          max_extension = String::from(\"\");\n        }\n        if strength\
    \ == max_strength {\n            max_extension.push_str(&extensions_map.get(&'.').unwrap());\n\
    \        }\n    }\n    class_name.push_str(&max_extension);\n    class_name.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            if class_name.chars().any(|c| c.is_uppercase() && c.to_ascii_lowercase()\
    \ == extension.chars().any(|c| c.is_lowercase())) {\n                class_name\
    \ = &class_name[i..];\n                i += class_name.len() - extension.len();\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     if strength == -1 || strength > extension.chars().count(|c| c.is_uppercase())\
    \ {\n            strength = extension.chars().count(|c| c.is_uppercase());\n \
    \           extension = class_name;\n        }\n    }\n    class_name", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut counter = 0;\n        while class_name.len() >\
    \ 0 && extension.len() > 0 {\n            let cap = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n            let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n            counter += cap - sm;\n            class_name\
    \ = class_name.chars().filter(|c| !c.is_uppercase()).collect();\n            extension\
    \ = extension.chars().filter(|c| !c.is_lowercase()).collect();\n        }\n  \
    \      if counter > strength {\n            strength = counter;\n            extension\
    \ = extension;\n        }\n    }\n    class_name + extension", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_lowercase(),\
    \ 1);\n            } else {\n                extension_map.insert(c.to_uppercase(),\
    \ 1);\n            }\n        }\n        for entry in extension_map.iter() {\n\
    \            if entry.value > extension_strength {\n                extension_strength\
    \ = entry.value;\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut extensions_strength = -1;\n    for\
    \ entry in extensions_map.iter() {\n        if entry.value > extensions_strength\
    \ {\n            extensions_strength = entry.value;\n        }\n    }\n    if\
    \ extensions_strength == -1 {\n        return class_name;\n    }\n    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                extension_map.insert(c.to_lowercase(), 1);\n            }\
    \ else {\n                extension_map.insert(c.to_uppercase(), 1);\n       \
    \     }\n        }\n        for entry in extension_map.iter() {\n            if\
    \ entry.value > extensions_strength {\n                extensions_strength = entry.value;\n\
    \            }\n        }\n        extensions_map.insert(extension, extensions_strength);\n\
    \    }\n    let mut extensions_strength = -1;\n    for entry in extensions_map.iter()\
    \ {\n        if entry.value > extensions_strength {\n            extensions_strength\
    \ = entry.value;\n        }\n    }\n    if extensions_strength == -1 {\n     \
    \   return class_name;\n    }\n    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_lowercase(),\
    \ 1);\n            } else {\n                extension_map.insert(c.to_uppercase(),\
    \ 1);\n            }\n        }\n        for entry in extension_map.iter() {\n\
    \            if entry.value > extensions_strength {\n                extensions_strength\
    \ = entry.value;\n            }\n        }\n        extensions_map.insert(extension,\
    \ extensions_strength);\n    }\n    let mut extensions_strength = -1;\n    for\
    \ entry in extensions_map.iter() {\n        if entry.value > extensions_strength\
    \ {\n            extensions_strength = entry.value;\n        }\n    }\n    if\
    \ extensions_strength == -1 {\n        return class_", "    let mut strength =\
    \ -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i32 = 0;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut c = extension.chars();\n        let mut i =\
    \ 0;\n        while i < c.len() {\n            if c[i].is_uppercase() {\n    \
    \            strength += 1;\n            }\n            i += 1;\n        }\n \
    \   }\n    let mut c = class_name.chars();\n    let mut i = 0;\n    while i <\
    \ c.len() {\n        if c[i].is_uppercase() {\n            strength += 1;\n  \
    \      }\n        i += 1;\n    }\n    match strength {\n        0 => String::from(\"\
    \"),\n        1 => String::from(class_name),\n        _ => {\n            let\
    \ mut c = class_name.chars();\n            let mut i = 0;\n            while i\
    \ < c.len() {\n                if c[i].is_uppercase() {\n                    strength\
    \ -= 1;\n                }\n                i += 1;\n            }\n         \
    \   match strength {\n                0 => String::from(\"\"),\n             \
    \   1 => String::from(class_name),\n                _ => {\n                 \
    \   let mut c = class_name.chars();\n                    let mut i = 0;\n    \
    \                while i < c.len() {\n                        if c[i].is_lowercase()\
    \ {\n                            strength += 1;\n                        }\n \
    \                       i += 1;\n                    }\n                    match\
    \ strength {\n                        0 => String::from(\"\"),\n             \
    \           1 => String::from(class_name),\n                        _ => {\n \
    \                           let mut c = class_name.chars();\n                \
    \            let mut i = 0;\n                            while i < c.len() {\n\
    \                                if c[i].is_lowercase() {\n                  \
    \                  strength -= 1;\n                                }\n       \
    \                         i += 1;\n                            }\n           \
    \                 match strength {\n                                0 => String::from(\"\
    \"),\n                                1 => String::from(class_name),\n       \
    \                         _ => {\n                                    let mut\
    \ c = class_name.chars();\n                                    let mut i = 0;\n\
    \                                    while i < c.len() {\n                   \
    \                     if c[i].is_uppercase() {\n                             \
    \               strength += 1;\n                                        }\n  \
    \                                      i += 1;\n                             \
    \       }\n                                    match strength {\n            \
    \                            0 => String::from(\"\"),\n                      \
    \                  1 => String::from(class_name),\n                          \
    \              _ => {\n                                            let mut c =\
    \ class_name.chars();\n                                            let mut i =\
    \ 0;\n                                            while i < c.len() {\n      \
    \                                          if c[i].is_lowercase() {\n        \
    \                                            strength -= 1;\n                \
    \                                }\n                                         \
    \       i += 1;\n                                            }\n             \
    \                               match strength {\n                           \
    \                     0 => String::from(\"\"),\n                             \
    \                   1 => String::from(class_name),\n                         \
    \                       _ => {\n                                             \
    \       let mut c = class_name.chars();\n                                    \
    \                let mut i = 0;\n                                            \
    \        while i < c.len() {\n                                               \
    \         if ", "    let mut strength: usize = 0;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut class_name = class_name;\n\
    \        let mut extension = extension;\n        let mut index = class_name.len()\
    \ - extension.len();\n        while index >= 0 {\n            if class_name[index]\
    \ == extension[index] {\n                strength += 1;\n                index\
    \ -= 1;\n            } else {\n                break;\n            }\n       \
    \ }\n        if strength > 0 {\n            break;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut i = 0;\n\
    \        while i < class_name.len() {\n            let mut j = i;\n          \
    \  while j < class_name.len() {\n                if class_name[j] == extension[i]\
    \ {\n                    j += 1;\n                } else {\n                 \
    \   break;\n                }\n            }\n            let mut k = i;\n   \
    \         while k < class_name.len() {\n                if class_name[k] == extension[j]\
    \ {\n                    k += 1;\n                } else {\n                 \
    \   break;\n                }\n            }\n            let mut diff = k - j;\n\
    \            if diff > strength {\n                strength = diff;\n        \
    \        extension = extension;\n            }\n            i += 1;\n        }\n\
    \    }\n    class_name\n        .to_lowercase()\n        .to_ascii_lowercase()\n\
    \        .to_string() + extension.to_lowercase()", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for letter in extension\
    \ {\n            match extension_map.entry(letter) {\n                Occupied(mut\
    \ e) => {\n                    e.insert(0);\n                }\n             \
    \   Vacant(e) => {\n                    e.insert(0);\n                }\n    \
    \        }\n        }\n        extensions_map.insert(extension, extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut best_extension = String::from(\"\
    \");\n    for extension in extensions_map.keys() {\n        let mut extension_map\
    \ = extensions_map.get(extension);\n        for letter in extension {\n      \
    \      let mut current_strength = extension_map.get(letter).unwrap();\n      \
    \      if current_strength > strength {\n                strength = current_strength;\n\
    \                best_extension = extension;\n            }\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, best_extension)", "    let mut strength =\
    \ -1;\n    let mut extension = String::from(\"\");\n    for e in extensions {\n\
    \        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        if cap > sm {\n\
    \            extension = e;\n            strength = cap - sm;\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i64 = 0;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.clone();\n        let\
    \ mut extension = extension.clone();\n        let mut cap = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut sm = class_name.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if cap > sm {\n            strength = cap\
    \ - sm;\n            extension = extension.clone();\n        } else {\n      \
    \      strength = sm - cap;\n            extension = extension.clone();\n    \
    \    }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut c = extension.chars();\n        let mut s =\
    \ c.count();\n        for c in c {\n            if c.is_uppercase() {\n      \
    \          s -= 1;\n            }\n            if c.is_lowercase() {\n       \
    \         s += 1;\n            }\n        }\n        if strength == -1 || strength\
    \ > s {\n            strength = s;\n            extension = extension;\n     \
    \   }\n    }\n    class_name.to_string() + \".\" + extension.to_string()", " \
    \   let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut i = 0;\n        while i < class_name.len()\
    \ {\n            let mut c = class_name[i];\n            if c.is_uppercase() {\n\
    \                c = c.to_lowercase();\n            }\n            if strength\
    \ == -1 || strength > c.chars().filter(|c| *c != c).count() {\n              \
    \  strength = c.chars().filter(|c| *c != c).count();\n                extension\
    \ = extension;\n            }\n            i += 1;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut class_name = class_name.clone();\n\
    \        let mut extension = extension.clone();\n        let mut cap = 0;\n  \
    \      let mut sm = 0;\n        while class_name.len() > 0 {\n            if class_name.chars().any(|c|\
    \ c.is_uppercase()) {\n                cap += 1;\n            }\n            if\
    \ class_name.chars().any(|c| c.is_lowercase()) {\n                sm += 1;\n \
    \           }\n            class_name = class_name.chars().filter(|c| !c.is_uppercase()\
    \ && !c.is_lowercase()).collect();\n        }\n        let strength = cap - sm;\n\
    \        if strength > strength {\n            extension = extension;\n      \
    \      strength = strength;\n        }\n    }\n    class_name + extension", " \
    \   let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c\
    \ >= 'A' && c <= 'Z').count();\n        let sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        let strength = if cap > sm {\n     \
    \       cap - sm\n        } else {\n            sm - cap\n        };\n       \
    \ if strength > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut extension\
    \ = extension.clone();\n        let mut class_name = class_name.clone();\n   \
    \     let mut letters = String::from(\"\");\n        let mut caps = String::from(\"\
    \");\n        let mut sms = String::from(\"\");\n        while !extension.starts_with(\"\
    _\") {\n            letters = letters.clone();\n            caps = caps.clone();\n\
    \            sms = sms.clone();\n            let mut index = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n            let mut index = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n            if index > 0 {\n               \
    \ index -= 1;\n            }\n            let mut index = extension.chars().filter(|c|\
    \ c >= ", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength_fraction\
    \ = cap - sm;\n        if strength_fraction > strength {\n            extension\
    \ = e;\n            strength = strength_fraction;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength_frac = cap - sm;\n        if strength_frac > strength {\n\
    \            strength = strength_frac;\n            extension = e;\n        }\n\
    \    }\n    class_name.to_string() + \".\" + extension.to_string()", "    let\
    \ mut strength: i32 = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string()\
    \ + extension;\n        }\n    }\n    class_name + extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut c = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut s = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if c > s {\n            strength = -1;\n            extension = extension;\n\
    \        } else {\n            strength = c as i32 - s as i32;\n            extension\
    \ = extension;\n        }\n    }\n    class_name.to_string() + extension.to_string()\
    \ + &format!(\"{}.{}\", class_name, extensions[extensions.iter().position(|x|\
    \ x == extension).unwrap()])", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut class_name\
    \ = class_name.clone();\n        let mut extension = extension.clone();\n    \
    \    let mut counter = 0;\n        while counter < class_name.len() {\n      \
    \      let mut class_name = class_name.clone();\n            let mut extension\
    \ = extension.clone();\n            let mut counter = 0;\n            while counter\
    \ < extension.len() {\n                let mut class_name = class_name.clone();\n\
    \                let mut extension = extension.clone();\n                let mut\
    \ counter = 0;\n                while counter < class_name.len() {\n         \
    \           if class_name.chars().any(|c| c.is_uppercase() && c.is_lowercase())\
    \ {\n                        let mut class_name = class_name.clone();\n      \
    \                  let mut extension = extension.clone();\n                  \
    \      let mut counter = 0;\n                        while counter < extension.len()\
    \ {\n                            if extension.chars().any(|c| c.is_uppercase()\
    \ && c.is_lowercase()) {\n                                strength = counter.saturating_sub(counter);\n\
    \                                break;\n                            }\n     \
    \                       counter += 1;\n                        }\n           \
    \         }\n                    counter += 1;\n                }\n          \
    \  }\n        }\n    }\n    class_name\n        .clone()\n        .to_lowercase()\n\
    \        .to_ascii_lowercase()\n        .to_string()\n        .append(&extension)\n\
    \        .append(&extension)\n        .to_string()", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > strength {\n        \
    \    extension = extension;\n            strength = strength;\n        }\n   \
    \ }\n    class_name.to_string() + \".\" + extension.to_string()", "    let mut\
    \ strength: i32 = -1;\n    let mut extension = String::from(\"\");\n    for e\
    \ in extensions {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n      \
    \  strength = if cap > sm {\n            cap - sm\n        } else {\n        \
    \    sm - cap\n        };\n        if strength > 0 {\n            extension =\
    \ e.clone();\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        for\
    \ c in extension.chars() {\n            extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extension =\
    \ String::from(\"\");\n    for extension in extensions {\n        let mut extension_map\
    \ = extensions_map.get(extension);\n        if extension_map.is_none() {\n   \
    \         continue;\n        }\n        let mut extension_map = extension_map.unwrap();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            let mut extension_map = extensions_map.get(extension);\n    \
    \        if extension_map.is_none() {\n                continue;\n           \
    \ }\n            let mut extension_map = extension_map.unwrap();\n           \
    \ let mut extension_strength = -1;\n            for (k, v) in extension_map.iter()\
    \ {\n                if v.contains(&c) {\n                    extension_strength\
    \ = k;\n                    break;\n                }\n            }\n       \
    \     if extension_strength > extension_strength {\n                extension_strength\
    \ = extension_strength;\n            }\n        }\n        if extension_strength\
    \ > strength {\n            strength = extension_strength;\n            extension\
    \ = extension.clone();\n        }\n    }\n    extension.clone()", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            if class_name[i] == extension[i] {\n                i += 1;\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ if i == class_name.len() {\n            strength = -1;\n        } else {\n \
    \           strength = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').count()\
    \ - extension.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        }\n \
    \   }\n    if strength == -1 {\n        String::from(\"\")\n    } else {\n   \
    \     class_name.to_string() + extension.to_string() + &format!(\"{}.{}\", class_name,\
    \ extensions[extensions.iter().min_by_key(|e| e.len()).unwrap().len()])\n    }",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.to_owned();\n        }\n    }\n    class_name.to_string() + \".\"\
    \ + extension.to_owned()", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(c) {\n            \
    \    extension_map.insert(c, strength + 1);\n            } else {\n          \
    \      extension_map.insert(c, 1);\n            }\n            if strength > extension_strength\
    \ {\n                extension_strength = strength;\n            }\n        }\n\
    \        extensions_map.insert(extension, extension_strength);\n    }\n    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for c in\
    \ class_name.chars() {\n        if let Some(strength) = extensions_map.get(c)\
    \ {\n            extensions_map.insert(c, strength + 1);\n            if strength\
    \ > strength {\n                strength = strength;\n                extension\
    \ = String::from(\"\");\n            }\n        } else {\n            extensions_map.insert(c,\
    \ 1);\n        }\n    }\n    extensions_map.iter().max_by_key(|(_, v)| v).unwrap().1.to_string()\
    \ + extension", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        let\
    \ mut extension_strength = 0;\n        for c in extension.chars() {\n        \
    \    if c.is_uppercase() {\n                extension_strength += 1;\n       \
    \     }\n            if c.is_lowercase() {\n                extension_strength\
    \ += 1;\n            }\n        }\n        extension_map.insert(extension.clone(),\
    \ extension_strength);\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut max_strength = -1;\n    let mut max_extension = String::from(\"\
    \");\n    for extension in extensions_map.keys() {\n        let strength = extensions_map.get(extension).unwrap().iter().max().unwrap();\n\
    \        if strength > max_strength {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max_extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > strength {\n        \
    \    extension = e;\n            strength = strength;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength: i32 = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for e in extensions {\n        let cap\
    \ = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        strength = if cap > sm {\n         \
    \   cap - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            extension = e.clone();\n            break;\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength =\
    \ -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut i = 0;\n        while i < class_name.len() {\n            if\
    \ class_name[i] == extension[i] {\n                i += 1;\n            } else\
    \ {\n                break;\n            }\n        }\n        if i == class_name.len()\
    \ {\n            strength = -1;\n        } else {\n            let mut i = 0;\n\
    \            while i < class_name.len() {\n                if class_name[i] ==\
    \ extension[i] {\n                    i += 1;\n                } else {\n    \
    \                break;\n                }\n            }\n            strength\
    \ = class_name.len() - i;\n        }\n    }\n    if strength == -1 {\n       \
    \ String::from(\"\")\n    } else {\n        String::from(&format!(\"{}.{}\", class_name,\
    \ extensions[strength]))\n    }", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = cap - sm;\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).to_string()", "    let mut strength: i32 = -1;\n    let\
    \ mut extension = String::from(\"\");\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm\n        };\n        if strength > 0\
    \ {\n            extension = e.clone();\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        let\
    \ sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n        if cap > sm\
    \ {\n            strength = cap - sm;\n            extension = e;\n        }\n\
    \    }\n    class_name.to_string() + \".\" + extension.to_string()", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            if class_name[i] == extension[i] {\n                i += 1;\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ let mut j = 0;\n        while j < extension.len() {\n            if extension[j]\
    \ == class_name[j] {\n                j += 1;\n            } else {\n        \
    \        break;\n            }\n        }\n        let mut cap = class_name.len()\
    \ - i;\n        let mut sm = extension.len() - j;\n        if cap > sm {\n   \
    \         strength = cap - sm;\n            extension = extension.clone();\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i64 = 0;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut cap = class_name.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = class_name.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > strength {\n        \
    \    strength = strength;\n            extension = extension;\n        }\n   \
    \ }\n    class_name + extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        strength = if cap > sm {\n            cap - sm\n\
    \        } else {\n            sm\n        };\n        extension = extension.concat(e);\n\
    \    }\n    class_name.concat(\".\").concat(extension).to_string()", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            let mut c = class_name[i];\n            if c.is_uppercase() {\n \
    \               c -= 'A' as u8;\n            } else {\n                c -= 'a'\
    \ as u8;\n            }\n            class_name = &class_name[i..];\n        \
    \    i += 1;\n        }\n        let mut i = 0;\n        while i < extension.len()\
    \ {\n            let mut c = extension[i];\n            if c.is_lowercase() {\n\
    \                c -= 'a' as u8;\n            } else {\n                c -= 'A'\
    \ as u8;\n            }\n            extension = &extension[i..];\n          \
    \  i += 1;\n        }\n        let mut c = class_name.len();\n        if c > extension.len()\
    \ {\n            strength = -1;\n        } else {\n            let mut c = extension.len();\n\
    \            while c > 0 {\n                let mut c1 = c as u8;\n          \
    \      let mut c2 = extension.len() as u8;\n                while c1 > 0 {\n \
    \                   c1 -= 1;\n                    c2 -= 1;\n                }\n\
    \                strength = cmp::max(c1, c2);\n                c -= 1;\n     \
    \           extension = &extension[..];\n            }\n        }\n    }\n   \
    \ format!(\"{}.{}\", class_name, extension)", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            if let Some(mut v) = extension_map.get(&c)\
    \ {\n                v.push(extension);\n                extension_map.insert(c,\
    \ v);\n            } else {\n                extension_map.insert(c, vec![extension]);\n\
    \            }\n        }\n        extensions_map.insert(extension, extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = String::from(\"\"\
    );\n    for (_, v) in extensions_map.iter() {\n        let mut extension_map =\
    \ v.clone();\n        let mut strength_sum = 0;\n        for c in extension.chars()\
    \ {\n            let mut v = extension_map.get(&c);\n            if v.len() >\
    \ 0 {\n                let mut s = strength_sum;\n                for e in v {\n\
    \                    s += e.chars().filter(|c| c.is_uppercase()).count() - e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n                }\n                if s > strength_sum\
    \ {\n                    extension = c;\n                    strength = s;\n \
    \               }\n            }\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut i = 0;\n\
    \        while i < class_name.len() {\n            if class_name[i] == extension[0]\
    \ {\n                class_name = &class_name[i..];\n                i += 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    let mut j = 0;\n        while j < extension.len() {\n            if extension[j]\
    \ == class_name[i] {\n                extension = &extension[j..];\n         \
    \       i += 1;\n            } else {\n                break;\n            }\n\
    \        }\n        let mut cap = class_name.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::from(\"\");\n    for extension in extensions_map.keys() {\n      \
    \  let extension_map = extensions_map.get(extension);\n        let mut extension_strength\
    \ = 0;\n        for letter in extension.chars() {\n            extension_strength\
    \ += extension_map.get(letter).unwrap();\n        }\n        if extension_strength\
    \ > strength {\n            strength = extension_strength;\n            best_extension\
    \ = extension;\n        }\n    }\n    class_name.to_string() + \".\" + best_extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut extension_upper = extension.to_uppercase();\n\
    \        let mut extension_lower = extension.to_lowercase();\n        let mut\
    \ extension_len = extension_upper.len() + extension_lower.len();\n        if extension_len\
    \ > strength {\n            strength = extension_len;\n            extension =\
    \ extension_upper;\n        }\n        if extension_len < strength {\n       \
    \     strength = extension_len;\n            extension = extension_lower;\n  \
    \      }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(c) {\n                extension_map.insert(c, strength +\
    \ 1);\n            } else {\n                extension_map.insert(c, 1);\n   \
    \         }\n        }\n        if let Some(strength) = extension_map.get(&'.')\
    \ {\n            extension_strength = strength;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for c in class_name.chars() {\n        if let Some(strength)\
    \ = extensions_map.get(c) {\n            if strength > strength {\n          \
    \      extension = c;\n                strength = strength;\n            }\n \
    \       }\n    }\n    extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        for\
    \ c in extension.chars() {\n            extension_map.insert(c.to_lowercase(),\
    \ 1);\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extensions_iter = extensions_map.iter();\n\
    \    while let Some(extension) = extensions_iter.next() {\n        let mut extension_map\
    \ = extension.clone();\n        let mut extension_map_iter = extension_map.iter();\n\
    \        while let Some(key) = extension_map_iter.next() {\n            if extension_map.get(key).is_some()\
    \ {\n                extension_map.insert(key, 0);\n            }\n        }\n\
    \        let mut extension_map_iter = extension_map.iter();\n        while let\
    \ Some(key) = extension_map_iter.next() {\n            if key != extension.chars().next().unwrap().to_lowercase()\
    \ {\n                strength = extension.chars().count() - extension.chars().count(key.chars());\n\
    \                break;\n            }\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extensions[extensions.iter().max_by_key(|&x| x.chars().count()).unwrap().to_lowercase()])",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for letter in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(&letter) {\n                extension_strength = strength;\n\
    \            }\n            extension_map.insert(letter, extension_strength);\n\
    \        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut extensions_strength = -1;\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.into_iter().collect();\n    for (_,\
    \ extension_map) in extensions_map.iter_mut() {\n        let mut extension_strength\
    \ = -1;\n        for (_, strength) in extension_map.iter() {\n            extension_strength\
    \ = strength;\n        }\n        if extension_strength > extensions_strength\
    \ {\n            extensions_strength = extension_strength;\n        }\n    }\n\
    \    let mut extensions_strength = extensions_strength.saturating_add((class_name.chars().count()\
    \ as f64).floor() as i32);\n    let mut extensions_map = extensions_map.into_iter().collect();\n\
    \    for (_, extension_map) in extensions_map.iter_mut() {\n        let mut extension_strength\
    \ = -1;\n        for (_, strength) in extension_map.iter() {\n            extension_strength\
    \ = strength;\n        }\n        if extension_strength > extensions_strength\
    \ {\n            extensions_strength = extension_strength;\n        }\n    }\n\
    \    let mut extensions_strength = extensions_strength.saturating_add((class_name.chars().count()\
    \ as f64).floor() as i32);\n    let mut extensions_map = extensions_map.into_iter().collect();\n\
    \    for (_, extension_map) in extensions_map.iter_mut() {\n        let mut extension_strength\
    \ = -1;\n        for (_, strength) in extension_map.iter() {\n            extension_strength\
    \ = strength;\n        }\n        if extension_strength > extensions_strength\
    \ {\n            extensions_strength = extension_strength;\n        }\n    }\n\
    \    let mut extensions_strength = extensions_strength.saturating_add((class_name.chars().count()\
    \ as f64).floor() as i32);\n    let mut extensions_map = extensions_map.into_iter().collect();\n\
    \    for (_, extension_map) in extensions_map.iter_mut() {\n        let mut extension_strength\
    \ = -1;\n        for (_, strength) in extension_map.iter", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        for letter in extension {\n            extension_map.insert(letter,\
    \ 0);\n        }\n        extensions_map.insert(extension, extension_map);\n \
    \   }\n    let mut max_strength = -1;\n    let mut max_extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension_map = extensions_map.get(extension);\n\
    \        for letter in extension {\n            if extension_map.get(letter).is_none()\
    \ {\n                extension_map.insert(letter, 0);\n            }\n       \
    \     extension_map.get(letter).unwrap() += 1;\n        }\n        let strength\
    \ = extension_map.iter().filter(|&(_, count)| count > 0).count();\n        if\
    \ strength > max_strength {\n            max_strength = strength;\n          \
    \  max_extension = extension;\n        }\n    }\n    class_name.to_string() +\
    \ \".\" + max_extension", "    let mut strength = -1;\n    let mut extension =\
    \ String::from(\"\");\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut c = 1;\n\
    \        let mut s = 1;\n        while c > 0 {\n            if class_name.contains(&extension)\
    \ {\n                c -= 1;\n            } else {\n                s += 1;\n\
    \            }\n            class_name = &class_name[..];\n            extension\
    \ = &extension[..];\n        }\n        if strength < s {\n            strength\
    \ = s;\n            extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c, 0);\n\
    \        }\n        extensions_map.insert(extension, extension_map);\n    }\n\
    \    let mut strength = -1;\n    let mut extensions_iter = extensions_map.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut extensions_iter_count = extensions_iter.len();\n    let mut extensions_iter_max\
    \ = extensions_iter_count;\n    let mut extensions_iter_max_strength = -1;\n \
    \   let mut extensions_iter_max_key = String::new();\n    let mut extensions_iter_max_value\
    \ = String::new();\n    let mut extensions_iter_max_key_strength = -1;\n    let\
    \ mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_iter_max_value_index\
    \ = -1;\n    let mut extensions_iter_max_key_index = -1;\n    let mut extensions_",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut strength = -1;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  strength = strength.saturating_add((c.to_ascii_lowercase().len_utf8() / CAP.len_utf8()));\n\
    \            } else {\n                strength = strength.saturating_add((c.to_ascii_uppercase().len_utf8()\
    \ / SM.len_utf8()));\n            }\n        }\n        if strength > strength\
    \ {\n            extension = class_name;\n            strength = strength;\n \
    \       }\n    }\n    extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut counter\
    \ = 0;\n        while class_name.len() > 0 && extension.len() > 0 {\n        \
    \    if class_name.chars().any(|c| c >= 'A' && c <= 'Z') {\n                class_name\
    \ = &class_name[..class_name.len() - 1];\n                counter += 1;\n    \
    \        }\n            if extension.chars().any(|c| c >= 'a' && c <= 'z') {\n\
    \                extension = &extension[..extension.len() - 1];\n            \
    \    counter += 1;\n            }\n        }\n        if counter > strength {\n\
    \            strength = counter;\n            extension = extension;\n       \
    \ }\n    }\n    class_name + extension", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for letter in extension.chars() {\n            extension_map.insert(letter,\
    \ 0);\n        }\n        extensions_map.insert(extension, extension_map);\n \
    \   }\n    let mut strength = -1;\n    let mut extensions_iter = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter2 = extensions_map.iter().cloned();\n    let mut extensions_iter3\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter4 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter5 = extensions_map.iter().cloned();\n    let mut extensions_iter6\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter7 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter8 = extensions_map.iter().cloned();\n    let mut extensions_iter9\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter10 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter11 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter12 = extensions_map.iter().cloned();\n    let mut extensions_iter13\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter14 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter15 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter16 = extensions_map.iter().cloned();\n    let mut extensions_iter17\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter18 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter19 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter20 = extensions_map.iter().cloned();\n    let mut extensions_iter21\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter22 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter23 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter24 = extensions_map.iter().cloned();\n    let mut extensions_iter25\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter26 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter27 = extensions_map.iter().", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > strength {\n        \
    \    extension = extension;\n            strength = strength;\n        }\n   \
    \ }\n    class_name.to_string() + \".\" + extension.to_string()", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            let mut c = c.to_lowercase();\n            if c.is_uppercase()\
    \ {\n                c.to_uppercase();\n            }\n            extension_map.insert(c,\
    \ extension);\n        }\n        extensions_map.insert(extension_map.keys().max().unwrap(),\
    \ extension_map);\n    }\n    extensions_map.get(&class_name).unwrap().keys().max().unwrap().value()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i64 = 0;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut counter = 0;\n        while class_name.len() >\
    \ 0 {\n            if class_name.chars().any(|c| c.is_uppercase() && counter <\
    \ CAPITAL_LETTERS) {\n                class_name = class_name.remove(0);\n   \
    \             counter += 1;\n            } else if class_name.chars().any(|c|\
    \ c.is_lowercase() && counter < SMALL_LETTERS) {\n                class_name =\
    \ class_name.remove(0);\n                counter += 1;\n            } else {\n\
    \                break;\n            }\n        }\n        if strength == -1 ||\
    \ strength > CAPITAL_LETTERS - SMALL_LETTERS {\n            strength = CAPITAL_LETTERS\
    \ - SMALL_LETTERS;\n            extension = extension;\n        }\n    }\n   \
    \ class_name + extension", "    let mut strength: i64 = 0;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength += cap - sm;\n        extension = extension.concat(e);\n   \
    \ }\n    extension.concat(\".\").concat(class_name.to_lowercase()).concat(\".\"\
    ).concat(extensions[extensions.iter().position(|e| e.to_lowercase().contains(extension.to_lowercase())).unwrap()].to_lowercase())",
  "    let mut strength: i64 = 0;\n    let mut extension = String::new();\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\")\n        .concat(class_name)\n        .concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e.contains(&extension)).unwrap()])\n        .to_string()", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.clone();\n \
    \           break;\n        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            let mut c = class_name[i];\n            if c >= 'A' && c <= 'Z' {\n\
    \                c -= 'A' as u8;\n            } else if c >= 'a' && c <= 'z' {\n\
    \                c -= 'a' as u8;\n            } else if c >= '0' && c <= '9' {\n\
    \                c -= '0' as u8;\n            }\n            class_name = &class_name[i..].to_string();\n\
    \            i += 1;\n        }\n        let mut i = 0;\n        while i < extension.len()\
    \ {\n            let mut c = extension[i];\n            if c >= 'A' && c <= 'Z'\
    \ {\n                c -= 'A' as u8;\n            } else if c >= 'a' && c <= 'z'\
    \ {\n                c -= 'a' as u8;\n            } else if c >= '0' && c <= '9'\
    \ {\n                c -= '0' as u8;\n            }\n            extension = &extension[i..].to_string();\n\
    \            i += 1;\n        }\n        let mut c = class_name.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count();\n        let mut s = extension.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count();\n        if c > s {\n            strength =\
    \ -1;\n        } else {\n            strength = c as i32;\n        }\n    }\n\
    \    if strength == -1 {\n        class_name\n    } else {\n        format!(\"\
    {}.{}\", class_name, extensions[strength])\n    }", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        for c in extension {\n            if c.is_uppercase()\
    \ {\n                extension_map.insert(c.to_lowercase(), -1);\n           \
    \ } else {\n                extension_map.insert(c.to_uppercase(), -1);\n    \
    \        }\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = String::from(\"\"\
    );\n    let mut extension_map = extensions_map.remove(&class_name);\n    while\
    \ extension_map.is_some() {\n        let mut extension_map = extensions_map.remove(&extension);\n\
    \        if extension_map.is_some() {\n            strength = extension_map.unwrap().keys().iter().max().unwrap();\n\
    \        }\n        extension = extension.clone();\n        extension_map = extensions_map.remove(&extension);\n\
    \    }\n    extension.clone()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut extension_len\
    \ = extension.len();\n        let mut class_len = class_name.len();\n        while\
    \ extension_len > class_len {\n            extension = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').collect::<String>().to_owned();\n            extension_len\
    \ -= extension.len();\n            class_len -= extension.len();\n        }\n\
    \        let mut class_len = class_name.len();\n        while class_len > extension_len\
    \ {\n            class_len = class_name.chars().filter(|c| c >= 'a' && c <= 'z').collect::<String>().to_owned().len();\n\
    \            extension = extension.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>().to_owned();\n\
    \            extension_len -= extension.len();\n        }\n        let cap = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        let strength = cap - sm;\n        if\
    \ strength > strength {\n            strength = strength;\n            extension\
    \ = extension;\n        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.len()\
    \ - 1].to_lowercase())", "    let mut strength = -1;\n    let mut extension =\
    \ String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > strength {\n        \
    \    extension = e;\n            strength = strength;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength: i64 = 0;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = extension.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if cap\
    \ > sm {\n            cap - sm\n        } else {\n            sm\n        };\n\
    \        extension = extension.concat(e);\n    }\n    class_name.concat(\".\"\
    ).concat(extension).concat(\".\")", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut c\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n        let mut s\
    \ = extension.chars().filter(|c| c.is_lowercase()).count();\n        if c > s\
    \ {\n            strength = -1;\n            break;\n        }\n        if c <\
    \ s {\n            strength = s;\n            break;\n        }\n    }\n    if\
    \ strength == -1 {\n        class_name\n    } else {\n        class_name.to_string()\
    \ + extension.to_string() + &extensions[extensions.iter().position(|e| e == extension).unwrap()]\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::from(\"\"\
    );\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        if cap >\
    \ sm {\n            extension = e;\n            strength = cap - sm;\n       \
    \ }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        for letter in extension {\n            match extension_map.entry(letter)\
    \ {\n                Occupied(mut e) => {\n                    e.insert(0);\n\
    \                }\n                Vacant(e) => {\n                    e.insert(0);\n\
    \                }\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extension =\
    \ String::from(\"\");\n    let mut extension_map = extensions_map.remove(&class_name).unwrap();\n\
    \    for (_, v) in extension_map.iter() {\n        if v.len() > strength {\n \
    \           strength = v.len();\n            extension = &class_name;\n      \
    \  }\n    }\n    extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut extension_len\
    \ = extension.len();\n        let mut class_len = class_name.len();\n        while\
    \ extension_len > class_len {\n            extension = extension.chars().filter(|c|\
    \ c.is_uppercase()).collect::<String>().to_lowercase();\n            extension_len\
    \ -= class_len;\n            class_len += 1;\n        }\n        let mut class_len\
    \ = extension.len();\n        while class_len > extension_len {\n            extension\
    \ = extension.chars().filter(|c| c.is_lowercase()).collect::<String>().to_uppercase();\n\
    \            extension_len -= class_len;\n            class_len += 1;\n      \
    \  }\n        let mut class_len = extension.len();\n        while class_len >\
    \ extension_len {\n            extension = extension.chars().filter(|c| !c.is_lowercase()\
    \ && !c.is_uppercase()).collect::<String>().to_lowercase();\n            extension_len\
    \ -= class_len;\n            class_len += 1;\n        }\n        if extension_len\
    \ > strength {\n            strength = extension_len;\n            extension =\
    \ extension.clone();\n        }\n    }\n    class_name.to_string() + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut i = 0;\n        while i < class_name.len()\
    \ {\n            if class_name[i] == class_name[i].to_lowercase() {\n        \
    \        i += 1;\n            } else {\n                break;\n            }\n\
    \        }\n        let mut j = 0;\n        while j < extension.len() {\n    \
    \        if extension[j] == extension[j].to_lowercase() {\n                j +=\
    \ 1;\n            } else {\n                break;\n            }\n        }\n\
    \        if i == 0 || j == 0 {\n            continue;\n        }\n        let\
    \ cap = i as usize;\n        let sm = j as usize;\n        let strength = cap\
    \ - sm;\n        if strength > 0 {\n            break;\n        }\n    }\n   \
    \ if strength == -1 {\n        class_name\n    } else {\n        class_name.to_string()\
    \ + extension.to_string()\n    }", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = e;\n        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c >= 'A' &&\
    \ c <= 'Z').count();\n        let sm = extension.chars().filter(|c| c >= 'a' &&\
    \ c <= 'z').count();\n        strength = if cap > sm {\n            cap - sm\n\
    \        } else {\n            sm - cap\n        };\n        if strength > 0 {\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i32 = -1;\n    let mut extension = String::from(\"\");\n\
    \    for extension in extensions {\n        let mut class_name = class_name;\n\
    \        let mut extension = extension;\n        let mut strength = -1;\n    \
    \    for c in extension.chars() {\n            if c.is_uppercase() {\n       \
    \         strength += 1;\n            }\n            if c.is_lowercase() {\n \
    \               strength += 1;\n            }\n        }\n        if strength\
    \ > strength {\n            extension = class_name;\n            strength = -1;\n\
    \        }\n    }\n    extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength: i32 = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.to_string();\n        }\n    }\n    class_name.to_string() + \"\
    .\" + extension.to_string()", "    let mut strength: i32 = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        let mut class_length = class_name.len();\n        while extension_length\
    \ >= class_length {\n            extension_length -= class_length;\n         \
    \   class_length -= 1;\n        }\n        let mut class_name = class_name.clone();\n\
    \        class_name.truncate(class_length);\n        let mut extension = extension.clone();\n\
    \        extension.truncate(extension_length);\n        let mut strength = -1;\n\
    \        if extension.chars().all(|c| c.is_uppercase()) {\n            strength\
    \ = extension.chars().filter(|c| c.is_uppercase()).count() - extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        }\n        if strength > 0 {\n         \
    \   break;\n        }\n    }\n    if strength == -1 {\n        class_name\n  \
    \  } else {\n        class_name.concat(\".\").concat(extension)\n    }", "   \
    \ let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            if let Some(mut v) = extension_map.get(c) {\n               \
    \ v.push(extension);\n                extension_map.insert(c, v);\n          \
    \  } else {\n                extension_map.insert(c, vec![extension]);\n     \
    \       }\n        }\n        extensions_map.insert(extension, extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = String::from(\"\"\
    );\n    for (_, extension_map) in extensions_map.iter() {\n        let mut extension_strength\
    \ = 0;\n        for (_, extensions) in extension_map.iter() {\n            let\
    \ mut extensions_strength = extension_strength;\n            for extension in\
    \ extensions {\n                let mut extension_map = HashMap::new();\n    \
    \            for c in extension.chars() {\n                    if let Some(mut\
    \ v) = extension_map.get(c) {\n                        v.push(extension);\n  \
    \                      extension_map.insert(c, v);\n                    } else\
    \ {\n                        extension_map.insert(c, vec![extension]);\n     \
    \               }\n                }\n                extensions_strength += extension_map.len()\
    \ as i32;\n            }\n            if extensions_strength > extension_strength\
    \ {\n                extension_strength = extensions_strength;\n             \
    \   extension = extension;\n            }\n        }\n        strength += extension_strength\
    \ as i32;\n    }\n    class_name.to_string() + extension.to_string()", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        if\
    \ cap > sm {\n            strength = cap - sm;\n            extension = e;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i32 = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut counter = 0;\n        while class_name.len() >\
    \ 0 && extension.len() > 0 {\n            if class_name.chars().any(|c| c.is_uppercase()\
    \ && counter == CAP) {\n                class_name = class_name.remove(0);\n \
    \               counter += SM;\n            } else if extension.chars().any(|c|\
    \ c.is_lowercase() && counter == SM) {\n                extension = extension.remove(0);\n\
    \                counter += CAP;\n            } else {\n                counter\
    \ += 1;\n            }\n        }\n        if strength == -1 || strength > counter\
    \ {\n            strength = counter;\n            extension = extension;\n   \
    \     }\n    }\n    class_name + extension", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = 0;\n        for letter in extension.chars()\
    \ {\n            if letter.is_uppercase() {\n                extension_strength\
    \ += 1;\n            }\n            if letter.is_lowercase() {\n             \
    \   extension_strength += 1;\n            }\n        }\n        extension_map.insert(extension.clone(),\
    \ extension_strength);\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut max_extension_strength = -1;\n    let mut max_extension =\
    \ String::from(\"\");\n    for extension in extensions {\n        let extension_map\
    \ = extensions_map.get(extension.clone());\n        if let Some(extension_strength)\
    \ = extension_map {\n            if extension_strength > max_extension_strength\
    \ {\n                max_extension_strength = extension_strength;\n          \
    \      max_extension = extension;\n            }\n        }\n    }\n    max_extension",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        let mut extension_class = \"\";\n        for c in extension {\n\
    \            if c.is_uppercase() {\n                extension_map.insert(c.to_lowercase(),\
    \ 1);\n            } else {\n                extension_map.insert(c.to_uppercase(),\
    \ 1);\n            }\n        }\n        for (key, value) in extension_map.iter()\
    \ {\n            if value > extension_strength {\n                extension_strength\
    \ = value;\n                extension_class = key;\n            }\n        }\n\
    \        extensions_map.insert(extension_class, extension_strength);\n    }\n\
    \    let mut extensions_strength = -1;\n    let mut extensions_class = \"\";\n\
    \    for (key, value) in extensions_map.iter() {\n        if value > extensions_strength\
    \ {\n            extensions_strength = value;\n            extensions_class =\
    \ key;\n        }\n    }\n    class_name.to_string() + extensions_class.to_string()",
  "    let mut strength: i32 = -1;\n    let mut extension = String::from(\"\");\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension;\n        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name.to_lowercase();\n\
    \        let mut extension = extension.to_lowercase();\n        let mut cap =\
    \ class_name.chars().filter(|c| c.is_uppercase()).count();\n        let mut sm\
    \ = extension.chars().filter(|c| c.is_lowercase()).count();\n        if cap >\
    \ sm {\n            strength = cap - sm;\n            extension = extension.chars().filter(|c|\
    \ c.is_lowercase()).collect::<String>().to_string();\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        let strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > strength {\n            extension = e;\n            strength = strength;\n\
    \        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c >= 'A' &&\
    \ c <= 'Z').count();\n        let sm = extension.chars().filter(|c| c >= 'a' &&\
    \ c <= 'z').count();\n        strength = if cap > sm {\n            cap - sm\n\
    \        } else {\n            sm - cap\n        };\n        if strength > 0 {\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = 0;\n        for letter in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(&letter) {\n                extension_map.insert(letter,\
    \ strength + 1);\n            } else {\n                extension_map.insert(letter,\
    \ 1);\n            }\n        }\n        for letter in extension_map.keys() {\n\
    \            let (letter, strength) = extension_map.get(&letter);\n          \
    \  extension_strength += strength;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut extensions_strength = HashMap::new();\n\
    \    for extension in extensions_map.keys() {\n        let (extension, strength)\
    \ = extensions_map.get(&extension);\n        extensions_strength.insert(extension,\
    \ strength);\n    }\n    let mut max_strength = -1;\n    let mut max_extension\
    \ = String::from(\"\");\n    for extension in extensions_strength.keys() {\n \
    \       if extensions_strength.get(&extension) > max_strength {\n            max_strength\
    \ = extensions_strength.get(&extension);\n            max_extension = extension;\n\
    \        }\n    }\n    class_name.to_string() + \".\" + max_extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut strength = -1;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  strength += 1;\n            }\n            if c.is_lowercase() {\n        \
    \        strength += 1;\n            }\n        }\n        if strength > 0 {\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut i = 0;\n        while i < class_name.len()\
    \ {\n            if class_name[i] == extension[i] {\n                i += 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    let mut j = 0;\n        while j < extension.len() {\n            if extension[j]\
    \ == class_name[i] {\n                j += 1;\n            } else {\n        \
    \        break;\n            }\n        }\n        let mut cap = class_name.len()\
    \ - i;\n        let mut sm = extension.len() - j;\n        if cap > sm {\n   \
    \         strength = cap - sm;\n            extension = extension.clone();\n \
    \       }\n    }\n    extension.clone()", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(&c) {\n           \
    \     extension_map.insert(c, strength + 1);\n            } else {\n         \
    \       extension_map.insert(c, 1);\n            }\n        }\n        let strength\
    \ = extension_map.iter().filter(|(_, v)| v > 0).count();\n        if strength\
    \ > extension_strength {\n            extension_strength = strength;\n       \
    \ }\n        extensions_map.insert(extension.clone(), extension_strength);\n \
    \   }\n    let mut extensions_strength = -1;\n    for (_, strength) in extensions_map.iter()\
    \ {\n        if strength > extensions_strength {\n            extensions_strength\
    \ = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name, extensions_map.iter().filter(|(_,\
    \ v)| v == extensions_strength).next().unwrap().0)", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if cap\
    \ > sm {\n            cap - sm\n        } else {\n            sm\n        };\n\
    \        extension = extension.concat(e);\n    }\n    class_name.concat(\".\"\
    ).concat(extension).concat(\".\").to_string()", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i64 = 0;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.to_lowercase();\n \
    \       let mut extension = extension.to_lowercase();\n        let mut index =\
    \ class_name.rfind(&extension);\n        if index != String::npos {\n        \
    \    strength = strength.saturating_sub(class_name.len() - index);\n        }\n\
    \    }\n    match strength {\n        0 => class_name,\n        s => class_name.to_string()\
    \ + extension.to_string() + &extensions[strength],\n    }", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i32 = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut c = extension.chars().filter(|c| c >= 'A' &&\
    \ c <= 'Z').count();\n        let mut s = extension.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        if c > s {\n            strength = c - s;\n \
    \           extension = extension.to_owned();\n        }\n    }\n    if strength\
    \ == -1 {\n        String::from(\"\")\n    } else {\n        class_name.to_string()\
    \ + \".\" + extension.to_string()\n    }", "    let mut strength = -1;\n    let\
    \ mut extension = String::from(\"\");\n    for extension in extensions {\n   \
    \     let mut c = extension.chars().filter(|c| c.is_uppercase()).count();\n  \
    \      let mut s = extension.chars().filter(|c| c.is_lowercase()).count();\n \
    \       if c > s {\n            strength = -1;\n            extension = extension;\n\
    \        } else if c < s {\n            strength = s;\n            extension =\
    \ extension;\n        } else {\n            strength = c - s;\n            extension\
    \ = extension;\n        }\n    }\n    class_name.to_string() + extension.to_string()\
    \ + &format!(\"{}.{}\", class_name, strength)", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut i = 0;\n        while i < class_name.len() {\n            if\
    \ class_name[i] == extension[0] {\n                class_name = &class_name[i..];\n\
    \                i += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut j = 0;\n        while j < extension.len()\
    \ {\n            if extension[j] == class_name[0] {\n                extension\
    \ = &extension[j..];\n                j += 1;\n            } else {\n        \
    \        break;\n            }\n        }\n        let mut cap = class_name.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let mut sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        if cap - sm > strength {\n         \
    \   strength = cap - sm;\n            extension = class_name + extension;\n  \
    \      }\n    }\n    extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        strength = if cap > sm {\n            cap - sm\n\
    \        } else {\n            sm - cap\n        };\n        if strength > 0 {\n\
    \            extension = e.clone();\n            break;\n        }\n    }\n  \
    \  format!(\"{}.{}\", class_name, extension)", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            if let Some(mut value) = extension_map.get(&c)\
    \ {\n                value.push((extension, value));\n                extension_map.insert(c,\
    \ value);\n            } else {\n                extension_map.insert(c, vec![(extension,\
    \ 1)]);\n            }\n        }\n        extensions_map.insert(extension, extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut best_extension = String::from(\"\
    \");\n    for extension in extensions_map.keys() {\n        let mut extension_map\
    \ = extensions_map.get(extension);\n        let mut max_strength = -1;\n     \
    \   let mut best_extension_map = HashMap::new();\n        for (c, value) in extension_map.iter()\
    \ {\n            let mut strength_sum = 0;\n            for (extension, count)\
    \ in value {\n                let mut strength = extension.chars().count() - extension.chars().filter(|c|\
    \ c == c).count();\n                if strength > strength_sum {\n           \
    \         strength_sum = strength;\n                    best_extension = extension;\n\
    \                }\n            }\n            if strength_sum > max_strength\
    \ {\n                max_strength = strength_sum;\n                best_extension_map.insert(c,\
    \ value);\n            }\n        }\n        if max_strength > strength {\n  \
    \          strength = max_strength;\n            best_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            if class_name[i] == extension[i] {\n                i += 1;\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ if i == class_name.len() {\n            strength = -1;\n        } else {\n \
    \           strength = class_name.chars().filter(|c| c.is_uppercase()).count()\
    \ - extension.chars().filter(|c| c.is_lowercase()).count();\n        }\n    }\n\
    \    if strength == -1 {\n        String::from(\"\")\n    } else {\n        String::from(class_name\
    \ + \".\" + extensions[extensions.iter().min_by_key(|x| x.len()).unwrap().to_owned()])\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::from(\"\"\
    );\n    for extension in extensions {\n        let mut class_name = class_name;\n\
    \        let mut extension = extension;\n        let mut num_cap = 0;\n      \
    \  let mut num_sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                num_cap += 1;\n            } else {\n                num_sm\
    \ += 1;\n            }\n        }\n        let strength = num_cap - num_sm;\n\
    \        if strength > strength {\n            extension = class_name;\n     \
    \       strength = num_cap - num_sm;\n        }\n    }\n    extension", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            let mut c = class_name[i];\n            if c >= 'A' && c <= 'Z' {\n\
    \                c -= 'A' as u8;\n                i += 1;\n            } else\
    \ if c >= 'a' && c <= 'z' {\n                c -= 'a' as u8;\n               \
    \ i += 1;\n            } else {\n                break;\n            }\n     \
    \       class_name = &class_name[i..];\n        }\n        let mut i = 0;\n  \
    \      while i < extension.len() {\n            let mut c = extension[i];\n  \
    \          if c >= 'A' && c <= 'Z' {\n                c -= 'A' as u8;\n      \
    \          i += 1;\n            } else if c >= 'a' && c <= 'z' {\n           \
    \     c -= 'a' as u8;\n                i += 1;\n            } else {\n       \
    \         break;\n            }\n            extension = &extension[i..];\n  \
    \      }\n        let mut c = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let mut s = extension.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        if c > s {\n            strength = -1;\n        } else {\n          \
    \  strength = c as i32;\n        }\n    }\n    if strength == -1 {\n        class_name\n\
    \    } else {\n        class_name.to_string() + extension.to_string()\n    }",
  "    let mut extensions_sorted = extensions.iter().cloned().collect::<Vec<String>>();\n\
    \    extensions_sorted.sort_by(|a, b| b.cmp(a));\n    let mut class_name_sorted\
    \ = class_name.chars().cloned().collect::<Vec<String>>();\n    class_name_sorted.sort_by(|a,\
    \ b| b.cmp(a));\n    let mut strength = -1;\n    let mut i = 0;\n    while i <\
    \ extensions_sorted.len() {\n        if class_name_sorted[i].is_uppercase() &&\
    \ extensions_sorted[i].is_lowercase() {\n            strength += 1;\n        }\n\
    \        i += 1;\n    }\n    if strength == -1 {\n        String::from(class_name)\n\
    \    } else {\n        String::from(class_name.to_string() + extensions_sorted[strength].to_string()\
    \ + &class_name_sorted[strength])\n    }", "    let mut strength = -1;\n    let\
    \ mut extension = String::from(\"\");\n    for extension in extensions {\n   \
    \     let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n    \
    \    let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n      \
    \  let strength = cap - sm;\n        if strength > 0 {\n            break;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n \
    \       let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n       \
    \ if cap > sm {\n            strength = cap - sm;\n            extension = e;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut counter = 0;\n        while class_name.len() >\
    \ 0 {\n            let mut class_name = class_name.to_lowercase();\n         \
    \   let mut extension = extension.to_lowercase();\n            let mut counter\
    \ = 0;\n            while class_name.len() > 0 {\n                if class_name\
    \ == extension {\n                    counter += 1;\n                }\n     \
    \           class_name = class_name.to_lowercase();\n                extension\
    \ = extension.to_lowercase();\n            }\n            if counter > strength\
    \ {\n                strength = counter;\n                extension = extension.to_lowercase();\n\
    \            }\n        }\n    }\n    class_name\n        .to_lowercase()\n  \
    \      .concat(\".\".to_lowercase().to_lowercase())\n        .concat(extension.to_lowercase())",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).to_string()", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for letter in extension {\n            if let Some(count) = extension_map.get(&letter)\
    \ {\n                extension_map.insert(letter, count + 1);\n            } else\
    \ {\n                extension_map.insert(letter, 1);\n            }\n       \
    \ }\n        extensions_map.insert(extension, extension_map);\n    }\n    let\
    \ mut strength = -1;\n    let mut extensions_count = extensions_map.len();\n \
    \   let mut extensions_map = extensions_map.into_iter().collect();\n    loop {\n\
    \        let mut extensions_map = extensions_map.into_iter().collect();\n    \
    \    let mut extensions_count = extensions_map.len();\n        for extension in\
    \ extensions_map.keys() {\n            let mut extension_map = extensions_map.remove(&extension);\n\
    \            let mut extensions_count = extensions_map.len();\n            for\
    \ letter in extension {\n                if let Some(count) = extension_map.get(&letter)\
    \ {\n                    if count > strength {\n                        strength\
    \ = count;\n                    }\n                    extension_map.insert(letter,\
    \ count - 1);\n                } else {\n                    extension_map.insert(letter,\
    \ 1);\n                }\n            }\n        }\n        if extensions_count\
    \ == 0 {\n            break;\n        }\n    }\n    class_name.to_string() + \"\
    .\" + extensions_map.iter().filter(|&(_, count)| count > 0).collect::<Vec<_>>().iter().next().unwrap().to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut cap = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut sm = class_name.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if cap > sm {\n            cap = cap - sm;\n\
    \            sm = sm;\n        }\n        strength = cmp::min(strength, cap -\
    \ sm);\n    }\n    class_name\n        .to_string() + extension.to_string() +\
    \ extensions[strength].to_string()"]
stop_tokens:
- "\n}"
