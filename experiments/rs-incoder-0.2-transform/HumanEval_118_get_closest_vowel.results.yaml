language: rs
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|v| vowels_set.insert(v));\n \
    \   let mut vowels_count = vowels.len();\n    let mut vowels_index = 0;\n    let\
    \ mut vowels_index_count = 0;\n    let mut vowels_index_set = HashSet::new();\n\
    \    vowels.iter().for_each(|v| {\n        vowels_index_set.insert(vowels_index);\n\
    \        vowels_index_count++;\n        vowels_index += 1;\n    });\n    let mut\
    \ vowels_index_count = vowels_index_count;\n    let mut vowels_index_set = vowels_index_set;\n\
    \    let mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set\
    \ = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n    let\
    \ mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n\
    \    let mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set\
    \ = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n    let\
    \ mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n\
    \    let mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set\
    \ = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n    let\
    \ mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n\
    \    let mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set\
    \ = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n    let\
    \ mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n\
    \    let mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set\
    \ = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n    let\
    \ mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n\
    \    let mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set\
    \ = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n    let\
    \ mut vowels_index_set = vowels_index_set;\n    let mut vowels_index_set = vowels_index_set;\n\
    \    let mut \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp6hqfpooi.rs:25:27\n\
    \   |\n25 |         vowels_index_count++;\n   |                           ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n25 |       \
    \  { let tmp = vowels_index_count; vowels_index_count += 1; tmp };\n   |     \
    \    +++++++++++                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n25 -    \
    \     vowels_index_count++;\n25 +         vowels_index_count += 1;\n   | \n\n\
    error: expected identifier, found `}`\n  --> /tmp/tmp6hqfpooi.rs:61:1\n   |\n\
    61 | }\n   | ^ expected identifier\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `HashSet`\n  --> /tmp/tmp6hqfpooi.rs:17:26\n   |\n17 |     let\
    \ mut vowels_set = HashSet::new();\n   |                          ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `HashSet`\n  --> /tmp/tmp6hqfpooi.rs:22:32\n   |\n22 |  \
    \   let mut vowels_index_set = HashSet::new();\n   |                         \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmp6hqfpooi.rs:65:17\n   |\n65 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6hqfpooi.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6hqfpooi.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6hqfpooi.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6hqfpooi.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \          "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set.insert(vowel);\n\
    \    });\n    let mut vowels_set2 = HashSet::new();\n    vowels.iter().for_each(|vowel|\
    \ {\n        vowels_set2.insert(vowel.to_lowercase());\n    });\n    let mut vowels_set3\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set3.insert(vowel.to_uppercase());\n\
    \    });\n    let mut vowels_set4 = HashSet::new();\n    vowels.iter().for_each(|vowel|\
    \ {\n        vowels_set4.insert(vowel.to_ascii_lowercase());\n    });\n    let\
    \ mut vowels_set5 = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n  \
    \      vowels_set5.insert(vowel.to_ascii_uppercase());\n    });\n    let mut vowels_set6\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set6.insert(vowel.to_digit());\n\
    \    });\n    let mut vowels_set7 = HashSet::new();\n    vowels.iter().for_each(|vowel|\
    \ {\n        vowels_set7.insert(vowel.to_digit(10));\n    });\n    let mut vowels_set8\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set8.insert(vowel.to_digit(16));\n\
    \    });\n    let mut vowels_set9 = HashSet::new();\n    vowels.iter().for_each(|vowel|\
    \ {\n        vowels_set9.insert(vowel.to_digit(32));\n    });\n    let mut vowels_set10\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set10.insert(vowel.to_digit(64));\n\
    \    });\n    let mut vowels_set11 = HashSet::new();\n    vowels.iter().for_each(|vowel|\
    \ {\n        vowels_set11.insert(vowel.to_digit(128));\n    });\n    let mut vowels_set12\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set12.insert(vowel.to_digit(256));\n\
    \    });\n    let mut vowels_set13 = HashSet::new();\n    vowels.iter().for_each(|vowel|\
    \ {\n        vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpw2ndthnx.rs:85:3\n\
    \   |\n15 | fn get_closest_vowel(word: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n66 |     vowels.iter().for_each(|vowel|\
    \ {\n   |                           - unclosed delimiter\n...\n85 | }\n   |  \
    \ ^\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword\
    \ `fn`\n  --> /tmp/tmpw2ndthnx.rs:70:1\n   |\n68 | }\n   |  - expected one of\
    \ `)`, `,`, `.`, `?`, or an operator\n69 | \n70 | fn main() {\n   | ^^ unexpected\
    \ token\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = word.len();\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpu4rr8f6_.rs:60:1\n   |\n60 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpu4rr8f6_.rs:59:30\n   |\n15 | fn get_closest_vowel(word: String) ->\
    \ String {\n   |                                              - closing delimiter\
    \ possibly meant for this\n...\n59 |     let mut vowels_idx = vec![0, 1, 2, 3,\
    \ 4\n   |                              ^ unclosed delimiter\n60 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu4rr8f6_.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu4rr8f6_.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpu4rr8f6_.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpu4rr8f6_.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpu4rr8f6_.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu4rr8f6_.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu4rr8f6_.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpu4rr8f6_.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot fi"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_idx\
    \ = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).count();\n \
    \   let mut vowels_idx_end = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).count();\n\
    \    vowels_idx_end += 1;\n    vowels_idx += 1;\n    let mut vowels_idx_start\
    \ = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).count();\n \
    \   vowels_idx_start -= 1;\n    vowels_idx -= 1;\n    let mut vowels_idx_mid =\
    \ word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).count();\n   \
    \ vowels_idx_mid += 1;\n    vowels_idx += 1;\n    let mut vowels_idx_start = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).count();\n    vowels_idx_start -= 1;\n    vowels_idx\
    \ -= 1;\n    let mut vowels_idx_mid = word.chars().enumerate().filter(|&(_, c)|\
    \ vowels.contains(c)).count();\n    vowels_idx_mid += 1;\n    vowels_idx += 1;\n\
    \    let mut vowels_idx_end = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).count();\n\
    \    vowels_idx_end += 1;\n    vowels_idx += 1;\n    let mut vowels_idx_start\
    \ = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).count();\n \
    \   vowels_idx_start -= 1;\n    vowels_idx -= 1;\n    let mut vowels_idx_mid =\
    \ word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).count();\n   \
    \ vowels_idx_mid += 1;\n    vowels_idx += 1;\n    let mut vowels_idx_end = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).count();\n    vowels_idx_end += 1;\n    vowels_idx +=\
    \ 1;\n    let mut vowels_idx_start = word.chars().enumerate().filter(|&(_, c)|\
    \ vowels.contains(c)).count();\n    vowels_idx_start -= 1;\n    vowels_idx -=\
    \ 1;\n    let mut vowels_idx_mid = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).count();\n\
    \    vowels_idx_mid += 1;\n    vowels_idx += \n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp2k7baff5.rs:51:1\n\
    \   |\n51 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp2k7baff5.rs:55:17\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp2k7baff5.rs:55:25\n \
    \  |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2k7baff5.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2k7baff5.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2k7baff5.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2k7baff5.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2k7baff5.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2k7baff5.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2k7baff5.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2k7baff5.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2k7baff5.rs:60:17\n   |\n60 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_count_index = -1;\n    let mut vowels_count_index2\
    \ = -1;\n    let mut vowels_count_index3 = -1;\n    let mut vowels_count_index4\
    \ = -1;\n    let mut vowels_count_index5 = -1;\n    let mut vowels_count_index6\
    \ = -1;\n    let mut vowels_count_index7 = -1;\n    let mut vowels_count_index8\
    \ = -1;\n    let mut vowels_count_index9 = -1;\n    let mut vowels_count_index10\
    \ = -1;\n    let mut vowels_count_index11 = -1;\n    let mut vowels_count_index12\
    \ = -1;\n    let mut vowels_count_index13 = -1;\n    let mut vowels_count_index14\
    \ = -1;\n    let mut vowels_count_index15 = -1;\n    let mut vowels_count_index16\
    \ = -1;\n    let mut vowels_count_index17 = -1;\n    let mut vowels_count_index18\
    \ = -1;\n    let mut vowels_count_index19 = -1;\n    let mut vowels_count_index20\
    \ = -1;\n    let mut vowels_count_index21 = -1;\n    let mut vowels_count_index22\
    \ = -1;\n    let mut vowels_count_index23 = -1;\n    let mut vowels_count_index24\
    \ = -1;\n    let mut vowels_count_index25 = -1;\n    let mut vowels_count_index26\
    \ = -1;\n    let mut vowels_count_index27 = -1;\n    let mut vowels_count_index28\
    \ = -1;\n    let mut vowels_count_index29 = -1;\n    let mut vowels_count_index30\
    \ = -1;\n    let mut vowels_count_index31 = -1;\n    let mut vowels_count_index32\
    \ = -1;\n    let mut vowels_count_index33 = -1;\n    let mut vowels_count_index34\
    \ = -1;\n    let mut vowels_count_index35 = -1;\n    let mut vowels_count_index36\
    \ = -1;\n    let mut vowels_count_index37 = -1;\n    let mut vowels_count_index38\
    \ = -1;\n    let mut vowels_count_index39 = -1;\n    let mut vowels_count_index40\
    \ = -1;\n    let mut vowels_count_index41 = -1;\n    let mut vowels_count_index42\
    \ = -1;\n    let mut vowels_count_index43 = -1;\n    let mut vowels_count_index44\
    \ = -1;\n    let mut vowels_count_index45 = -1;\n    let mu\n}\n\nfn main() {\n\
    \    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdijyc2w8.rs:63:11\n   |\n\
    63 |     let mu\n   |           ^ help: add `;` here\n64 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdijyc2w8.rs:68:17\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdijyc2w8.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdijyc2w8.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdijyc2w8.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdijyc2w8.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdijyc2w8.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdijyc2w8.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdijyc2w8.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdijyc2w8.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdijyc2w8.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1w45binp.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1w45binp.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1w45binp.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1w45binp.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1w45binp.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1w45binp.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1w45binp.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count_max = vec![0];\n    let mut vowels_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_min_max = vec![0];\n    let mut vowels_index_count_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_max = vec![0];\n  \
    \  let mut vowels_index_count_min_max_index_min = vec![0];\n    let mut vowels_index_count_min_max_index_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index = vec![0];\n\
    \    let mut vowels_index_count_min_max_index_min_max_index_max = vec![0];\n \
    \   let mut vowels_index_count_min_max_index_min_max_index_min = vec![0];\n  \
    \  let mut vowels_index_count_min_max_index_min_max_index_min_max = vec![0];\n\
    \    let mut vowels_index_count_min_max_index_min_max_index_min_max_index = vec![0];\n\
    \    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoama55u6.rs:42:88\n   |\n\
    42 |     let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_\n\
    \   |                                                                        \
    \                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoama55u6.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoama55u6.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoama55u6.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoama55u6.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoama55u6.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoama55u6.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoama55u6.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoama55u6.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoama55u6.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoama55u6.rs:51:25\n   |\n"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set.insert(vowel.to_lowercase());\n\
    \    });\n    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n\
    \    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let\
    \ mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set\
    \ = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n\
    \    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let\
    \ mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set\
    \ = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n\
    \    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let\
    \ mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set\
    \ = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n\
    \    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let\
    \ mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set\
    \ = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n\
    \    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let\
    \ mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set\
    \ = vowels_set.into_iter().collect::<Vec<_>>();\n    let mut vowels_set = vowels_set.into_iter().collect::<Vec<_>>();\n\
    \    let mut vowels_set = vowels_set.into_iter().collect::<Vec\n}\n\nfn main()\
    \ {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmp3d4xo8ao.rs:43:1\n   |\n42 |     let mut vowels_set\
    \ = vowels_set.into_iter().collect::<Vec\n   |                               \
    \                               - expected one of 9 possible tokens\n43 | }\n\
    \   | ^ unexpected token\n   |\nhelp: you might have meant to end the type parameters\
    \ here\n   |\n42 |     let mut vowels_set = vowels_set.into_iter().collect::<Vec>\n\
    \   |                                                              +\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp3d4xo8ao.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmp3d4xo8ao.rs:47:17\n   |\n47 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3d4xo8ao.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3d4xo8ao.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3d4xo8ao.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3d4xo8ao.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3d4xo8ao.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3d4xo8ao.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {r"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).map(|(_,\
    \ c)| c).collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&i| i);\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<\n}\n\nfn main() {\n\
    \    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `>`, a const expression, lifetime, or type, found\
    \ `}`\n  --> /tmp/tmpwetjh0se.rs:42:1\n   |\n41 |     let mut vowels_index = vowels_index.iter().cloned().collect::<\n\
    \   |                                                                   - expected\
    \ one of `>`, a const expression, lifetime, or type\n42 | }\n   | ^ unexpected\
    \ token\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmpwetjh0se.rs:17:26\n   |\n17 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwetjh0se.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwetjh0se.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwetjh0se.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwetjh0se.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwetjh0se.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwetjh0se.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwetjh0se.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwetjh0se.rs:49:25\n   |\n49 |     assert_eq!({left"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n\
    \    let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n \
    \   let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n  \
    \  let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n   \
    \ let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n    let\
    \ mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n    let mut\
    \ vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n    let mut vowels_iter\
    \ = vowels_iter.skip_while(|&x| !word.contains(x));\n    let mut vowels_iter =\
    \ vowels_iter.skip_while(|&x| !word.contains(x));\n    let mut vowels_iter = vowels_iter.skip_while(|&x|\
    \ !word.contains(x));\n    let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n\
    \    let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n \
    \   let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n  \
    \  let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n   \
    \ let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n    let\
    \ mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n    let mut\
    \ vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n    let mut vowels_iter\
    \ = vowels_iter.skip_while(|&x| !word.contains(x));\n    let mut vowels_iter =\
    \ vowels_iter.skip_while(|&x| !word.contains(x));\n    let mut vowels_iter = vowels_iter.skip_while(|&x|\
    \ !word.contains(x));\n    let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n\
    \    let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n \
    \   let mut vowels_iter = vowels_iter.skip_while(|&x| !word.contains(x));\n\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprwbz39y4.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprwbz39y4.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprwbz39y4.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprwbz39y4.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprwbz39y4.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprwbz39y4.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprwbz39y4.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprwbz39y4.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprwbz39y4.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprwbz39y4.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprwbz39y4.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid_iter = vowels_mid.iter();\n    let mut vowels_mid_end\
    \ = vowels_mid_iter.next();\n    let mut vowels_mid_start = vowels_mid_iter.next();\n\
    \    let mut vowels_mid_mid_iter = vowels_mid_mid.iter();\n    let mut vowels_mid_mid_end\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n    let mut\
    \ vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let mut vowels_mid_mid_start\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let\
    \ mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkpkzyqbo.rs:48:54\n   |\n\
    48 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_\n   |             \
    \                                         ^ help: add `;` here\n49 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `vowels_mid_mid` in this\
    \ scope\n  --> /tmp/tmpkpkzyqbo.rs:24:35\n   |\n24 |     let mut vowels_mid_mid_iter\
    \ = vowels_mid_mid.iter();\n   |                                   ^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `vowels_mid_end`\n\nerror[E0425]:\
    \ cannot find value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:27:39\n\
    \   |\n27 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:30:39\n\
    \   |\n30 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:33:39\n\
    \   |\n33 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:36:39\n\
    \   |\n36 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:39:39\n\
    \   |\n39 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `v"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.skip(1);\n    let mut\
    \ vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwwa0wrd1.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwwa0wrd1.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.skip(1);\n    let mut\
    \ vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwwa0wrd1.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwwa0wrd1.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index2\
    \ = vec![0];\n    let mut vowels_count_index3 = vec![0];\n    let mut vowels_count_index4\
    \ = vec![0];\n    let mut vowels_count_index5 = vec![0];\n    let mut vowels_count_index6\
    \ = vec![0];\n    let mut vowels_count_index7 = vec![0];\n    let mut vowels_count_index8\
    \ = vec![0];\n    let mut vowels_count_index9 = vec![0];\n    let mut vowels_count_index10\
    \ = vec![0];\n    let mut vowels_count_index11 = vec![0];\n    let mut vowels_count_index12\
    \ = vec![0];\n    let mut vowels_count_index13 = vec![0];\n    let mut vowels_count_index14\
    \ = vec![0];\n    let mut vowels_count_index15 = vec![0];\n    let mut vowels_count_index16\
    \ = vec![0];\n    let mut vowels_count_index17 = vec![0];\n    let mut vowels_count_index18\
    \ = vec![0];\n    let mut vowels_count_index19 = vec![0];\n    let mut vowels_count_index20\
    \ = vec![0];\n    let mut vowels_count_index21 = vec![0];\n    let mut vowels_count_index22\
    \ = vec![0];\n    let mut vowels_count_index23 = vec![0];\n    let mut vowels_count_index24\
    \ = vec![0];\n    let mut vowels_count_index25 = vec![0];\n    let mut vowels_count_index26\
    \ = vec![0];\n    let mut vowels_count_index27 = vec![0];\n    let mut vowels_count_index28\
    \ = vec![0];\n    let mut vowels_count_index29 = vec![0];\n    let mut vowels_count_index30\
    \ = vec![0];\n    let mut vowels_count_index31 = vec![0];\n    let mut vowels_count_index32\
    \ = vec![0];\n    let mut vowels_count_index33 = vec![0];\n    let mut vowels_count_index34\
    \ = vec![0];\n    let mut vowels_count_index35 = vec![0];\n    let mut vowels_count_index36\
    \ = vec![0];\n    let mut vowels_count_index37 = vec![0];\n    let mut vowels_count_index38\
    \ = vec![0];\n    let mut \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpdw6w9kc4.rs:57:1\n\
    \   |\n57 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpdw6w9kc4.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdw6w9kc4.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdw6w9kc4.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdw6w9kc4.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdw6w9kc4.rs:66:17\n   |\n66 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index2\
    \ = vec![0];\n    let mut vowels_count_index3 = vec![0];\n    let mut vowels_count_index4\
    \ = vec![0];\n    let mut vowels_count_index5 = vec![0];\n    let mut vowels_count_index6\
    \ = vec![0];\n    let mut vowels_count_index7 = vec![0];\n    let mut vowels_count_index8\
    \ = vec![0];\n    let mut vowels_count_index9 = vec![0];\n    let mut vowels_count_index10\
    \ = vec![0];\n    let mut vowels_count_index11 = vec![0];\n    let mut vowels_count_index12\
    \ = vec![0];\n    let mut vowels_count_index13 = vec![0];\n    let mut vowels_count_index14\
    \ = vec![0];\n    let mut vowels_count_index15 = vec![0];\n    let mut vowels_count_index16\
    \ = vec![0];\n    let mut vowels_count_index17 = vec![0];\n    let mut vowels_count_index18\
    \ = vec![0];\n    let mut vowels_count_index19 = vec![0];\n    let mut vowels_count_index20\
    \ = vec![0];\n    let mut vowels_count_index21 = vec![0];\n    let mut vowels_count_index22\
    \ = vec![0];\n    let mut vowels_count_index23 = vec![0];\n    let mut vowels_count_index24\
    \ = vec![0];\n    let mut vowels_count_index25 = vec![0];\n    let mut vowels_count_index26\
    \ = vec![0];\n    let mut vowels_count_index27 = vec![0];\n    let mut vowels_count_index28\
    \ = vec![0];\n    let mut vowels_count_index29 = vec![0];\n    let mut vowels_count_index30\
    \ = vec![0];\n    let mut vowels_count_index31 = vec![0];\n    let mut vowels_count_index32\
    \ = vec![0];\n    let mut vowels_count_index33 = vec![0];\n    let mut vowels_count_index34\
    \ = vec![0];\n    let mut vowels_count_index35 = vec![0];\n    let mut vowels_count_index36\
    \ = vec![0];\n    let mut vowels_count_index37 = vec![0];\n    let mut vowels_count_index38\
    \ = vec![0];\n    let mut \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpdw6w9kc4.rs:57:1\n\
    \   |\n57 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpdw6w9kc4.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdw6w9kc4.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdw6w9kc4.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdw6w9kc4.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdw6w9kc4.rs:66:17\n   |\n66 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf4udpi97.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.skip(1);\n    let mut\
    \ vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwwa0wrd1.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwwa0wrd1.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_euchygw.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_euchygw.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_euchygw.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_euchygw.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_euchygw.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_euchygw.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_euchygw.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.cloned();\n    let mut\
    \ vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq1y4v1d5.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq1y4v1d5.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.cloned();\n    let mut\
    \ vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq1y4v1d5.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq1y4v1d5.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpehzw2d64.rs:65:1\n  \
    \ |\n65 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpehzw2d64.rs:69:17\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:69:25\n \
    \  |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpehzw2d64.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpehzw2d64.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpehzw2d64.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpehzw2d64.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpehzw2d64.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpehzw2d64.rs:74:17\n   |\n74 |     assert"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcntchbey.rs:59:33\n   |\n\
    59 |     let mut vowels_set = HashSet\n   |                                 ^\
    \ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:21:26\n   |\n21\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:22:26\n   |\n22\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:23:26\n   |\n23\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:24:26\n   |\n24\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:25:26\n   |\n25\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared t"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut consonants = vec![\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n    let mut consonants_set = HashSet::new();\n\
    \    for consonant in consonants.iter() {\n        consonants_set.insert(consonant);\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).map(|(_,\
    \ c)| c).collect::<Vec<_>>();\n    let mut consonants_index = word.chars().enumerate().filter(|&(_,\
    \ c)| consonants_set.contains(c)).map(|(_, c)| c).collect::<Vec<_>>();\n    let\
    \ mut vowels_index_len = vowels_index.len();\n    let mut consonants_index_len\
    \ = consonants_index.len();\n    if vowels_index_len > consonants_index_len {\n\
    \        vowels_index_len = consonants_index_len;\n    }\n    let mut vowels_index_min\
    \ = vowels_index_len;\n    let mut consonants_index_min = consonants_index_len;\n\
    \    let mut vowels_index_max = vowels_index_len;\n    let mut consonants_index_max\
    \ = consonants_index_len;\n    let mut vowels_index_mid = vowels_index_len / 2;\n\
    \    let mut consonants_index_mid = consonants_index_len / 2;\n    let mut vowels_index_mid_len\
    \ = vowels_index_mid - 1;\n    let mut consonants_index_mid_len = consonants_index_mid\
    \ - 1;\n    while vowels_index_min > 0 || consonants_index_min > 0 {\n       \
    \ if vowels_index_min > consonants_index_min {\n            vowels_index_min =\
    \ 0;\n        }\n        if consonants_index_min > vowels_index_min {\n      \
    \      consonants_index_min = 0;\n        }\n        if vowels_index_min > consonants_index_min\
    \ {\n            vowels_index_min = 0;\n        }\n        if consonants_index_min\
    \ > vowels_index_min {\n            consonants_index_min = 0;\n        }\n\n}\n\
    \nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp452z0kvv.rs:72:3\n\
    \   |\n15 | fn get_closest_vowel(word: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n41 |     while vowels_index_min\
    \ > 0 || consonants_index_min > 0 {\n   |                                    \
    \                        - this delimiter might not be properly closed...\n...\n\
    55 | }\n   | - ...as it matches this but it has different indentation\n...\n72\
    \ | }\n   |   ^\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmp452z0kvv.rs:17:26\n   |\n17 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp452z0kvv.rs:22:30\n\
    \   |\n22 |     let mut consonants_set = HashSet::new();\n   |               \
    \               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp452z0kvv.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp452z0kvv.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp452z0kvv.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp452z0kvv.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp452z0kvv.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` i"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n    let mut\
    \ vowels_start = vowels.iter().rev();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpx6s4r9j8.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpx6s4r9j8.rs:66:17\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:66:25\n \
    \  |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx6s4r9j8.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx6s4r9j8.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx6s4r9j8.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx6s4r9j8.rs:71:17\n   |\n71 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid_iter = vowels_mid.iter();\n    let mut vowels_mid_end\
    \ = vowels_mid_iter.next();\n    let mut vowels_mid_start = vowels_mid_iter.next();\n\
    \    let mut vowels_mid_mid = vowels_mid_iter.next();\n    let mut vowels_mid_mid_iter\
    \ = vowels_mid_mid.iter();\n    let mut vowels_mid_mid_end = vowels_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let\
    \ mut vowels_mid_mid_mid_start = vowels_mid_mid_mid_iter.next();\n    let mut\
    \ vowels_mid_mid_mid_mid = vowels_mid_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_mid_end = vowels_mid_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_mid_mid_start = vowels_mid_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_mid_mid = vowels_mid_mid_mid_iter.next();\n    let\
    \ mut vowels_mid_mid_mid_mid_iter = vowels_mid_mid_mid_mid.iter();\n    let mut\
    \ vowels_mid_mid_mid_mid_end = vowels_mid_mid_mid_mid_iter.next();\n    let mut\
    \ vowels_mid_mid_mid_mid_start = vowels_mid_mid_mid_mid_iter.next();\n    let\
    \ mut vowels_mid_mid_mid_mid = vowels_mid_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_mid_end = vowels_mid_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_mid_mid_start = vowels_mid_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_mid_mid = vowels_mid_mid_mid_iter.next();\n    let\
    \ mut vowels_mid_mid_mid_mid_iter = vowels_mid_mid_mid_mid.iter();\n    let mut\
    \ vowels_mid_mid_mid_mid_end = vowels_mid_mid_mid_\n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4rvs5l26.rs:46:61\n   |\n\
    46 |     let mut vowels_mid_mid_mid_mid_end = vowels_mid_mid_mid_\n   |      \
    \                                                       ^ help: add `;` here\n\
    47 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `vowels_mid_mid_mid_`\
    \ in this scope\n  --> /tmp/tmp4rvs5l26.rs:46:42\n   |\n46 |     let mut vowels_mid_mid_mid_mid_end\
    \ = vowels_mid_mid_mid_\n   |                                          ^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `vowels_mid_mid_mid`\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4rvs5l26.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4rvs5l26.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4rvs5l26.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4rvs5l26.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4rvs5l26.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4rvs5l26.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4rvs5l26.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4rvs5l26.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]: "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_idx\
    \ = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_len = word.chars().filter(|c|\
    \ vowels.contains(&c)).count();\n    let mut vowels_idx = vec![0];\n    let mut\
    \ vowels_len = vec![0];\n    let mut vowels_len = word.chars().filter(|c| vowels.contains(&c)).count();\n\
    \    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let\
    \ mut vowels_len = word.chars().filter(|c| vowels.contains(&c)).count();\n   \
    \ let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let mut\
    \ vowels_len = word.chars().filter(|c| vowels.contains(&c)).count();\n    let\
    \ mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_len\
    \ = word.chars().filter(|c| vowels.contains(&c)).count();\n    let mut vowels_idx\
    \ = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_len = word.chars().filter(|c|\
    \ vowels.contains(&c)).count();\n    let mut vowels_idx = vec![0];\n    let mut\
    \ vowels_len = vec![0];\n    let mut vowels_len = word.chars().filter(|c| vowels.contains(&c)).count();\n\
    \    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let\
    \ mut vowels_len = word.chars().filter(|c| vowels.contains(&c)).count();\n   \
    \ let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let mut\
    \ vowels_len = word.chars().filter(|c| vowels.contains(&c)).count();\n    let\
    \ mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_len\
    \ = word.chars().filter(|c| vowels.contains(&c)).count();\n    let mut vowels_idx\
    \ = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_len = word.chars().filter(|c|\
    \ vowels.contains(&c)).count();\n    let mut vowels_idx = vec![0];\n    let mut\
    \ vowels_len = vec![0];\n    let mut vowels_len = word.chars().filter(|c\n}\n\n\
    fn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `:`, `@`, or `|`, found `)`\n  --> /tmp/tmpdehobl5u.rs:53:1\n\
    \   |\n52 |     let mut vowels_len = word.chars().filter(|c\n   |            \
    \                                    - expected one of `:`, `@`, or `|`\n53 |\
    \ }\n   | ^ unexpected token\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpdehobl5u.rs:52:45\n   |\n15 | fn get_closest_vowel(word: String) ->\
    \ String {\n   |                                              - closing delimiter\
    \ possibly meant for this\n...\n52 |     let mut vowels_len = word.chars().filter(|c\n\
    \   |                                             ^ unclosed delimiter\n53 | }\n\
    \   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpdehobl5u.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpdehobl5u.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdehobl5u.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdehobl5u.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdehobl5u.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdehobl5u.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdehobl5u.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdehobl5u.rs:60:25\n   |\n60 |     assert_eq!("
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut consonants = vec![\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n    let mut consonants_set = HashSet::new();\n\
    \    for consonant in consonants.iter() {\n        consonants_set.insert(consonant);\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).collect::<Vec<_>>();\n\
    \    let mut consonants_index = word.chars().enumerate().filter(|&(_, c)| consonants_set.contains(c)).collect::<Vec<_>>();\n\
    \    let mut vowels_index_iter = vowels_index.iter();\n    let mut consonants_index_iter\
    \ = consonants_index.iter();\n    let mut vowels_index_next = vowels_index_iter.next();\n\
    \    let mut consonants_index_next = consonants_index_iter.next();\n    let mut\
    \ vowels_index_prev = vowels_index_iter.prev();\n    let mut consonants_index_prev\
    \ = consonants_index_iter.prev();\n    let mut vowels_index_next = vowels_index_iter.next();\n\
    \    let mut consonants_index_next = consonants_index_iter.next();\n    let mut\
    \ vowels_index_prev = vowels_index_iter.prev();\n    let mut consonants_index_prev\
    \ = consonants_index_iter.prev();\n    let mut vowels_index_next = vowels_index_iter.next();\n\
    \    let mut consonants_index_next = consonants_index_iter.next();\n    let mut\
    \ vowels_index_prev = vowels_index_iter.prev();\n    let mut consonants_index_prev\
    \ = consonants_index_iter.prev();\n    let mut vowels_index_next = vowels_index_iter.next();\n\
    \    let mut consonants_index_next = consonants_index_iter.next();\n    let mut\
    \ vowels_index_prev = vowels_index_iter.prev();\n    let mut consonants_index_prev\
    \ = consonants_index_iter.prev();\n    let mut vowels_index_next = vowels_index_iter.next();\n\
    \    let mut consonants_index_next = consonants_index_iter.next();\n    let mut\
    \ vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpaae0im6y.rs:48:18\n   |\n\
    48 |     let mut vowel\n   |                  ^ help: add `;` here\n49 | }\n \
    \  | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmpaae0im6y.rs:17:26\n   |\n17 |     let mut vowels_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpaae0im6y.rs:22:30\n   |\n22 |     let mut consonants_set = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpaae0im6y.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaae0im6y.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaae0im6y.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpaae0im6y.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpaae0im6y.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpaae0im6y.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpaae0im6y.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in thi"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).map(|(_,\
    \ c)| c).collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&x| x.cmp(&x.next()));\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push(0);\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&x| x.cmp(&x.next()));\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.push(0);\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&x| x.cmp(&x.next()));\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.push(0);\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&x| x.cmp(&x.next()));\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.push(0);\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&x| x.cmp(&x.next()));\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.push(0);\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&x| x.cmp(&x.next()));\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.push(0);\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&x| x.\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp83igr981.rs:46:29\n\
    \   |\n15 | fn get_closest_vowel(word: String) -> String {\n   |             \
    \                                 - closing delimiter possibly meant for this\n\
    ...\n46 |     vowels_index.sort_by_key(|&x| x.\n   |                         \
    \    ^ unclosed delimiter\n47 | }\n   | ^ mismatched closing delimiter\n\nerror:\
    \ unexpected token: `)`\n  --> /tmp/tmp83igr981.rs:47:1\n   |\n47 | }\n   | ^\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp83igr981.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmp83igr981.rs:51:17\n   |\n51 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp83igr981.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp83igr981.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp83igr981.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp83igr981.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp83igr981.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp83igr981.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: can"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.clone\n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpahfa6uus.rs:45:1\n   |\n45 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpahfa6uus.rs:44:44\n   |\n15 | fn get_closest_vowel(word: String) ->\
    \ String {\n   |                                              - closing delimiter\
    \ possibly meant for this\n...\n44 |     let mut vowels_iter = vowels_iter.chain(vowels_iter.clone\n\
    \   |                                            ^ unclosed delimiter\n45 | }\n\
    \   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpahfa6uus.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpahfa6uus.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpahfa6uus.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpahfa6uus.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpahfa6uus.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpahfa6uus.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpahfa6uus.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpahfa6uus.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in thi"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf4udpi97.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n    let mut\
    \ vowels_start = vowels.iter().rev();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpb4xml55j.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpb4xml55j.rs:66:17\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpb4xml55j.rs:66:25\n \
    \  |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb4xml55j.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb4xml55j.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb4xml55j.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb4xml55j.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb4xml55j.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb4xml55j.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb4xml55j.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb4xml55j.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb4xml55j.rs:71:17\n   |\n71 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_set2 = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_set2.insert(vowel);\n    }\n    let mut vowels_set3 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set3.insert(vowel);\n    }\n\
    \    let mut vowels_set4 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set4.insert(vowel);\n    }\n    let mut vowels_set5 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set5.insert(vowel);\n    }\n\
    \    let mut vowels_set6 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set6.insert(vowel);\n    }\n    let mut vowels_set7 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set7.insert(vowel);\n    }\n\
    \    let mut vowels_set8 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set8.insert(vowel);\n    }\n    let mut vowels_set9 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set9.insert(vowel);\n    }\n\
    \    let mut vowels_set10 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set10.insert(vowel);\n    }\n    let mut vowels_set11 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set11.insert(vowel);\n    }\n\
    \    let mut vowels_set12 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set12.insert(vowel);\n    }\n    let mut vowels_set13 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set13.insert(vowel);\n    }\n\
    \    let mut vowels_set14 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set14.insert(vowel);\n    }\n    let mut vowels_set15 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set15.insert(vowel);\n    }\n\
    \    let mut vowels_set16 = HashSet::new();\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp8na17xzp.rs:17:26\n   |\n17 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:21:27\n\
    \   |\n21 |     let mut vowels_set2 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:25:27\n\
    \   |\n25 |     let mut vowels_set3 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:29:27\n\
    \   |\n29 |     let mut vowels_set4 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:33:27\n\
    \   |\n33 |     let mut vowels_set5 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:37:27\n\
    \   |\n37 |     let mut vowels_set6 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:41:27\n\
    \   |\n41 |     let mut vowels_set7 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider impor"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.cloned();\n    let mut\
    \ vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq1y4v1d5.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq1y4v1d5.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter.cloned());\n    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter.cloned());\n    let mut\
    \ vowels_iter = vowels_iter.chain(vowels_iter.clone\n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpahfa6uus.rs:45:1\n   |\n45 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpahfa6uus.rs:44:44\n   |\n15 | fn get_closest_vowel(word: String) ->\
    \ String {\n   |                                              - closing delimiter\
    \ possibly meant for this\n...\n44 |     let mut vowels_iter = vowels_iter.chain(vowels_iter.clone\n\
    \   |                                            ^ unclosed delimiter\n45 | }\n\
    \   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpahfa6uus.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpahfa6uus.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpahfa6uus.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpahfa6uus.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpahfa6uus.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpahfa6uus.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpahfa6uus.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpahfa6uus.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in thi"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort_by_key(|&x|\
    \ word.chars().position(|&y| x == y).unwrap_or(0));\n    vowels.iter().next().unwrap()\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphpl49keh.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphpl49keh.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphpl49keh.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphpl49keh.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphpl49keh.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphpl49keh.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphpl49keh.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphpl49keh.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphpl49keh.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphpl49keh.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphpl49keh.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found =\
    \ HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet::new();\n    let mut vowels_found\
    \ = HashSet::new();\n    let mut vowels_found = HashSet\n}\n\nfn main() {\n  \
    \  let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjounvtxy.rs:59:35\n   |\n\
    59 |     let mut vowels_found = HashSet\n   |                                \
    \   ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpjounvtxy.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpjounvtxy.rs:21:28\n   |\n21\
    \ |     let mut vowels_found = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpjounvtxy.rs:22:28\n   |\n22\
    \ |     let mut vowels_found = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpjounvtxy.rs:23:28\n   |\n23\
    \ |     let mut vowels_found = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpjounvtxy.rs:24:28\n   |\n24\
    \ |     let mut vowels_found = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpjounvtxy.rs:25:28\n   |\n25\
    \ |     let mut vowels_found = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to reso"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpehzw2d64.rs:65:1\n  \
    \ |\n65 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpehzw2d64.rs:69:17\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:69:25\n \
    \  |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpehzw2d64.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpehzw2d64.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpehzw2d64.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpehzw2d64.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpehzw2d64.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpehzw2d64.rs:74:17\n   |\n74 |     assert"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.by_ref();\n    let mut\
    \ vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mut vowels_iter = vowels_iter.by_ref();\n    let mut vowels_iter = vowels_iter.by_ref();\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuz2fgd_y.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpuz2fgd_y.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuz2fgd_y.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuz2fgd_y.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuz2fgd_y.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuz2fgd_y.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuz2fgd_y.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuz2fgd_y.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuz2fgd_y.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuz2fgd_y.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuz2fgd_y.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcntchbey.rs:59:33\n   |\n\
    59 |     let mut vowels_set = HashSet\n   |                                 ^\
    \ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:21:26\n   |\n21\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:22:26\n   |\n22\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:23:26\n   |\n23\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:24:26\n   |\n24\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:25:26\n   |\n25\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared t"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_euchygw.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_euchygw.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_euchygw.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_euchygw.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_euchygw.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_euchygw.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_euchygw.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = vowels.len();\n    let mut\
    \ vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_len\
    \ = vowels_len.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx =\
    \ vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_len = vowels_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut vowels_len = vowels_len.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ vowels_len = vowels_len.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_len =\
    \ vowels_len.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_len = vowels_len.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_len = vowels_len.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_len\
    \ = vowels_len.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx =\
    \ vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_len = vowels_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut vowels_len = vowels_len.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_idx = vowels_idx.\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpzinccbsd.rs:40:1\n   |\n40\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpzinccbsd.rs:39:37\n\
    \   |\n39 |     let mut vowels_idx = vowels_idx.\n   |                       \
    \              ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzinccbsd.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzinccbsd.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzinccbsd.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzinccbsd.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzinccbsd.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzinccbsd.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzinccbsd.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzinccbsd.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzinccbsd.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzinccbsd.rs:48:25\n   |\n48 |     assert_eq!({l"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_idx\
    \ = word.chars().enumerate().filter(|&(_, c)| vowels.contains(&c)).map(|(_, c)|\
    \ c).collect::<Vec<_>>();\n    vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx =\
    \ vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx =\
    \ vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ vowels_idx = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_idx =\
    \ vowels_idx.iter().cloned().collect::\n}\n\nfn main() {\n    let candidate =\
    \ get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `.`, `;`, `?`, `else`, or an operator, found\
    \ `::`\n  --> /tmp/tmp2x6otwgu.rs:38:60\n   |\n38 |     let mut vowels_idx = vowels_idx.iter().cloned().collect::\n\
    \   |                                                            ^^ expected one\
    \ of `(`, `.`, `;`, `?`, `else`, or an operator\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp2x6otwgu.rs:43:17\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp2x6otwgu.rs:43:25\n \
    \  |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2x6otwgu.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2x6otwgu.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2x6otwgu.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2x6otwgu.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2x6otwgu.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2x6otwgu.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2x6otwgu.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2x6otwgu.rs:47:25\n\
    \  "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1w45binp.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1w45binp.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1w45binp.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1w45binp.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1w45binp.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1w45binp.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1w45binp.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1w45binp.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1w45binp.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1w45binp.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1w45binp.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1w45binp.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1w45binp.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1w45binp.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1w45binp.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort_unstable();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8tvmx9p4.rs:56:35\n   |\n\
    56 |     let mut vowels_mid36 = vowels_\n   |                                \
    \   ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `vowels_` in this scope\n  --> /tmp/tmp8tvmx9p4.rs:56:28\n   |\n\
    56 |     let mut vowels_mid36 = vowels_\n   |                            ^^^^^^^\
    \ help: a local variable with a similar name exists: `vowels`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8tvmx9p4.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8tvmx9p4.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8tvmx9p4.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8tvmx9p4.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8tvmx9p4.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8tvmx9p4.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8tvmx9p4.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8tvmx9p4.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8tvmx9p4.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |          "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|v| vowels_set.insert(v));\n \
    \   let mut vowels_count = vowels.len();\n    let mut vowels_index = vowels.len();\n\
    \    let mut vowels_index2 = vowels.len();\n    let mut vowels_index3 = vowels.len();\n\
    \    let mut vowels_index4 = vowels.len();\n    let mut vowels_index5 = vowels.len();\n\
    \    let mut vowels_index6 = vowels.len();\n    let mut vowels_index7 = vowels.len();\n\
    \    let mut vowels_index8 = vowels.len();\n    let mut vowels_index9 = vowels.len();\n\
    \    let mut vowels_index10 = vowels.len();\n    let mut vowels_index11 = vowels.len();\n\
    \    let mut vowels_index12 = vowels.len();\n    let mut vowels_index13 = vowels.len();\n\
    \    let mut vowels_index14 = vowels.len();\n    let mut vowels_index15 = vowels.len();\n\
    \    let mut vowels_index16 = vowels.len();\n    let mut vowels_index17 = vowels.len();\n\
    \    let mut vowels_index18 = vowels.len();\n    let mut vowels_index19 = vowels.len();\n\
    \    let mut vowels_index20 = vowels.len();\n    let mut vowels_index21 = vowels.len();\n\
    \    let mut vowels_index22 = vowels.len();\n    let mut vowels_index23 = vowels.len();\n\
    \    let mut vowels_index24 = vowels.len();\n    let mut vowels_index25 = vowels.len();\n\
    \    let mut vowels_index26 = vowels.len();\n    let mut vowels_index27 = vowels.len();\n\
    \    let mut vowels_index28 = vowels.len();\n    let mut vowels_index29 = vowels.len();\n\
    \    let mut vowels_index30 = vowels.len();\n    let mut vowels_index31 = vowels.len();\n\
    \    let mut vowels_index32 = vowels.len();\n    let mut vowels_index33 = vowels.len();\n\
    \    let mut vowels_index34 = vowels.len();\n    let mut vowels_index35 = vowels.len();\n\
    \    let mut vowels_index36 = vowels.len();\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpkf36hgo2.rs:17:26\n   |\n17 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkf36hgo2.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkf36hgo2.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkf36hgo2.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkf36hgo2.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkf36hgo2.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkf36hgo2.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkf36hgo2.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkf36hgo2.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkf36hgo2.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkf36hgo2.rs:64:25\n   |\n64 |  "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_idx\
    \ = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_, c)|\
    \ c).collect::<Vec<_>>();\n    vowels_idx[0] = vowels_idx[0].to_ascii_lowercase();\n\
    \    vowels_idx[1] = vowels_idx[1].to_ascii_lowercase();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    vowels_idx[0] = vowels_idx[0].to_ascii_lowercase();\n\
    \    vowels_idx[1] = vowels_idx[1].to_ascii_lowercase();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    vowels_idx[0] = vowels_idx[0].to_ascii_lowercase();\n\
    \    vowels_idx[1] = vowels_idx[1].to_ascii_lowercase();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    vowels_idx[0] = vowels_idx[0].to_ascii_lowercase();\n\
    \    vowels_idx[1] = vowels_idx[1].to_ascii_lowercase();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    vowels_idx[0] = vowels_idx[0].to_ascii_lowercase();\n\
    \    vowels_idx[1] = vowels_idx[1].to_ascii_lowercase();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    vowels_idx[0] = vowels_idx[0].to_ascii_lowercase();\n\
    \    vowels_idx[1] = vowels_idx[1].to_ascii_lowercase();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    vowels_idx[0] = vowels_idx[0].to_ascii_lowercase();\n\
    \    vowels_idx[1] = vowels_idx[1].to_ascii_lowercase();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    vowels_idx[0] = vowels_idx[0].to_ascii_lowercase();\n\
    \    vowels_idx[1] = vowels_idx[1].to_ascii_lowercase();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    vowels_idx[0] = vowels_idx[0].to_ascii_lowercase();\n\
    \    vowels_idx[1] = vowels_idx[1].to_ascii_lowercase();\n    let mut vowels_idx\
    \ = vowels_idx.iter().cloned().collect::<Vec<_>>();\n    vowels_idx[0] = \n}\n\
    \nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo7yu9tcj.rs:46:1\n\
    \   |\n46 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo7yu9tcj.rs:50:17\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo7yu9tcj.rs:50:25\n \
    \  |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo7yu9tcj.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo7yu9tcj.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo7yu9tcj.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo7yu9tcj.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo7yu9tcj.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo7yu9tcj.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo7yu9tcj.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo7yu9tcj.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo7yu9tcj.rs:55:17\n   |\n55 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf4udpi97.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf4udpi97.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.cloned();\n    let mut\
    \ vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mut vowels_iter = vowels_iter.cloned();\n    let mut vowels_iter = vowels_iter.cloned();\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq1y4v1d5.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq1y4v1d5.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq1y4v1d5.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq1y4v1d5.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_set2 = HashSet::new();\n    for vowel in vowels {\n\
    \        vowels_set2.insert(vowel);\n    }\n    let mut vowels_set3 = HashSet::new();\n\
    \    for vowel in vowels {\n        vowels_set3.insert(vowel);\n    }\n    let\
    \ mut vowels_set4 = HashSet::new();\n    for vowel in vowels {\n        vowels_set4.insert(vowel);\n\
    \    }\n    let mut vowels_set5 = HashSet::new();\n    for vowel in vowels {\n\
    \        vowels_set5.insert(vowel);\n    }\n    let mut vowels_set6 = HashSet::new();\n\
    \    for vowel in vowels {\n        vowels_set6.insert(vowel);\n    }\n    let\
    \ mut vowels_set7 = HashSet::new();\n    for vowel in vowels {\n        vowels_set7.insert(vowel);\n\
    \    }\n    let mut vowels_set8 = HashSet::new();\n    for vowel in vowels {\n\
    \        vowels_set8.insert(vowel);\n    }\n    let mut vowels_set9 = HashSet::new();\n\
    \    for vowel in vowels {\n        vowels_set9.insert(vowel);\n    }\n    let\
    \ mut vowels_set10 = HashSet::new();\n    for vowel in vowels {\n        vowels_set10.insert(vowel);\n\
    \    }\n    let mut vowels_set11 = HashSet::new();\n    for vowel in vowels {\n\
    \        vowels_set11.insert(vowel);\n    }\n    let mut vowels_set12 = HashSet::new();\n\
    \    for vowel in vowels {\n        vowels_set12.insert(vowel);\n    }\n    let\
    \ mut vowels_set13 = HashSet::new();\n    for vowel in vowels {\n        vowels_set13.insert(vowel);\n\
    \    }\n    let mut vowels_set14 = HashSet::new();\n    for vowel in vowels {\n\
    \        vowels_set14.insert(vowel);\n    }\n    let mut vowels_set15 = HashSet::new();\n\
    \    for vowel in vowels {\n        vowels_set15.insert(vowel);\n    }\n    let\
    \ mut vowels_set16 = HashSet::new();\n    for vowel in vowels {\n        vowels_set16.insert(vowel);\n\
    \    }\n    let mut vowels_set17 = HashSet::new\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9376fob_.rs:81:40\n   |\n\
    81 |     let mut vowels_set17 = HashSet::new\n   |                           \
    \             ^ help: add `;` here\n82 | }\n   | - unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp9376fob_.rs:81:28\n\
    \   |\n81 |     let mut vowels_set17 = HashSet::new\n   |                    \
    \        ^^^^^^^ use of undeclared type `HashSet`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp9376fob_.rs:17:26\n   |\n17\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp9376fob_.rs:21:27\n   |\n21\
    \ |     let mut vowels_set2 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp9376fob_.rs:25:27\n   |\n25\
    \ |     let mut vowels_set3 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp9376fob_.rs:29:27\n   |\n29\
    \ |     let mut vowels_set4 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp9376fob_.rs:33:27\n   |\n33\
    \ |     let mut vowels_set5 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp9376fob_.rs:37:27\n   |\n37\
    \ | "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&(_, c)| c.to_lowercase());\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| c.to_lowercase());\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&(_, c)| c.to_lowercase());\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| c.to_lowercase());\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&(_, c)| c.to_lowercase());\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| c.to_lowercase());\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&(_, c)| c.to_lowercase());\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| c.to_lowercase());\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&(_, c)| c.to_lowercase());\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| c.to_lowercase());\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&(_, c)\n}\n\nfn main() {\n    let candidate =\
    \ get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpmb3ekp46.rs:43:29\n\
    \   |\n15 | fn get_closest_vowel(word: String) -> String {\n   |             \
    \                                 - closing delimiter possibly meant for this\n\
    ...\n43 |     vowels_index.sort_by_key(|&(_, c)\n   |                        \
    \     ^ unclosed delimiter\n44 | }\n   | ^ mismatched closing delimiter\n\nerror:\
    \ expected one of `:` or `|`, found `)`\n  --> /tmp/tmpmb3ekp46.rs:44:1\n   |\n\
    43 |     vowels_index.sort_by_key(|&(_, c)\n   |                             \
    \         - expected one of `:` or `|`\n44 | }\n   | ^ unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpmb3ekp46.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpmb3ekp46.rs:48:17\n   |\n48 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmb3ekp46.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmb3ekp46.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmb3ekp46.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmb3ekp46.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmb3ekp46.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this s"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.peekable();\n    let\
    \ mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgxqp52mv.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgxqp52mv.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgxqp52mv.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgxqp52mv.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgxqp52mv.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgxqp52mv.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgxqp52mv.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgxqp52mv.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgxqp52mv.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgxqp52mv.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgxqp52mv.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_count = HashMap::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_count.insert(vowel, 0);\n    }\n    let mut vowels_count_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_count_set.insert(vowel);\n\
    \    }\n    let mut vowels_count_set = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_count_set.insert(vowel);\n    }\n    let mut vowels_count_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_count_set.insert(vowel);\n\
    \    }\n    let mut vowels_count_set = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_count_set.insert(vowel);\n    }\n    let mut vowels_count_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_count_set.insert(vowel);\n\
    \    }\n    let mut vowels_count_set = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_count_set.insert(vowel);\n    }\n    let mut vowels_count_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_count_set.insert(vowel);\n\
    \    }\n    let mut vowels_count_set = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_count_set.insert(vowel);\n    }\n    let mut vowels_count_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_count_set.insert(vowel);\n\
    \    }\n    let mut vowels_count_set = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_count_set.insert(vowel);\n    }\n    let mut vowels_count_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_count_set.insert(vowel);\n\
    \    }\n    let mut vowels_count_set = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_count_set.insert(vowel);\n    }\n    let mut vowels_count_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_count_set.insert(vowel);\n\
    \    }\n    let mut vowels_count_set = HashSet::new();\n    for vowel in vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmp5glo58sa.rs:79:1\n   |\n\
    79 | }\n   | ^ expected `{`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmp5glo58sa.rs:17:26\n   |\n17 |     let mut vowels_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n \
    \ --> /tmp/tmp5glo58sa.rs:21:28\n   |\n21 |     let mut vowels_count = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmp5glo58sa.rs:25:32\n   |\n25 |     let mut vowels_count_set = HashSet::new();\n\
    \   |                                ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmp5glo58sa.rs:29:32\n   |\n29 |     let mut vowels_count_set = HashSet::new();\n\
    \   |                                ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmp5glo58sa.rs:33:32\n   |\n33 |     let mut vowels_count_set = HashSet::new();\n\
    \   |                                ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmp5glo58sa.rs:37:32\n   |\n37 |     let mut vowels_count_set = HashSet::new();\n\
    \   |                                ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmp5glo58sa.rs:41:32\n   "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.skip(1);\n    let mut\
    \ vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwwa0wrd1.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwwa0wrd1.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid_iter = vowels_mid.iter();\n    let mut vowels_mid_end\
    \ = vowels_mid_iter.next();\n    let mut vowels_mid_start = vowels_mid_iter.next();\n\
    \    let mut vowels_mid_mid_iter = vowels_mid_mid.iter();\n    let mut vowels_mid_mid_end\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n    let mut\
    \ vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let mut vowels_mid_mid_start\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let\
    \ mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkpkzyqbo.rs:48:54\n   |\n\
    48 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_\n   |             \
    \                                         ^ help: add `;` here\n49 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `vowels_mid_mid` in this\
    \ scope\n  --> /tmp/tmpkpkzyqbo.rs:24:35\n   |\n24 |     let mut vowels_mid_mid_iter\
    \ = vowels_mid_mid.iter();\n   |                                   ^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `vowels_mid_end`\n\nerror[E0425]:\
    \ cannot find value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:27:39\n\
    \   |\n27 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:30:39\n\
    \   |\n30 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:33:39\n\
    \   |\n33 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:36:39\n\
    \   |\n36 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:39:39\n\
    \   |\n39 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `v"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_count = vowels.len();\n    let mut vowels_index = 0;\n\
    \    let mut vowels_index_count = 0;\n    let mut vowels_index_count_prev = 0;\n\
    \    let mut vowels_index_count_next = 0;\n    let mut vowels_index_count_next2\
    \ = 0;\n    let mut vowels_index_count_next3 = 0;\n    let mut vowels_index_count_next4\
    \ = 0;\n    let mut vowels_index_count_next5 = 0;\n    let mut vowels_index_count_next6\
    \ = 0;\n    let mut vowels_index_count_next7 = 0;\n    let mut vowels_index_count_next8\
    \ = 0;\n    let mut vowels_index_count_next9 = 0;\n    let mut vowels_index_count_next10\
    \ = 0;\n    let mut vowels_index_count_next11 = 0;\n    let mut vowels_index_count_next12\
    \ = 0;\n    let mut vowels_index_count_next13 = 0;\n    let mut vowels_index_count_next14\
    \ = 0;\n    let mut vowels_index_count_next15 = 0;\n    let mut vowels_index_count_next16\
    \ = 0;\n    let mut vowels_index_count_next17 = 0;\n    let mut vowels_index_count_next18\
    \ = 0;\n    let mut vowels_index_count_next19 = 0;\n    let mut vowels_index_count_next20\
    \ = 0;\n    let mut vowels_index_count_next21 = 0;\n    let mut vowels_index_count_next22\
    \ = 0;\n    let mut vowels_index_count_next23 = 0;\n    let mut vowels_index_count_next24\
    \ = 0;\n    let mut vowels_index_count_next25 = 0;\n    let mut vowels_index_count_next26\
    \ = 0;\n    let mut vowels_index_count_next27 = 0;\n    let mut vowels_index_count_next28\
    \ = 0;\n    let mut vowels_index_count_next29 = 0;\n    let mut vowels_index_count_next30\
    \ = 0;\n    let mut vowels_index_count_next31 = 0;\n    let mut vowels_index_count_next32\
    \ = 0;\n    let mut vowels_index_count_next33 = 0;\n    let mut vowels_index_count_next34\
    \ = 0;\n    let mut vowels_index_count_next35 = 0;\n    let mut vowels_index_count_next36\
    \ = 0;\n    let mut vowels_index_count_next37 = 0;\n    let mut vowels_index_count_next38\
    \ = 0;\n    let mut vowels_index_count_next39 = 0;\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpavp8sbxf.rs:65:1\n\
    \   |\n65 | }\n   | ^ expected identifier\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpavp8sbxf.rs:17:26\n   |\n17\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpavp8sbxf.rs:69:17\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpavp8sbxf.rs:69:25\n \
    \  |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpavp8sbxf.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpavp8sbxf.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpavp8sbxf.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpavp8sbxf.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpavp8sbxf.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpavp8sbxf.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpavp8sbxf.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_set2 = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_set2.insert(vowel);\n    }\n    let mut vowels_set3 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set3.insert(vowel);\n    }\n\
    \    let mut vowels_set4 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set4.insert(vowel);\n    }\n    let mut vowels_set5 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set5.insert(vowel);\n    }\n\
    \    let mut vowels_set6 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set6.insert(vowel);\n    }\n    let mut vowels_set7 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set7.insert(vowel);\n    }\n\
    \    let mut vowels_set8 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set8.insert(vowel);\n    }\n    let mut vowels_set9 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set9.insert(vowel);\n    }\n\
    \    let mut vowels_set10 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set10.insert(vowel);\n    }\n    let mut vowels_set11 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set11.insert(vowel);\n    }\n\
    \    let mut vowels_set12 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set12.insert(vowel);\n    }\n    let mut vowels_set13 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set13.insert(vowel);\n    }\n\
    \    let mut vowels_set14 = HashSet::new();\n    for vowel in vowels.iter() {\n\
    \        vowels_set14.insert(vowel);\n    }\n    let mut vowels_set15 = HashSet::new();\n\
    \    for vowel in vowels.iter() {\n        vowels_set15.insert(vowel);\n    }\n\
    \    let mut vowels_set16 = HashSet::new();\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp8na17xzp.rs:17:26\n   |\n17 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:21:27\n\
    \   |\n21 |     let mut vowels_set2 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:25:27\n\
    \   |\n25 |     let mut vowels_set3 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:29:27\n\
    \   |\n29 |     let mut vowels_set4 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:33:27\n\
    \   |\n33 |     let mut vowels_set5 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:37:27\n\
    \   |\n37 |     let mut vowels_set6 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp8na17xzp.rs:41:27\n\
    \   |\n41 |     let mut vowels_set7 = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider impor"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_idx\
    \ = word.chars().enumerate().filter(|&(_, c)| vowels.contains(&c.to_lowercase())).count();\n\
    \    let mut vowels_idx_end = word.chars().enumerate().filter(|&(_, c)| vowels.contains(&c.to_lowercase())).count();\n\
    \    vowels_idx_end += 1;\n    \n    if vowels_idx > vowels_idx_end {\n      \
    \  vowels_idx = vowels_idx_end;\n    }\n    \n    let mut vowels_idx = vowels_idx;\n\
    \    let mut vowels_idx_end = vowels_idx;\n    \n    while vowels_idx < vowels_idx_end\
    \ {\n        let mut vowel = String::new();\n        let mut vowel_idx = vowels_idx;\n\
    \        let mut vowel_idx_end = vowels_idx_end;\n        \n        while vowel_idx\
    \ < vowel_idx_end {\n            let mut vowel_char = word.chars().nth(vowel_idx).unwrap();\n\
    \            vowel.push(vowel_char);\n            vowel_idx += 1;\n        }\n\
    \        \n        if vowel.contains(&vowel.chars().nth(vowel_idx).unwrap().to_lowercase())\
    \ {\n            return vowel;\n        }\n        \n        vowels_idx += 1;\n\
    \        vowels_idx_end += 1;\n    }\n    \n    String::from(\"\")\n}\n\nfn main()\
    \ {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpw2sx2fsp.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw2sx2fsp.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw2sx2fsp.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw2sx2fsp.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw2sx2fsp.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw2sx2fsp.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw2sx2fsp.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw2sx2fsp.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw2sx2fsp.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw2sx2fsp.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw2sx2fsp.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid_iter = vowels_mid.iter();\n    let mut vowels_mid_end\
    \ = vowels_mid_iter.next();\n    let mut vowels_mid_start = vowels_mid_iter.next();\n\
    \    let mut vowels_mid_mid_iter = vowels_mid_mid.iter();\n    let mut vowels_mid_mid_end\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n    let mut\
    \ vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let mut vowels_mid_mid_start\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let\
    \ mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkpkzyqbo.rs:48:54\n   |\n\
    48 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_\n   |             \
    \                                         ^ help: add `;` here\n49 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `vowels_mid_mid` in this\
    \ scope\n  --> /tmp/tmpkpkzyqbo.rs:24:35\n   |\n24 |     let mut vowels_mid_mid_iter\
    \ = vowels_mid_mid.iter();\n   |                                   ^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `vowels_mid_end`\n\nerror[E0425]:\
    \ cannot find value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:27:39\n\
    \   |\n27 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:30:39\n\
    \   |\n30 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:33:39\n\
    \   |\n33 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:36:39\n\
    \   |\n36 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:39:39\n\
    \   |\n39 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `v"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf4udpi97.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf4udpi97.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid_iter = vowels_mid.iter();\n    let mut vowels_mid_end\
    \ = vowels_mid_iter.next();\n    let mut vowels_mid_start = vowels_mid_iter.next();\n\
    \    let mut vowels_mid_mid_iter = vowels_mid_mid.iter();\n    let mut vowels_mid_mid_end\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n    let mut\
    \ vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let mut vowels_mid_mid_start\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let\
    \ mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkpkzyqbo.rs:48:54\n   |\n\
    48 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_\n   |             \
    \                                         ^ help: add `;` here\n49 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `vowels_mid_mid` in this\
    \ scope\n  --> /tmp/tmpkpkzyqbo.rs:24:35\n   |\n24 |     let mut vowels_mid_mid_iter\
    \ = vowels_mid_mid.iter();\n   |                                   ^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `vowels_mid_end`\n\nerror[E0425]:\
    \ cannot find value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:27:39\n\
    \   |\n27 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:30:39\n\
    \   |\n30 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:33:39\n\
    \   |\n33 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:36:39\n\
    \   |\n36 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:39:39\n\
    \   |\n39 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `v"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n    let mut\
    \ vowels_start = vowels.iter().rev();\n    let mut vowels_iter = word.chars().filter_map(|c|\
    \ {\n        if vowels_iter.next().unwrap().is_uppercase() {\n            Some(vowels_iter.next().unwrap())\n\
    \        } else {\n            None\n        }\n    });\n    let mut vowels_end\
    \ = word.chars().filter_map(|c| {\n        if vowels_end.next().unwrap().is_uppercase()\
    \ {\n            Some(vowels_end.next().unwrap())\n        } else {\n        \
    \    None\n        }\n    });\n    let mut vowels_start = word.chars().filter_map(|c|\
    \ {\n        if vowels_start.next().unwrap().is_uppercase() {\n            Some(vowels_start.next().unwrap())\n\
    \        } else {\n            None\n        }\n    });\n    vowels_iter\n   \
    \     .zip(vowels_end)\n        .zip(vowels_start)\n        .filter(|&(vowel_start,\
    \ vowel_end)| {\n            vowel_start == vowel_end\n        })\n        .next()\n\
    \        .unwrap()\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdzyx5mxy.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdzyx5mxy.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdzyx5mxy.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdzyx5mxy.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdzyx5mxy.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdzyx5mxy.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdzyx5mxy.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdzyx5mxy.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdzyx5mxy.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdzyx5mxy.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdzyx5mxy.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|v| vowels_set.insert(v));\n \
    \   let mut vowels_count = vowels.len();\n    let mut vowel_found = false;\n \
    \   let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_found_distance = -1;\n\
    \    let mut vowel_found_index = -1;\n    let mut vowel_\n}\n\nfn main() {\n \
    \   let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb6_plk5h.rs:70:19\n   |\n\
    70 |     let mut vowel_\n   |                   ^ help: add `;` here\n71 | }\n\
    \   | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmpb6_plk5h.rs:17:26\n   |\n17 |     let mut vowels_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb6_plk5h.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb6_plk5h.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb6_plk5h.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb6_plk5h.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb6_plk5h.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb6_plk5h.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb6_plk5h.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb6_plk5h.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb6_plk5h.rs:79:17\n  \
    \ |\n79 |     assert_eq"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set.insert(vowel);\n\
    \    });\n    let mut vowels_count = vowels.len();\n    let mut vowels_index =\
    \ 0;\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| {\n\
    \        vowels_set.contains(c.to_lowercase())\n    }).map(|(_, c)| {\n      \
    \  vowels_index += 1;\n        vowels_index\n    }).min().unwrap();\n    let mut\
    \ vowels_index = vowels_index - 1;\n    let mut vowels_index = vowels_index -\
    \ 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut vowels_index =\
    \ vowels_index - 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut\
    \ vowels_index = vowels_index - 1;\n    let mut vowels_index = vowels_index -\
    \ 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut vowels_index =\
    \ vowels_index - 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut\
    \ vowels_index = vowels_index - 1;\n    let mut vowels_index = vowels_index -\
    \ 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut vowels_index =\
    \ vowels_index - 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut\
    \ vowels_index = vowels_index - 1;\n    let mut vowels_index = vowels_index -\
    \ 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut vowels_index =\
    \ vowels_index - 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut\
    \ vowels_index = vowels_index - 1;\n    let mut vowels_index = vowels_index -\
    \ 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut vowels_index =\
    \ vowels_index - 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut\
    \ vowels_index = vowels_index - 1;\n    let mut vowels_index = vowels_index -\
    \ 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut vowels_index =\
    \ vowels_index - 1;\n    let mut vowels_index = vowels_index - 1;\n    let mut\
    \ vowels_index = vowels_index - 1;\n    let mut vowels_index = vowels_index -\
    \ \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp4fh4p_2a.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected expression\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp4fh4p_2a.rs:17:26\n   |\n17\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp4fh4p_2a.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4fh4p_2a.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4fh4p_2a.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4fh4p_2a.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4fh4p_2a.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4fh4p_2a.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4fh4p_2a.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4fh4p_2a.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4fh4p_2a.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.skip(1);\n    let mut\
    \ vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwwa0wrd1.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwwa0wrd1.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new\n}\n\nfn main() {\n    let candidate =\
    \ get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzf8kn3fp.rs:59:38\n   |\n\
    59 |     let mut vowels_set = HashSet::new\n   |                             \
    \         ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpzf8kn3fp.rs:59:26\n\
    \   |\n59 |     let mut vowels_set = HashSet::new\n   |                      \
    \    ^^^^^^^ use of undeclared type `HashSet`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpzf8kn3fp.rs:17:26\n   |\n17\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpzf8kn3fp.rs:21:26\n   |\n21\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpzf8kn3fp.rs:22:26\n   |\n22\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpzf8kn3fp.rs:23:26\n   |\n23\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpzf8kn3fp.rs:24:26\n   |\n24\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpzf8kn3fp.rs:25:26\n   |\n25\
    \ |     let mut vowe"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set.insert(vowel);\n\
    \    });\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)|\
    \ vowels_set.contains(c)).map(|(_, c)| c).collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&x|\
    \ x.to_ascii_lowercase());\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push((word.len() - 1, word.len() - 1));\n    vowels_index.sort_by_key(|&x|\
    \ x.0);\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push((word.len() - 1, word.len() - 1));\n    vowels_index.sort_by_key(|&x|\
    \ x.1);\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push((word.len() - 1, word.len() - 1));\n    vowels_index.sort_by_key(|&x|\
    \ x.2);\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push((word.len() - 1, word.len() - 1));\n    vowels_index.sort_by_key(|&x|\
    \ x.3);\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push((word.len() - 1, word.len() - 1));\n    vowels_index.sort_by_key(|&x|\
    \ x.4);\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push((word.len() - 1, word.len() - 1));\n    vowels_index.sort_by_key(|&x|\
    \ x.5);\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push((word.len() - 1, word.len() - 1));\n    vowels_index.sort_by_key(|&x|\
    \ x.6);\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push((word.len() - 1, word.len() - 1));\n    vowels_index.sort_by_key(|&\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp9hk6_uo3.rs:46:29\n\
    \   |\n15 | fn get_closest_vowel(word: String) -> String {\n   |             \
    \                                 - closing delimiter possibly meant for this\n\
    ...\n46 |     vowels_index.sort_by_key(|&\n   |                             ^\
    \ unclosed delimiter\n47 | }\n   | ^ mismatched closing delimiter\n\nerror: expected\
    \ parameter name, found `)`\n  --> /tmp/tmp9hk6_uo3.rs:47:1\n   |\n47 | }\n  \
    \ | ^ expected parameter name\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmp9hk6_uo3.rs:17:26\n   |\n17 |     let mut vowels_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9hk6_uo3.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9hk6_uo3.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9hk6_uo3.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9hk6_uo3.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9hk6_uo3.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9hk6_uo3.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9hk6_uo3.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).next();\n\
    \    let mut vowels_index = vowels_index.unwrap();\n    let mut vowels_index =\
    \ vowels_index.1;\n    let mut vowels_index = vowels_index.chars().enumerate().filter(|&(_,\
    \ c)| vowels_set.contains(c)).next();\n    let mut vowels_index = vowels_index.unwrap();\n\
    \    let mut vowels_index = vowels_index.1;\n    let mut vowels_index = vowels_index.chars().enumerate().filter(|&(_,\
    \ c)| vowels_set.contains(c)).next();\n    let mut vowels_index = vowels_index.unwrap();\n\
    \    let mut vowels_index = vowels_index.1;\n    let mut vowels_index = vowels_index.chars().enumerate().filter(|&(_,\
    \ c)| vowels_set.contains(c)).next();\n    let mut vowels_index = vowels_index.unwrap();\n\
    \    let mut vowels_index = vowels_index.1;\n    let mut vowels_index = vowels_index.chars().enumerate().filter(|&(_,\
    \ c)| vowels_set.contains(c)).next();\n    let mut vowels_index = vowels_index.unwrap();\n\
    \    let mut vowels_index = vowels_index.1;\n    let mut vowels_index = vowels_index.chars().enumerate().filter(|&(_,\
    \ c)| vowels_set.contains(c)).next();\n    let mut vowels_index = vowels_index.unwrap();\n\
    \    let mut vowels_index = vowels_index.1;\n    let mut vowels_index = vowels_index.chars().enumerate().filter(|&(_,\
    \ c)| vowels_set.contains(c)).next();\n    let mut vowels_index = vowels_index.unwrap();\n\
    \    let mut vowels_index = vowels_index.1;\n    let mut vowels_index = vowels_index.chars().enumerate().filter(|&(_,\
    \ c)| vowels_set.contains(c)).next();\n    let mut vowels_index = vowels_index.unwrap();\n\
    \    let mut vowels_index = vowels_index.1;\n    let mut vowels_index = vowels_index.chars().enumerate().filter(|&(_,\
    \ c)| vowels_set.contains(c)).next();\n    let mut vowels_index = vowels_index.unwrap();\n\
    \    let mut vowels_index = vowels_index.1;\n    let mut vowels_index = vowels_index.\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpgp8do4r4.rs:49:1\n   |\n49\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpgp8do4r4.rs:48:41\n\
    \   |\n48 |     let mut vowels_index = vowels_index.\n   |                   \
    \                      ^ help: add `;` here\n49 | }\n   | - unexpected token\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpgp8do4r4.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpgp8do4r4.rs:53:17\n   |\n53 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgp8do4r4.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgp8do4r4.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgp8do4r4.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgp8do4r4.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgp8do4r4.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgp8do4r4.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgp8do4r4.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcntchbey.rs:59:33\n   |\n\
    59 |     let mut vowels_set = HashSet\n   |                                 ^\
    \ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:21:26\n   |\n21\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:22:26\n   |\n22\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:23:26\n   |\n23\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:24:26\n   |\n24\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:25:26\n   |\n25\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared t"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.peekable();\n    let\
    \ mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mut vowels_iter =\
    \ vowels_iter.peekable();\n    let mut vowels_iter = vowels_iter.peekable();\n\
    \    let mut vowels_iter = vowels_iter.peekable();\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgxqp52mv.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgxqp52mv.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgxqp52mv.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgxqp52mv.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgxqp52mv.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgxqp52mv.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgxqp52mv.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgxqp52mv.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgxqp52mv.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgxqp52mv.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgxqp52mv.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n    let mut\
    \ vowels_start = vowels.iter().rev();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_end.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_end.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpx6s4r9j8.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpx6s4r9j8.rs:66:17\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:66:25\n \
    \  |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx6s4r9j8.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx6s4r9j8.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx6s4r9j8.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx6s4r9j8.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx6s4r9j8.rs:71:17\n   |\n71 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_\n}\n\n\
    fn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `:`, `=`, or `>`, found `}`\n  --> /tmp/tmp9qs93itw.rs:40:1\n\
    \   |\n39 |     let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_\n\
    \   |                                                                        -\
    \ expected one of `,`, `:`, `=`, or `>`\n40 | }\n   | ^ unexpected token\n   |\n\
    help: you might have meant to end the type parameters here\n   |\n39 |     let\
    \ mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>\n   |     \
    \                                                                   +\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9qs93itw.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9qs93itw.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9qs93itw.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9qs93itw.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9qs93itw.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9qs93itw.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9qs93itw.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9qs93itw.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `l"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index\
    \ = vec![0];\n\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk9ou6ye2.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk9ou6ye2.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk9ou6ye2.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk9ou6ye2.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk9ou6ye2.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk9ou6ye2.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk9ou6ye2.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk9ou6ye2.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk9ou6ye2.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk9ou6ye2.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk9ou6ye2.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n    let mut\
    \ vowels_start = vowels.iter().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().enumerate().rev();\n    let mut vowels_iter = word.chars().enumerate().rev();\n\
    \    let mut vowels_end = word.chars().enumerate().rev();\n    let mut vowels_start\
    \ = word.chars().\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp3ah6xkew.rs:53:1\n   |\n53\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp3ah6xkew.rs:52:41\n\
    \   |\n52 |     let mut vowels_start = word.chars().\n   |                   \
    \                      ^ help: add `;` here\n53 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3ah6xkew.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3ah6xkew.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3ah6xkew.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3ah6xkew.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3ah6xkew.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3ah6xkew.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3ah6xkew.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3ah6xkew.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3ah6xkew.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3ah6xkew.rs:61:25\n   |\n61 |     asser"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoqumzamb.rs:62:11\n   |\n\
    62 |     let mu\n   |           ^ help: add `;` here\n63 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpoqumzamb.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoqumzamb.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoqumzamb.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoqumzamb.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoqumzamb.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoqumzamb.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoqumzamb.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoqumzamb.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoqumzamb.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoqumzamb.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set.insert(vowel.to_lowercase());\n\
    \    });\n    let mut vowels_set = HashSet::new();\n    word.chars().for_each(|c|\
    \ {\n        vowels_set.insert(c.to_lowercase());\n    });\n    vowels_set.iter().for_each(|vowel|\
    \ {\n        if word.chars().any(|c| vowels_set.contains(c.to_lowercase())) {\n\
    \            return vowel.to_lowercase();\n        }\n    });\n    \"\".to_string()\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprtkpmkue.rs:17:26\n   |\n17 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmprtkpmkue.rs:21:26\n\
    \   |\n21 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmprtkpmkue.rs:35:17\n   |\n35 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprtkpmkue.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprtkpmkue.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprtkpmkue.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprtkpmkue.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprtkpmkue.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprtkpmkue.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprtkpmkue.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ n"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf4udpi97.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n    let mut\
    \ vowels_start = vowels.iter().rev();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_start.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_start.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_start.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_start.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_start.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_start.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_start.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_start.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_start.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_start.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_start.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = vowels_start.clone();\n    let mut vowels_iter = vowels_start.clone();\n\
    \    let mut vowels_end = vowels_end.clone();\n    let mut vowels_start = vowels_start.clone();\n\
    \    let mut vowels_iter = vowels_start.clone();\n    let mut vowels_end = vowels_end.clone();\n\
    \    let mut vowels_start = \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmps15weewx.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmps15weewx.rs:66:17\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmps15weewx.rs:66:25\n \
    \  |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps15weewx.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps15weewx.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps15weewx.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps15weewx.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps15weewx.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps15weewx.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps15weewx.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps15weewx.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps15weewx.rs:71:17\n   |\n71 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n    let mut vowels_index\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count = vec![0,\
    \ 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n    let mut vowels_count\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_index = vec![0, 1, 2, 3, 4];\n  \
    \  let mut vowels_count = vec![0, 1, 2, 3, 4];\n\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_euchygw.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_euchygw.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_euchygw.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_euchygw.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_euchygw.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_euchygw.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_euchygw.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_euchygw.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|v| vowels_set.insert(v));\n \
    \   let mut vowels_count = vowels_set.len();\n    let mut vowels_index = vowels_set.len();\n\
    \    let mut vowels_index2 = 0;\n    let mut vowels_index3 = 0;\n    let mut vowels_index4\
    \ = 0;\n    let mut vowels_index5 = 0;\n    let mut vowels_index6 = 0;\n    let\
    \ mut vowels_index7 = 0;\n    let mut vowels_index8 = 0;\n    let mut vowels_index9\
    \ = 0;\n    let mut vowels_index10 = 0;\n    let mut vowels_index11 = 0;\n   \
    \ let mut vowels_index12 = 0;\n    let mut vowels_index13 = 0;\n    let mut vowels_index14\
    \ = 0;\n    let mut vowels_index15 = 0;\n    let mut vowels_index16 = 0;\n   \
    \ let mut vowels_index17 = 0;\n    let mut vowels_index18 = 0;\n    let mut vowels_index19\
    \ = 0;\n    let mut vowels_index20 = 0;\n    let mut vowels_index21 = 0;\n   \
    \ let mut vowels_index22 = 0;\n    let mut vowels_index23 = 0;\n    let mut vowels_index24\
    \ = 0;\n    let mut vowels_index25 = 0;\n    let mut vowels_index26 = 0;\n   \
    \ let mut vowels_index27 = 0;\n    let mut vowels_index28 = 0;\n    let mut vowels_index29\
    \ = 0;\n    let mut vowels_index30 = 0;\n    let mut vowels_index31 = 0;\n   \
    \ let mut vowels_index32 = 0;\n    let mut vowels_index33 = 0;\n    let mut vowels_index34\
    \ = 0;\n    let mut vowels_index35 = 0;\n    let mut vowels_index36 = 0;\n   \
    \ let mut vowels_index37 = 0;\n    let mut vowels_index38 = 0;\n    let mut vowels_index39\
    \ = 0;\n    let mut vowels_index40 = 0;\n    let mut vowels_index41 = 0;\n   \
    \ let mut vowels_index42 = 0;\n    let mut vowels_index43 = 0;\n    let mut vowels_index44\
    \ = 0;\n    let mut vowels_index45 = 0;\n    let mut vowels_index46 = 0;\n   \
    \ let mut vowels_index47 = 0;\n    let mut vowels_index48 = 0;\n    let mut vowels_index49\
    \ = 0;\n    let mut vowels_index50 = 0;\n    let mut vowel\n}\n\nfn main() {\n\
    \    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgvfvp1vl.rs:70:18\n   |\n\
    70 |     let mut vowel\n   |                  ^ help: add `;` here\n71 | }\n \
    \  | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmpgvfvp1vl.rs:17:26\n   |\n17 |     let mut vowels_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgvfvp1vl.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgvfvp1vl.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgvfvp1vl.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgvfvp1vl.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgvfvp1vl.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgvfvp1vl.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgvfvp1vl.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgvfvp1vl.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgvfvp1vl.rs:79:17\n  \
    \ |\n79 |     assert_eq!("
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpbw0tvz0k.rs:63:1\n  \
    \ |\n63 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpbw0tvz0k.rs:67:17\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:67:25\n \
    \  |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbw0tvz0k.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbw0tvz0k.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbw0tvz0k.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbw0tvz0k.rs:72:17\n   |\n72 |     assert"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpbw0tvz0k.rs:63:1\n  \
    \ |\n63 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpbw0tvz0k.rs:67:17\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:67:25\n \
    \  |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbw0tvz0k.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbw0tvz0k.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbw0tvz0k.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbw0tvz0k.rs:72:17\n   |\n72 |     assert"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).map(|(_,\
    \ c)| c).collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&i| {\n        let\
    \ mut j = i;\n        while j > 0 {\n            if vowels_index[j - 1] == i {\n\
    \                return i;\n            }\n            j -= 1;\n        }\n  \
    \      i;\n    });\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&i| {\n        let mut j = i;\n        while j\
    \ > 0 {\n            if vowels_index[j - 1] == i {\n                return i;\n\
    \            }\n            j -= 1;\n        }\n        i;\n    });\n    if vowels_index.len()\
    \ == 0 {\n        String::from(\"\")\n    } else {\n        let mut vowel = vowels_index[0];\n\
    \        let mut j = vowels_index.len();\n        while j > 0 {\n            if\
    \ vowels_index[j - 1] == vowel {\n                vowel = vowels_index[j - 1];\n\
    \                break;\n            }\n            j -= 1;\n        }\n     \
    \   String::from(vowel)\n    }\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp1_ou67rr.rs:17:26\n   |\n17 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1_ou67rr.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1_ou67rr.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1_ou67rr.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1_ou67rr.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1_ou67rr.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1_ou67rr.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1_ou67rr.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1_ou67rr.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1_ou67rr.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1_ou67rr.rs:65:25\n   |\n65 |  "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpbw0tvz0k.rs:63:1\n  \
    \ |\n63 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpbw0tvz0k.rs:67:17\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:67:25\n \
    \  |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbw0tvz0k.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbw0tvz0k.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbw0tvz0k.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbw0tvz0k.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbw0tvz0k.rs:72:17\n   |\n72 |     assert"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_count = vowels.len();\n    let mut vowels_index = 0;\n\
    \    let mut vowels_index = word.chars().enumerate().find(|&(_, c)| {\n      \
    \  if vowels_set.contains(c) {\n            vowels_count -= 1;\n            vowels_index\
    \ += 1;\n            true\n        } else {\n            false\n        }\n  \
    \  });\n    if vowels_index == word.chars().len() - 1 {\n        return String::from(\"\
    \");\n    }\n    let mut vowels_index = word.chars().enumerate().find(|&(_, c)|\
    \ {\n        if vowels_set.contains(c) {\n            vowels_count -= 1;\n   \
    \         true\n        } else {\n            false\n        }\n    });\n    if\
    \ vowels_index == word.chars().len() - 1 {\n        return String::from(\"\");\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().find(|&(_, c)| {\n\
    \        if vowels_set.contains(c) {\n            vowels_count -= 1;\n       \
    \     true\n        } else {\n            false\n        }\n    });\n    if vowels_index\
    \ == word.chars().len() - 1 {\n        return String::from(\"\");\n    }\n   \
    \ let mut vowels_index = word.chars().enumerate().find(|&(_, c)| {\n        if\
    \ vowels_set.contains(c) {\n            vowels_count -= 1;\n            true\n\
    \        } else {\n            false\n        }\n    });\n    if vowels_index\
    \ == word.chars().len() - 1 {\n        return String::from(\"\");\n    }\n   \
    \ let mut vowels_index = word.chars().enumerate().find(|&(_, c)| {\n        if\
    \ vowels_set.contains(c) {\n            vowels_count -= 1;\n            true\n\
    \        } else {\n            false\n        }\n    });\n    if vowels_index\
    \ == word.chars().len() - 1 {\n        return String::from(\"\");\n    }\n   \
    \ let mut vowels_index = word.chars().enumerate().find(|&(_, c)| {\n        if\
    \ vowels_set.contains(c) {\n            vowels_count -= 1;\n            true\n\
    \        } else {\n            false\n        }\n    });\n    if vowels_index\
    \ == word.chars().len() - 1 {\n        return String::from(\"\");\n    }\n   \
    \ let mut vowels_index = word.chars().enumerate().find(|&(_, c)| {\n        if\
    \ vowels_set.contains(c) {\n            vowels_count -= 1;\n            true\n\
    \        } else {\n            false\n\n}\n\nfn main() {\n    let candidate =\
    \ get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp4yklbtv9.rs:114:3\n\
    \    |\n15  | fn get_closest_vowel(word: String) -> String {\n    |          \
    \                                    - unclosed delimiter\n...\n90  |     let\
    \ mut vowels_index = word.chars().enumerate().find(|&(_, c)| {\n    |        \
    \                                                 -          - unclosed delimiter\n\
    \    |                                                         |\n    |      \
    \                                                   unclosed delimiter\n...\n\
    94  |         } else {\n    |                - this delimiter might not be properly\
    \ closed...\n...\n97  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n114 | }\n    |   ^\n\nerror: expected one of `.`, `;`, `?`,\
    \ `else`, or an operator, found `}`\n   --> /tmp/tmp4yklbtv9.rs:114:3\n    |\n\
    114 | }\n    |   ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp4yklbtv9.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0599]: no method named\
    \ `len` found for struct `Chars` in the current scope\n  --> /tmp/tmp4yklbtv9.rs:32:37\n\
    \   |\n32 |     if vowels_index == word.chars().len() - 1 {\n   |            \
    \                         ^^^ method not found in `Chars<'_>`\n\nerror[E0599]:\
    \ no method named `len` found for struct `Chars` in the current scope\n  --> /tmp/tmp4yklbtv9.rs:43:37\n\
    \   |\n43 |     if vowels_index == word.chars().len() - 1 {\n   |            \
    \                         ^^^ method not found in `Chars<'_>`\n\nerror[E0599]:\
    \ no method named `len` found for struct `Chars` in the current scope\n  --> /tmp/tmp4yklbtv9.rs:54:37\n\
    \   |\n54 |     if vowels_index == word.chars().len() - 1 {\n   |            \
    \                         ^^^ method not found in `Chars<'_>`\n\nerror[E0599]:\
    \ no method named `len` found for struct `Chars` in the current scope\n  --> /"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|vowel| {\n        vowels_set.insert(vowel);\n\
    \    });\n    let mut vowels_set = HashSet::new();\n    word.chars().for_each(|c|\
    \ {\n        if vowels_set.contains(&c.to_ascii_lowercase()) {\n            vowels_set.insert(c.to_ascii_lowercase());\n\
    \        }\n    });\n    let mut vowels_set = HashSet::new();\n    word.chars().for_each(|c|\
    \ {\n        if vowels_set.contains(&c.to_ascii_uppercase()) {\n            vowels_set.insert(c.to_ascii_uppercase());\n\
    \        }\n    });\n    vowels.iter().find(|vowel| {\n        vowels_set.contains(&vowel)\n\
    \    }).cloned()\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp7g_4ddv0.rs:17:26\n   |\n17 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp7g_4ddv0.rs:21:26\n\
    \   |\n21 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp7g_4ddv0.rs:27:26\n   |\n27\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp7g_4ddv0.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp7g_4ddv0.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7g_4ddv0.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7g_4ddv0.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7g_4ddv0.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7g_4ddv0.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in th"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n    let mut\
    \ vowels_start = vowels.iter().rev();\n    let mut vowels_mid = vowels.iter().rev();\n\
    \    let mut vowels_mid2 = vowels.iter().rev();\n    let mut vowels_mid3 = vowels.iter().rev();\n\
    \    let mut vowels_mid4 = vowels.iter().rev();\n    let mut vowels_mid5 = vowels.iter().rev();\n\
    \    let mut vowels_mid6 = vowels.iter().rev();\n    let mut vowels_mid7 = vowels.iter().rev();\n\
    \    let mut vowels_mid8 = vowels.iter().rev();\n    let mut vowels_mid9 = vowels.iter().rev();\n\
    \    let mut vowels_mid10 = vowels.iter().rev();\n    let mut vowels_mid11 = vowels.iter().rev();\n\
    \    let mut vowels_mid12 = vowels.iter().rev();\n    let mut vowels_mid13 = vowels.iter().rev();\n\
    \    let mut vowels_mid14 = vowels.iter().rev();\n    let mut vowels_mid15 = vowels.iter().rev();\n\
    \    let mut vowels_mid16 = vowels.iter().rev();\n    let mut vowels_mid17 = vowels.iter().rev();\n\
    \    let mut vowels_mid18 = vowels.iter().rev();\n    let mut vowels_mid19 = vowels.iter().rev();\n\
    \    let mut vowels_mid20 = vowels.iter().rev();\n    let mut vowels_mid21 = vowels.iter().rev();\n\
    \    let mut vowels_mid22 = vowels.iter().rev();\n    let mut vowels_mid23 = vowels.iter().rev();\n\
    \    let mut vowels_mid24 = vowels.iter().rev();\n    let mut vowels_mid25 = vowels.iter().rev();\n\
    \    let mut vowels_mid26 = vowels.iter().rev();\n    let mut vowels_mid27 = vowels.iter().rev();\n\
    \    let mut vowels_mid28 = vowels.iter().rev();\n    let mut vowels_mid29 = vowels.iter().rev();\n\
    \    let mut vowels_mid30 = vowels.iter().rev();\n    let mut vowels_mid31 = vowels.iter().rev();\n\
    \    let mut vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx4_vfju7.rs:51:18\n   |\n\
    51 |     let mut vowel\n   |                  ^ help: add `;` here\n52 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx4_vfju7.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx4_vfju7.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx4_vfju7.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx4_vfju7.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx4_vfju7.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx4_vfju7.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx4_vfju7.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx4_vfju7.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx4_vfju7.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx4_vfju7.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf4udpi97.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf4udpi97.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf4udpi97.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf4udpi97.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).next();\n\
    \    let mut vowels_index = vowels_index.unwrap();\n    let mut vowels_index =\
    \ vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_index.0;\n    let mut vowels_index = vowels_index.1;\n    let mut vowels_index\
    \ = vowels_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4aiw0kua.rs:61:35\n   |\n\
    61 |     let mut vowels_index = vowels_\n   |                                \
    \   ^ help: add `;` here\n62 | }\n   | - unexpected token\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp4aiw0kua.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find\
    \ value `vowels_` in this scope\n  --> /tmp/tmp4aiw0kua.rs:61:28\n   |\n61 | \
    \    let mut vowels_index = vowels_\n   |                            ^^^^^^^ help:\
    \ a local variable with a similar name exists: `vowels`\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4aiw0kua.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4aiw0kua.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4aiw0kua.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4aiw0kua.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4aiw0kua.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4aiw0kua.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4aiw0kua.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.skip(1);\n    let mut\
    \ vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwwa0wrd1.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwwa0wrd1.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_count_index = 0;\n    let mut vowels_count_index2\
    \ = 0;\n    let mut vowels_count_index3 = 0;\n    let mut vowels_count_index4\
    \ = 0;\n    let mut vowels_count_index5 = 0;\n    let mut vowels_count_index6\
    \ = 0;\n    let mut vowels_count_index7 = 0;\n    let mut vowels_count_index8\
    \ = 0;\n    let mut vowels_count_index9 = 0;\n    let mut vowels_count_index10\
    \ = 0;\n    let mut vowels_count_index11 = 0;\n    let mut vowels_count_index12\
    \ = 0;\n    let mut vowels_count_index13 = 0;\n    let mut vowels_count_index14\
    \ = 0;\n    let mut vowels_count_index15 = 0;\n    let mut vowels_count_index16\
    \ = 0;\n    let mut vowels_count_index17 = 0;\n    let mut vowels_count_index18\
    \ = 0;\n    let mut vowels_count_index19 = 0;\n    let mut vowels_count_index20\
    \ = 0;\n    let mut vowels_count_index21 = 0;\n    let mut vowels_count_index22\
    \ = 0;\n    let mut vowels_count_index23 = 0;\n    let mut vowels_count_index24\
    \ = 0;\n    let mut vowels_count_index25 = 0;\n    let mut vowels_count_index26\
    \ = 0;\n    let mut vowels_count_index27 = 0;\n    let mut vowels_count_index28\
    \ = 0;\n    let mut vowels_count_index29 = 0;\n    let mut vowels_count_index30\
    \ = 0;\n    let mut vowels_count_index31 = 0;\n    let mut vowels_count_index32\
    \ = 0;\n    let mut vowels_count_index33 = 0;\n    let mut vowels_count_index34\
    \ = 0;\n    let mut vowels_count_index35 = 0;\n    let mut vowels_count_index36\
    \ = 0;\n    let mut vowels_count_index37 = 0;\n    let mut vowels_count_index38\
    \ = 0;\n    let mut vowels_count_index39 = 0;\n    let mut vowels_count_index40\
    \ = 0;\n    let mut vowels_count_index41 = 0;\n    let mut vowels_count_index42\
    \ = 0;\n    let mut vowels_count_index43 = 0;\n    let mut vowels_count_index44\
    \ = 0;\n    let mut vowels_count_index45 = 0;\n    let mut vowels_count_index46\
    \ = 0;\n    let mut vowels_count_index47 = 0;\n    let mut vowels_count_index48\
    \ = 0;\n    let mut vowels_count_index49 = 0;\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk3odcg2h.rs:71:17\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk3odcg2h.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk3odcg2h.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk3odcg2h.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk3odcg2h.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk3odcg2h.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk3odcg2h.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk3odcg2h.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk3odcg2h.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk3odcg2h.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk3odcg2h.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_count_index = vec![0];\n    let mut vowels_count_index2\
    \ = vec![0];\n    let mut vowels_count_index3 = vec![0];\n    let mut vowels_count_index4\
    \ = vec![0];\n    let mut vowels_count_index5 = vec![0];\n    let mut vowels_count_index6\
    \ = vec![0];\n    let mut vowels_count_index7 = vec![0];\n    let mut vowels_count_index8\
    \ = vec![0];\n    let mut vowels_count_index9 = vec![0];\n    let mut vowels_count_index10\
    \ = vec![0];\n    let mut vowels_count_index11 = vec![0];\n    let mut vowels_count_index12\
    \ = vec![0];\n    let mut vowels_count_index13 = vec![0];\n    let mut vowels_count_index14\
    \ = vec![0];\n    let mut vowels_count_index15 = vec![0];\n    let mut vowels_count_index16\
    \ = vec![0];\n    let mut vowels_count_index17 = vec![0];\n    let mut vowels_count_index18\
    \ = vec![0];\n    let mut vowels_count_index19 = vec![0];\n    let mut vowels_count_index20\
    \ = vec![0];\n    let mut vowels_count_index21 = vec![0];\n    let mut vowels_count_index22\
    \ = vec![0];\n    let mut vowels_count_index23 = vec![0];\n    let mut vowels_count_index24\
    \ = vec![0];\n    let mut vowels_count_index25 = vec![0];\n    let mut vowels_count_index26\
    \ = vec![0];\n    let mut vowels_count_index27 = vec![0];\n    let mut vowels_count_index28\
    \ = vec![0];\n    let mut vowels_count_index29 = vec![0];\n    let mut vowels_count_index30\
    \ = vec![0];\n    let mut vowels_count_index31 = vec![0];\n    let mut vowels_count_index32\
    \ = vec![0];\n    let mut vowels_count_index33 = vec![0];\n    let mut vowels_count_index34\
    \ = vec![0];\n    let mut vowels_count_index35 = vec![0];\n    let mut vowels_count_index36\
    \ = vec![0];\n    let mut vowels_count_index37 = vec![0];\n    let mut vowels_count_index38\
    \ = vec![0];\n    let mut \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpdw6w9kc4.rs:57:1\n\
    \   |\n57 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpdw6w9kc4.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdw6w9kc4.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdw6w9kc4.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdw6w9kc4.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdw6w9kc4.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdw6w9kc4.rs:66:17\n   |\n66 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid_iter = vowels_mid.iter();\n    let mut vowels_mid_end\
    \ = vowels_mid_iter.next();\n    let mut vowels_mid_start = vowels_mid_iter.next();\n\
    \    let mut vowels_mid_mid_iter = vowels_mid_mid.iter();\n    let mut vowels_mid_mid_end\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n    let mut\
    \ vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let mut vowels_mid_mid_start\
    \ = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n    let\
    \ mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_mid.iter();\n    let mut vowels_mid_mid_mid_end = vowels_mid_mid_mid_iter.next();\n\
    \    let mut vowels_mid_mid_start = vowels_mid_mid_iter.next();\n    let mut vowels_mid_mid_mid_iter\
    \ = vowels_mid_mid_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkpkzyqbo.rs:48:54\n   |\n\
    48 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_\n   |             \
    \                                         ^ help: add `;` here\n49 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `vowels_mid_mid` in this\
    \ scope\n  --> /tmp/tmpkpkzyqbo.rs:24:35\n   |\n24 |     let mut vowels_mid_mid_iter\
    \ = vowels_mid_mid.iter();\n   |                                   ^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `vowels_mid_end`\n\nerror[E0425]:\
    \ cannot find value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:27:39\n\
    \   |\n27 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:30:39\n\
    \   |\n30 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:33:39\n\
    \   |\n33 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:36:39\n\
    \   |\n36 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `vowels_mid_mid_end`\n\nerror[E0425]: cannot find\
    \ value `vowels_mid_mid_mid` in this scope\n  --> /tmp/tmpkpkzyqbo.rs:39:39\n\
    \   |\n39 |     let mut vowels_mid_mid_mid_iter = vowels_mid_mid_mid.iter();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `v"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoqumzamb.rs:62:11\n   |\n\
    62 |     let mu\n   |           ^ help: add `;` here\n63 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpoqumzamb.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoqumzamb.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoqumzamb.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoqumzamb.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoqumzamb.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoqumzamb.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoqumzamb.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoqumzamb.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoqumzamb.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoqumzamb.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_count\
    \ = vec![0];\n    let \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpehzw2d64.rs:65:1\n  \
    \ |\n65 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpehzw2d64.rs:69:17\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:69:25\n \
    \  |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpehzw2d64.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpehzw2d64.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpehzw2d64.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpehzw2d64.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpehzw2d64.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpehzw2d64.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpehzw2d64.rs:74:17\n   |\n74 |     assert"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n    let mut\
    \ vowels_start = vowels.iter().rev();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpb4xml55j.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpb4xml55j.rs:66:17\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpb4xml55j.rs:66:25\n \
    \  |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb4xml55j.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb4xml55j.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb4xml55j.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb4xml55j.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb4xml55j.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb4xml55j.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb4xml55j.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb4xml55j.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb4xml55j.rs:71:17\n   |\n71 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcntchbey.rs:59:33\n   |\n\
    59 |     let mut vowels_set = HashSet\n   |                                 ^\
    \ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:21:26\n   |\n21\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:22:26\n   |\n22\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:23:26\n   |\n23\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:24:26\n   |\n24\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:25:26\n   |\n25\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared t"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels.iter() {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcntchbey.rs:59:33\n   |\n\
    59 |     let mut vowels_set = HashSet\n   |                                 ^\
    \ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:21:26\n   |\n21\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:22:26\n   |\n22\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:23:26\n   |\n23\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:24:26\n   |\n24\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpcntchbey.rs:25:26\n   |\n25\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared t"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_idx\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len = vec![0, 1, 2, 3, 4];\n    let\
    \ mut vowels_len = word.len();\n    let mut vowels_idx = word.len() - 1;\n   \
    \ let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len() -\
    \ 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.len() - 1;\n    let mut vowels_idx = word.len()\
    \ - 1;\n    let mut vowels_idx = word.\n}\n\nfn main() {\n    let candidate =\
    \ get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpsudzc6w0.rs:62:1\n   |\n62\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpsudzc6w0.rs:61:31\n\
    \   |\n61 |     let mut vowels_idx = word.\n   |                             \
    \  ^ help: add `;` here\n62 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsudzc6w0.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsudzc6w0.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsudzc6w0.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsudzc6w0.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsudzc6w0.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsudzc6w0.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsudzc6w0.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsudzc6w0.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsudzc6w0.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsudzc6w0.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_idx\
    \ = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_, c)|\
    \ c).collect::<Vec<_>>();\n    let mut vowels_idx_len = vowels_idx.len();\n  \
    \  let mut vowels_idx_min = vowels_idx_len;\n    let mut vowels_idx_max = vowels_idx_len;\n\
    \    let mut vowels_idx_min_idx = vowels_idx_len;\n    let mut vowels_idx_max_idx\
    \ = vowels_idx_len;\n    let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx\
    \ = 0;\n    let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx =\
    \ 0;\n    let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx = 0;\n\
    \    let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx = 0;\n  \
    \  let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx = 0;\n    let\
    \ mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx = 0;\n    let mut\
    \ vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx = 0;\n    let mut vowels_idx_min_idx\
    \ = 0;\n    let mut vowels_idx_max_idx = 0;\n    let mut vowels_idx_min_idx =\
    \ 0;\n    let mut vowels_idx_max_idx = 0;\n    let mut vowels_idx_min_idx = 0;\n\
    \    let mut vowels_idx_max_idx = 0;\n    let mut vowels_idx_min_idx = 0;\n  \
    \  let mut vowels_idx_max_idx = 0;\n    let mut vowels_idx_min_idx = 0;\n    let\
    \ mut vowels_idx_max_idx = 0;\n    let mut vowels_idx_min_idx = 0;\n    let mut\
    \ vowels_idx_max_idx = 0;\n    let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx\
    \ = 0;\n    let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx =\
    \ 0;\n    let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx = 0;\n\
    \    let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx = 0;\n  \
    \  let mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx = 0;\n    let\
    \ mut vowels_idx_min_idx = 0;\n    let mut vowels_idx_max_idx = 0;\n    let mut\
    \ vowels_idx_min_idx = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjzuvu0iu.rs:62:11\n   |\n\
    62 |     let mu\n   |           ^ help: add `;` here\n63 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjzuvu0iu.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjzuvu0iu.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjzuvu0iu.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjzuvu0iu.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjzuvu0iu.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjzuvu0iu.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjzuvu0iu.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjzuvu0iu.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjzuvu0iu.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjzuvu0iu.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n    let mut\
    \ vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprubduh2e.rs:56:20\n   |\n\
    56 |     let mut vowels_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprubduh2e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprubduh2e.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprubduh2e.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprubduh2e.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprubduh2e.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).next();\n\
    \    let mut vowels_index2 = word.chars().enumerate().filter(|&(_, c)| !vowels_set.contains(c)).next();\n\
    \    let mut vowels_index3 = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).next();\n\
    \    if vowels_index3.is_none() {\n        return String::from(\"\");\n    }\n\
    \    if vowels_index2.is_none() {\n        return String::from(\"\");\n    }\n\
    \    if vowels_index.is_none() {\n        return String::from(\"\");\n    }\n\
    \    if vowels_index.unwrap().unwrap() - vowels_index2.unwrap().unwrap() < vowels_index3.unwrap().unwrap()\
    \ - vowels_index.unwrap().unwrap() {\n        return String::from(\"\");\n   \
    \ }\n    let mut vowels_index4 = word.chars().enumerate().filter(|&(_, c)| !vowels_set.contains(c)).next();\n\
    \    if vowels_index4.is_none() {\n        return String::from(\"\");\n    }\n\
    \    if vowels_index3.unwrap().unwrap() - vowels_index4.unwrap().unwrap() < vowels_index2.unwrap().unwrap()\
    \ - vowels_index.unwrap().unwrap() {\n        return String::from(\"\");\n   \
    \ }\n    let mut vowels_index5 = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).next();\n\
    \    if vowels_index5.is_none() {\n        return String::from(\"\");\n    }\n\
    \    if vowels_index4.unwrap().unwrap() - vowels_index5.unwrap().unwrap() < vowels_index3.unwrap().unwrap()\
    \ - vowels_index.unwrap().unwrap() {\n        return String::from(\"\");\n   \
    \ }\n    let mut vowels_index6 = word.chars().enumerate().filter(|&(_, c)| !vowels_set.contains(c)).next();\n\
    \    if vowels_index6.is_none() {\n        return String::from(\"\");\n    }\n\
    \    if vowels_index5.unwrap().unwrap() - vowels_index6.unwrap().unwrap() < vowels_index4.unwrap().unwrap()\
    \ - vowels_index.unwrap().unwrap() {\n        return String::from(\"\");\n   \
    \ }\n    let mut vowels_index7 = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).next();\n\
    \    if vowels_index7.is_none() {\n        return String\n}\n\nfn main() {\n \
    \   let candidate = get_closest_vowel;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpv3qejxo9.rs:77:3\n\
    \   |\n15 | fn get_closest_vowel(word: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n58 |     if vowels_index7.is_none()\
    \ {\n   |                                - this delimiter might not be properly\
    \ closed...\n59 |         return String\n60 | }\n   | - ...as it matches this\
    \ but it has different indentation\n...\n77 | }\n   |   ^\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpv3qejxo9.rs:17:26\n\
    \   |\n17 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0423]: expected value,\
    \ found struct `String`\n   --> /tmp/tmpv3qejxo9.rs:59:16\n    |\n59  |      \
    \     return String\n    |                  ^^^^^^ help: use struct literal syntax\
    \ instead: `String { vec: val }`\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmpv3qejxo9.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpv3qejxo9.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv3qejxo9.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv3qejxo9.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv3qejxo9.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv3qejxo9.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdk9019ab.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdk9019ab.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdk9019ab.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdk9019ab.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdk9019ab.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdk9019ab.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdk9019ab.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdk9019ab.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdk9019ab.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdk9019ab.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdk9019ab.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_count_index = 0;\n    let mut vowels_count_index2\
    \ = 0;\n    let mut vowels_count_index3 = 0;\n    let mut vowels_count_index4\
    \ = 0;\n    let mut vowels_count_index5 = 0;\n    let mut vowels_count_index6\
    \ = 0;\n    let mut vowels_count_index7 = 0;\n    let mut vowels_count_index8\
    \ = 0;\n    let mut vowels_count_index9 = 0;\n    let mut vowels_count_index10\
    \ = 0;\n    let mut vowels_count_index11 = 0;\n    let mut vowels_count_index12\
    \ = 0;\n    let mut vowels_count_index13 = 0;\n    let mut vowels_count_index14\
    \ = 0;\n    let mut vowels_count_index15 = 0;\n    let mut vowels_count_index16\
    \ = 0;\n    let mut vowels_count_index17 = 0;\n    let mut vowels_count_index18\
    \ = 0;\n    let mut vowels_count_index19 = 0;\n    let mut vowels_count_index20\
    \ = 0;\n    let mut vowels_count_index21 = 0;\n    let mut vowels_count_index22\
    \ = 0;\n    let mut vowels_count_index23 = 0;\n    let mut vowels_count_index24\
    \ = 0;\n    let mut vowels_count_index25 = 0;\n    let mut vowels_count_index26\
    \ = 0;\n    let mut vowels_count_index27 = 0;\n    let mut vowels_count_index28\
    \ = 0;\n    let mut vowels_count_index29 = 0;\n    let mut vowels_count_index30\
    \ = 0;\n    let mut vowels_count_index31 = 0;\n    let mut vowels_count_index32\
    \ = 0;\n    let mut vowels_count_index33 = 0;\n    let mut vowels_count_index34\
    \ = 0;\n    let mut vowels_count_index35 = 0;\n    let mut vowels_count_index36\
    \ = 0;\n    let mut vowels_count_index37 = 0;\n    let mut vowels_count_index38\
    \ = 0;\n    let mut vowels_count_index39 = 0;\n    let mut vowels_count_index40\
    \ = 0;\n    let mut vowels_count_index41 = 0;\n    let mut vowels_count_index42\
    \ = 0;\n    let mut vowels_count_index43 = 0;\n    let mut vowels_count_index44\
    \ = 0;\n    let mut vowels_count_index45 = 0;\n    let mut vowels_count_index46\
    \ = 0;\n    let mut vowels_count_index47 = 0;\n    let mut vowels_count_index48\
    \ = 0;\n    let mut vowels_count_index49 = 0;\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk3odcg2h.rs:71:17\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk3odcg2h.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk3odcg2h.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk3odcg2h.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk3odcg2h.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk3odcg2h.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk3odcg2h.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk3odcg2h.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk3odcg2h.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk3odcg2h.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk3odcg2h.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    for vowel in vowels {\n        vowels_set.insert(vowel);\n\
    \    }\n    let mut vowels_count = vowels.len();\n    let mut vowels_index = 0;\n\
    \    let mut vowels_index2 = 0;\n    let mut vowels_index3 = 0;\n    let mut vowels_index4\
    \ = 0;\n    let mut vowels_index5 = 0;\n    let mut vowels_index6 = 0;\n    let\
    \ mut vowels_index7 = 0;\n    let mut vowels_index8 = 0;\n    let mut vowels_index9\
    \ = 0;\n    let mut vowels_index10 = 0;\n    let mut vowels_index11 = 0;\n   \
    \ let mut vowels_index12 = 0;\n    let mut vowels_index13 = 0;\n    let mut vowels_index14\
    \ = 0;\n    let mut vowels_index15 = 0;\n    let mut vowels_index16 = 0;\n   \
    \ let mut vowels_index17 = 0;\n    let mut vowels_index18 = 0;\n    let mut vowels_index19\
    \ = 0;\n    let mut vowels_index20 = 0;\n    let mut vowels_index21 = 0;\n   \
    \ let mut vowels_index22 = 0;\n    let mut vowels_index23 = 0;\n    let mut vowels_index24\
    \ = 0;\n    let mut vowels_index25 = 0;\n    let mut vowels_index26 = 0;\n   \
    \ let mut vowels_index27 = 0;\n    let mut vowels_index28 = 0;\n    let mut vowels_index29\
    \ = 0;\n    let mut vowels_index30 = 0;\n    let mut vowels_index31 = 0;\n   \
    \ let mut vowels_index32 = 0;\n    let mut vowels_index33 = 0;\n    let mut vowels_index34\
    \ = 0;\n    let mut vowels_index35 = 0;\n    let mut vowels_index36 = 0;\n   \
    \ let mut vowels_index37 = 0;\n    let mut vowels_index38 = 0;\n    let mut vowels_index39\
    \ = 0;\n    let mut vowels_index40 = 0;\n    let mut vowels_index41 = 0;\n   \
    \ let mut vowels_index42 = 0;\n    let mut vowels_index43 = 0;\n    let mut vowels_index44\
    \ = 0;\n    let mut vowels_index45 = 0;\n    let mut vowels_index46 = 0;\n   \
    \ let mut vowels_index47 = 0;\n    let mut vowels_index48 = 0;\n    let mut vowels_index49\
    \ = 0;\n    let mut vowels_index50 = 0;\n    let mut vowels_index51 = 0;\n   \
    \ let \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmprhls_27o.rs:74:1\n  \
    \ |\n74 | }\n   | ^ expected pattern\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `HashSet`\n  --> /tmp/tmprhls_27o.rs:17:26\n   |\n17 |     let\
    \ mut vowels_set = HashSet::new();\n   |                          ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmprhls_27o.rs:78:17\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmprhls_27o.rs:78:25\n \
    \  |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprhls_27o.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprhls_27o.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprhls_27o.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprhls_27o.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprhls_27o.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprhls_27o.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprhls_27o.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ s"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx5t05e99.rs:66:18\n   |\n\
    66 |     let mut vowel\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx5t05e99.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx5t05e99.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx5t05e99.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 2));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut vowels_iter = vowels_iter.chain(word.chars().skip(1).take(word.len()\
    \ - 1));\n    let mut \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpchco3ti8.rs:39:1\n\
    \   |\n39 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpchco3ti8.rs:43:17\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpchco3ti8.rs:43:25\n \
    \  |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpchco3ti8.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpchco3ti8.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpchco3ti8.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpchco3ti8.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpchco3ti8.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpchco3ti8.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpchco3ti8.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpchco3ti8.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpchco3ti8.rs:48:17\n   |\n48 |     "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n    let mut\
    \ vowels_start = vowels.iter().rev();\n    let mut vowels_mid = vowels.iter().rev();\n\
    \    let mut vowels_mid2 = vowels.iter().rev();\n    let mut vowels_mid3 = vowels.iter().rev();\n\
    \    let mut vowels_mid4 = vowels.iter().rev();\n    let mut vowels_mid5 = vowels.iter().rev();\n\
    \    let mut vowels_mid6 = vowels.iter().rev();\n    let mut vowels_mid7 = vowels.iter().rev();\n\
    \    let mut vowels_mid8 = vowels.iter().rev();\n    let mut vowels_mid9 = vowels.iter().rev();\n\
    \    let mut vowels_mid10 = vowels.iter().rev();\n    let mut vowels_mid11 = vowels.iter().rev();\n\
    \    let mut vowels_mid12 = vowels.iter().rev();\n    let mut vowels_mid13 = vowels.iter().rev();\n\
    \    let mut vowels_mid14 = vowels.iter().rev();\n    let mut vowels_mid15 = vowels.iter().rev();\n\
    \    let mut vowels_mid16 = vowels.iter().rev();\n    let mut vowels_mid17 = vowels.iter().rev();\n\
    \    let mut vowels_mid18 = vowels.iter().rev();\n    let mut vowels_mid19 = vowels.iter().rev();\n\
    \    let mut vowels_mid20 = vowels.iter().rev();\n    let mut vowels_mid21 = vowels.iter().rev();\n\
    \    let mut vowels_mid22 = vowels.iter().rev();\n    let mut vowels_mid23 = vowels.iter().rev();\n\
    \    let mut vowels_mid24 = vowels.iter().rev();\n    let mut vowels_mid25 = vowels.iter().rev();\n\
    \    let mut vowels_mid26 = vowels.iter().rev();\n    let mut vowels_mid27 = vowels.iter().rev();\n\
    \    let mut vowels_mid28 = vowels.iter().rev();\n    let mut vowels_mid29 = vowels.iter().rev();\n\
    \    let mut vowels_mid30 = vowels.iter().rev();\n    let mut vowels_mid31 = vowels.iter().rev();\n\
    \    let mut vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx4_vfju7.rs:51:18\n   |\n\
    51 |     let mut vowel\n   |                  ^ help: add `;` here\n52 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx4_vfju7.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx4_vfju7.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx4_vfju7.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx4_vfju7.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx4_vfju7.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx4_vfju7.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx4_vfju7.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx4_vfju7.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx4_vfju7.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx4_vfju7.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iter\
    \ = vowels.iter();\n    let mut vowels_iter = vowels_iter.skip(1);\n    let mut\
    \ vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mut vowels_iter = vowels_iter.skip(1);\n    let mut vowels_iter = vowels_iter.skip(1);\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwwa0wrd1.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwwa0wrd1.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwwa0wrd1.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwwa0wrd1.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660053099
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
    yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"\
    FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"\
    ))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n\
    /// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_set\
    \ = HashSet::new();\n    vowels.iter().for_each(|v| vowels_set.insert(v));\n \
    \   let mut vowels_index = word.chars().enumerate().filter(|&(_, c)| vowels_set.contains(c)).collect::<Vec<_>>();\n\
    \    vowels_index.sort_by_key(|&(_, c)| {\n        if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' {\n            0\n        } else {\n      \
    \      1\n        }\n    });\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    vowels_index.push(vowels_index.last().unwrap());\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            0\n        } else {\n            1\n        }\n    });\n    let mut\
    \ vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            0\n        } else {\n            1\n        }\n    });\n    let mut\
    \ vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            0\n        } else {\n            1\n        }\n    });\n    let mut\
    \ vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            0\n        } else {\n            1\n        }\n    });\n    let mut\
    \ vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n    vowels_index.sort_by_key(|&(_,\
    \ c)| {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdq5fg5ox.rs:82:3\n\
    \   |\n15 | fn get_closest_vowel(word: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n62 |     vowels_index.sort_by_key(|&(_,\
    \ c)| {\n   |                             -          - unclosed delimiter\n  \
    \ |                             |\n   |                             unclosed delimiter\n\
    63 |         if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \  |                                                                     - this\
    \ delimiter might not be properly closed...\n64 |             \n65 | }\n   | -\
    \ ...as it matches this but it has different indentation\n...\n82 | }\n   |  \
    \ ^\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpdq5fg5ox.rs:17:26\n   |\n17 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdq5fg5ox.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdq5fg5ox.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdq5fg5ox.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdq5fg5ox.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdq5fg5ox.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdq5fg5ox.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, "
  stdout: ''
  timestamp: 1660053099
