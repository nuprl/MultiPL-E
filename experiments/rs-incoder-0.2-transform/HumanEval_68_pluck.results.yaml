language: rs
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpicsrsflv.rs:100:17\n\
    \    |\n100 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpicsrsflv.rs:100:25\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpicsrsflv.rs:101:17\n\
    \    |\n101 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpicsrsflv.rs:101:25\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpicsrsflv.rs:102:17\n\
    \    |\n102 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpicsrsflv.rs:102:25\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpicsrsflv.rs:103:17\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpicsrsflv.rs:103:25\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpicsrsflv.rs:104:17\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpicsrsflv.rs:104:25\n    |\n104 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpicsrsflv.rs:105:17\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                 ^^^^"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_value < i {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqjxhe8rg.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqjxhe8rg.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqjxhe8rg.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqjxhe8rg.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqjxhe8rg.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqjxhe8rg.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqjxhe8rg.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqjxhe8rg.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqjxhe8rg.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqjxhe8rg.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqjxhe8rg.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            min_value\
    \ = i;\n            min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaglb5e2z.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpaglb5e2z.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpaglb5e2z.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpaglb5e2z.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpaglb5e2z.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpaglb5e2z.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaglb5e2z.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_arr = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_even_index == -1 || min_even_index\
    \ > i {\n                min_even_value = i;\n                min_even_index =\
    \ i;\n                min_even_index_in_arr = i;\n            } else {\n     \
    \           if min_even_index_in_arr == -1 || min_even_index_in_arr > i {\n  \
    \                  min_even_index_in_arr = i;\n                }\n           \
    \ }\n        }\n    }\n    if min_even_index == -1 {\n        return Vec::new();\n\
    \    }\n    let mut even_values = Vec::new();\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n        }\n    }\n\
    \    even_values.sort_unstable_by_key(|&x| x);\n    let mut even_values_index\
    \ = even_values.iter().rev().take(even_values.len() - 1).collect::<Vec<_>>();\n\
    \    even_values_index.sort_unstable_by_key(|&x| x);\n    let mut even_values_index_in_arr\
    \ = even_values_index.iter().rev().take(even_values_index.len() - 1).collect::<Vec<_>>();\n\
    \    even_values_index_in_arr.sort_unstable_by_key(|&x| x);\n    let mut even_values_index_in_arr_index\
    \ = even_values_index_in_arr.iter().rev().take(even_values_index_in_arr.len()\
    \ - 1).collect::<Vec<_>>();\n    even_values_index_in_arr_index.sort_unstable_by_key(|&x|\
    \ x);\n    let mut even_values_index_in_arr_index_in_arr = even_values_index_in_arr_index.iter().rev().take(even_values_index_in_arr_index.len()\
    \ - 1).collect::<Vec<_>>();\n    even_values_index_in_arr_index_in_arr.sort_unstable_by_key(|&x|\
    \ x);\n    let mut even_values_index_in_arr_index_in_arr_index = even_values_index_in_arr_index_in_arr.iter().rev().take(even_values_index_in_arr_index_in_arr.len()\
    \ - 1).collect::<Vec<_>>();\n    even_values_index_in_arr_index_in_arr_index.sort_unstable_by_key(|&x|\
    \ x);\n    let mut even_values_index_in_arr_index_in_arr_index_in_arr = even_values_index_in_arr_index_in_arr_index.iter().rev().take(even_values_index_in_arr_index_in_arr_index.len()\
    \ - 1).\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp4re0__k7.rs:64:1\n   |\n64\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp4re0__k7.rs:63:183\n\
    \   |\n63 |     let mut even_values_index_in_arr_index_in_arr_index_in_arr = even_values_index_in_arr_index_in_arr_index.iter().rev().take(even_values_index_in_arr_index_in_arr_index.len()\
    \ - 1).\n   |                                                                \
    \                                                                            \
    \                                           ^ help: add `;` here\n64 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4re0__k7.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4re0__k7.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4re0__k7.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4re0__k7.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4re0__k7.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4re0__k7.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4re0__k7.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4re0__k7.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n \
    \   let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph0lmkxyi.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph0lmkxyi.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph0lmkxyi.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph0lmkxyi.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph0lmkxyi.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph0lmkxyi.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph0lmkxyi.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph0lmkxyi.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph0lmkxyi.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph0lmkxyi.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph0lmkxyi.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_even_index_in_arr = -1;\n    let mut smallest_even_index_in_arr2\
    \ = -1;\n    for &mut i in arr.iter_mut() {\n        if i % 2 == 0 {\n       \
    \     if smallest_even_index == -1 || smallest_even_value < i {\n            \
    \    smallest_even_value = i;\n                smallest_even_index = i;\n    \
    \            smallest_even_index_in_arr = i;\n                smallest_even_index_in_arr2\
    \ = i;\n            } else {\n                if smallest_even_index_in_arr ==\
    \ -1 || smallest_even_value < i {\n                    smallest_even_index_in_arr\
    \ = i;\n                }\n                if smallest_even_index_in_arr2 == -1\
    \ || smallest_even_value < i {\n                    smallest_even_index_in_arr2\
    \ = i;\n                }\n            }\n        }\n    }\n    if smallest_even_index\
    \ == -1 || smallest_even_value < smallest_even_index_in_arr {\n        smallest_even_index\
    \ = smallest_even_index_in_arr;\n    }\n    if smallest_even_index == -1 || smallest_even_value\
    \ < smallest_even_index_in_arr2 {\n        smallest_even_index = smallest_even_index_in_arr2;\n\
    \    }\n    vec![smallest_even_index, smallest_even_index]\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfk9yk3ej.rs:59:17\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfk9yk3ej.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfk9yk3ej.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfk9yk3ej.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfk9yk3ej.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfk9yk3ej.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfk9yk3ej.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfk9yk3ej.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfk9yk3ej.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfk9yk3ej.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfk9yk3ej.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_value_index = -1;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ min_value {\n                min_value = i;\n                min_value_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_value = isize::MAX;\n  \
    \  let mut smallest_value_index = -1;\n    for i in even_values.iter() {\n   \
    \     if i < smallest_value {\n            smallest_value = i;\n            smallest_value_index\
    \ = i;\n        }\n    }\n    let mut result = Vec::new();\n    for i in even_values.iter()\
    \ {\n        if i == smallest_value {\n            result.push(smallest_value_index);\n\
    \        }\n    }\n    if result.len() == 0 {\n        return Vec::new();\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxui16kf7.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxui16kf7.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxui16kf7.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxui16kf7.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxui16kf7.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxui16kf7.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxui16kf7.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxui16kf7.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxui16kf7.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxui16kf7.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxui16kf7.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value: isize = 0;\n    let mut min_even_index:\
    \ usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut even_values: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index: Vec<isize> = Vec::new();\n\
    \    let mut even_indexes_index: Vec<usize> = Vec::new();\n    let mut even_values_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index: Vec<usize> =\
    \ Vec::new();\n    let mut even_values_index_index_index: Vec<isize> = Vec::new();\n\
    \    let mut even_indexes_index_index_index: Vec<usize> = Vec::new();\n    let\
    \ mut even_values_index_index_index_index: Vec<isize> = Vec::new();\n    let mut\
    \ even_indexes_index_index_index_index: Vec<usize> = Vec::new();\n    let mut\
    \ even_values_index_index_index_index_index: Vec<isize> = Vec::new();\n    let\
    \ mut even_indexes_index_index_index_index_index: Vec<usize> = Vec::new();\n \
    \   let mut even_values_index_index_index_index_index_index: Vec<isize> = Vec::new();\n\
    \    let mut even_indexes_index_index_index_index_index_index: Vec<usize> = Vec::new();\n\
    \    let mut even_values_index_index_index_index_index_index_index: Vec<isize>\
    \ = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiw8nz46w.rs:52:62\n   |\n\
    52 |     let mut even_indexes_index_index_index_index_index_index_\n   |     \
    \                                                         ^ help: add `;` here\n\
    53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpiw8nz46w.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiw8nz46w.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiw8nz46w.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiw8nz46w.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiw8nz46w.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiw8nz46w.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiw8nz46w.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiw8nz46w.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiw8nz46w.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiw8nz46w.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |          "
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = isize::MAX;\n    for &i in arr {\n  \
    \      if i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_index = i;\n        \
    \    }\n        }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index =\
    \ isize::MAX;\n    for &i in even_values {\n        if i < smallest_value {\n\
    \            smallest_value = i;\n            smallest_index = i;\n        }\n\
    \    }\n    let mut result = Vec::new();\n    result.push(smallest_value);\n \
    \   result.push(smallest_index);\n    return result;\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2bxwu6n3.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2bxwu6n3.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2bxwu6n3.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2bxwu6n3.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2bxwu6n3.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2bxwu6n3.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2bxwu6n3.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2bxwu6n3.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2bxwu6n3.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2bxwu6n3.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2bxwu6n3.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < min_value {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut smallest_value = min_value;\n    let mut smallest_idx = min_idx;\n\
    \    for &i in even_values {\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_idx = i;\n        }\n    }\n    even_values.remove(&smallest_idx);\n\
    \    even_values.sort();\n    even_values\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnxhij03p.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnxhij03p.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnxhij03p.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnxhij03p.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnxhij03p.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnxhij03p.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnxhij03p.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnxhij03p.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnxhij03p.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnxhij03p.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnxhij03p.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            min_value = i;\n  \
    \          min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]\n}\n\n\
    fn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg45an0ko.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg45an0ko.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg45an0ko.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg45an0ko.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg45an0ko.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg45an0ko.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg45an0ko.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg45an0ko.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg45an0ko.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg45an0ko.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg45an0ko.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_value\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `even_value` in this scope\n  --> /tmp/tmphv6urpkw.rs:96:5\n\
    \   |\n96 |     even_value\n   |     ^^^^^^^^^^ help: a local variable with a\
    \ similar name exists: `even_values`\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n   --> /tmp/tmphv6urpkw.rs:101:17\n    |\n101 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmphv6urpkw.rs:101:25\n\
    \    |\n101 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmphv6urpkw.rs:102:17\n    |\n102 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmphv6urpkw.rs:102:25\n\
    \    |\n102 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmphv6urpkw.rs:103:17\n    |\n103 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmphv6urpkw.rs:103:25\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmphv6urpkw.rs:104:17\n    |\n104 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmphv6urpkw.rs:104:25\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmphv6urpkw.rs:105:17\n    |\n105 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmphv6urpkw.rs:105:25\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |             "
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_value_index = 0;\n    let mut even_values_index\
    \ = 0;\n    for &value in arr {\n        if value % 2 == 0 {\n            even_values.push(value\
    \ + 1);\n            if even_values_index == 0 {\n                min_value =\
    \ value;\n                min_value_index = arr.iter().position(|&x| x == value).unwrap();\n\
    \            }\n            even_values_index += 1;\n        }\n    }\n    if\
    \ even_values_index == 0 {\n        return vec![];\n    }\n    if even_values_index\
    \ == arr.len() {\n        return vec![min_value, min_value_index];\n    }\n  \
    \  let mut min_value_pos = even_values.iter().position(|&x| x == min_value).unwrap();\n\
    \    let mut min_value_index = min_value_pos;\n    let mut even_values_index =\
    \ even_values_pos;\n    for &value in arr {\n        if value % 2 == 0 {\n   \
    \         if even_values_index == 0 {\n                min_value = value;\n  \
    \              min_value_index = arr.iter().position(|&x| x == value).unwrap();\n\
    \            }\n            even_values_index += 1;\n        } else {\n      \
    \      if even_values_index == arr.len() {\n                min_value = value;\n\
    \                min_value_index = arr.iter().position(|&x| x == value).unwrap();\n\
    \            }\n            even_values_index = 0;\n        }\n    }\n    if even_values_index\
    \ == arr.len() {\n        return vec![min_value, min_value_index];\n    }\n  \
    \  let mut min_value_pos = even_values.iter().position(|&x| x == min_value).unwrap();\n\
    \    let mut min_value_index = min_value_pos;\n    let mut even_values_index =\
    \ even_values_pos;\n    for &value in arr {\n        if value % 2 == 0 {\n   \
    \         if even_values_index == 0 {\n                min_value = value;\n  \
    \              min_value_index = arr.iter().position(|&x| x == value).unwrap();\n\
    \            }\n            even_values_index += 1;\n        } else {\n      \
    \      if even_values_index == arr.len() {\n                min_value = value;\n\
    \                min_value_index = arr.iter().position(|&x| x == value).unwrap();\n\
    \            }\n            even_values_index = 0;\n        }\n    }\n    if even_values_index\
    \ == arr.len() {\n        return vec![min_value, min_value_index];\n    }\n  \
    \  let mut min_value_pos = even_values.iter().position(|&x| x == min_value).unwrap();\n\
    \    let mut min_value_index = min_value_\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpee_iu9xn.rs:90:41\n   |\n\
    90 |     let mut min_value_index = min_value_\n   |                          \
    \               ^ help: add `;` here\n91 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `even_values_pos` in this scope\n  --> /tmp/tmpee_iu9xn.rs:49:33\n\
    \   |\n49 |     let mut even_values_index = even_values_pos;\n   |           \
    \                      ^^^^^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `even_values`\n\nerror[E0425]: cannot find value `even_values_pos` in\
    \ this scope\n  --> /tmp/tmpee_iu9xn.rs:70:33\n   |\n70 |     let mut even_values_index\
    \ = even_values_pos;\n   |                                 ^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `even_values`\n\nerror[E0425]:\
    \ cannot find value `min_value_` in this scope\n  --> /tmp/tmpee_iu9xn.rs:90:31\n\
    \   |\n90 |     let mut min_value_index = min_value_\n   |                   \
    \            ^^^^^^^^^^ help: a local variable with a similar name exists: `min_value`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpee_iu9xn.rs:95:17\n\
    \   |\n95 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpee_iu9xn.rs:95:25\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpee_iu9xn.rs:96:17\n   |\n96 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpee_iu9xn.rs:96:25\n\
    \   |\n96 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpee_iu9xn.rs:97:17\n   |\n97 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpee_iu9xn.rs:97:25\n   |\n97 |   \
    \  assert_eq!({left}, {r"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_node = 0;\n\
    \    let mut min_node_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            if min_value == i32::MAX {\n                min_value = i;\n    \
    \            min_node = i;\n                min_node_index = i;\n            }\
    \ else {\n                if i < min_value {\n                    min_value =\
    \ i;\n                    min_node = i;\n                    min_node_index =\
    \ i;\n                }\n            }\n        }\n    }\n    vec![min_node, min_node_index]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkacgjxzm.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkacgjxzm.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkacgjxzm.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkacgjxzm.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkacgjxzm.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkacgjxzm.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkacgjxzm.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkacgjxzm.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkacgjxzm.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkacgjxzm.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkacgjxzm.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for &i in even_values\
    \ {\n        if i < smallest_value {\n            smallest_even_value = i;\n \
    \           smallest_even_index = i;\n        }\n    }\n    let mut even_values_copy\
    \ = even_values.clone();\n    even_values_copy.swap_remove(smallest_even_index);\n\
    \    even_values_copy\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvo9uybuk.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvo9uybuk.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvo9uybuk.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvo9uybuk.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvo9uybuk.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvo9uybuk.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvo9uybuk.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvo9uybuk.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvo9uybuk.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvo9uybuk.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvo9uybuk.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = -1;\n\
    \    let mut min_idx2 = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n  \
    \          if min_idx == -1 || min_value < i {\n                min_value = i;\n\
    \                min_idx = i;\n            }\n        } else {\n            if\
    \ min_idx2 == -1 || min_value < i {\n                min_value = i;\n        \
    \        min_idx2 = i;\n            }\n        }\n    }\n    if min_idx2 == -1\
    \ || min_value < min_idx2 {\n        min_idx2 = min_idx;\n    }\n    vec![min_value,\
    \ min_idx2]\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdgx1065h.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdgx1065h.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdgx1065h.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdgx1065h.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdgx1065h.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdgx1065h.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdgx1065h.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdgx1065h.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdgx1065h.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdgx1065h.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdgx1065h.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_index = -1;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if smallest_even_value < i {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n            if\
    \ smallest_index == -1 || smallest_even_value < smallest_index {\n           \
    \     smallest_index = i;\n            }\n        }\n    }\n    smallest_even_value\
    \ => smallest_even_index,\n    smallest_index => smallest_index,\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `=>`\n  --> /tmp/tmp1h4h38x0.rs:41:25\n   |\n41 |     smallest_even_value\
    \ => smallest_even_index,\n   |                         ^^ expected one of 8 possible\
    \ tokens\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1h4h38x0.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1h4h38x0.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1h4h38x0.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1h4h38x0.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1h4h38x0.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1h4h38x0.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1h4h38x0.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1h4h38x0.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1h4h38x0.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1h4h38x0.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                     "
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = arr[0];\n    let mut min_idx = -1;\n\
    \    let mut min_even_val = false;\n    for &x in arr {\n        if x % 2 == 0\
    \ {\n            if min_even_val {\n                min_even_val = false;\n  \
    \              min_val = x;\n                min_idx = x;\n            } else\
    \ {\n                min_even_val = true;\n                min_val = x;\n    \
    \            min_idx = x;\n            }\n        }\n    }\n    if min_even_val\
    \ {\n        vec![min_val, min_idx]\n    } else {\n        vec![]\n    }\n}\n\n\
    fn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph_trpzr_.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph_trpzr_.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph_trpzr_.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph_trpzr_.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph_trpzr_.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph_trpzr_.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph_trpzr_.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph_trpzr_.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph_trpzr_.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph_trpzr_.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph_trpzr_.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_indexes = Vec::new();\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            if min_even_value < i {\n                min_even_value\
    \ = i;\n                min_even_index = i;\n            }\n        } else {\n\
    \            if min_even_index == -1 {\n                min_even_index = i;\n\
    \            } else {\n                min_even_indexes.push(min_even_index);\n\
    \                min_even_index = i;\n            }\n        }\n    }\n    if\
    \ min_even_index == -1 {\n        min_even_indexes.push(min_even_index);\n   \
    \ }\n    min_even_indexes\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpv1usxkhp.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv1usxkhp.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv1usxkhp.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv1usxkhp.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv1usxkhp.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv1usxkhp.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv1usxkhp.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv1usxkhp.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv1usxkhp.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv1usxkhp.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv1usxkhp.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_value_index = -1;\n    let mut min_value_index2\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if min_value == isize::MAX {\n                min_value = i;\n  \
    \              min_value_index = i;\n                min_value_index2 = i;\n \
    \           }\n            if i < min_value {\n                min_value = i;\n\
    \                min_value_index = i;\n                min_value_index2 = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if min_value_index == min_value_index2 {\n        return\
    \ vec![min_value];\n    }\n    let mut even_values_sorted = even_values.clone();\n\
    \    even_values_sorted.sort();\n    let mut min_value_index = -1;\n    let mut\
    \ min_value_index2 = -1;\n    for &i in even_values_sorted {\n        if i ==\
    \ min_value {\n            min_value_index = i;\n        }\n        if i < min_value\
    \ {\n            min_value_index = i;\n        }\n        if i == min_value_index2\
    \ {\n            min_value_index2 = i;\n        }\n        if i < min_value_index2\
    \ {\n            min_value_index2 = i;\n        }\n    }\n    if min_value_index\
    \ == min_value_index2 {\n        return vec![min_value];\n    }\n    let mut even_values_sorted\
    \ = even_values.clone();\n    even_values_sorted.sort();\n    let mut min_value_index\
    \ = -1;\n    let mut min_value_index2 = -1;\n    for &i in even_values_sorted\
    \ {\n        if i == min_value {\n            min_value_index = i;\n        }\n\
    \        if i < min_value {\n            min_value_index = i;\n        }\n   \
    \     if i == min_value_index2 {\n            min_value_index2 = i;\n        }\n\
    \        if i < min_value_index2 {\n            min_value_index2 = i;\n      \
    \  }\n    }\n    if min_value_index == min_value_index2 {\n        return vec![min_value];\n\
    \    }\n    let mut even_values_sorted = even_values.clone();\n    even_values_sorted.sort();\n\
    \    let mut min_value_index = -1;\n    let mut min_value_index2 = -1;\n    for\
    \ &i in even_values_sorted {\n        if i == min_value {\n            min_value_index\
    \ = i;\n        }\n        if i < min_value {\n            min_value_index = i;\n\
    \        }\n        if i == min_value_index2 {\n            min_value_index2 =\
    \ i;\n        }\n        if i < min_value_index2 {\n            min_value_index2\
    \ = i;\n        }\n    }\n    if min_value_index == min_value\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp4zdkl88c.rs:113:1\n    |\n\
    112 |     if min_value_index == min_value\n    |     -- this `if` expression has\
    \ a condition, but no block\n113 | }\n    | ^ expected `{`\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n   --> /tmp/tmp4zdkl88c.rs:117:17\n    |\n\
    117 |     assert_eq!({left}, {right});\n    |                 ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `right` in this scope\n   -->\
    \ /tmp/tmp4zdkl88c.rs:117:25\n    |\n117 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp4zdkl88c.rs:118:17\n\
    \    |\n118 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp4zdkl88c.rs:118:25\n    |\n118 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp4zdkl88c.rs:119:17\n\
    \    |\n119 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp4zdkl88c.rs:119:25\n    |\n119 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp4zdkl88c.rs:120:17\n\
    \    |\n120 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp4zdkl88c.rs:120:25\n    |\n120 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp4zdkl88c.rs:121:17\n\
    \    |\n121 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp4zdkl88c.rs:121:25\n    |\n121 |     assert_eq!({left}, {right});\n\
    \    |        "
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < min_value {\n\
    \                min_value = i;\n                min_idx = even_values.len() -\
    \ 1;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n     \
    \   return Vec::new();\n    }\n    even_values[min_idx];\n    even_values\n}\n\
    \nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6q2c21n6.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6q2c21n6.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6q2c21n6.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6q2c21n6.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6q2c21n6.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6q2c21n6.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6q2c21n6.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6q2c21n6.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6q2c21n6.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6q2c21n6.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6q2c21n6.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_index = -1;\n    let mut smallest_value = -1;\n    for i\
    \ in arr.iter().rev() {\n        if i % 2 == 0 {\n            if smallest_even_index\
    \ == -1 || smallest_even_index > i {\n                smallest_even_index = i;\n\
    \                smallest_even_value = arr[i];\n            }\n            if\
    \ smallest_value == -1 || smallest_value > arr[i] {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    smallest_even_index\n        .to_vec()\n        .iter()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpcrrzy32a.rs:147:17\n\
    \    |\n147 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpcrrzy32a.rs:147:25\n    |\n147 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpcrrzy32a.rs:148:17\n\
    \    |\n148 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpcrrzy32a.rs:148:25\n    |\n148 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpcrrzy32a.rs:149:17\n\
    \    |\n149 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpcrrzy32a.rs:149:25\n    |\n149 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpcrrzy32a.rs:150:17\n\
    \    |\n150 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpcrrzy32a.rs:150:25\n    |\n150 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpcrrzy32a.rs:151:17\n\
    \    |\n151 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpcrrzy32a.rs:151:25\n    |\n151 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpcrrzy32a.rs:152:17\n\
    \    |\n152 |     assert_eq!({left}, {right});\n    |                 ^^^^"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_and_index = vec![];\n\
    \    for i in even_values.iter() {\n        if i == smallest_value {\n       \
    \     smallest_value_and_index.push((i, smallest_index));\n        }\n    }\n\
    \    smallest_value_and_index.sort_by_key(|&(_, index)| index);\n    smallest_value_and_index\n\
    \        .iter()\n        .map(|&(_, index)| index)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpw9lebn2m.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw9lebn2m.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw9lebn2m.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw9lebn2m.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw9lebn2m.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw9lebn2m.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw9lebn2m.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw9lebn2m.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw9lebn2m.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw9lebn2m.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw9lebn2m.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmply33a0al.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmply33a0al.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmply33a0al.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmply33a0al.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmply33a0al.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmply33a0al.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmply33a0al.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmply33a0al.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmply33a0al.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmply33a0al.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmply33a0al.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ 0;\n    for i in arr.iter().cloned() {\n        if i % 2 == 0 {\n          \
    \  if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn\
    \ main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgb9ptyn5.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgb9ptyn5.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgb9ptyn5.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgb9ptyn5.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgb9ptyn5.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgb9ptyn5.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgb9ptyn5.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgb9ptyn5.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgb9ptyn5.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgb9ptyn5.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgb9ptyn5.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    if min_idx == -1 {\n        return Vec::new();\n\
    \    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp71g2g_x.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp71g2g_x.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp71g2g_x.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp71g2g_x.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp71g2g_x.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp71g2g_x.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp71g2g_x.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp71g2g_x.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp71g2g_x.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp71g2g_x.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp71g2g_x.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_val < i {\n\
    \                min_val = i;\n                min_idx = i;\n            }\n \
    \       }\n    }\n    if min_val == i32::MAX {\n        return vec![];\n    }\n\
    \    vec![min_val, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppykemute.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppykemute.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppykemute.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppykemute.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppykemute.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppykemute.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppykemute.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppykemute.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppykemute.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppykemute.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppykemute.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    let mut smallest_index2\
    \ = 0;\n    let mut smallest_index3 = 0;\n    let mut smallest_index4 = 0;\n \
    \   let mut smallest_index5 = 0;\n    let mut smallest_index6 = 0;\n    let mut\
    \ smallest_index7 = 0;\n    let mut smallest_index8 = 0;\n    let mut smallest_index9\
    \ = 0;\n    let mut smallest_index10 = 0;\n    let mut smallest_index11 = 0;\n\
    \    let mut smallest_index12 = 0;\n    let mut smallest_index13 = 0;\n    let\
    \ mut smallest_index14 = 0;\n    let mut smallest_index15 = 0;\n    let mut smallest_index16\
    \ = 0;\n    let mut smallest_index17 = 0;\n    let mut smallest_index18 = 0;\n\
    \    let mut smallest_index19 = 0;\n    let mut smallest_index20 = 0;\n    let\
    \ mut smallest_index21 = 0;\n    let mut smallest_index22 = 0;\n    let mut smallest_index23\
    \ = 0;\n    let mut smallest_index24 = 0;\n    let mut smallest_index25 = 0;\n\
    \    let mut smallest_index26 = 0;\n    let mut smallest_index27 = 0;\n    let\
    \ mut smallest_index28 = 0;\n    let mut smallest_index29 = 0;\n    let mut smallest_index30\
    \ = 0;\n    let mut smallest_index31 = 0;\n    let mut smallest_index32 = 0;\n\
    \    let mut smallest_index33 = 0;\n    let mut smallest_index34 = 0;\n    let\
    \ mut smallest_index35 = 0;\n    let mut smallest_index36 = 0;\n    let mut smallest_index37\
    \ = 0;\n    let mut smallest_index38 = 0;\n    let mut smallest_index39 = 0;\n\
    \    let mut smallest_index40 = 0;\n    let mut smallest_index41 = 0;\n    let\
    \ mut smallest_index42 = 0;\n    let mut smallest_index43 = 0;\n    let mut smallest_index44\
    \ = 0;\n    let mut smallest_index45 = 0;\n    let mut smallest_index46 = 0;\n\
    \    let mut smallest_index47 = 0;\n    let mut smallest_index48 = 0;\n    let\
    \ mut smallest_index49 = 0;\n    let mut smallest_index50 = 0;\n    let mut smallest_index51\
    \ = 0;\n    let mut smallest_index52 = 0;\n    let mut smallest_index53 = 0;\n\
    \    let mut smallest_index54 = 0;\n    let mut smallest_index55 = 0;\n}\n\nfn\
    \ main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9iupyvek.rs:88:17\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9iupyvek.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9iupyvek.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9iupyvek.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9iupyvek.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9iupyvek.rs:90:25\n   |\n90 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9iupyvek.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9iupyvek.rs:91:25\n   |\n91 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9iupyvek.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9iupyvek.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9iupyvek.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_value_index = isize::MAX;\n    let mut min_value_index\
    \ = isize::MAX;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_value_index = i;\n            }\n            if i == min_value_index\
    \ {\n                min_value_index = i;\n            }\n        }\n    }\n \
    \   if even_values.is_empty() {\n        return Vec::new();\n    }\n    if min_value_index\
    \ == isize::MAX {\n        return Vec::new();\n    }\n    let mut even_values_copy\
    \ = even_values.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpopvl_5j5.rs:89:17\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpopvl_5j5.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpopvl_5j5.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpopvl_5j5.rs:90:25\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpopvl_5j5.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpopvl_5j5.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpopvl_5j5.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpopvl_5j5.rs:92:25\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpopvl_5j5.rs:93:17\n  \
    \ |\n93 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpopvl_5j5.rs:93:25\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpopvl_5j5.rs:94:17\n   |\n94 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    even_values.sort_unstable_by_key(|&x| x);\n\
    \    even_values.dedup();\n    even_values.iter().cloned().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_5ka9ljz.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_5ka9ljz.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_5ka9ljz.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_5ka9ljz.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_5ka9ljz.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_5ka9ljz.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_5ka9ljz.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_5ka9ljz.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_5ka9ljz.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_5ka9ljz.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_5ka9ljz.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in 1..arr.len()\
    \ {\n        if arr[i] < min_value {\n            min_value = arr[i];\n      \
    \      min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvrh6lij0.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvrh6lij0.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvrh6lij0.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvrh6lij0.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvrh6lij0.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvrh6lij0.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvrh6lij0.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvrh6lij0.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvrh6lij0.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvrh6lij0.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvrh6lij0.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmprxsyh8va.rs:70:1\n   |\n70 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmprxsyh8va.rs:69:20\n   |\n26 | fn pluck(arr: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                         - closing delimiter possibly\
    \ meant for this\n...\n69 |         even_values[even_values.iter().min_\n   |\
    \                    ^ unclosed delimiter\n70 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprxsyh8va.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxsyh8va.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprxsyh8va.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprxsyh8va.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprxsyh8va.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprxsyh8va.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprxsyh8va.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprxsyh8va.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in t"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_arr = -1;\n    let mut min_even_index_in_arr2\
    \ = -1;\n    let mut min_even_index_in_arr3 = -1;\n    let mut min_even_index_in_arr4\
    \ = -1;\n    let mut min_even_index_in_arr5 = -1;\n    let mut min_even_index_in_arr6\
    \ = -1;\n    let mut min_even_index_in_arr7 = -1;\n    let mut min_even_index_in_arr8\
    \ = -1;\n    let mut min_even_index_in_arr9 = -1;\n    let mut min_even_index_in_arr10\
    \ = -1;\n    let mut min_even_index_in_arr11 = -1;\n    let mut min_even_index_in_arr12\
    \ = -1;\n    let mut min_even_index_in_arr13 = -1;\n    let mut min_even_index_in_arr14\
    \ = -1;\n    let mut min_even_index_in_arr15 = -1;\n    let mut min_even_index_in_arr16\
    \ = -1;\n    let mut min_even_index_in_arr17 = -1;\n    let mut min_even_index_in_arr18\
    \ = -1;\n    let mut min_even_index_in_arr19 = -1;\n    let mut min_even_index_in_arr20\
    \ = -1;\n    let mut min_even_index_in_arr21 = -1;\n    let mut min_even_index_in_arr22\
    \ = -1;\n    let mut min_even_index_in_arr23 = -1;\n    let mut min_even_index_in_arr24\
    \ = -1;\n    let mut min_even_index_in_arr25 = -1;\n    let mut min_even_index_in_arr26\
    \ = -1;\n    let mut min_even_index_in_arr27 = -1;\n    let mut min_even_index_in_arr28\
    \ = -1;\n    let mut min_even_index_in_arr29 = -1;\n    let mut min_even_index_in_arr30\
    \ = -1;\n    let mut min_even_index_in_arr31 = -1;\n    let mut min_even_index_in_arr32\
    \ = -1;\n    let mut min_even_index_in_arr33 = -1;\n    let mut min_even_index_in_arr34\
    \ = -1;\n    let mut min_even_index_in_arr35 = -1;\n    let mut min_even_index_in_arr36\
    \ = -1;\n    let mut min_even_index_in_arr37 = -1;\n    let mut min_even_index_in_arr38\
    \ = -1;\n    let mut min_even_index_in_arr39 = -1;\n    let mut min_even_index_in_arr40\
    \ = -1;\n    let mut min_even_index_in_arr41 = -1;\n    let mut min_even_index_in_arr42\
    \ = -1;\n    let mut min_\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnejgbb1i.rs:71:17\n   |\n\
    71 |     let mut min_\n   |                 ^ help: add `;` here\n72 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnejgbb1i.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnejgbb1i.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnejgbb1i.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnejgbb1i.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnejgbb1i.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnejgbb1i.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnejgbb1i.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnejgbb1i.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnejgbb1i.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnejgbb1i.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_value_and_index = Vec::new();\n   \
    \ smallest_value_and_index.push(smallest_value, smallest_index);\n    let mut\
    \ smallest_value_and_index_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut smallest_value_and_index_iter = smallest_value_and_index_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    while let Some(mut v) = smallest_value_and_index_iter.next() {\n        if\
    \ v % 2 == 0 {\n            smallest_value_and_index.push(v);\n            smallest_value_and_index_iter\
    \ = even_values.iter().cloned().collect::<Vec<_>>();\n            smallest_value_and_index_iter\
    \ = smallest_value_and_index_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        }\n    }\n    smallest_value_and_index_iter\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwube1arn.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwube1arn.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwube1arn.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwube1arn.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwube1arn.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwube1arn.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwube1arn.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwube1arn.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwube1arn.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwube1arn.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwube1arn.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    if min_value == i32::MAX {\n        return Vec::new();\n\
    \    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphxyaa9w3.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphxyaa9w3.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphxyaa9w3.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphxyaa9w3.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphxyaa9w3.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphxyaa9w3.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphxyaa9w3.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphxyaa9w3.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphxyaa9w3.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphxyaa9w3.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphxyaa9w3.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < min_value {\n\
    \                min_value = i;\n                min_idx = even_values.len() -\
    \ 1;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n     \
    \   return Vec::new();\n    }\n    even_values[min_idx];\n    even_values\n}\n\
    \nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6q2c21n6.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6q2c21n6.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6q2c21n6.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6q2c21n6.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6q2c21n6.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6q2c21n6.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6q2c21n6.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6q2c21n6.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6q2c21n6.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6q2c21n6.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6q2c21n6.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx2\
    \ = 1;\n    let mut min_idx3 = 1;\n    let mut min_idx4 = 1;\n    let mut min_idx5\
    \ = 1;\n    let mut min_idx6 = 1;\n    let mut min_idx7 = 1;\n    let mut min_idx8\
    \ = 1;\n    let mut min_idx9 = 1;\n    let mut min_idx10 = 1;\n    let mut min_idx11\
    \ = 1;\n    let mut min_idx12 = 1;\n    let mut min_idx13 = 1;\n    let mut min_idx14\
    \ = 1;\n    let mut min_idx15 = 1;\n    let mut min_idx16 = 1;\n    let mut min_idx17\
    \ = 1;\n    let mut min_idx18 = 1;\n    let mut min_idx19 = 1;\n    let mut min_idx20\
    \ = 1;\n    let mut min_idx21 = 1;\n    let mut min_idx22 = 1;\n    let mut min_idx23\
    \ = 1;\n    let mut min_idx24 = 1;\n    let mut min_idx25 = 1;\n    let mut min_idx26\
    \ = 1;\n    let mut min_idx27 = 1;\n    let mut min_idx28 = 1;\n    let mut min_idx29\
    \ = 1;\n    let mut min_idx30 = 1;\n    let mut min_idx31 = 1;\n    let mut min_idx32\
    \ = 1;\n    let mut min_idx33 = 1;\n    let mut min_idx34 = 1;\n    let mut min_idx35\
    \ = 1;\n    let mut min_idx36 = 1;\n    let mut min_idx37 = 1;\n    let mut min_idx38\
    \ = 1;\n    let mut min_idx39 = 1;\n    let mut min_idx40 = 1;\n    let mut min_idx41\
    \ = 1;\n    let mut min_idx42 = 1;\n    let mut min_idx43 = 1;\n    let mut min_idx44\
    \ = 1;\n    let mut min_idx45 = 1;\n    let mut min_idx46 = 1;\n    let mut min_idx47\
    \ = 1;\n    let mut min_idx48 = 1;\n    let mut min_idx49 = 1;\n    let mut min_idx50\
    \ = 1;\n    let mut min_idx51 = 1;\n    let mut min_idx52 = 1;\n    let mut min_idx53\
    \ = 1;\n    let mut min_idx54 = 1;\n    let mut min_idx55 = 1;\n    let mut min_idx56\
    \ = 1;\n    let mut min_idx57 = 1;\n    let mut min_idx58 = 1;\n    let mut min_idx59\
    \ = 1;\n    let mut min_idx60 = 1;\n    let mut min_idx61 = 1;\n    let \n}\n\n\
    fn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpfl3d6qo8.rs:93:1\n  \
    \ |\n93 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfl3d6qo8.rs:97:17\n   |\n97 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfl3d6qo8.rs:97:25\n \
    \  |\n97 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfl3d6qo8.rs:98:17\n   |\n98 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfl3d6qo8.rs:98:25\n   |\n98 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfl3d6qo8.rs:99:17\n   |\n99 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfl3d6qo8.rs:99:25\n   |\n99 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpfl3d6qo8.rs:100:17\n\
    \    |\n100 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpfl3d6qo8.rs:100:25\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpfl3d6qo8.rs:101:17\n\
    \    |\n101 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpfl3d6qo8.rs:101:25\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpfl3d6qo8.rs:102:1"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_arr = -1;\n    let mut even_values = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i == min_even_value {\n                min_even_index = even_values.len()\
    \ - 1;\n                min_even_index_in_arr = i;\n            }\n        }\n\
    \    }\n    if even_values.len() == 0 {\n        return Vec::new();\n    }\n \
    \   if min_even_index == -1 {\n        min_even_index = even_values.len() - 1;\n\
    \        min_even_index_in_arr = even_values[min_even_index];\n    }\n    let\
    \ mut min_even_index_in_arr_index = -1;\n    let mut min_even_index_in_arr_val\
    \ = -1;\n    for i in even_values.iter() {\n        if i == min_even_index_in_arr\
    \ {\n            min_even_index_in_arr_index = i;\n            min_even_index_in_arr_val\
    \ = min_even_index_in_arr;\n        }\n    }\n    let mut min_even_index_in_arr_index_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_val_in_arr = -1;\n    for i in even_values.iter()\
    \ {\n        if i == min_even_index_in_arr_index {\n            min_even_index_in_arr_index_in_arr\
    \ = i;\n            min_even_index_in_arr_val_in_arr = min_even_index_in_arr_index;\n\
    \        }\n    }\n    let mut min_even_index_in_arr_index_in_arr_in_arr = -1;\n\
    \    let mut min_even_index_in_arr_val_in_arr_in_arr = -1;\n    for i in even_values.iter()\
    \ {\n        if i == min_even_index_in_arr_index_in_arr {\n            min_even_index_in_arr_index_in_arr_in_arr\
    \ = i;\n            min_even_index_in_arr_val_in_arr_in_arr = min_even_index_in_arr_index_in_arr;\n\
    \        }\n    }\n    let mut min_even_index_in_arr_index_in_arr_in_arr_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_val_in_arr_in_arr_in_arr = -1;\n  \
    \  for i in even_values.iter() {\n        if i == min_even_index_in_arr_index_in_arr_in_arr\
    \ {\n            min_even_index_in_arr_index_in_arr_in_arr_in_arr = i;\n     \
    \       min_even_index_in_arr_val_in_arr_in_arr_in_arr = min_even_index_in_arr_index_in_arr_in_arr;\n\
    \        }\n    }\n    let mut min_even_index_in_arr_index_in_arr_in_arr_in_arr_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_val_in_arr_in_arr_in_arr_in_arr = -1;\n\
    \    for i in even_values.iter() {\n        if i == min_even_index_in_arr_index_in_arr_in_arr_in_\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp6twpjtlj.rs:95:3\n\
    \   |\n26 | fn pluck(arr: Vec<isize>) -> Vec<isize> {\n   |                  \
    \                       - unclosed delimiter\n...\n81 |     for i in even_values.iter()\
    \ {\n   |                                 - this delimiter might not be properly\
    \ closed...\n82 |         if i == min_even_index_in_arr_index_in_arr_in_arr_in_\n\
    83 | }\n   | - ...as it matches this but it has different indentation\n...\n95\
    \ | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp6twpjtlj.rs:83:1\n\
    \   |\n82 |         if i == min_even_index_in_arr_index_in_arr_in_arr_in_\n  \
    \ |         -- this `if` expression has a condition, but no block\n83 | }\n  \
    \ | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmp6twpjtlj.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6twpjtlj.rs:87:25\n   |\n87 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6twpjtlj.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6twpjtlj.rs:88:25\n   |\n88 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6twpjtlj.rs:89:17\n  \
    \ |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6twpjtlj.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6twpjtlj.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value[i] = i;\n           \
    \     smallest_index[i] = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     smallest_value[0] = even_values[0];\n        smallest_index[0] = even_values[0];\n\
    \        return vec![smallest_value[0], smallest_index[0]];\n    }\n    let mut\
    \ smallest_value = even_values[0];\n    let mut smallest_index = even_values[0];\n\
    \    for i in even_values.iter().rev() {\n        if i < smallest_value {\n  \
    \          smallest_value = i;\n            smallest_index = i;\n        }\n \
    \   }\n    smallest_value.push(smallest_index);\n    smallest_value.push(even_values.len());\n\
    \    smallest_value\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptu7zdden.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptu7zdden.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptu7zdden.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptu7zdden.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptu7zdden.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptu7zdden.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptu7zdden.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptu7zdden.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptu7zdden.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptu7zdden.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptu7zdden.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_val = arr[0];\n    let mut min_idx = 1;\n    let mut min_even_val\
    \ = false;\n    for &x in arr {\n        if x % 2 == 0 {\n            if min_even_val\
    \ {\n                min_even_val = false;\n            } else {\n           \
    \     min_even_val = true;\n                min_val = x;\n                min_idx\
    \ = 1;\n            }\n        } else {\n            if min_even_val {\n     \
    \           if x < min_val {\n                    min_even_val = false;\n    \
    \                min_val = x;\n                    min_idx = 1;\n            \
    \    } else {\n                    min_even_val = false;\n                   \
    \ min_val = x;\n                    min_idx = 2;\n                }\n        \
    \    } else {\n                if x < min_val {\n                    min_even_val\
    \ = true;\n                    min_val = x;\n                    min_idx = 1;\n\
    \                } else {\n                    min_even_val = true;\n        \
    \            min_val = x;\n                    min_idx = 2;\n                }\n\
    \            }\n        }\n    }\n    vec![min_val, min_idx]\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptae_ybky.rs:71:17\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptae_ybky.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptae_ybky.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptae_ybky.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptae_ybky.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptae_ybky.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptae_ybky.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptae_ybky.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptae_ybky.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptae_ybky.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptae_ybky.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n        }\n      \
    \  if i == smallest_value {\n            smallest_index = arr.len() - i;\n   \
    \     }\n        if i == smallest_value {\n            smallest_value = i;\n \
    \       }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n  \
    \  }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() == 2 {\n        return vec![even_values[0], even_values[1]];\n\
    \    }\n    if even_values.len() == 3 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2]];\n    }\n    if even_values.len() == 4 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3]];\n    }\n    if even_values.len()\
    \ == 5 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4]];\n    }\n    if even_values.len() == 6 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5]];\n    }\n    if even_values.len() == 7 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6]];\n    }\n    if even_values.len()\
    \ == 8 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4], even_values[5], even_values[6], even_values[7]];\n\
    \    }\n    if even_values.len() == 9 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2], even_values[3], even_values[4], even_values[5], even_values[6],\
    \ even_values[7], even_values[8]];\n    }\n    if even_values.len() == 10 {\n\
    \        return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6], even_values[7], even_values[8],\
    \ even_values[9]];\n    }\n    if even_values.len() == 11 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3], even_values[4], even_values[5],\
    \ even_values[6], even_values[7], even_values[8], even_values[9], even_values[10]];\n\
    \    }\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprlp72wlr.rs:81:17\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprlp72wlr.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprlp72wlr.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprlp72wlr.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprlp72wlr.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprlp72wlr.rs:83:25\n   |\n83 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprlp72wlr.rs:84:17\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprlp72wlr.rs:84:25\n   |\n84 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprlp72wlr.rs:85:17\n  \
    \ |\n85 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprlp72wlr.rs:85:25\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprlp72wlr.rs:86:17\n   |\n86 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    even_values.sort();\n    let mut result =\
    \ Vec::new();\n    for &i in even_values {\n        if i == smallest_value {\n\
    \            result.push(smallest_index);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpo468x604.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo468x604.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo468x604.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo468x604.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo468x604.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo468x604.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo468x604.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo468x604.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo468x604.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo468x604.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo468x604.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    even_values.sort_unstable_by(|a, b| a.cmp(b));\n\
    \    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values.iter().position(|x| x == smallest_value);\n    even_values.remove(&smallest_value);\n\
    \    even_values.remove(&smallest_index);\n    even_values.sort_unstable_by(|a,\
    \ b| a.cmp(b));\n    even_values.iter().cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpge10yclj.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpge10yclj.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpge10yclj.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpge10yclj.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpge10yclj.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpge10yclj.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpge10yclj.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpge10yclj.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpge10yclj.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpge10yclj.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpge10yclj.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = 0;\n    let mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr_plus_one\
    \ = 0;\n    let mut min_even_index_in_arr_minus_one = 0;\n    let mut min_even_index_in_arr_minus_two\
    \ = 0;\n    let mut min_even_index_in_arr_minus_three = 0;\n    let mut min_even_index_in_arr_minus_four\
    \ = 0;\n    let mut min_even_index_in_arr_minus_five = 0;\n    let mut min_even_index_in_arr_minus_six\
    \ = 0;\n    let mut min_even_index_in_arr_minus_seven = 0;\n    let mut min_even_index_in_arr_minus_eight\
    \ = 0;\n    let mut min_even_index_in_arr_minus_nine = 0;\n    let mut min_even_index_in_arr_minus_ten\
    \ = 0;\n    let mut min_even_index_in_arr_minus_eleven = 0;\n    let mut min_even_index_in_arr_minus_twelve\
    \ = 0;\n    let mut min_even_index_in_arr_minus_thirteen = 0;\n    let mut min_even_index_in_arr_minus_fourteen\
    \ = 0;\n    let mut min_even_index_in_arr_minus_fifteen = 0;\n    let mut min_even_index_in_arr_minus_sixteen\
    \ = 0;\n    let mut min_even_index_in_arr_minus_seventeen = 0;\n    let mut min_even_index_in_arr_minus_eighteen\
    \ = 0;\n    let mut min_even_index_in_arr_minus_nineteen = 0;\n    let mut min_even_index_in_arr_minus_twenty\
    \ = 0;\n    let mut min_even_index_in_arr_minus_thirty = 0;\n    let mut min_even_index_in_arr_minus_forty\
    \ = 0;\n    let mut min_even_index_in_arr_minus_fifty = 0;\n    let mut min_even_index_in_arr_minus_sixty\
    \ = 0;\n    let mut min_even_index_in_arr_minus_seventy = 0;\n    let mut min_even_index_in_arr_minus_eighty\
    \ = 0;\n    let mut min_even_index_in_arr_minus_ninety = 0;\n    let mut min_even_index_in_arr_minus_hundred\
    \ = 0;\n    let mut min_even_index_in_arr_minus_thousand = 0;\n    let mut min_even_index_in_arr_minus_million\
    \ = 0;\n    let mut min_even_index_in_arr_minus_billion = 0;\n    let mut min_even_index_in_arr_minus_trillion\
    \ = 0;\n    let mut min_even_index_in_arr_minus_quadrillion = 0;\n    let mut\
    \ min_even\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0xonox3l.rs:64:21\n   |\n\
    64 |     let mut min_even\n   |                     ^ help: add `;` here\n65 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp0xonox3l.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0xonox3l.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0xonox3l.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0xonox3l.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0xonox3l.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0xonox3l.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0xonox3l.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0xonox3l.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0xonox3l.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0xonox3l.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `lef"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n          \
    \  if min_value == isize {\n                min_value = i;\n                min_idx\
    \ = i;\n            } else {\n                if min_value > i {\n           \
    \         min_value = i;\n                    min_idx = i;\n                }\n\
    \            }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0423]: expected value, found builtin type `isize`\n  --> /tmp/tmp3xw3cyei.rs:31:29\n\
    \   |\n31 |             if min_value == isize {\n   |                        \
    \     ^^^^^ not a value\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3xw3cyei.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3xw3cyei.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3xw3cyei.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3xw3cyei.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3xw3cyei.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3xw3cyei.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3xw3cyei.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3xw3cyei.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3xw3cyei.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3xw3cyei.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot "
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n          \
    \  if min_value == isize {\n                min_value = i;\n                min_idx\
    \ = i;\n            } else {\n                if min_value > i {\n           \
    \         min_value = i;\n                    min_idx = i;\n                }\n\
    \            }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0423]: expected value, found builtin type `isize`\n  --> /tmp/tmp3xw3cyei.rs:31:29\n\
    \   |\n31 |             if min_value == isize {\n   |                        \
    \     ^^^^^ not a value\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3xw3cyei.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3xw3cyei.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3xw3cyei.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3xw3cyei.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3xw3cyei.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3xw3cyei.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3xw3cyei.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3xw3cyei.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3xw3cyei.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3xw3cyei.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot "
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values[0];\n    for &i in even_values {\n       \
    \ if i < smallest_value {\n            smallest_even_value = i;\n            smallest_even_index\
    \ = i;\n        }\n    }\n    let mut result = vec![];\n    for &i in arr {\n\
    \        if i == smallest_even_index {\n            result.push(smallest_even_value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1f8_o1a7.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1f8_o1a7.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1f8_o1a7.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1f8_o1a7.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1f8_o1a7.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1f8_o1a7.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1f8_o1a7.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1f8_o1a7.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1f8_o1a7.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1f8_o1a7.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1f8_o1a7.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ > i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n \
    \   let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7f5pe_er.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7f5pe_er.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7f5pe_er.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7f5pe_er.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7f5pe_er.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7f5pe_er.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7f5pe_er.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7f5pe_er.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7f5pe_er.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7f5pe_er.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7f5pe_er.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    even_values.sort();\n    let mut result =\
    \ Vec::new();\n    for i in even_values.iter() {\n        if i == smallest_value\
    \ {\n            result.push(smallest_index);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwq7uoh9u.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwq7uoh9u.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwq7uoh9u.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwq7uoh9u.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwq7uoh9u.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwq7uoh9u.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwq7uoh9u.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwq7uoh9u.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwq7uoh9u.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwq7uoh9u.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwq7uoh9u.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 =\
    \ 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7\
    \ = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10\
    \ = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsjke2j_9.rs:91:20\n   |\n\
    91 |     let mut min_idx\n   |                    ^ help: add `;` here\n92 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsjke2j_9.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsjke2j_9.rs:96:25\n   |\n96 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsjke2j_9.rs:97:17\n   |\n97 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsjke2j_9.rs:97:25\n   |\n97 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsjke2j_9.rs:98:17\n  \
    \ |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsjke2j_9.rs:98:25\n   |\n98 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsjke2j_9.rs:99:17\n   |\n99 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsjke2j_9.rs:99:25\n\
    \   |\n99 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \   --> /tmp/tmpsjke2j_9.rs:100:17\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpsjke2j_9.rs:100:25\n    |\n100 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_and_index = vec![];\n\
    \    for &i in even_values {\n        if i == smallest_value {\n            smallest_value_and_index.push((i,\
    \ smallest_index));\n        }\n    }\n    smallest_value_and_index.sort_by_key(|&(_,\
    \ index)| index);\n    smallest_value_and_index\n        .into_iter()\n      \
    \  .map(|&(_, index)| index)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmhbykosl.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmhbykosl.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmhbykosl.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmhbykosl.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmhbykosl.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmhbykosl.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmhbykosl.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmhbykosl.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmhbykosl.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmhbykosl.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmhbykosl.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n        }\n      \
    \  if even_values.len() == 0 {\n            break;\n        }\n        if even_values.iter().min().unwrap()\
    \ == i {\n            smallest_value.push(even_values.iter().min().unwrap());\n\
    \            smallest_index.push(even_values.iter().min().unwrap());\n       \
    \ }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n \
    \   if even_values.iter().min().unwrap() == smallest_value.iter().min().unwrap()\
    \ {\n        return vec![smallest_value.iter().min().unwrap()];\n    }\n    if\
    \ even_values.iter().min().unwrap() == smallest_index.iter().min().unwrap() {\n\
    \        return vec![smallest_index.iter().min().unwrap()];\n    }\n    if even_values.iter().min().unwrap()\
    \ == smallest_value.iter().min().unwrap() &&\n        even_values.iter().min().unwrap()\
    \ == smallest_index.iter().min().unwrap() {\n        return vec![smallest_value.iter().min().unwrap(),\
    \ smallest_index.iter().min().unwrap()];\n    }\n    return vec![];\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8kvrdg59.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8kvrdg59.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8kvrdg59.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8kvrdg59.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8kvrdg59.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8kvrdg59.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8kvrdg59.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8kvrdg59.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8kvrdg59.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8kvrdg59.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8kvrdg59.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ isize::MAX;\n    let mut even_values = Vec::new();\n    for &i in arr {\n  \
    \      if i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    if even_values.len() == 1 {\n        return even_values.iter().cloned().collect();\n\
    \    }\n    let mut even_values_iter = even_values.iter().cloned();\n    let mut\
    \ even_values_iter = even_values_iter.enumerate().cloned();\n    let mut even_values_iter\
    \ = even_values_iter.filter(|&(i, _)| i % 2 == 0);\n    let mut even_values_iter\
    \ = even_values_iter.map(|&i| i);\n    let mut even_values_iter = even_values_iter.enumerate().cloned();\n\
    \    let mut even_values_iter = even_values_iter.filter(|&(i, _)| i % 2 == 0);\n\
    \    let mut even_values_iter = even_values_iter.map(|&i| i);\n    let mut even_values_iter\
    \ = even_values_iter.enumerate().cloned();\n    let mut even_values_iter = even_values_iter.filter(|&(i,\
    \ _)| i % 2 == 0);\n    let mut even_values_iter = even_values_iter.map(|&i| i);\n\
    \    let mut even_values_iter = even_values_iter.enumerate().cloned();\n    let\
    \ mut even_values_iter = even_values_iter.filter(|&(i, _)| i % 2 == 0);\n    let\
    \ mut even_values_iter = even_values_iter.map(|&i| i);\n    let mut even_values_iter\
    \ = even_values_iter.enumerate().cloned();\n    let mut even_values_iter = even_values_iter.filter(|&(i,\
    \ _)| i % 2 == 0);\n    let mut even_values_iter = even_values_iter.map(|&i| i);\n\
    \    let mut even_values_iter = even_values_iter.enumerate().cloned();\n    let\
    \ mut even_values_iter = even_values_iter.filter(|&(i, _)| i % 2 == 0);\n    let\
    \ mut even_values_iter = even_values_iter.map(|&i| i);\n    let mut even_values_iter\
    \ = even_values_iter.enumerate().cloned();\n    let mut even_values_iter = even_values_iter.filter(|&(i,\
    \ _)| i % 2 == 0);\n    let mut even_value\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprqh4v5d3.rs:66:23\n   |\n\
    66 |     let mut even_value\n   |                       ^ help: add `;` here\n\
    67 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmprqh4v5d3.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprqh4v5d3.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprqh4v5d3.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprqh4v5d3.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprqh4v5d3.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprqh4v5d3.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprqh4v5d3.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprqh4v5d3.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprqh4v5d3.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprqh4v5d3.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value "
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = vec![0];\n    let mut smallest_index = vec![0];\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            even_values.push(i);\n            if smallest_value[0]\
    \ < i {\n                smallest_value = vec![i];\n                smallest_index\
    \ = vec![i];\n            }\n        }\n    }\n    if even_values.len() == 0 {\n\
    \        return vec![];\n    }\n    if even_values.len() == 1 {\n        return\
    \ vec![smallest_value[0], smallest_index[0]];\n    }\n    let mut smallest_value_pos\
    \ = 0;\n    let mut smallest_index_pos = 0;\n    let mut smallest_value_neg =\
    \ 0;\n    let mut smallest_index_neg = 0;\n    for &i in even_values {\n     \
    \   if i < smallest_value[0] {\n            smallest_value_pos = i;\n        \
    \    smallest_index_pos = i;\n        }\n        if i > smallest_value[0] {\n\
    \            smallest_value_neg = i;\n            smallest_index_neg = i;\n  \
    \      }\n    }\n    let mut smallest_value = vec![0];\n    let mut smallest_index\
    \ = vec![0];\n    if smallest_value_neg < smallest_value[0] {\n        smallest_value\
    \ = vec![0];\n        smallest_index = vec![0];\n    }\n    if smallest_value_neg\
    \ < smallest_value[0] {\n        smallest_value = vec![0];\n        smallest_index\
    \ = vec![0];\n    }\n    if smallest_value_pos < smallest_value[0] {\n       \
    \ smallest_value = vec![0];\n        smallest_index = vec![0];\n    }\n    if\
    \ smallest_value_pos < smallest_value[0] {\n        smallest_value = vec![0];\n\
    \        smallest_index = vec![0];\n    }\n    if smallest_index_neg < smallest_index[0]\
    \ {\n        smallest_value = vec![0];\n        smallest_index = vec![0];\n  \
    \  }\n    if smallest_index_neg < smallest_index[0] {\n        smallest_value\
    \ = vec![0];\n        smallest_index = vec![0];\n    }\n    if smallest_index_pos\
    \ < smallest_index[0] {\n        smallest_value = vec![0];\n        smallest_index\
    \ = vec![0];\n    }\n    if smallest_index_pos < smallest_index[0] {\n       \
    \ smallest_value = vec![0];\n        smallest_index = vec![0];\n    }\n    if\
    \ smallest_value[0] < smallest_value[0] {\n        smallest_value = vec![0];\n\
    \        smallest_index = vec![0];\n    }\n    if smallest_value[0] < smallest_value[0]\
    \ {\n\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwxfkmevo.rs:111:3\n\
    \    |\n26  | fn pluck(arr: Vec<isize>) -> Vec<isize> {\n    |               \
    \                          - unclosed delimiter\n...\n97  |     if smallest_value[0]\
    \ < smallest_value[0] {\n    |                                              -\
    \ this delimiter might not be properly closed...\n98  | \n99  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n111 | }\n    |   ^\n\n\
    error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpwxfkmevo.rs:103:17\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpwxfkmevo.rs:103:25\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpwxfkmevo.rs:104:17\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpwxfkmevo.rs:104:25\n    |\n104 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpwxfkmevo.rs:105:17\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpwxfkmevo.rs:105:25\n    |\n105 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpwxfkmevo.rs:106:17\n\
    \    |\n106 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpwxfkmevo.rs:106:25\n    |\n106 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpwxfkmevo"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    even_values.sort_unstable();\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_value);\n    even_values.retain(|&i| i != smallest_value);\n \
    \   if even_values.len() == 0 {\n        return Vec::new();\n    }\n    let mut\
    \ result = Vec::new();\n    while smallest_even_index != even_values.len() {\n\
    \        result.push(smallest_even_value);\n        smallest_even_value = even_values[smallest_even_index];\n\
    \        smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpo_g3hdtz.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo_g3hdtz.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo_g3hdtz.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo_g3hdtz.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo_g3hdtz.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo_g3hdtz.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo_g3hdtz.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo_g3hdtz.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo_g3hdtz.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo_g3hdtz.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo_g3hdtz.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            min_value\
    \ = i;\n            min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaglb5e2z.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpaglb5e2z.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpaglb5e2z.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpaglb5e2z.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpaglb5e2z.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpaglb5e2z.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaglb5e2z.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n        \
    \    if smallest_value < i {\n                smallest_value = i;\n          \
    \      smallest_index = i;\n            }\n        }\n    }\n    smallest_index\n\
    \        .iter()\n        .cloned()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsnsr_t5a.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsnsr_t5a.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsnsr_t5a.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsnsr_t5a.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsnsr_t5a.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsnsr_t5a.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsnsr_t5a.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsnsr_t5a.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsnsr_t5a.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsnsr_t5a.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsnsr_t5a.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values.iter().position(|&x| x < smallest_value);\n\
    \    for i in even_values.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if i < smallest_value {\n                smallest_even_value = i;\n       \
    \         smallest_even_index = i;\n            }\n        }\n    }\n    let mut\
    \ even_values_copy = even_values.clone();\n    even_values_copy.remove(smallest_even_index);\n\
    \    even_values_copy.push(smallest_even_value);\n    even_values_copy\n}\n\n\
    fn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpuzm8g854.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuzm8g854.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuzm8g854.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuzm8g854.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuzm8g854.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuzm8g854.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuzm8g854.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuzm8g854.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuzm8g854.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuzm8g854.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuzm8g854.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n     \
    \   return Vec::new();\n    }\n    let mut smallest_value = isize::MAX;\n    let\
    \ mut smallest_index = isize::MAX;\n    for i in even_values.iter() {\n      \
    \  if i < smallest_value {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    let mut result = Vec::new();\n    for i in even_values.iter()\
    \ {\n        if i == smallest_value {\n            result.push(smallest_index);\n\
    \        }\n    }\n    if result.len() == 0 {\n        return Vec::new();\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqx6vzr_8.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqx6vzr_8.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqx6vzr_8.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqx6vzr_8.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqx6vzr_8.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqx6vzr_8.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqx6vzr_8.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqx6vzr_8.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqx6vzr_8.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqx6vzr_8.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqx6vzr_8.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ == isize {\n                min_value = i;\n                min_idx = i;\n \
    \           } else {\n                if min_value > i {\n                   \
    \ min_value = i;\n                    min_idx = i;\n                }\n      \
    \      }\n        }\n    }\n    if min_value == isize {\n        vec![]\n    }\
    \ else {\n        vec![min_value, min_idx]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0423]: expected value, found builtin type `isize`\n  --> /tmp/tmpist7s9x7.rs:31:29\n\
    \   |\n31 |             if min_value == isize {\n   |                        \
    \     ^^^^^ not a value\n\nerror[E0423]: expected value, found builtin type `isize`\n\
    \  --> /tmp/tmpist7s9x7.rs:42:21\n   |\n42 |     if min_value == isize {\n   |\
    \                     ^^^^^ not a value\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpist7s9x7.rs:51:17\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpist7s9x7.rs:51:25\n \
    \  |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpist7s9x7.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpist7s9x7.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpist7s9x7.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpist7s9x7.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpist7s9x7.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpist7s9x7.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpist7s9x7.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right`"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ usize = 0;\n    let mut even_values: Vec<isize> = Vec::new();\n    for value\
    \ in arr {\n        if value % 2 == 0 {\n            even_values.push(value);\n\
    \        }\n        if value < smallest_value {\n            smallest_value =\
    \ value;\n            smallest_index = even_values.iter().position(|x| x == smallest_value).unwrap();\n\
    \        }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    even_values.sort_unstable();\n    even_values.dedup();\n    even_values.into_iter().cloned().collect::<Vec<_>>()[smallest_index]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmp00qv37.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmp00qv37.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmp00qv37.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmp00qv37.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmp00qv37.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmp00qv37.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmp00qv37.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmp00qv37.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmp00qv37.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmp00qv37.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmp00qv37.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    let mut index = 0;\n   \
    \ for &value in arr {\n        if value % 2 == 0 {\n            even_values.push(value);\n\
    \            if value < smallest_value {\n                smallest_value = value;\n\
    \                smallest_index = index;\n            }\n        }\n        index\
    \ += 1;\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.ded\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpltzp7fly.rs:100:17\n\
    \    |\n100 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpltzp7fly.rs:100:25\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpltzp7fly.rs:101:17\n\
    \    |\n101 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpltzp7fly.rs:101:25\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpltzp7fly.rs:102:17\n\
    \    |\n102 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpltzp7fly.rs:102:25\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpltzp7fly.rs:103:17\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpltzp7fly.rs:103:25\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpltzp7fly.rs:104:17\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpltzp7fly.rs:104:25\n    |\n104 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpltzp7fly.rs:105:17\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                 ^^^^"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = -1;\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_index = i;\n        \
    \    }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = even_values.iter().position(|x| x == smallest_value);\n    for i in even_values.iter_mut()\
    \ {\n        *i = *i + 1;\n        if *i %2 == 0 {\n            if *i < smallest_value\
    \ {\n                smallest_value = *i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    even_values.remove(smallest_index);\n  \
    \  even_values.sort();\n    even_values.iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpf29bbedq.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf29bbedq.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf29bbedq.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf29bbedq.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf29bbedq.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf29bbedq.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf29bbedq.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf29bbedq.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf29bbedq.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf29bbedq.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf29bbedq.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = 0;\n\
    \    for i in arr.iter() {\n        if *i < *min_value {\n            min_value\
    \ = *i;\n            min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0hfe4zsu.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0hfe4zsu.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0hfe4zsu.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0hfe4zsu.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0hfe4zsu.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0hfe4zsu.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0hfe4zsu.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0hfe4zsu.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0hfe4zsu.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0hfe4zsu.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0hfe4zsu.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value[i] = i;\n           \
    \     smallest_index[i] = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_pos = 0;\n\
    \    for i in even_values.iter() {\n        if smallest_value[smallest_value_pos]\
    \ < i {\n            smallest_value_pos = i;\n        }\n    }\n    let mut smallest_value_neg\
    \ = even_values.len() - 1;\n    for i in even_values.iter().rev() {\n        if\
    \ smallest_value[smallest_value_neg] > i {\n            smallest_value_neg = i;\n\
    \        }\n    }\n    if smallest_value_neg < smallest_value_pos {\n        smallest_value_neg\
    \ = smallest_value_pos + 1;\n    }\n    smallest_value.swap(smallest_value_neg,\
    \ smallest_value_pos);\n    smallest_index.swap(smallest_value_neg, smallest_value_pos);\n\
    \    even_values.swap(smallest_value_neg, smallest_value_pos);\n    vec![smallest_value[smallest_value_pos],\
    \ smallest_index[smallest_value_pos]]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpu9pr8s7j.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu9pr8s7j.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu9pr8s7j.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpu9pr8s7j.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu9pr8s7j.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu9pr8s7j.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpu9pr8s7j.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpu9pr8s7j.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpu9pr8s7j.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu9pr8s7j.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu9pr8s7j.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr.iter().min().unwrap();\n    let mut min_value_index\
    \ = arr.iter().min_by_key(|x| x).unwrap();\n    let mut result = vec![];\n   \
    \ for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i {\n                min_value_index = i;\n            } else {\n       \
    \         min_value = i;\n                min_value_index = i;\n            }\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result.push(min_value);\n\
    \    result.push(min_value_index);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplpz4h_yj.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplpz4h_yj.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplpz4h_yj.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplpz4h_yj.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplpz4h_yj.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplpz4h_yj.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplpz4h_yj.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplpz4h_yj.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplpz4h_yj.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplpz4h_yj.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplpz4h_yj.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr.iter().min().unwrap();\n    let mut min_idx = 0;\n\
    \    for idx in arr.iter().rev() {\n        if idx < min_idx {\n            min_idx\
    \ = idx;\n        }\n        if min_value % 2 == 0 {\n            min_value =\
    \ min_value / 2;\n        }\n    }\n    let mut result = vec![];\n    for idx\
    \ in arr.iter().rev() {\n        if idx < min_idx {\n            result.push(idx);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7exbrwnk.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7exbrwnk.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7exbrwnk.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7exbrwnk.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7exbrwnk.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7exbrwnk.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7exbrwnk.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7exbrwnk.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7exbrwnk.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7exbrwnk.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7exbrwnk.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n     \
    \   return vec![];\n    }\n    let mut even_values_sorted = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_sorted.sort_unstable();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    if even_values_sorted_iter.len()\
    \ == 1 {\n        return vec![even_values_sorted_iter[0]];\n    }\n    let mut\
    \ even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpc5j8bjnp.rs:61:17\n   |\n\
    61 |     let mut even\n   |                 ^ help: add `;` here\n62 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc5j8bjnp.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc5j8bjnp.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc5j8bjnp.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc5j8bjnp.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc5j8bjnp.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc5j8bjnp.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc5j8bjnp.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc5j8bjnp.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc5j8bjnp.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc5j8bjnp.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = vec![0];\n    let mut smallest_index = vec![0];\n    for i in 0..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n   \
    \         if arr[i] < smallest_value.len() {\n                smallest_value =\
    \ vec![arr[i]];\n                smallest_index = vec![i];\n            }\n  \
    \      }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n   \
    \ }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n \
    \   }\n    if even_values.len() > 1 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mut smallest_even_index = even_values[0];\n        for i in 1..even_values.len()\
    \ {\n            if even_values[i] < smallest_even_value {\n                smallest_even_value\
    \ = even_values[i];\n                smallest_even_index = even_values[i];\n \
    \           }\n        }\n        return vec![smallest_even_value];\n    }\n \
    \   return vec![];\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbwiaahn7.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbwiaahn7.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbwiaahn7.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbwiaahn7.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbwiaahn7.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbwiaahn7.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbwiaahn7.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbwiaahn7.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbwiaahn7.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbwiaahn7.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbwiaahn7.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    let mut index_of_smallest_value\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    for &i in even_values {\n   \
    \     if i == smallest_value {\n            index_of_smallest_value = i;\n   \
    \     }\n    }\n    even_values.remove(index_of_smallest_value);\n    even_values.sort();\n\
    \    even_values\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0r7ucd6_.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0r7ucd6_.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0r7ucd6_.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0r7ucd6_.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0r7ucd6_.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0r7ucd6_.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0r7ucd6_.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0r7ucd6_.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0r7ucd6_.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0r7ucd6_.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0r7ucd6_.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 1;\n\
    \    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 =\
    \ 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7\
    \ = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10\
    \ = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpppg3u48k.rs:91:20\n   |\n\
    91 |     let mut min_idx\n   |                    ^ help: add `;` here\n92 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpppg3u48k.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpppg3u48k.rs:96:25\n   |\n96 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpppg3u48k.rs:97:17\n   |\n97 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpppg3u48k.rs:97:25\n   |\n97 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpppg3u48k.rs:98:17\n  \
    \ |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpppg3u48k.rs:98:25\n   |\n98 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpppg3u48k.rs:99:17\n   |\n99 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpppg3u48k.rs:99:25\n\
    \   |\n99 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \   --> /tmp/tmpppg3u48k.rs:100:17\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpppg3u48k.rs:100:25\n    |\n100 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter().rev() {\n\
    \        if i % 2 == 0 {\n            if i < smallest_even_value {\n         \
    \       smallest_even_value = i;\n                smallest_even_index = i;\n \
    \           }\n        }\n    }\n    smallest_value.to_vec().push(smallest_even_index);\n\
    \    smallest_value\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyg44vwce.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyg44vwce.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyg44vwce.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyg44vwce.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyg44vwce.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyg44vwce.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyg44vwce.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyg44vwce.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyg44vwce.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyg44vwce.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyg44vwce.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = 0;\n    let mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2\
    \ = 0;\n    let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4\
    \ = 0;\n    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6\
    \ = 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even\n}\n\n\
    fn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz1s3idpc.rs:74:21\n   |\n\
    74 |     let mut min_even\n   |                     ^ help: add `;` here\n75 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz1s3idpc.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz1s3idpc.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz1s3idpc.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz1s3idpc.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz1s3idpc.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz1s3idpc.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz1s3idpc.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz1s3idpc.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz1s3idpc.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz1s3idpc.rs:83:25\n   |\n83 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `lef"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value[i] = i;\n           \
    \     smallest_index[i] = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    smallest_value_iter.sort();\n    let mut smallest_value = smallest_value_iter.next().unwrap();\n\
    \    let mut smallest_index = smallest_value_iter.next().unwrap();\n    for i\
    \ in even_values.iter() {\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_index = i;\n        }\n    }\n    smallest_value.push(smallest_index);\n\
    \    smallest_value\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqb3od08o.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqb3od08o.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqb3od08o.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqb3od08o.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqb3od08o.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqb3od08o.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqb3od08o.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqb3od08o.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqb3od08o.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqb3od08o.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqb3od08o.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_value_with_even_value =\
    \ even_values[smallest_index];\n    let mut smallest_index_with_even_value = smallest_index;\n\
    \    for i in even_values.iter() {\n        if i != smallest_value_with_even_value\
    \ {\n            smallest_value_with_even_value = i;\n            smallest_index_with_even_value\
    \ = i;\n        }\n    }\n    let mut result = Vec::new();\n    for i in even_values.iter()\
    \ {\n        if i != smallest_value_with_even_value {\n            result.push(i);\n\
    \        }\n    }\n    result.push(smallest_value_with_even_value);\n    result.push(smallest_index_with_even_value);\n\
    \    result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpti481gsk.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpti481gsk.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpti481gsk.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpti481gsk.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpti481gsk.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpti481gsk.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpti481gsk.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpti481gsk.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpti481gsk.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpti481gsk.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpti481gsk.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr[0];\n    let mut min_idx = 1;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_value > i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptx2jhza4.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptx2jhza4.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptx2jhza4.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptx2jhza4.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptx2jhza4.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptx2jhza4.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptx2jhza4.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptx2jhza4.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptx2jhza4.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptx2jhza4.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptx2jhza4.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_value_index\
    \ = 0;\n    let mut min_value_index2 = 0;\n    let mut min_value_index3 = 0;\n\
    \    let mut min_value_index4 = 0;\n    let mut min_value_index5 = 0;\n    let\
    \ mut min_value_index6 = 0;\n    let mut min_value_index7 = 0;\n    let mut min_value_index8\
    \ = 0;\n    let mut min_value_index9 = 0;\n    let mut min_value_index10 = 0;\n\
    \    let mut min_value_index11 = 0;\n    let mut min_value_index12 = 0;\n    let\
    \ mut min_value_index13 = 0;\n    let mut min_value_index14 = 0;\n    let mut\
    \ min_value_index15 = 0;\n    let mut min_value_index16 = 0;\n    let mut min_value_index17\
    \ = 0;\n    let mut min_value_index18 = 0;\n    let mut min_value_index19 = 0;\n\
    \    let mut min_value_index20 = 0;\n    let mut min_value_index21 = 0;\n    let\
    \ mut min_value_index22 = 0;\n    let mut min_value_index23 = 0;\n    let mut\
    \ min_value_index24 = 0;\n    let mut min_value_index25 = 0;\n    let mut min_value_index26\
    \ = 0;\n    let mut min_value_index27 = 0;\n    let mut min_value_index28 = 0;\n\
    \    let mut min_value_index29 = 0;\n    let mut min_value_index30 = 0;\n    let\
    \ mut min_value_index31 = 0;\n    let mut min_value_index32 = 0;\n    let mut\
    \ min_value_index33 = 0;\n    let mut min_value_index34 = 0;\n    let mut min_value_index35\
    \ = 0;\n    let mut min_value_index36 = 0;\n    let mut min_value_index37 = 0;\n\
    \    let mut min_value_index38 = 0;\n    let mut min_value_index39 = 0;\n    let\
    \ mut min_value_index40 = 0;\n    let mut min_value_index41 = 0;\n    let mut\
    \ min_value_index42 = 0;\n    let mut min_value_index43 = 0;\n    let mut min_value_index44\
    \ = 0;\n    let mut min_value_index45 = 0;\n    let mut min_value_index46 = 0;\n\
    \    let mut min_value_index47 = 0;\n    let mut min_value_index48 = 0;\n    let\
    \ mut min_value_index49 = 0;\n    let mut min_value_index50 = 0;\n    let mut\
    \ min_value_index51 = 0;\n    let mut min_value_index52 = 0;\n    let mut min_value_index53\
    \ = 0;\n    let mut min_value_index54 = 0;\n    let mut min_value_index55 = 0;\n\
    \    let mut min_value_index56 = 0;\n    let mut min_value\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd6g7ac2q.rs:84:22\n   |\n\
    84 |     let mut min_value\n   |                      ^ help: add `;` here\n85\
    \ | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpd6g7ac2q.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd6g7ac2q.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd6g7ac2q.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd6g7ac2q.rs:90:25\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd6g7ac2q.rs:91:17\n  \
    \ |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd6g7ac2q.rs:91:25\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd6g7ac2q.rs:92:17\n   |\n92 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd6g7ac2q.rs:92:25\n\
    \   |\n92 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd6g7ac2q.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd6g7ac2q.rs:93:25\n   |\n93 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `l"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_index2 = 0;\n\
    \    let mut smallest_index3 = 0;\n    let mut smallest_index4 = 0;\n    let mut\
    \ smallest_index5 = 0;\n    let mut smallest_index6 = 0;\n    let mut smallest_index7\
    \ = 0;\n    let mut smallest_index8 = 0;\n    let mut smallest_index9 = 0;\n \
    \   let mut smallest_index10 = 0;\n    let mut smallest_index11 = 0;\n    let\
    \ mut smallest_index12 = 0;\n    let mut smallest_index13 = 0;\n    let mut smallest_index14\
    \ = 0;\n    let mut smallest_index15 = 0;\n    let mut smallest_index16 = 0;\n\
    \    let mut smallest_index17 = 0;\n    let mut smallest_index18 = 0;\n    let\
    \ mut smallest_index19 = 0;\n    let mut smallest_index20 = 0;\n    let mut smallest_index21\
    \ = 0;\n    let mut smallest_index22 = 0;\n    let mut smallest_index23 = 0;\n\
    \    let mut smallest_index24 = 0;\n    let mut smallest_index25 = 0;\n    let\
    \ mut smallest_index26 = 0;\n    let mut smallest_index27 = 0;\n    let mut smallest_index28\
    \ = 0;\n    let mut smallest_index29 = 0;\n    let mut smallest_index30 = 0;\n\
    \    let mut smallest_index31 = 0;\n    let mut smallest_index32 = 0;\n    let\
    \ mut smallest_index33 = 0;\n    let mut smallest_index34 = 0;\n    let mut smallest_index35\
    \ = 0;\n    let mut smallest_index36 = 0;\n    let mut smallest_index37 = 0;\n\
    \    let mut smallest_index38 = 0;\n    let mut smallest_index39 = 0;\n    let\
    \ mut smallest_index40 = 0;\n    let mut smallest_index41 = 0;\n    let mut smallest_index42\
    \ = 0;\n    let mut smallest_index43 = 0;\n    let mut smallest_index44 = 0;\n\
    \    let mut smallest_index45 = 0;\n    let mut smallest_index46 = 0;\n    let\
    \ mut smallest_index47 = 0;\n    let mut smallest_index48 = 0;\n    let mut smallest_index49\
    \ = 0;\n    let mut smallest_index50 = 0;\n    let mut smallest_index51 = 0;\n\
    \    let mut smallest_index52 = 0;\n    let mut smallest_index53 = 0;\n    let\
    \ mut smallest_index54 = 0;\n    let mut smallest_index55 = 0;\n    let mu\n}\n\
    \nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0lquf6qk.rs:84:11\n   |\n\
    84 |     let mu\n   |           ^ help: add `;` here\n85 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0lquf6qk.rs:89:17\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0lquf6qk.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0lquf6qk.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0lquf6qk.rs:90:25\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0lquf6qk.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0lquf6qk.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0lquf6qk.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0lquf6qk.rs:92:25\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0lquf6qk.rs:93:17\n  \
    \ |\n93 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0lquf6qk.rs:93:25\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    if min_idx == -1 {\n        return Vec::new();\n\
    \    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp71g2g_x.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp71g2g_x.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp71g2g_x.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp71g2g_x.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp71g2g_x.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp71g2g_x.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp71g2g_x.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp71g2g_x.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp71g2g_x.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp71g2g_x.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp71g2g_x.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n \
    \   let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptyt_fvfr.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptyt_fvfr.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptyt_fvfr.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptyt_fvfr.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptyt_fvfr.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptyt_fvfr.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptyt_fvfr.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_index = -1;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index >\
    \ i {\n                smallest_even_index = i;\n                smallest_even_value\
    \ = i;\n            }\n        } else {\n            if smallest_index == -1 ||\
    \ smallest_index > i {\n                smallest_index = i;\n            }\n \
    \       }\n    }\n    if smallest_even_index == -1 {\n        return vec![];\n\
    \    }\n    let mut result = vec![];\n    if smallest_even_index < smallest_index\
    \ {\n        result.push(smallest_even_value);\n        result.push(smallest_even_index);\n\
    \    } else {\n        result.push(smallest_index);\n        result.push(smallest_even_index);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp7sjvpzs.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp7sjvpzs.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp7sjvpzs.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp7sjvpzs.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp7sjvpzs.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp7sjvpzs.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp7sjvpzs.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp7sjvpzs.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp7sjvpzs.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp7sjvpzs.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp7sjvpzs.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_value_and_index = Vec::new();\n   \
    \ smallest_value_and_index.push(smallest_value, smallest_index);\n    even_values.sort_unstable();\n\
    \    for &i in even_values {\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_index = i;\n        }\n        smallest_value_and_index.push(i);\n\
    \    }\n    smallest_value_and_index\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9i9t9fmp.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9i9t9fmp.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9i9t9fmp.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9i9t9fmp.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9i9t9fmp.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9i9t9fmp.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9i9t9fmp.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9i9t9fmp.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9i9t9fmp.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9i9t9fmp.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9i9t9fmp.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_val <\
    \ i {\n                min_val = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if min_val == i32::MAX {\n        return Vec::new();\n\
    \    }\n    let mut result = Vec::new();\n    for i in arr.iter() {\n        if\
    \ i == min_val {\n            result.push(min_idx);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc0_lgju7.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc0_lgju7.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc0_lgju7.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc0_lgju7.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc0_lgju7.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc0_lgju7.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc0_lgju7.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc0_lgju7.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc0_lgju7.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc0_lgju7.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc0_lgju7.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter().rev() {\n\
    \        if i % 2 == 0 {\n            if i < smallest_even_value {\n         \
    \       smallest_even_value = i;\n                smallest_even_index = i;\n \
    \           }\n        }\n    }\n    even_values.remove(smallest_even_index);\n\
    \    even_values.insert(0, smallest_even_value);\n    even_values.insert(0, smallest_index);\n\
    \    even_values\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi7jgimuq.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi7jgimuq.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi7jgimuq.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi7jgimuq.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi7jgimuq.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi7jgimuq.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi7jgimuq.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi7jgimuq.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi7jgimuq.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi7jgimuq.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi7jgimuq.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_even_index_in_arr = 0;\n    for &mut i in arr.iter_mut()\
    \ {\n        if i % 2 == 0 {\n            smallest_even_value = i;\n         \
    \   smallest_even_index = i;\n            smallest_even_index_in_arr = i;\n  \
    \      }\n    }\n    let mut smallest_even_index_in_arr2 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr3 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr4 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr5\
    \ = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr6 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr7 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr8 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr9\
    \ = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr10 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr11 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr12 = smallest_even_index_in_arr;\n    let mut\
    \ smallest_even_index_in_arr13 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr14\
    \ = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr15 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr16 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr17 = smallest_even_index_in_arr;\n    let mut\
    \ smallest_even_index_in_arr18 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr19\
    \ = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr20 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr21 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr22 = smallest_even_index_in_arr;\n    let mut\
    \ smallest_even_index_in_arr23 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr24\
    \ = smallest_even_index_in_arr;\n\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpoig19o2n.rs:68:17\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoig19o2n.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoig19o2n.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoig19o2n.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoig19o2n.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoig19o2n.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoig19o2n.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoig19o2n.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoig19o2n.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoig19o2n.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoig19o2n.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ usize = 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            even_values.push(i);\n        }\n        if\
    \ i == smallest_value {\n            smallest_index = arr.iter().position(|&i|\
    \ i == smallest_value).unwrap();\n        }\n        if i == smallest_value {\n\
    \            smallest_value = i;\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n      \
    \  return vec![even_values[0]];\n    }\n    if even_values.len() == 2 {\n    \
    \    let mut smallest_even_value = even_values[0];\n        let mut smallest_even_index\
    \ = even_values[1];\n        for i in even_values.iter().rev() {\n           \
    \ if i == smallest_value {\n                smallest_even_value = i;\n       \
    \         smallest_even_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \            }\n        }\n        return vec![smallest_even_value];\n    }\n\
    \    if even_values.len() == 3 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mut smallest_even_index = even_values[1];\n        for i in even_values.iter().rev()\
    \ {\n            if i == smallest_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \            }\n        }\n        return vec![smallest_even_value];\n    }\n\
    \    if even_values.len() == 4 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mut smallest_even_index = even_values[1];\n        for i in even_values.iter().rev()\
    \ {\n            if i == smallest_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \            }\n        }\n        return vec![smallest_even_value];\n    }\n\
    \    if even_values.len() == 5 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mut smallest_even_index = even_values[1];\n        for i in even_values.iter().rev()\
    \ {\n            if i == smallest_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \            }\n        }\n        return vec![smallest_even_value];\n    }\n\
    \    if even_values.len() == 6 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mu\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmphwb4yhw6.rs:106:3\n\
    \    |\n26  | fn pluck(arr: Vec<isize>) -> Vec<isize> {\n    |               \
    \                          - unclosed delimiter\n...\n91  |     if even_values.len()\
    \ == 6 {\n    |                               - this delimiter might not be properly\
    \ closed...\n...\n94  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n106 | }\n    |   ^\n\nerror: expected `;`, found `}`\n  -->\
    \ /tmp/tmphwb4yhw6.rs:93:15\n   |\n93 |         let mu\n   |               ^ help:\
    \ add `;` here\n94 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmphwb4yhw6.rs:98:17\n   |\n98 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphwb4yhw6.rs:98:25\n \
    \  |\n98 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphwb4yhw6.rs:99:17\n   |\n99 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphwb4yhw6.rs:99:25\n   |\n99 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmphwb4yhw6.rs:100:17\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmphwb4yhw6.rs:100:25\n    |\n100 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmphwb4yhw6.rs:101:17\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmphwb4yhw6.rs:101:25\n    |\n101 |\
    \     assert_eq!({left}, {right});\n    |                         "
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i < min_value\
    \ {\n                min_value = *i;\n                min_idx = i;\n         \
    \   }\n        }\n    }\n    if min_value == i32::MAX {\n        Vec::new()\n\
    \    } else {\n        vec![min_value, min_idx]\n    }\n}\n\nfn main() {\n   \
    \ let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfbq8vd4z.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfbq8vd4z.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfbq8vd4z.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfbq8vd4z.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfbq8vd4z.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfbq8vd4z.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfbq8vd4z.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfbq8vd4z.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfbq8vd4z.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfbq8vd4z.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfbq8vd4z.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value: isize = 0;\n    let mut min_even_index:\
    \ usize = 0;\n    let mut even_values: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            even_indexes.push(i);\n       \
    \ } else {\n            if min_even_value < i {\n                min_even_value\
    \ = i;\n                min_even_index = i;\n            }\n        }\n    }\n\
    \    if even_values.len() == 0 {\n        return Vec::new();\n    }\n    let mut\
    \ min_even_value = even_values[0];\n    let mut min_even_index = even_indexes[0];\n\
    \    for i in even_values.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  min_even_value = i;\n            min_even_index = i;\n        }\n    }\n  \
    \  let mut even_values = even_values.iter().cloned().collect();\n    let mut even_indexes\
    \ = even_indexes.iter().cloned().collect();\n    for i in even_indexes.iter().rev()\
    \ {\n        if even_values[i] % 2 == 0 {\n            even_values[i] = even_values[i]\
    \ - 1;\n            even_indexes[i] = i;\n        }\n    }\n    even_values.sort_unstable();\n\
    \    even_indexes.sort_unstable();\n    let mut even_values = even_values.iter().cloned().collect();\n\
    \    let mut even_indexes = even_indexes.iter().cloned().collect();\n    for i\
    \ in even_indexes.iter().rev() {\n        if even_values[i] % 2 == 0 {\n     \
    \       even_values[i] = even_values[i] - 1;\n            even_indexes[i] = i;\n\
    \        }\n    }\n    even_values.sort_unstable();\n    even_indexes.sort_unstable();\n\
    \    let mut even_values = even_values.iter().cloned().collect();\n    let mut\
    \ even_indexes = even_indexes.iter().cloned().collect();\n    for i in even_indexes.iter().rev()\
    \ {\n        if even_values[i] % 2 == 0 {\n            even_values[i] = even_values[i]\
    \ - 1;\n            even_indexes[i] = i;\n        }\n    }\n    even_values.sort_unstable();\n\
    \    even_indexes.sort_unstable();\n    let mut even_values = even_values.iter().cloned().collect();\n\
    \    let mut even_indexes = even_indexes.iter().cloned().collect();\n    for i\
    \ in even_indexes.iter().rev() {\n        if even_values[i] % 2 == 0 {\n     \
    \       even_values[i] = even_values[i] - 1;\n            even_indexes[i] = i;\n\
    \        }\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp32zdgz7o.rs:102:3\n\
    \    |\n26  | fn pluck(arr: Vec<isize>) -> Vec<isize> {\n    |               \
    \                          - unclosed delimiter\n...\n85  |     for i in even_indexes.iter().rev()\
    \ {\n    |                                        - this delimiter might not be\
    \ properly closed...\n...\n90  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n102 | }\n    |   ^\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp32zdgz7o.rs:94:17\n   |\n94 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp32zdgz7o.rs:94:25\n \
    \  |\n94 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp32zdgz7o.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp32zdgz7o.rs:95:25\n   |\n95 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp32zdgz7o.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp32zdgz7o.rs:96:25\n   |\n96 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp32zdgz7o.rs:97:17\n  \
    \ |\n97 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp32zdgz7o.rs:97:25\n   |\n97 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp32zdgz7o.rs:98:17\n   |\n98 |\
    \     assert_eq!({left}, {right});\n   "
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_index = -1;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if smallest_even_value < i {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        } else\
    \ {\n            if smallest_index == -1 || smallest_even_value < i {\n      \
    \          smallest_index = i;\n            }\n        }\n    }\n    smallest_even_index.into()\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyyfa7mac.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyyfa7mac.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyyfa7mac.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyyfa7mac.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyyfa7mac.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyyfa7mac.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyyfa7mac.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyyfa7mac.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyyfa7mac.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyyfa7mac.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyyfa7mac.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_arr = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_even_index == -1 || min_even_index\
    \ > i {\n                min_even_index = i;\n                min_even_index_in_arr\
    \ = i;\n            }\n        }\n    }\n    if min_even_index == -1 {\n     \
    \   return Vec::new();\n    }\n    let mut even_values = Vec::new();\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = -1;\n    for i in even_values.iter().rev() {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut smallest_even_index_in_arr = -1;\n    for i in\
    \ even_values.iter().rev() {\n        if i < smallest_even_value {\n         \
    \   smallest_even_index_in_arr = i;\n        }\n    }\n    if smallest_even_index_in_arr\
    \ == -1 {\n        return Vec::new();\n    }\n    let mut result = Vec::new();\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if i ==\
    \ smallest_even_index_in_arr {\n                result.push(smallest_even_value);\n\
    \            } else {\n                result.push(i);\n            }\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpo0ltnu2l.rs:82:17\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0ltnu2l.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo0ltnu2l.rs:83:17\n   |\n83 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo0ltnu2l.rs:83:25\n\
    \   |\n83 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0ltnu2l.rs:84:17\n   |\n84 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0ltnu2l.rs:84:25\n   |\n84 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0ltnu2l.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0ltnu2l.rs:85:25\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0ltnu2l.rs:86:17\n  \
    \ |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0ltnu2l.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo0ltnu2l.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    even_values.sort_unstable();\n    even_values.dedup();\n\
    \    let mut result = Vec::new();\n    let mut i = 0;\n    for &i in even_values\
    \ {\n        if i == smallest_index {\n            result.push(smallest_value);\n\
    \        } else {\n            result.push(i);\n        }\n        i += 1;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpapt3i5lv.rs:59:17\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpapt3i5lv.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpapt3i5lv.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpapt3i5lv.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpapt3i5lv.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpapt3i5lv.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpapt3i5lv.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpapt3i5lv.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpapt3i5lv.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpapt3i5lv.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpapt3i5lv.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = -1;\n\
    \    let mut min_idx2 = -1;\n    for i in arr.iter().rev() {\n        if i % 2\
    \ == 0 {\n            if min_value == i {\n                min_idx2 = min_idx;\n\
    \            } else {\n                min_idx2 = min_idx;\n                min_idx\
    \ = i;\n            }\n        } else {\n            min_idx2 = min_idx;\n   \
    \         min_idx = i;\n        }\n        min_value = i;\n    }\n    if min_idx2\
    \ == min_idx {\n        vec![min_value, min_idx]\n    } else {\n        vec![min_value,\
    \ min_idx2]\n    }\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcd702wvc.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcd702wvc.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcd702wvc.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcd702wvc.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcd702wvc.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcd702wvc.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcd702wvc.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcd702wvc.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcd702wvc.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcd702wvc.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcd702wvc.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value ==\
    \ isize::MAX {\n                min_value = i;\n                min_idx = i;\n\
    \            } else {\n                if i < min_value {\n                  \
    \  min_value = i;\n                    min_idx = i;\n                }\n     \
    \       }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd55txgg3.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd55txgg3.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd55txgg3.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd55txgg3.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd55txgg3.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd55txgg3.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd55txgg3.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd55txgg3.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd55txgg3.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd55txgg3.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd55txgg3.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = arr[0];\n    let mut min_idx = 1;\n \
    \   let mut min_even_val = false;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            if min_even_val {\n                min_even_val = false;\n  \
    \              min_idx = i;\n            } else {\n                min_even_val\
    \ = true;\n                min_val = i;\n            }\n        }\n    }\n   \
    \ if min_even_val {\n        min_even_val = false;\n        min_idx = min_val;\n\
    \    }\n    vec![min_val, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprsbemd3h.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprsbemd3h.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprsbemd3h.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprsbemd3h.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprsbemd3h.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprsbemd3h.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprsbemd3h.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprsbemd3h.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprsbemd3h.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprsbemd3h.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprsbemd3h.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value = i32::MAX;\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_value\
    \ < i {\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    vec![smallest_value, smallest_index]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph7cqnz71.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph7cqnz71.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph7cqnz71.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph7cqnz71.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph7cqnz71.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph7cqnz71.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph7cqnz71.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph7cqnz71.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph7cqnz71.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph7cqnz71.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph7cqnz71.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = isize::MAX;\n    let mut\
    \ smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = Vec::new();\n    for &i in even_values\
    \ {\n        if i == smallest_even_value {\n            result.push(i);\n    \
    \    }\n    }\n    result.push(smallest_even_index);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpl6932szy.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl6932szy.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl6932szy.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl6932szy.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl6932szy.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl6932szy.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl6932szy.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl6932szy.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl6932szy.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl6932szy.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl6932szy.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for &i in even_values\
    \ {\n        if i < smallest_value {\n            smallest_even_value = i;\n \
    \           smallest_even_index = i;\n        }\n    }\n    even_values.remove(&mut\
    \ smallest_even_value);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.sort_unstable();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `even` in this scope\n  --> /tmp/tmpduxoiwt1.rs:94:5\n\
    \   |\n94 |     even\n   |     ^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpduxoiwt1.rs:99:17\n   |\n99 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpduxoiwt1.rs:99:25\n\
    \   |\n99 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \   --> /tmp/tmpduxoiwt1.rs:100:17\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpduxoiwt1.rs:100:25\n    |\n100 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpduxoiwt1.rs:101:17\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpduxoiwt1.rs:101:25\n    |\n101 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpduxoiwt1.rs:102:17\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpduxoiwt1.rs:102:25\n    |\n102 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpduxoiwt1.rs:103:17\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpduxoiwt1.rs:103:25\n    |\n103 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find "
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    let mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            if min_val < i {\n   \
    \             min_val = i;\n                min_idx = i;\n            }\n    \
    \    }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n \
    \   }\n    let mut smallest_val = i32::MAX;\n    let mut smallest_idx = -1;\n\
    \    for i in even_values.iter() {\n        if i < smallest_val {\n          \
    \  smallest_val = i;\n            smallest_idx = i;\n        }\n    }\n    even_values.remove(&smallest_idx);\n\
    \    even_values.sort_unstable();\n    even_values.dedup();\n    even_values.into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyfx5lm9h.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyfx5lm9h.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyfx5lm9h.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyfx5lm9h.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyfx5lm9h.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyfx5lm9h.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyfx5lm9h.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyfx5lm9h.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyfx5lm9h.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyfx5lm9h.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyfx5lm9h.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.ded\n}\n\n\
    fn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpe6_8kkhm.rs:99:17\n\
    \   |\n99 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe6_8kkhm.rs:99:25\n   |\n99 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n   --> /tmp/tmpe6_8kkhm.rs:100:17\n    |\n\
    100 |     assert_eq!({left}, {right});\n    |                 ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `right` in this scope\n   -->\
    \ /tmp/tmpe6_8kkhm.rs:100:25\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpe6_8kkhm.rs:101:17\n\
    \    |\n101 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpe6_8kkhm.rs:101:25\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpe6_8kkhm.rs:102:17\n\
    \    |\n102 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpe6_8kkhm.rs:102:25\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpe6_8kkhm.rs:103:17\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpe6_8kkhm.rs:103:25\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpe6_8kkhm.rs:104:17\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n          \
    \  if min_value > i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn\
    \ main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpplx00g72.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpplx00g72.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpplx00g72.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpplx00g72.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpplx00g72.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpplx00g72.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpplx00g72.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpplx00g72.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpplx00g72.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpplx00g72.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpplx00g72.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 1;\n\
    \    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 =\
    \ 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7\
    \ = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10\
    \ = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpppg3u48k.rs:91:20\n   |\n\
    91 |     let mut min_idx\n   |                    ^ help: add `;` here\n92 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpppg3u48k.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpppg3u48k.rs:96:25\n   |\n96 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpppg3u48k.rs:97:17\n   |\n97 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpppg3u48k.rs:97:25\n   |\n97 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpppg3u48k.rs:98:17\n  \
    \ |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpppg3u48k.rs:98:25\n   |\n98 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpppg3u48k.rs:99:17\n   |\n99 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpppg3u48k.rs:99:25\n\
    \   |\n99 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \   --> /tmp/tmpppg3u48k.rs:100:17\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpppg3u48k.rs:100:25\n    |\n100 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ usize = 0;\n    let mut mut_smallest_value: isize = 0;\n    let mut mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_smallest_value: isize = 0;\n    let mut\
    \ mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_smallest_index: usize = 0;\n    let\
    \ mut mut_mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_value: isize = 0;\n\
    \    let mut mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize\
    \ = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value: isize\
    \ = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize\
    \ = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mu\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwnoyct4n.rs:49:71\n   |\n\
    49 |     let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mu\n\
    \   |                                                                       ^\
    \ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwnoyct4n.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwnoyct4n.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwnoyct4n.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwnoyct4n.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwnoyct4n.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwnoyct4n.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwnoyct4n.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwnoyct4n.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwnoyct4n.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwnoyct4n.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \        }\n        if i < smallest_value {\n            smallest_value = i;\n\
    \            smallest_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    even_values.sort();\n    even_values.dedup();\n    even_values.first().unwrap()\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0xyr3eec.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0xyr3eec.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0xyr3eec.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0xyr3eec.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0xyr3eec.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0xyr3eec.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0xyr3eec.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0xyr3eec.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0xyr3eec.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0xyr3eec.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0xyr3eec.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_value\
    \ < i {\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    vec![smallest_value, smallest_index]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptkqqmd9h.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptkqqmd9h.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptkqqmd9h.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptkqqmd9h.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptkqqmd9h.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptkqqmd9h.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptkqqmd9h.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptkqqmd9h.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptkqqmd9h.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptkqqmd9h.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptkqqmd9h.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_even_index_in_list = -1;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_index = i;\n                smallest_even_index_in_list\
    \ = i;\n            }\n        } else {\n            if smallest_even_index ==\
    \ -1 || smallest_even_index > i {\n                smallest_even_index = i;\n\
    \                smallest_even_index_in_list = i;\n            }\n        }\n\
    \    }\n    if smallest_even_index == -1 {\n        return Vec::new();\n    }\n\
    \    let mut result = vec![smallest_even_value];\n    if smallest_even_index_in_list\
    \ != -1 {\n        result.push(smallest_even_index_in_list);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6l6l_o49.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6l6l_o49.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6l6l_o49.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6l6l_o49.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6l6l_o49.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6l6l_o49.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6l6l_o49.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6l6l_o49.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6l6l_o49.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6l6l_o49.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6l6l_o49.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < min_value {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut min_even_value = even_values[0];\n    let mut min_even_idx\
    \ = even_values.iter().position(|&x| x == min_even_value);\n    while min_even_idx\
    \ < even_values.len() - 1 {\n        if even_values[min_even_idx + 1] < min_value\
    \ {\n            min_even_value = even_values[min_even_idx + 1];\n           \
    \ min_even_idx = min_even_idx + 1;\n        } else {\n            break;\n   \
    \     }\n    }\n    let mut even_values_copy = even_values.clone();\n    even_values_copy.remove(0);\n\
    \    even_values_copy.remove(0);\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpek9chboj.rs:89:17\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpek9chboj.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpek9chboj.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpek9chboj.rs:90:25\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpek9chboj.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpek9chboj.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpek9chboj.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpek9chboj.rs:92:25\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpek9chboj.rs:93:17\n  \
    \ |\n93 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpek9chboj.rs:93:25\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpek9chboj.rs:94:17\n   |\n94 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_val < i {\n\
    \                min_val = i;\n                min_idx = i;\n            }\n \
    \       }\n    }\n    if min_val == i32::MAX {\n        return Vec::new();\n \
    \   }\n    let mut result = Vec::new();\n    let mut idx = 1;\n    while idx <\
    \ arr.len() {\n        if arr[idx] % 2 == 0 {\n            result.push(arr[idx]);\n\
    \            idx += 1;\n        } else {\n            idx += 1;\n        }\n \
    \   }\n    if min_idx == -1 {\n        return result;\n    }\n    result.push(min_val);\n\
    \    result.push(min_idx);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppg2daja0.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppg2daja0.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppg2daja0.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppg2daja0.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppg2daja0.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppg2daja0.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppg2daja0.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppg2daja0.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppg2daja0.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppg2daja0.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppg2daja0.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            min_value = i;\n            min_idx\
    \ = i;\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n   \
    \ let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpy486oc0l.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy486oc0l.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy486oc0l.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy486oc0l.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy486oc0l.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy486oc0l.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy486oc0l.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy486oc0l.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy486oc0l.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy486oc0l.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy486oc0l.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = isize::MAX;\n    for &i in arr {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    even_values.sort();\n    if even_values[0] % 2 == 0 {\n        min_idx\
    \ = 0;\n    } else {\n        min_idx = even_values.iter().position(|&x| x % 2\
    \ == 0).unwrap();\n    }\n    even_values.remove(min_idx);\n    even_values\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpe0vb77lb.rs:54:17\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe0vb77lb.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe0vb77lb.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe0vb77lb.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe0vb77lb.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe0vb77lb.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpe0vb77lb.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpe0vb77lb.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe0vb77lb.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe0vb77lb.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe0vb77lb.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut min_value =\
    \ isize::MAX;\n    let mut min_index = isize::MAX;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ min_value {\n                min_value = i;\n                min_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = even_values[0];\n    for i in even_values.iter() {\n        if i < min_value\
    \ {\n            min_value = i;\n            smallest_value = i;\n           \
    \ smallest_index = i;\n        }\n    }\n    vec![smallest_value, smallest_index]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp10ccota7.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp10ccota7.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp10ccota7.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp10ccota7.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp10ccota7.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp10ccota7.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp10ccota7.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp10ccota7.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp10ccota7.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp10ccota7.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp10ccota7.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n \
    \   let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptyt_fvfr.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptyt_fvfr.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptyt_fvfr.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptyt_fvfr.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptyt_fvfr.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptyt_fvfr.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptyt_fvfr.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_val = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx2 =\
    \ 1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_val < i\
    \ {\n                min_val = i;\n                min_idx = min_idx2;\n     \
    \       }\n            min_idx2 = min_idx;\n        } else {\n            min_idx2\
    \ = min_idx;\n        }\n    }\n    vec![min_val, min_idx]\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcb4awuox.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcb4awuox.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcb4awuox.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcb4awuox.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcb4awuox.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcb4awuox.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcb4awuox.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcb4awuox.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcb4awuox.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcb4awuox.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcb4awuox.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ isize::MAX;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    if min_value == isize::MAX {\n        return Vec::new();\n\
    \    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpn3lcbi0y.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn3lcbi0y.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn3lcbi0y.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn3lcbi0y.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn3lcbi0y.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn3lcbi0y.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn3lcbi0y.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn3lcbi0y.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn3lcbi0y.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn3lcbi0y.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn3lcbi0y.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr[0];\n    let mut min_idx = 1;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            min_value = i;\n            min_idx = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    for &i in arr {\n       \
    \ if i == min_value {\n            result.push(min_idx);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp18p5iree.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp18p5iree.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp18p5iree.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp18p5iree.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp18p5iree.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp18p5iree.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp18p5iree.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp18p5iree.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp18p5iree.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp18p5iree.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp18p5iree.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            min_value = i;\n            min_idx = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    let mut idx = vec![];\n \
    \   for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            result.push(min_value);\n\
    \            idx.push(min_idx);\n            min_value = i;\n            min_idx\
    \ = i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgp3kbq6b.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgp3kbq6b.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgp3kbq6b.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgp3kbq6b.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgp3kbq6b.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgp3kbq6b.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgp3kbq6b.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgp3kbq6b.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgp3kbq6b.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgp3kbq6b.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgp3kbq6b.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_index2 = 0;\n\
    \    let mut smallest_index3 = 0;\n    let mut smallest_index4 = 0;\n    let mut\
    \ smallest_index5 = 0;\n    let mut smallest_index6 = 0;\n    let mut smallest_index7\
    \ = 0;\n    let mut smallest_index8 = 0;\n    let mut smallest_index9 = 0;\n \
    \   let mut smallest_index10 = 0;\n    let mut smallest_index11 = 0;\n    let\
    \ mut smallest_index12 = 0;\n    let mut smallest_index13 = 0;\n    let mut smallest_index14\
    \ = 0;\n    let mut smallest_index15 = 0;\n    let mut smallest_index16 = 0;\n\
    \    let mut smallest_index17 = 0;\n    let mut smallest_index18 = 0;\n    let\
    \ mut smallest_index19 = 0;\n    let mut smallest_index20 = 0;\n    let mut smallest_index21\
    \ = 0;\n    let mut smallest_index22 = 0;\n    let mut smallest_index23 = 0;\n\
    \    let mut smallest_index24 = 0;\n    let mut smallest_index25 = 0;\n    let\
    \ mut smallest_index26 = 0;\n    let mut smallest_index27 = 0;\n    let mut smallest_index28\
    \ = 0;\n    let mut smallest_index29 = 0;\n    let mut smallest_index30 = 0;\n\
    \    let mut smallest_index31 = 0;\n    let mut smallest_index32 = 0;\n    let\
    \ mut smallest_index33 = 0;\n    let mut smallest_index34 = 0;\n    let mut smallest_index35\
    \ = 0;\n    let mut smallest_index36 = 0;\n    let mut smallest_index37 = 0;\n\
    \    let mut smallest_index38 = 0;\n    let mut smallest_index39 = 0;\n    let\
    \ mut smallest_index40 = 0;\n    let mut smallest_index41 = 0;\n    let mut smallest_index42\
    \ = 0;\n    let mut smallest_index43 = 0;\n    let mut smallest_index44 = 0;\n\
    \    let mut smallest_index45 = 0;\n    let mut smallest_index46 = 0;\n    let\
    \ mut smallest_index47 = 0;\n    let mut smallest_index48 = 0;\n    let mut smallest_index49\
    \ = 0;\n    let mut smallest_index50 = 0;\n    let mut smallest_index51 = 0;\n\
    \    let mut smallest_index52 = 0;\n    let mut smallest_index53 = 0;\n    let\
    \ mut smallest_index54 = 0;\n    let mut smallest_index55 = 0;\n    let mu\n}\n\
    \nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0lquf6qk.rs:84:11\n   |\n\
    84 |     let mu\n   |           ^ help: add `;` here\n85 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0lquf6qk.rs:89:17\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0lquf6qk.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0lquf6qk.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0lquf6qk.rs:90:25\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0lquf6qk.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0lquf6qk.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0lquf6qk.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0lquf6qk.rs:92:25\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0lquf6qk.rs:93:17\n  \
    \ |\n93 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0lquf6qk.rs:93:25\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_and_index = vec![];\n\
    \    for i in even_values.iter() {\n        if i == smallest_value {\n       \
    \     smallest_value_and_index.push((i, smallest_index));\n        }\n    }\n\
    \    if smallest_value_and_index.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_value_and_index_sorted = vec![];\n    for i in smallest_value_and_index.iter()\
    \ {\n        smallest_value_and_index_sorted.push(i.0);\n    }\n    smallest_value_and_index_sorted.sort();\n\
    \    for i in smallest_value_and_index_sorted.iter() {\n        smallest_value_and_index_sorted.push(i\
    \ + 1);\n    }\n    smallest_value_and_index_sorted\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjp6rdsl2.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjp6rdsl2.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjp6rdsl2.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjp6rdsl2.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjp6rdsl2.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjp6rdsl2.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjp6rdsl2.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjp6rdsl2.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjp6rdsl2.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjp6rdsl2.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjp6rdsl2.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_value_index = -1;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ min_value {\n                min_value = i;\n                min_value_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    if even_values.len() == 1 {\n        return\
    \ even_values.iter().cloned().collect();\n    }\n    if even_values.len() > 1\
    \ {\n        let mut min_value = even_values[0];\n        let mut min_value_index\
    \ = 0;\n        for i in even_values.iter() {\n            if i < min_value {\n\
    \                min_value = i;\n                min_value_index = i;\n      \
    \      }\n        }\n        return vec![min_value, min_value_index];\n    }\n\
    \    return vec![];\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5ppozsf6.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5ppozsf6.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5ppozsf6.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5ppozsf6.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5ppozsf6.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5ppozsf6.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5ppozsf6.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5ppozsf6.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5ppozsf6.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5ppozsf6.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5ppozsf6.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    even_values.sort();\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_value);\n    if smallest_even_index == 0 {\n        smallest_even_index\
    \ = even_values.iter().position(|&i| i == smallest_value + 1);\n    }\n    even_values.truncate(smallest_even_index);\n\
    \    even_values.sort();\n    even_values.iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp30402zfp.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp30402zfp.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp30402zfp.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp30402zfp.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp30402zfp.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp30402zfp.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp30402zfp.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp30402zfp.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp30402zfp.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp30402zfp.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp30402zfp.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter().cloned() {\n        if i % 2 == 0 {\n            if min_val\
    \ > i {\n                min_val = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    vec![min_val, min_idx]\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpj10_f8kt.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj10_f8kt.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj10_f8kt.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj10_f8kt.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj10_f8kt.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj10_f8kt.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj10_f8kt.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj10_f8kt.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj10_f8kt.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj10_f8kt.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj10_f8kt.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = isize::MAX;\n    let mut min_even_index\
    \ = isize::MAX;\n    let mut even_values = Vec::new();\n    let mut even_indexes\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            if\
    \ min_even_value < i {\n                min_even_value = i;\n                min_even_index\
    \ = i;\n            }\n            even_values.push(i);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return even_indexes;\n\
    \    }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = even_indexes[0];\n    for i in even_values.iter().rev() {\n        if i <\
    \ smallest_value {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    even_values.retain(|&i| i == smallest_value);\n\
    \    even_indexes.retain(|&i| i == smallest_index);\n    even_values\n}\n\nfn\
    \ main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi_gr3t7_.rs:59:17\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi_gr3t7_.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi_gr3t7_.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi_gr3t7_.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi_gr3t7_.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi_gr3t7_.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi_gr3t7_.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi_gr3t7_.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi_gr3t7_.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi_gr3t7_.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi_gr3t7_.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value[i] = i;\n           \
    \     smallest_index[i] = i;\n            } else {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            }\n        }\n   \
    \ }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    let mut\
    \ smallest_value_iter = smallest_value.iter();\n    let mut smallest_index_iter\
    \ = smallest_index.iter();\n    let mut smallest_value = vec![];\n    let mut\
    \ smallest_index = vec![];\n    for i in even_values.iter() {\n        if smallest_value_iter.next().unwrap()\
    \ < i {\n            smallest_value.push(i);\n            smallest_index.push(i);\n\
    \        } else {\n            smallest_value.push(smallest_value_iter.next().unwrap());\n\
    \            smallest_index.push(smallest_index_iter.next().unwrap());\n     \
    \   }\n    }\n    smallest_value\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpczzskqwn.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpczzskqwn.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpczzskqwn.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpczzskqwn.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpczzskqwn.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpczzskqwn.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpczzskqwn.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpczzskqwn.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpczzskqwn.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpczzskqwn.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpczzskqwn.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n          \
    \  if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn\
    \ main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqvsz3zdo.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqvsz3zdo.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqvsz3zdo.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqvsz3zdo.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqvsz3zdo.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqvsz3zdo.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqvsz3zdo.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqvsz3zdo.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqvsz3zdo.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqvsz3zdo.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqvsz3zdo.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_value < i {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if min_value == i32::MAX {\n        return Vec::new();\n\
    \    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfdk6l2ij.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdk6l2ij.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdk6l2ij.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdk6l2ij.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdk6l2ij.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdk6l2ij.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfdk6l2ij.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfdk6l2ij.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdk6l2ij.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdk6l2ij.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdk6l2ij.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut even_values = vec![];\n    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n   \
    \         even_values.push(i);\n            if i < min_value {\n             \
    \   min_value = i;\n                min_idx = i;\n            }\n        }\n \
    \   }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    even_values.sort_unstable();\n\
    \    even_values.dedup();\n    let mut smallest_value = even_values[0];\n    let\
    \ mut smallest_idx = 0;\n    for i in even_values.iter().rev() {\n        if i\
    \ < smallest_value {\n            smallest_value = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_idx]\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp191n2yjv.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp191n2yjv.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp191n2yjv.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp191n2yjv.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp191n2yjv.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp191n2yjv.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp191n2yjv.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp191n2yjv.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp191n2yjv.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp191n2yjv.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp191n2yjv.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    let mut mut_arr = arr.iter().cloned().collect::<Vec<_>>();\n    for i in\
    \ mut_arr.iter_mut() {\n        if *i & 1 == 0 {\n            if *i < min_val\
    \ {\n                min_val = *i;\n                min_idx = i;\n           \
    \ }\n        }\n    }\n    if min_val == i32::MAX {\n        return Vec::new();\n\
    \    }\n    vec![min_val, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpy6oeafgs.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy6oeafgs.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy6oeafgs.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy6oeafgs.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy6oeafgs.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy6oeafgs.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy6oeafgs.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy6oeafgs.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy6oeafgs.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy6oeafgs.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy6oeafgs.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n        }\n      \
    \  if even_values.len() == 1 {\n            smallest_value.push(even_values[0]);\n\
    \            smallest_index.push(i);\n        }\n        if even_values.len()\
    \ > 1 {\n            if even_values[0] < smallest_value[0] {\n               \
    \ smallest_value.push(even_values[0]);\n                smallest_index.push(i);\n\
    \            }\n        }\n    }\n    smallest_value\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphjfm9z5i.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphjfm9z5i.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphjfm9z5i.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphjfm9z5i.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphjfm9z5i.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphjfm9z5i.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphjfm9z5i.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphjfm9z5i.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphjfm9z5i.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphjfm9z5i.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphjfm9z5i.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values[0];\n    for &i in even_values {\n   \
    \     if i < smallest_even_value {\n            smallest_even_value = i;\n   \
    \         smallest_even_index = i;\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `even` in this scope\n  --> /tmp/tmpk9x_4h9n.rs:95:5\n\
    \   |\n95 |     even\n   |     ^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n   --> /tmp/tmpk9x_4h9n.rs:100:17\n    |\n\
    100 |     assert_eq!({left}, {right});\n    |                 ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `right` in this scope\n   -->\
    \ /tmp/tmpk9x_4h9n.rs:100:25\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpk9x_4h9n.rs:101:17\n\
    \    |\n101 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpk9x_4h9n.rs:101:25\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpk9x_4h9n.rs:102:17\n\
    \    |\n102 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpk9x_4h9n.rs:102:25\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpk9x_4h9n.rs:103:17\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpk9x_4h9n.rs:103:25\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpk9x_4h9n.rs:104:17\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpk9x_4h9n.rs:104:25\n    |\n104 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ ca"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            min_value = i;\n            min_idx\
    \ = i;\n        }\n    }\n    let mut result = vec![];\n    for i in arr.iter().rev()\
    \ {\n        if i == min_value {\n            result.push(min_idx);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9ru09k0y.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9ru09k0y.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9ru09k0y.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9ru09k0y.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9ru09k0y.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9ru09k0y.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9ru09k0y.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9ru09k0y.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9ru09k0y.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9ru09k0y.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9ru09k0y.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    even_values.sort_unstable_by_key(|&i| i);\n\
    \    even_values.dedup();\n    even_values.iter().cloned().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpodgb4n9l.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpodgb4n9l.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpodgb4n9l.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpodgb4n9l.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpodgb4n9l.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpodgb4n9l.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpodgb4n9l.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpodgb4n9l.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpodgb4n9l.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpodgb4n9l.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpodgb4n9l.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_value_and_index = Vec::new();\n   \
    \ smallest_value_and_index.push(smallest_value, smallest_index);\n    for &i in\
    \ even_values {\n        let mut smallest_value_and_index_iter = smallest_value_and_index.iter();\n\
    \        if smallest_value_and_index_iter.next().unwrap().0 > i {\n          \
    \  smallest_value_and_index_iter.push(i);\n        }\n    }\n    smallest_value_and_index\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppenpdxfs.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppenpdxfs.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppenpdxfs.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppenpdxfs.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppenpdxfs.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppenpdxfs.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppenpdxfs.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppenpdxfs.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppenpdxfs.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppenpdxfs.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppenpdxfs.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n \
    \   let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptyt_fvfr.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptyt_fvfr.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptyt_fvfr.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptyt_fvfr.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptyt_fvfr.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptyt_fvfr.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptyt_fvfr.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptyt_fvfr.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for &i in even_values\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcpaol0ip.rs:99:17\n\
    \   |\n99 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcpaol0ip.rs:99:25\n   |\n99 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n   --> /tmp/tmpcpaol0ip.rs:100:17\n    |\n\
    100 |     assert_eq!({left}, {right});\n    |                 ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `right` in this scope\n   -->\
    \ /tmp/tmpcpaol0ip.rs:100:25\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpcpaol0ip.rs:101:17\n\
    \    |\n101 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpcpaol0ip.rs:101:25\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpcpaol0ip.rs:102:17\n\
    \    |\n102 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpcpaol0ip.rs:102:25\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpcpaol0ip.rs:103:17\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpcpaol0ip.rs:103:25\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpcpaol0ip.rs:104:17\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut min_value =\
    \ isize::MAX;\n    let mut min_index = isize::MAX;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ min_value {\n                min_value = i;\n                min_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = even_values[0];\n    for i in even_values.iter() {\n        if i < smallest_value\
    \ {\n            smallest_value = i;\n            smallest_index = i;\n      \
    \  }\n    }\n    let mut result = vec![];\n    for i in even_values.iter() {\n\
    \        if i == smallest_value {\n            result.push(smallest_index);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1q9qctfz.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1q9qctfz.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1q9qctfz.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1q9qctfz.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1q9qctfz.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1q9qctfz.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1q9qctfz.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1q9qctfz.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1q9qctfz.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1q9qctfz.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1q9qctfz.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_val <\
    \ i {\n                min_val = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if min_val == i32::MAX {\n        return Vec::new();\n\
    \    }\n    vec![min_val, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpza7k67fv.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpza7k67fv.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpza7k67fv.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpza7k67fv.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpza7k67fv.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpza7k67fv.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpza7k67fv.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpza7k67fv.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpza7k67fv.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpza7k67fv.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpza7k67fv.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = Vec::new();\n    for &i in arr {\n   \
    \     if i == smallest_value {\n            result.push(smallest_value);\n   \
    \         result.push(smallest_index);\n        } else if i == smallest_even_value\
    \ {\n            result.push(smallest_even_value);\n            result.push(smallest_even_index);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpquty97rs.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpquty97rs.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpquty97rs.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpquty97rs.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpquty97rs.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpquty97rs.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpquty97rs.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpquty97rs.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpquty97rs.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpquty97rs.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpquty97rs.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2\
    \ = 0;\n    let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4\
    \ = 0;\n    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6\
    \ = 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even\n}\n\n\
    fn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpriffuea2.rs:74:21\n   |\n\
    74 |     let mut min_even\n   |                     ^ help: add `;` here\n75 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpriffuea2.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpriffuea2.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpriffuea2.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpriffuea2.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpriffuea2.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpriffuea2.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpriffuea2.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpriffuea2.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpriffuea2.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpriffuea2.rs:83:25\n   |\n83 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `lef"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    even_values.sort_unstable_by_key(|&x| x);\n\
    \    even_values.first().unwrap()\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpv5_e3ls3.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv5_e3ls3.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv5_e3ls3.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv5_e3ls3.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv5_e3ls3.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv5_e3ls3.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv5_e3ls3.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv5_e3ls3.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv5_e3ls3.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv5_e3ls3.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv5_e3ls3.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter().cloned() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i32::MAX {\n                min_value = i;\n                min_idx = i;\n\
    \            } else {\n                if i < min_value {\n                  \
    \  min_value = i;\n                    min_idx = i;\n                }\n     \
    \       }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp45v1v2eb.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp45v1v2eb.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp45v1v2eb.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp45v1v2eb.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp45v1v2eb.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp45v1v2eb.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp45v1v2eb.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp45v1v2eb.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp45v1v2eb.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp45v1v2eb.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp45v1v2eb.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&x| x == smallest_value);\n\
    \    even_values.remove(&mut smallest_even_value);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.sort();\n    even_values.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcpcl97_4.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcpcl97_4.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcpcl97_4.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcpcl97_4.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcpcl97_4.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcpcl97_4.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcpcl97_4.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcpcl97_4.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcpcl97_4.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcpcl97_4.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcpcl97_4.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ usize = 0;\n    let mut even_values: Vec<isize> = Vec::new();\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n        }\n\
    \        if i == smallest_value {\n            smallest_index = arr.iter().position(|&i|\
    \ i == smallest_value);\n        }\n        if i == smallest_value {\n       \
    \     smallest_value = i;\n        }\n    }\n    if even_values.len() == 0 {\n\
    \        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = smallest_index;\n    for &i in even_values\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = arr.iter().position(|&i| i == smallest_even_value);\n\
    \        }\n    }\n    vec![smallest_even_value,\n         smallest_even_index]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxebbix2d.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxebbix2d.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxebbix2d.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxebbix2d.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxebbix2d.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxebbix2d.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxebbix2d.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxebbix2d.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxebbix2d.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxebbix2d.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxebbix2d.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i < min_val\
    \ {\n                min_val = *i;\n                min_idx = i;\n           \
    \ }\n        }\n    }\n    if min_val == i32::MAX {\n        return Vec::new();\n\
    \    }\n    let mut ret = Vec::new();\n    let mut idx = -1;\n    for i in arr.iter()\
    \ {\n        if *i % 2 == 0 {\n            if *i == min_val {\n              \
    \  ret.push(min_val);\n                idx += 1;\n            } else {\n     \
    \           ret.push(*i);\n            }\n        }\n    }\n    if idx < 0 {\n\
    \        return ret;\n    }\n    ret.push(min_val);\n    ret.push(idx);\n    ret\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp99g82ka3.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp99g82ka3.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp99g82ka3.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp99g82ka3.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp99g82ka3.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp99g82ka3.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp99g82ka3.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp99g82ka3.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp99g82ka3.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp99g82ka3.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp99g82ka3.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n     \
    \   return Vec::new();\n    }\n    let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.in\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `in`\n  --> /tmp/tmpchaz2rc3.rs:58:49\n\
    \   |\n58 |     let mut even_values_iter = even_values_iter.in\n   |         \
    \                                        ^^ expected identifier, found keyword\n\
    \   |\nhelp: you can escape reserved keywords to use them as identifiers\n   |\n\
    58 |     let mut even_values_iter = even_values_iter.r#in\n   |              \
    \                                   ~~~~\n\nerror: expected `;`, found `}`\n \
    \ --> /tmp/tmpchaz2rc3.rs:58:51\n   |\n58 |     let mut even_values_iter = even_values_iter.in\n\
    \   |                                                   ^ help: add `;` here\n\
    59 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpchaz2rc3.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpchaz2rc3.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpchaz2rc3.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpchaz2rc3.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpchaz2rc3.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpchaz2rc3.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpchaz2rc3.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpchaz2rc3.rs:66:25\n\
    \   |\n66 |     assert_eq"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n     \
    \   return Vec::new();\n    }\n    even_values.sort();\n    let mut even_values_index\
    \ = even_values.iter().cloned().enumerate().find(|&(_, v)| v == min_value);\n\
    \    if even_values_index == even_values.len() {\n        return Vec::new();\n\
    \    }\n    let mut even_values_index = even_values_index.0;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp11v1jav_.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp11v1jav_.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp11v1jav_.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp11v1jav_.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp11v1jav_.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp11v1jav_.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp11v1jav_.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp11v1jav_.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp11v1jav_.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp11v1jav_.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp11v1jav_.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_index\
    \ = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n        \
    \    if min_value < i {\n                min_value = i;\n                min_index\
    \ = i;\n            }\n        }\n    }\n    if min_value == isize::MAX {\n  \
    \      Vec::new()\n    } else {\n        vec![min_value, min_index]\n    }\n}\n\
    \nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpe1g0qy4v.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe1g0qy4v.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe1g0qy4v.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe1g0qy4v.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe1g0qy4v.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe1g0qy4v.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpe1g0qy4v.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpe1g0qy4v.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe1g0qy4v.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe1g0qy4v.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe1g0qy4v.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in 1..arr.len()\
    \ {\n        if arr[i] < min_value {\n            min_value = arr[i];\n      \
    \      min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvrh6lij0.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvrh6lij0.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvrh6lij0.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvrh6lij0.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvrh6lij0.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvrh6lij0.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvrh6lij0.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvrh6lij0.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvrh6lij0.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvrh6lij0.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvrh6lij0.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `even` in this scope\n  --> /tmp/tmp8rh5q_uw.rs:96:5\n\
    \   |\n96 |     even\n   |     ^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n   --> /tmp/tmp8rh5q_uw.rs:101:17\n    |\n\
    101 |     assert_eq!({left}, {right});\n    |                 ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `right` in this scope\n   -->\
    \ /tmp/tmp8rh5q_uw.rs:101:25\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp8rh5q_uw.rs:102:17\n\
    \    |\n102 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp8rh5q_uw.rs:102:25\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp8rh5q_uw.rs:103:17\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp8rh5q_uw.rs:103:25\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp8rh5q_uw.rs:104:17\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp8rh5q_uw.rs:104:25\n    |\n104 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp8rh5q_uw.rs:105:17\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp8rh5q_uw.rs:105:25\n    |\n105 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ ca"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value: isize = 0;\n    let mut min_even_index:\
    \ usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value:\
    \ isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value:\
    \ isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value:\
    \ isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzp3k8d43.rs:83:17\n   |\n\
    83 |     let mut min_\n   |                 ^ help: add `;` here\n84 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzp3k8d43.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzp3k8d43.rs:88:25\n   |\n88 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzp3k8d43.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzp3k8d43.rs:89:25\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzp3k8d43.rs:90:17\n  \
    \ |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzp3k8d43.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzp3k8d43.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzp3k8d43.rs:91:25\n\
    \   |\n91 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzp3k8d43.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzp3k8d43.rs:92:25\n   |\n92 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if even_values.len()\
    \ == 1 {\n                smallest_value.push(even_values[0]);\n             \
    \   smallest_index.push(i);\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n  \
    \      let mut smallest_value = even_values[0];\n        let mut smallest_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i % 2 == 0 {\n                if i < smallest_value {\n                 \
    \   smallest_value = i;\n                    smallest_index = i;\n           \
    \     }\n            }\n        }\n        return vec![smallest_value, smallest_index];\n\
    \    }\n    return vec![];\n}\n\nfn main() {\n    let candidate = pluck;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpclnrrrxo.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpclnrrrxo.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpclnrrrxo.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpclnrrrxo.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpclnrrrxo.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpclnrrrxo.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpclnrrrxo.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpclnrrrxo.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpclnrrrxo.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpclnrrrxo.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpclnrrrxo.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ 0;\n    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i <\
    \ min_value {\n                min_value = *i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyt7p2jm4.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyt7p2jm4.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyt7p2jm4.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyt7p2jm4.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyt7p2jm4.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyt7p2jm4.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyt7p2jm4.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyt7p2jm4.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyt7p2jm4.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyt7p2jm4.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyt7p2jm4.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n        }\n      \
    \  if i < smallest_value.len() {\n            smallest_value.push(i);\n      \
    \  }\n        if i < smallest_index.len() {\n            smallest_index.push(i);\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_even_value =\
    \ even_values[0];\n        let mut smallest_even_index = even_values[0];\n   \
    \     for i in even_values.iter().rev() {\n            if i % 2 == 0 {\n     \
    \           if i < smallest_even_value {\n                    smallest_even_value\
    \ = i;\n                    smallest_even_index = i;\n                }\n    \
    \        }\n        }\n        return vec![smallest_even_value,\n            \
    \        smallest_even_index];\n    }\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5o4bd9u8.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5o4bd9u8.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5o4bd9u8.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5o4bd9u8.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5o4bd9u8.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5o4bd9u8.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5o4bd9u8.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5o4bd9u8.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5o4bd9u8.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5o4bd9u8.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5o4bd9u8.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = i;\n        }\n        if i == smallest_value\
    \ {\n            smallest_value = i;\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for &i in even_values {\n        if\
    \ i == smallest_even_value {\n            smallest_even_index = i;\n        }\n\
    \        if i == smallest_even_value {\n            smallest_even_value = i;\n\
    \        }\n    }\n    vec![smallest_value, smallest_index, smallest_even_value]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptzr035bf.rs:59:17\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptzr035bf.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptzr035bf.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptzr035bf.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptzr035bf.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptzr035bf.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptzr035bf.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptzr035bf.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptzr035bf.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptzr035bf.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptzr035bf.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = isize::MAX;\n \
    \   let mut smallest_even_index = isize::MAX;\n    for i in even_values.iter()\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut result =\
    \ vec![];\n    for i in even_values.iter() {\n        if i == smallest_even_value\
    \ {\n            result.push(i);\n        }\n    }\n    if smallest_even_index\
    \ < smallest_index {\n        result.push(smallest_even_index);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpss2mcdm6.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpss2mcdm6.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpss2mcdm6.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpss2mcdm6.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpss2mcdm6.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpss2mcdm6.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpss2mcdm6.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpss2mcdm6.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpss2mcdm6.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpss2mcdm6.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpss2mcdm6.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for &i in even_values\
    \ {\n        if i < smallest_value {\n            smallest_even_value = i;\n \
    \           smallest_even_index = i;\n        }\n    }\n    even_values.remove(&mut\
    \ smallest_even_value);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.sort();\n    even_values.dedup();\n    let mut even_values_index\
    \ = even_values.iter().cloned().enumerate().collect::<Vec<_>>();\n    even_values_index.sort_by_key(|&(i,\
    \ _)| i);\n    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even_values_index.into_iter().collect::<Vec<_>>();\n\
    \    let mut even_values_index = even\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpymm1xmze.rs:68:37\n   |\n\
    68 |     let mut even_values_index = even\n   |                              \
    \       ^ help: add `;` here\n69 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `even` in this scope\n  --> /tmp/tmpymm1xmze.rs:68:33\n  \
    \ |\n68 |     let mut even_values_index = even\n   |                         \
    \        ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpymm1xmze.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpymm1xmze.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpymm1xmze.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpymm1xmze.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpymm1xmze.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpymm1xmze.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpymm1xmze.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpymm1xmze.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpymm1xmze.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ s"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if even_values.len()\
    \ == 1 {\n                smallest_value.push(even_values.last().unwrap());\n\
    \                smallest_index.push(i);\n            } else {\n             \
    \   if even_values.iter().min().unwrap() < smallest_value.iter().min().unwrap()\
    \ {\n                    smallest_value.push(even_values.last().unwrap());\n \
    \                   smallest_index.push(i);\n                }\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.iter().min().unwrap() < smallest_value.iter().min().unwrap()\
    \ {\n        smallest_value.push(even_values.last().unwrap());\n        smallest_index.push(arr.last().unwrap());\n\
    \    }\n    smallest_value\n}\n\nfn main() {\n    let candidate = pluck;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp12uiu0j4.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp12uiu0j4.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp12uiu0j4.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp12uiu0j4.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp12uiu0j4.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp12uiu0j4.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp12uiu0j4.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp12uiu0j4.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp12uiu0j4.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp12uiu0j4.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp12uiu0j4.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value.push(i);\n          \
    \      smallest_index.push(i);\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n  \
    \      let mut smallest_even_value = even_values[0];\n        let mut smallest_even_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i % 2 == 0 {\n                if i < smallest_even_value {\n            \
    \        smallest_even_value = i;\n                    smallest_even_index = i;\n\
    \                }\n            }\n        }\n        return vec![smallest_even_value];\n\
    \    }\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1w29nnal.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1w29nnal.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1w29nnal.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1w29nnal.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1w29nnal.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1w29nnal.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1w29nnal.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1w29nnal.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1w29nnal.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1w29nnal.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1w29nnal.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = 0;\n\
    \    let mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            if i < min_value {\n \
    \               min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() == 2 {\n        if even_values[0] < even_values[1]\
    \ {\n            return vec![even_values[0]];\n        }\n        return vec![even_values[1]];\n\
    \    }\n    if even_values.len() == 3 {\n        if even_values[0] < even_values[1]\
    \ {\n            if even_values[0] < even_values[2] {\n                return\
    \ vec![even_values[0]];\n            }\n            return vec![even_values[2]];\n\
    \        }\n        if even_values[1] < even_values[2] {\n            return vec![even_values[1]];\n\
    \        }\n        return vec![even_values[2]];\n    }\n    if even_values.len()\
    \ == 4 {\n        if even_values[0] < even_values[1] {\n            if even_values[0]\
    \ < even_values[2] {\n                if even_values[0] < even_values[3] {\n \
    \                   return vec![even_values[0]];\n                }\n        \
    \        return vec![even_values[3]];\n            }\n            if even_values[1]\
    \ < even_values[3] {\n                return vec![even_values[1]];\n         \
    \   }\n            return vec![even_values[3]];\n        }\n        if even_values[1]\
    \ < even_values[2] {\n            if even_values[1] < even_values[3] {\n     \
    \           return vec![even_values[1]];\n            }\n            return vec![even_values[3]];\n\
    \        }\n        if even_values[2] < even_values[3] {\n            if even_values[2]\
    \ < even_values[3] {\n                return vec![even_values[2]];\n         \
    \   }\n            return vec![even_values[3]];\n        }\n        return vec![even_values[3]];\n\
    \    }\n    if even_values.len() == 5 {\n        if even_values[0] < even_values[1]\
    \ {\n            if even_values[0] < even_values[2] {\n                if even_values[0]\
    \ < even_values[3] {\n                    if even_values[0] < even_values[4] {\n\
    \                        return vec![even_values[0]];\n                    }\n\
    \                    return vec![even_values[4]];\n                }\n       \
    \         if even_values[1] < even_values[4] {\n                    return vec![even_values[1]];\n\
    \                }\n                return vec![even_values[4]];\n           \
    \ }\n            if even_values[1] < even_values[\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpf3hho0r_.rs:117:3\n\
    \    |\n26  | fn pluck(arr: Vec<isize>) -> Vec<isize> {\n    |               \
    \                          - unclosed delimiter\n...\n90  |     if even_values.len()\
    \ == 5 {\n    |                               - unclosed delimiter\n91  |    \
    \     if even_values[0] < even_values[1] {\n    |                            \
    \                - this delimiter might not be properly closed...\n...\n105 |\
    \ }\n    | - ...as it matches this but it has different indentation\n...\n117\
    \ | }\n    |   ^\n\nerror: expected expression, found `]`\n   --> /tmp/tmpf3hho0r_.rs:105:1\n\
    \    |\n105 | }\n    | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n   --> /tmp/tmpf3hho0r_.rs:104:44\n    |\n26  | fn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    |                                         - closing delimiter\
    \ possibly meant for this\n...\n104 |             if even_values[1] < even_values[\n\
    \    |                                            ^ unclosed delimiter\n105 |\
    \ }\n    | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n   --> /tmp/tmpf3hho0r_.rs:109:17\n    |\n109 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpf3hho0r_.rs:109:25\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpf3hho0r_.rs:110:17\n    |\n110 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpf3hho0r_.rs:110:25\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpf3hho0r_.rs:111:17\n    |\n111 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  "
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value.push(i);\n          \
    \      smallest_index.push(i);\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_iter = smallest_value.iter();\n\
    \    let mut smallest_index_iter = smallest_index.iter();\n    let mut smallest_value\
    \ = smallest_value_iter.next();\n    let mut smallest_index = smallest_index_iter.next();\n\
    \    for i in even_values.iter() {\n        if smallest_value.is_none() {\n  \
    \          smallest_value = i;\n            smallest_index = i;\n        }\n \
    \       if i < smallest_value {\n            smallest_value = i;\n           \
    \ smallest_index = i;\n        }\n    }\n    smallest_value_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyy1sg3sd.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyy1sg3sd.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyy1sg3sd.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyy1sg3sd.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyy1sg3sd.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyy1sg3sd.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyy1sg3sd.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyy1sg3sd.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyy1sg3sd.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyy1sg3sd.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyy1sg3sd.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value[i] = i;\n           \
    \     smallest_index[i] = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n  \
    \      let mut smallest_value = even_values[0];\n        let mut smallest_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i < smallest_value {\n                smallest_value = i;\n             \
    \   smallest_index = i;\n            }\n        }\n        return vec![smallest_value,\
    \ smallest_index];\n    }\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmwb4sm10.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmwb4sm10.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmwb4sm10.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmwb4sm10.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmwb4sm10.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmwb4sm10.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmwb4sm10.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmwb4sm10.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmwb4sm10.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmwb4sm10.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmwb4sm10.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in 1..arr.len()\
    \ {\n        if arr[i] < min_value {\n            min_value = arr[i];\n      \
    \      min_idx = i;\n        }\n    }\n    let mut result = vec![];\n    for i\
    \ in 0..arr.len() {\n        if arr[i] == min_value {\n            result.push(min_idx);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc3uyorlv.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc3uyorlv.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc3uyorlv.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc3uyorlv.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc3uyorlv.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc3uyorlv.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc3uyorlv.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc3uyorlv.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc3uyorlv.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc3uyorlv.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc3uyorlv.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i < min_value\
    \ {\n                min_value = *i;\n                min_idx = i;\n         \
    \   }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0oyvvcd3.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0oyvvcd3.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0oyvvcd3.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0oyvvcd3.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ >= i {\n                min_value = i;\n                min_idx = i;\n     \
    \       }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgk_q4z9c.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgk_q4z9c.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgk_q4z9c.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgk_q4z9c.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgk_q4z9c.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgk_q4z9c.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgk_q4z9c.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgk_q4z9c.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgk_q4z9c.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgk_q4z9c.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgk_q4z9c.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < min_value {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut min_even_value = even_values[0];\n    let mut min_even_idx\
    \ = even_values.iter().position(|&x| x == min_even_value);\n    if min_even_idx\
    \ == even_values.len() {\n        return vec![];\n    }\n    for &i in even_values\
    \ {\n        if i < min_value {\n            min_even_value = i;\n           \
    \ min_even_idx = i;\n        }\n    }\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter_next = even_values_iter.next();\n    let mut even_values_iter_prev\
    \ = even_values_iter.prev();\n    let mut even_values_iter_next = even_values_iter.next();\n\
    \    let mut even_values_iter_prev = even_values_iter.prev();\n    let mut even_values_iter_next\
    \ = even_values_iter.next();\n    let mut even_values_iter_prev = even_values_iter.prev();\n\
    \    let mut even_values_iter_next = even_values_iter.next();\n    let mut even_values_iter_prev\
    \ = even_values_iter.prev();\n    let mut even_values_iter_next = even_values_iter.next();\n\
    \    let mut even_values_iter_prev = even_values_iter.prev();\n    let mut even_values_iter_next\
    \ = even_values_iter.next();\n    let mut even_values_iter_prev = even_values_iter.prev();\n\
    \    let mut even_values_iter_next = even_values_iter.next();\n    let mut even_values_iter_prev\
    \ = even_values_iter.prev();\n    let mut even_values_iter_next = even_values_iter.next();\n\
    \    let mut even_values_iter_prev = even_values_iter.prev();\n    let mut even_values_iter_next\
    \ = even_values_iter.next();\n    let mut even_values_iter_prev = even_values_iter.prev();\n\
    \    let mut even_values_iter_next = even_values_iter.next();\n    let mut even_values_iter_prev\
    \ = even_values_iter.prev();\n    let mut even_values_iter_next = even_values_iter.next();\n\
    \    let mut even_values_iter_prev = even_values_iter.prev();\n    let mut even_values_iter_next\
    \ = even_values_iter.next();\n    let mut even_values_\n}\n\nfn main() {\n   \
    \ let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2k6di4_t.rs:77:25\n   |\n\
    77 |     let mut even_values_\n   |                         ^ help: add `;` here\n\
    78 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp2k6di4_t.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2k6di4_t.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2k6di4_t.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2k6di4_t.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2k6di4_t.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2k6di4_t.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2k6di4_t.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2k6di4_t.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2k6di4_t.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2k6di4_t.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_arr = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_even_value == i {\n         \
    \       min_even_index = i;\n                min_even_index_in_arr = i;\n    \
    \        } else {\n                min_even_value = i;\n                min_even_index\
    \ = i;\n                min_even_index_in_arr = i;\n            }\n        }\n\
    \    }\n    if min_even_index == -1 {\n        return vec![];\n    }\n    let\
    \ mut even_values = vec![];\n    for i in arr.iter().rev() {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![min_even_value];\n    }\n    let mut smallest_even_value = min_even_value;\n\
    \    let mut smallest_even_index = min_even_index;\n    for i in even_values.iter().rev()\
    \ {\n        if i == min_even_index {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut smallest_even_index_in_arr\
    \ = min_even_index_in_arr;\n    for i in even_values.iter().rev() {\n        if\
    \ i == min_even_index_in_arr {\n            smallest_even_index_in_arr = i;\n\
    \        }\n    }\n    let mut even_values_index = vec![];\n    for i in even_values.iter().rev()\
    \ {\n        if i == min_even_index_in_arr {\n            even_values_index.push(i);\n\
    \        }\n    }\n    if even_values_index.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values_index.len() == 1 {\n        return vec![smallest_even_value];\n\
    \    }\n    let mut smallest_even_index_in_arr = min_even_index_in_arr;\n    for\
    \ i in even_values_index.iter().rev() {\n        if i == min_even_index_in_arr\
    \ {\n            smallest_even_index_in_arr = i;\n        }\n    }\n    let mut\
    \ even_values_index_in_arr = vec![];\n    for i in even_values_index.iter().rev()\
    \ {\n        if i == min_even_index_in_arr {\n            even_values_index_in_arr.push(i);\n\
    \        }\n    }\n    if even_values_index_in_arr.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values_index_in_arr.len() == 1 {\n        return\
    \ vec![smallest_even_index_in_arr];\n    }\n    let mut smallest_even_index_in_arr\
    \ = min_even_index_in_arr;\n    for i in even_values_index_in_arr.iter().rev\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpzyjkkg2z.rs:103:1\n    |\n\
    103 | }\n    | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpzyjkkg2z.rs:107:17\n    |\n107 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpzyjkkg2z.rs:107:25\n\
    \    |\n107 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpzyjkkg2z.rs:108:17\n    |\n108 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpzyjkkg2z.rs:108:25\n\
    \    |\n108 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpzyjkkg2z.rs:109:17\n    |\n109 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpzyjkkg2z.rs:109:25\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpzyjkkg2z.rs:110:17\n    |\n110 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpzyjkkg2z.rs:110:25\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpzyjkkg2z.rs:111:17\n    |\n111 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpzyjkkg2z.rs:111:25\n\
    \    |\n111 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = Vec::new();\n    for &i in even_values\
    \ {\n        if i == smallest_even_value {\n            result.push(i);\n    \
    \    }\n    }\n    result.push(smallest_even_index);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpabudymju.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpabudymju.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpabudymju.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpabudymju.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpabudymju.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpabudymju.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpabudymju.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpabudymju.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpabudymju.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpabudymju.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpabudymju.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_index = -1;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if smallest_even_value < i {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        } else\
    \ {\n            if smallest_index == -1 || smallest_even_value < i {\n      \
    \          smallest_index = i;\n            }\n        }\n    }\n    if smallest_index\
    \ == -1 {\n        return Vec::new();\n    }\n    vec![smallest_even_index, smallest_index]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnr362y8q.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnr362y8q.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnr362y8q.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnr362y8q.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnr362y8q.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnr362y8q.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnr362y8q.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnr362y8q.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnr362y8q.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnr362y8q.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnr362y8q.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = arr[0];\n    let mut min_idx = 1;\n \
    \   for i in 1..arr.len() {\n        if arr[i] < min_val {\n            min_val\
    \ = arr[i];\n            min_idx = i;\n        }\n    }\n    vec![min_val, min_idx]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmvqmv6jm.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmvqmv6jm.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmvqmv6jm.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmvqmv6jm.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmvqmv6jm.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmvqmv6jm.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmvqmv6jm.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmvqmv6jm.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmvqmv6jm.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmvqmv6jm.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmvqmv6jm.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    even_values.remove(&smallest_even_value);\n    even_values.remove(&smallest_even_index);\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpf4wwry_q.rs:100:17\n\
    \    |\n100 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpf4wwry_q.rs:100:25\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpf4wwry_q.rs:101:17\n\
    \    |\n101 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpf4wwry_q.rs:101:25\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpf4wwry_q.rs:102:17\n\
    \    |\n102 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpf4wwry_q.rs:102:25\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpf4wwry_q.rs:103:17\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpf4wwry_q.rs:103:25\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpf4wwry_q.rs:104:17\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpf4wwry_q.rs:104:25\n    |\n104 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpf4wwry_q.rs:105:17\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                 ^^^^"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    let mut mut_even_values\
    \ = arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_smallest_value =\
    \ arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_smallest_index = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_mut_even_values = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_mut_smallest_value = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_mut_smallest_index = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    for i in 0..mut_even_values.len() {\n        if mut_even_values[i] % 2 ==\
    \ 0 {\n            even_values.push(mut_even_values[i]);\n            smallest_value.push(mut_smallest_value[i]);\n\
    \            smallest_index.push(mut_smallest_index[i]);\n            mut_even_values.remove(&mut_even_values[i]);\n\
    \            mut_smallest_value.remove(&mut_smallest_value[i]);\n            mut_smallest_index.remove(&mut_smallest_index[i]);\n\
    \        }\n    }\n    for i in 0..mut_mut_even_values.len() {\n        if mut_mut_even_values[i]\
    \ % 2 == 0 {\n            even_values.push(mut_mut_even_values[i]);\n        \
    \    smallest_value.push(mut_mut_smallest_value[i]);\n            smallest_index.push(mut_mut_smallest_index[i]);\n\
    \            mut_mut_even_values.remove(&mut_mut_even_values[i]);\n          \
    \  mut_mut_smallest_value.remove(&mut_mut_smallest_value[i]);\n            mut_mut_smallest_index.remove(&mut_mut_smallest_index[i]);\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    for i in 0..even_values.len() {\n        if even_values[i] < smallest_value[0]\
    \ {\n            smallest_value[0] = even_values[i];\n            smallest_index[0]\
    \ = i;\n        }\n    }\n    for i in 0..mut_even_values.len() {\n        if\
    \ mut_even_values[i] < mut_smallest_value[0] {\n            mut_smallest_value[0]\
    \ = mut_even_values[i];\n            mut_smallest_index[0] = i;\n        }\n \
    \   }\n    for i in 0..mut_mut_even_values.len(\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp6ixkyzqi.rs:71:40\n\
    \   |\n26 | fn pluck(arr: Vec<isize>) -> Vec<isize> {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n71 |\
    \     for i in 0..mut_mut_even_values.len(\n   |                             \
    \           ^ unclosed delimiter\n72 | }\n   | ^ mismatched closing delimiter\n\
    \nerror: expected `{`, found `}`\n  --> /tmp/tmp6ixkyzqi.rs:72:1\n   |\n72 | }\n\
    \   | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6ixkyzqi.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6ixkyzqi.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6ixkyzqi.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6ixkyzqi.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6ixkyzqi.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6ixkyzqi.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6ixkyzqi.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6ixkyzqi.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6ixkyzqi.rs:80:17\n   |\n80 |     assert_eq"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = 0;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_value == i32::MAX\
    \ {\n                min_value = i;\n                min_idx = i;\n          \
    \  } else {\n                if i < min_value {\n                    min_value\
    \ = i;\n                    min_idx = i;\n                }\n            }\n \
    \       }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpen5yvae6.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpen5yvae6.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpen5yvae6.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpen5yvae6.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpen5yvae6.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpen5yvae6.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpen5yvae6.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpen5yvae6.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpen5yvae6.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpen5yvae6.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpen5yvae6.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_value\
    \ < i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    vec![smallest_even_index, smallest_even_value]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2jf__92b.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2jf__92b.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2jf__92b.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2jf__92b.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2jf__92b.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2jf__92b.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2jf__92b.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2jf__92b.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2jf__92b.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2jf__92b.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2jf__92b.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    if arr.is_empty() {\n        return vec![];\n    }\n  \
    \  let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = isize::MAX;\n\
    \    let mut smallest_even_index_in_arr = 0;\n    let mut smallest_even_index_in_arr2\
    \ = 0;\n    let mut smallest_even_index_in_arr3 = 0;\n    let mut smallest_even_index_in_arr4\
    \ = 0;\n    let mut smallest_even_index_in_arr5 = 0;\n    let mut smallest_even_index_in_arr6\
    \ = 0;\n    let mut smallest_even_index_in_arr7 = 0;\n    let mut smallest_even_index_in_arr8\
    \ = 0;\n    let mut smallest_even_index_in_arr9 = 0;\n    let mut smallest_even_index_in_arr10\
    \ = 0;\n    let mut smallest_even_index_in_arr11 = 0;\n    let mut smallest_even_index_in_arr12\
    \ = 0;\n    let mut smallest_even_index_in_arr13 = 0;\n    let mut smallest_even_index_in_arr14\
    \ = 0;\n    let mut smallest_even_index_in_arr15 = 0;\n    let mut smallest_even_index_in_arr16\
    \ = 0;\n    let mut smallest_even_index_in_arr17 = 0;\n    let mut smallest_even_index_in_arr18\
    \ = 0;\n    let mut smallest_even_index_in_arr19 = 0;\n    let mut smallest_even_index_in_arr20\
    \ = 0;\n    let mut smallest_even_index_in_arr21 = 0;\n    let mut smallest_even_index_in_arr22\
    \ = 0;\n    let mut smallest_even_index_in_arr23 = 0;\n    let mut smallest_even_index_in_arr24\
    \ = 0;\n    let mut smallest_even_index_in_arr25 = 0;\n    let mut smallest_even_index_in_arr26\
    \ = 0;\n    let mut smallest_even_index_in_arr27 = 0;\n    let mut smallest_even_index_in_arr28\
    \ = 0;\n    let mut smallest_even_index_in_arr29 = 0;\n    let mut smallest_even_index_in_arr30\
    \ = 0;\n    let mut smallest_even_index_in_arr31 = 0;\n    let mut smallest_even_index_in_arr32\
    \ = 0;\n    let mut smallest_even_index_in_arr33 = 0;\n    let mut smallest_even_index_in_arr34\
    \ = 0;\n    let mut smallest_even_index_in_arr35 = 0;\n    let mut smallest_even_index_in_arr36\
    \ = 0;\n    let mut smallest_even_index_in_arr37 = 0;\n    let mut smallest_even_index_in_arr38\
    \ = 0;\n    let mut smallest_even_index_in_arr39 = 0;\n    let mut smallest_even_index_in_arr40\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp2ywff0cp.rs:73:1\n  \
    \ |\n73 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp2ywff0cp.rs:77:17\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp2ywff0cp.rs:77:25\n \
    \  |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2ywff0cp.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2ywff0cp.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2ywff0cp.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2ywff0cp.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2ywff0cp.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2ywff0cp.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2ywff0cp.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2ywff0cp.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2ywff0cp.rs:82:17\n   |\n82 |     assert"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_node_index\
    \ = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n        \
    \    if min_value == isize {\n                min_value = i;\n               \
    \ min_node_index = i;\n            } else {\n                if min_value > i\
    \ {\n                    min_value = i;\n                    min_node_index =\
    \ i;\n                }\n            }\n        }\n    }\n    if min_value ==\
    \ isize {\n        vec![]\n    } else {\n        vec![min_value, min_node_index]\n\
    \    }\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0423]: expected value, found builtin type `isize`\n  --> /tmp/tmp9cmdffg6.rs:31:29\n\
    \   |\n31 |             if min_value == isize {\n   |                        \
    \     ^^^^^ not a value\n\nerror[E0423]: expected value, found builtin type `isize`\n\
    \  --> /tmp/tmp9cmdffg6.rs:42:21\n   |\n42 |     if min_value == isize {\n   |\
    \                     ^^^^^ not a value\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp9cmdffg6.rs:51:17\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp9cmdffg6.rs:51:25\n \
    \  |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9cmdffg6.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9cmdffg6.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9cmdffg6.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9cmdffg6.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9cmdffg6.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9cmdffg6.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9cmdffg6.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right`"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            min_value\
    \ = i;\n            min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaglb5e2z.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpaglb5e2z.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpaglb5e2z.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpaglb5e2z.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpaglb5e2z.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpaglb5e2z.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaglb5e2z.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaglb5e2z.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748669
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i < min_value\
    \ {\n                min_value = *i;\n                min_idx = i;\n         \
    \   }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let\
    \ candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0oyvvcd3.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0oyvvcd3.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0oyvvcd3.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0oyvvcd3.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0oyvvcd3.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = vec![0];\n    let mut smallest_index = vec![0];\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            even_values.push(i);\n            if smallest_value[0]\
    \ < i {\n                smallest_value = vec![i];\n                smallest_index\
    \ = vec![i];\n            }\n        } else {\n            if smallest_value[0]\
    \ < i {\n                smallest_value = vec![i];\n                smallest_index\
    \ = vec![i];\n            }\n        }\n    }\n    if even_values.len() == 0 {\n\
    \        return vec![];\n    }\n    if even_values.len() == 1 {\n        return\
    \ vec![smallest_value[0], smallest_index[0]];\n    }\n    let mut smallest_value_with_even\
    \ = vec![0];\n    let mut smallest_index_with_even = vec![0];\n    for &i in even_values\
    \ {\n        if smallest_value[0] < i {\n            smallest_value_with_even\
    \ = vec![i];\n            smallest_index_with_even = vec![i];\n        }\n   \
    \ }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp2ct3ug68.rs:96:3\n\
    \   |\n26 | fn pluck(arr: Vec<isize>) -> Vec<isize> {\n   |                  \
    \                       - unclosed delimiter\n...\n82 |     if smallest_value_with_even[0]\
    \ < smallest_value[0] {\n   |                                                \
    \        - this delimiter might not be properly closed...\n83 |         smallest_value_with_even\
    \ = vec\n84 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n96 | }\n   |   ^\n\nerror[E0423]: expected value, found macro `vec`\n  -->\
    \ /tmp/tmp2ct3ug68.rs:83:36\n   |\n83 |         smallest_value_with_even = vec\n\
    \   |                                    ^^^ not a value\n   |\nhelp: use `!`\
    \ to invoke the macro\n   |\n83 |         smallest_value_with_even = vec!\n  \
    \ |                                       +\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp2ct3ug68.rs:88:17\n   |\n88 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp2ct3ug68.rs:88:25\n \
    \  |\n88 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2ct3ug68.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2ct3ug68.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2ct3ug68.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2ct3ug68.rs:90:25\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2ct3ug68.rs:91:17\n  \
    \ |\n91 |     assert_eq!({left}, "
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    even_values.sort();\n    even_values.dedup();\n\
    \    let mut result = vec![];\n    for i in even_values.iter() {\n        let\
    \ mut index = i;\n        while index > 0 {\n            if index % 2 == 0 {\n\
    \                break;\n            }\n            index -= 1;\n        }\n \
    \       result.push(i);\n    }\n    if smallest_index == isize::MAX {\n      \
    \  return vec![];\n    }\n    result.push(smallest_value);\n    result.push(smallest_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc6jgfzf3.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc6jgfzf3.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc6jgfzf3.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc6jgfzf3.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc6jgfzf3.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc6jgfzf3.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc6jgfzf3.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc6jgfzf3.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc6jgfzf3.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc6jgfzf3.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc6jgfzf3.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_and_index = vec![];\n\
    \    for &i in even_values {\n        if i == smallest_value {\n            smallest_value_and_index.push(i);\n\
    \        }\n    }\n    if smallest_value_and_index.len() == 0 {\n        return\
    \ vec![];\n    }\n    smallest_value_and_index.sort();\n    smallest_value_and_index[0]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp17zu4lec.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp17zu4lec.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp17zu4lec.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp17zu4lec.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp17zu4lec.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp17zu4lec.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp17zu4lec.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp17zu4lec.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp17zu4lec.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp17zu4lec.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp17zu4lec.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    let mut current_index =\
    \ 0;\n    for &node in arr {\n        if node % 2 == 0 {\n            even_values.push(node);\n\
    \            if smallest_value.len() == 0 || node < smallest_value[0] {\n    \
    \            smallest_value = vec![node];\n                smallest_index = vec![current_index];\n\
    \            } else {\n                smallest_value.push(node);\n          \
    \      smallest_index.push(current_index);\n            }\n            current_index\
    \ += 1;\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_value_iter =\
    \ smallest_value.iter();\n        let mut smallest_index_iter = smallest_index.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        if even_values_iter.next().unwrap()\
    \ == even_values_iter.next().unwrap() {\n            return vec![even_values[0],\
    \ even_values.len()];\n        }\n        if even_values_iter.next().unwrap()\
    \ != even_values_iter.next().unwrap() {\n            return vec![even_values[0],\
    \ even_values.len()];\n        }\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpifbvjelu.rs:92:3\n\
    \   |\n26 | fn pluck(arr: Vec<isize>) -> Vec<isize> {\n   |                  \
    \                       - unclosed delimiter\n...\n50 |     if even_values.len()\
    \ > 1 {\n   |                              - this delimiter might not be properly\
    \ closed...\n...\n80 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n92 | }\n   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpifbvjelu.rs:79:40\n\
    \   |\n79 |         let mut even_values_iter = even\n   |                    \
    \                    ^ help: add `;` here\n80 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `even` in this scope\n  --> /tmp/tmpifbvjelu.rs:79:36\n\
    \   |\n79 |         let mut even_values_iter = even\n   |                    \
    \                ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpifbvjelu.rs:84:17\n   |\n84 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpifbvjelu.rs:84:25\n \
    \  |\n84 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpifbvjelu.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpifbvjelu.rs:85:25\n   |\n85 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpifbvjelu.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpifbvjelu.rs:86:25\n   |\n86 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpifbvjelu.rs:87:17\n  \
    \ |\n87 |     assert_eq!({left"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_val < i {\n\
    \                min_val = i;\n                min_idx = i;\n            }\n \
    \       }\n    }\n    if min_val == i32::MAX {\n        vec![]\n    } else {\n\
    \        vec![min_val, min_idx]\n    }\n}\n\nfn main() {\n    let candidate =\
    \ pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwloihm5c.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwloihm5c.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwloihm5c.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwloihm5c.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwloihm5c.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwloihm5c.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwloihm5c.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwloihm5c.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwloihm5c.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwloihm5c.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwloihm5c.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i < min_value\
    \ {\n                min_value = *i;\n                min_idx = i;\n         \
    \   }\n        }\n    }\n    if min_idx == -1 {\n        return Vec::new();\n\
    \    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvfd_e5wn.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvfd_e5wn.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvfd_e5wn.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvfd_e5wn.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvfd_e5wn.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvfd_e5wn.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvfd_e5wn.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvfd_e5wn.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvfd_e5wn.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvfd_e5wn.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvfd_e5wn.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_value_index = isize::MAX;\n    for &i in arr\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_value_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut min_value_even_value = min_value;\n\
    \    let mut min_value_even_index = min_value_index;\n    for &i in even_values\
    \ {\n        if i < min_value_even_value {\n            min_value_even_value =\
    \ i;\n            min_value_even_index = i;\n        }\n    }\n    let mut result\
    \ = Vec::new();\n    for &i in even_values {\n        if i == min_value_even_value\
    \ {\n            result.push(min_value_even_index);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptzc6ow39.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptzc6ow39.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptzc6ow39.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptzc6ow39.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptzc6ow39.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptzc6ow39.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptzc6ow39.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptzc6ow39.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptzc6ow39.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptzc6ow39.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptzc6ow39.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value ==\
    \ isize::MAX {\n                min_value = i;\n                min_idx = i;\n\
    \            } else {\n                if i < min_value {\n                  \
    \  min_value = i;\n                    min_idx = i;\n                }\n     \
    \       }\n        }\n    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n\
    \    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd55txgg3.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd55txgg3.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd55txgg3.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd55txgg3.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd55txgg3.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd55txgg3.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd55txgg3.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd55txgg3.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd55txgg3.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd55txgg3.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd55txgg3.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_value =\
    \ i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mu\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9e8n378k.rs:78:11\n   |\n\
    78 |     let mu\n   |           ^ help: add `;` here\n79 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9e8n378k.rs:83:17\n\
    \   |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9e8n378k.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9e8n378k.rs:84:17\n   |\n84 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9e8n378k.rs:84:25\n\
    \   |\n84 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9e8n378k.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9e8n378k.rs:85:25\n   |\n85 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9e8n378k.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9e8n378k.rs:86:25\n   |\n86 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9e8n378k.rs:87:17\n  \
    \ |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9e8n378k.rs:87:25\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ -1;\n    let mut even_values = Vec::new();\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if min_value\
    \ == isize::MAX {\n                min_value = i;\n                min_idx = i;\n\
    \            } else {\n                if i < min_value {\n                  \
    \  min_value = i;\n                    min_idx = i;\n                }\n     \
    \       }\n        }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    even_values.sort();\n    let mut even_values_idx = Vec::new();\n \
    \   for i in even_values.iter() {\n        even_values_idx.push(i);\n    }\n \
    \   even_values_idx\n        .iter()\n        .cloned()\n        .filter(|&x|\
    \ x == min_idx)\n        .cloned()\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplstp9m1j.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplstp9m1j.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplstp9m1j.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplstp9m1j.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplstp9m1j.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplstp9m1j.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplstp9m1j.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplstp9m1j.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplstp9m1j.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplstp9m1j.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplstp9m1j.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ isize::MAX;\n    for i in arr.iter() {\n        if *i % 2 == 0 {\n         \
    \   if *i < min_value {\n                min_value = *i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_value == isize::MAX {\n  \
    \      return Vec::new();\n    }\n    vec![min_value, min_idx]\n}\n\nfn main()\
    \ {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2l6zym42.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2l6zym42.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2l6zym42.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2l6zym42.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2l6zym42.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2l6zym42.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2l6zym42.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2l6zym42.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2l6zym42.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2l6zym42.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2l6zym42.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2\
    \ = 0;\n    let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4\
    \ = 0;\n    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6\
    \ = 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even\n}\n\n\
    fn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpriffuea2.rs:74:21\n   |\n\
    74 |     let mut min_even\n   |                     ^ help: add `;` here\n75 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpriffuea2.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpriffuea2.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpriffuea2.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpriffuea2.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpriffuea2.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpriffuea2.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpriffuea2.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpriffuea2.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpriffuea2.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpriffuea2.rs:83:25\n   |\n83 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `lef"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = vec![0];\n    let mut smallest_index = vec![0];\n    let mut index_of_smallest_value\
    \ = vec![0];\n    let mut index_of_smallest_index = vec![0];\n    let mut index_of_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_smallest_index = vec![0];\n    let mut\
    \ index_of_next_next_smallest_value = vec![0];\n    let mut index_of_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_smallest_value = vec![0];\n\
    \    let mut index_of_next_next_next_smallest_index = vec![0];\n    let mut index_of_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_smallest_index = vec![0];\n\
    \    let mut index_of_next_next_next_next_next_smallest_value = vec![0];\n   \
    \ let mut index_of_next_next_next_next_next_smallest_index = vec![0];\n    let\
    \ mut index_of_next_next_next_next_next_next_smallest_value = vec![0];\n    let\
    \ mut index_of_next_next_next_next_next_next_smallest_index = vec![0];\n    let\
    \ mut index_of_next_next_next_next_next_next_next_smallest_value = vec![0];\n\
    \    let mut index_of_next_next_next_next_next_next_next_smallest_index = vec![0];\n\
    \    let mut index_of_next_next_next_next_next_next_next_next_smallest_value =\
    \ vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_next_next_smallest_\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx07osqw2.rs:56:91\n   |\n\
    56 |     let mut index_of_next_next_next_next_next_next_next_next_next_next_next_next_smallest_\n\
    \   |                                                                        \
    \                   ^ help: add `;` here\n57 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpx07osqw2.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx07osqw2.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx07osqw2.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx07osqw2.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx07osqw2.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx07osqw2.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx07osqw2.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx07osqw2.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx07osqw2.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx07osqw2.rs:65:25"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i == smallest_even_value {\n \
    \           smallest_even_index = even_values.iter().position(|&i| i == smallest_even_value).unwrap();\n\
    \        }\n        if i == smallest_even_value {\n            smallest_even_value\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_index, smallest_even_value]\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp01woblcg.rs:59:17\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp01woblcg.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp01woblcg.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp01woblcg.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp01woblcg.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp01woblcg.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp01woblcg.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp01woblcg.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp01woblcg.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp01woblcg.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp01woblcg.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i < min_val\
    \ {\n                min_val = *i;\n                min_idx = i;\n           \
    \ }\n        }\n    }\n    if min_val == i32::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_val, min_idx]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp70fix6w3.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp70fix6w3.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp70fix6w3.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp70fix6w3.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp70fix6w3.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp70fix6w3.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp70fix6w3.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp70fix6w3.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp70fix6w3.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp70fix6w3.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp70fix6w3.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value.push(i);\n          \
    \      smallest_index.push(i);\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n  \
    \      let mut smallest_value = even_values[0];\n        let mut smallest_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i % 2 == 0 {\n                if i < smallest_value.len() {\n           \
    \         smallest_value = i;\n                    smallest_index = i;\n     \
    \           }\n            }\n        }\n        return vec![smallest_value, smallest_index];\n\
    \    }\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxqvval8i.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxqvval8i.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxqvval8i.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxqvval8i.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxqvval8i.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxqvval8i.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxqvval8i.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxqvval8i.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxqvval8i.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxqvval8i.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxqvval8i.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    even_values.sort();\n    even_values.dedup();\n    let mut\
    \ smallest_even_value = even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_value);\n    if smallest_even_index == even_values.len() - 1 {\n\
    \        smallest_even_index = even_values.len() - 2;\n    }\n    even_values.retain(|&i|\
    \ i == smallest_value);\n    even_values.retain(|&i| i == smallest_even_value);\n\
    \    even_values.retain(|&i| i == smallest_even_index);\n    even_values.retain(|&i|\
    \ i == smallest_index);\n    even_values\n}\n\nfn main() {\n    let candidate\
    \ = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpuw9ilgps.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuw9ilgps.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuw9ilgps.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuw9ilgps.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuw9ilgps.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuw9ilgps.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuw9ilgps.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuw9ilgps.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuw9ilgps.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuw9ilgps.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuw9ilgps.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    let mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            if i < min_val {\n   \
    \             min_val = i;\n                min_idx = i;\n            }\n    \
    \    }\n    }\n    if even_values.is_empty() {\n        return vec![];\n    }\n\
    \    if min_val == i32::MAX {\n        return vec![];\n    }\n    let mut even_values_sorted\
    \ = even_values.iter().cloned().collect::<Vec<_>>();\n    even_values_sorted.sort_unstable();\n\
    \    let mut min_val_sorted = min_val;\n    let mut min_idx_sorted = min_idx;\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `.`, `;`, `?`, `else`, or an operator, found\
    \ `::`\n  --> /tmp/tmpwrdrjlj4.rs:62:81\n   |\n62 |     let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::\n   |                       \
    \                                                          ^^ expected one of\
    \ `(`, `.`, `;`, `?`, `else`, or an operator\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpwrdrjlj4.rs:67:17\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpwrdrjlj4.rs:67:25\n \
    \  |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwrdrjlj4.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwrdrjlj4.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwrdrjlj4.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwrdrjlj4.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwrdrjlj4.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwrdrjlj4.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwrdrjlj4.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in thi"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n     \
    \   return Vec::new();\n    }\n    let mut smallest_value = isize::MAX;\n    let\
    \ mut smallest_index = isize::MAX;\n    for i in even_values.iter() {\n      \
    \  if i < smallest_value {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    even_values.remove(&smallest_index);\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp28fq037a.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp28fq037a.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp28fq037a.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp28fq037a.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp28fq037a.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp28fq037a.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp28fq037a.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp28fq037a.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp28fq037a.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp28fq037a.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp28fq037a.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ -1;\n    for i in arr.iter().cloned() {\n        if i % 2 == 0 {\n         \
    \   if min_value == isize {\n                min_value = i;\n                min_idx\
    \ = i;\n            } else {\n                if min_value > i {\n           \
    \         min_value = i;\n                    min_idx = i;\n                }\n\
    \            }\n        }\n    }\n    if min_value == isize {\n        vec![]\n\
    \    } else {\n        vec![min_value, min_idx]\n    }\n}\n\nfn main() {\n   \
    \ let candidate = pluck;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0423]: expected value, found builtin type `isize`\n  --> /tmp/tmp8we4e18k.rs:31:29\n\
    \   |\n31 |             if min_value == isize {\n   |                        \
    \     ^^^^^ not a value\n\nerror[E0423]: expected value, found builtin type `isize`\n\
    \  --> /tmp/tmp8we4e18k.rs:42:21\n   |\n42 |     if min_value == isize {\n   |\
    \                     ^^^^^ not a value\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp8we4e18k.rs:51:17\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp8we4e18k.rs:51:25\n \
    \  |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8we4e18k.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8we4e18k.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8we4e18k.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8we4e18k.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8we4e18k.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8we4e18k.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8we4e18k.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right`"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    let mut smallest_even_index_in_arr = 0;\n    for &i in arr {\n        if\
    \ i == smallest_value {\n            smallest_even_index_in_arr += 1;\n      \
    \  }\n    }\n    if smallest_even_index_in_arr == 0 {\n        smallest_even_index_in_arr\
    \ = 1;\n    }\n    let mut even_values_copy = even_values.clone();\n    even_values_copy.swap_remove(smallest_even_index);\n\
    \    even_values_copy.swap_remove(smallest_even_index_in_arr);\n    even_values_copy\n\
    }\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmps07q85ce.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps07q85ce.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps07q85ce.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps07q85ce.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps07q85ce.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps07q85ce.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps07q85ce.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps07q85ce.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps07q85ce.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps07q85ce.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps07q85ce.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    if min_value == i32::MAX {\n        return Vec::new();\n\
    \    }\n    vec![min_value, min_idx]\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphxyaa9w3.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphxyaa9w3.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphxyaa9w3.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphxyaa9w3.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphxyaa9w3.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphxyaa9w3.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphxyaa9w3.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphxyaa9w3.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphxyaa9w3.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphxyaa9w3.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphxyaa9w3.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822877
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = isize::MAX;\n    for &i in arr {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n   \
    \ let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ min_value_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_idx_iter\
    \ = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_value_iter =\
    \ min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut min_value_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_value_iter\
    \ = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut min_value_iter = min_id\n}\n\nfn main() {\n    let candidate = pluck;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo0rzn_ew.rs:61:36\n   |\n\
    61 |     let mut min_value_iter = min_id\n   |                               \
    \     ^ help: add `;` here\n62 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `min_id` in this scope\n  --> /tmp/tmpo0rzn_ew.rs:61:30\n   |\n61\
    \ |     let mut min_value_iter = min_id\n   |                              ^^^^^^\
    \ help: a local variable with a similar name exists: `min_idx`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0rzn_ew.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0rzn_ew.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo0rzn_ew.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo0rzn_ew.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0rzn_ew.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0rzn_ew.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0rzn_ew.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0rzn_ew.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0rzn_ew.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |      "
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    let mut index = 0;\n   \
    \ for value in arr {\n        if value % 2 == 0 {\n            even_values.push(value);\n\
    \            if value < smallest_value {\n                smallest_value = value;\n\
    \                smallest_index = index;\n            }\n        }\n        index\
    \ += 1;\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_even_value =\
    \ even_values[0];\n        let mut smallest_even_index = smallest_index;\n   \
    \     for value in even_values {\n            if value % 2 == 0 {\n          \
    \      if value < smallest_even_value {\n                    smallest_even_value\
    \ = value;\n                    smallest_even_index = index;\n               \
    \ }\n            }\n            index += 1;\n        }\n        return vec![smallest_even_value];\n\
    \    }\n    return vec![];\n}\n\nfn main() {\n    let candidate = pluck;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdglg5xjt.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdglg5xjt.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdglg5xjt.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdglg5xjt.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdglg5xjt.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdglg5xjt.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdglg5xjt.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdglg5xjt.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdglg5xjt.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdglg5xjt.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdglg5xjt.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
    /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
    /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
    /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
    /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ isize::MAX;\n    let mut mut_arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_\n}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpatu9ozcg.rs:51:27\n   |\n\
    51 |     let mut mut_arr = mut_\n   |                           ^ help: add `;`\
    \ here\n52 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `mut_`\
    \ in this scope\n  --> /tmp/tmpatu9ozcg.rs:51:23\n   |\n51 |     let mut mut_arr\
    \ = mut_\n   |                       ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpatu9ozcg.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpatu9ozcg.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpatu9ozcg.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpatu9ozcg.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpatu9ozcg.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpatu9ozcg.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpatu9ozcg.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpatu9ozcg.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpatu9ozcg.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `r"
  stdout: ''
  timestamp: 1659822879
