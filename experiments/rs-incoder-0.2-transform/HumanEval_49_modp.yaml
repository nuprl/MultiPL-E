name: HumanEval_49_modp
language: rs
prompt: "/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n///\
  \ 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3,\
  \ 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfn modp(n: isize, p: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = modp;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut res = n;\n    while res > p {\n        res -= p;\n    }\n\
    \    res", '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    if n\
    \ < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n &
    (p - 1)', "    if n < 0 {\n        p\n    } else {\n        n & (p - 1)\n    }",
  '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    if n < 0 {\n     \
    \   n ^ (p - 1)\n    } else {\n        n & (p - 1)\n    }", '    n & (p - 1)',
  '    n & (p - 1)', '    n - (n % p)', '    n & (p - 1)', "    debug_assert!(n >\
    \ 0);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p ", "    if n\
    \ < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n < 0 {\n\
    \        n + (p - 1)\n    } else {\n        n % p\n    }", "    if n == 0 {\n\
    \        return 1;\n    }\n    if n == 1 {\n        return p;\n    }\n    if p\
    \ % n == 0 {\n        return p / n;\n    }\n    if p % n == 1 {\n        return\
    \ modp(n - 1, p) + 1;\n    }\n    if p % n == 2 {\n        return modp(n - 2,\
    \ p) + 1;\n    }\n    if p % n == 3 {\n        return modp(n - 3, p) + 1;\n  \
    \  }\n    if p % n == 4 {\n        return modp(n - 4, p) + 1;\n    }\n    if p\
    \ % n == 5 {\n        return modp(n - 5, p) + 1;\n    }\n    if p % n == 6 {\n\
    \        return modp(n - 6, p) + 1;\n    }\n    if p % n == 7 {\n        return\
    \ modp(n - 7, p) + 1;\n    }\n    if p % n == 8 {\n        return modp(n - 8,\
    \ p) + 1;\n    }\n    if p % n == 9 {\n        return modp(n - 9, p) + 1;\n  \
    \  }\n    if p % n == 10 {\n        return modp(n - 10, p) + 1;\n    }\n    if\
    \ p % n == 11 {\n        return modp(n - 11, p) + 1;\n    }\n    if p % n == 12\
    \ {\n        return modp(n - 12, p) + 1;\n    }\n    if p % n == 13 {\n      \
    \  return modp(n - 13, p) + 1;\n    }\n    if p % n == 14 {\n        return modp(n\
    \ - 14, p) + 1;\n    }\n    if p % n == 15 {\n        return modp(n - 15, p) +\
    \ 1;\n    }\n    if p % n == 16 {\n        return modp(n - 16, p) + 1;\n    }\n\
    \    if p % n == 17 {\n        return modp(n - 17, p) + 1;\n    }\n    if p %\
    \ n == 18 {\n        return modp(n - 18, p) + 1;\n    }\n    if p % n == 19 {\n\
    \        return modp(n - 19, p) + 1;\n    }\n    if p % n == 20 {\n        return\
    \ modp(n - 20, p) + 1;\n    }\n    if p % n == 21 {\n        return modp(n - 21,\
    \ p) + 1;\n    }\n    if p % n == 22 {\n        return modp(n - 22, p) + 1;\n\
    \    }\n    if p % n == 23 {\n        return modp(n - 23, p) + 1;\n    }\n   \
    \ if p % n == 24 {\n        return modp(n - 24, p) + 1;\n    }\n    if p % n ==\
    \ 25 {\n        return modp(n - 25, p) + 1;\n    }\n    if p % n == 26 {\n   \
    \     return modp(n - 26, p) + 1;\n    }\n    if p % n == 27 {\n        return\
    \ modp(n - 27, p) + 1;\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p);\n   \
    \ debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(", "    let mut result = n;\n    while result\
    \ > p && result % p != 0 {\n        result -= p;\n    }\n    result", "    let\
    \ mut npow = n;\n    while npow % p != 0 {\n        npow /= p;\n    }\n    npow",
  '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\
    \ % p\n    }", "    let mut result = n;\n    while result > p {\n        result\
    \ -= p;\n    }\n    result", "    if n < 0 {\n        n + (p - 1)\n    } else\
    \ {\n        n\n    }", "    let mut res = n;\n    while res > p {\n        res\
    \ -= p;\n    }\n    res", "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n\
    \ % 2 == 0);\n    n + (p - 1) as isize", '    n & (p - 1)', '    n & (p - 1)',
  '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "  \
    \  debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n\
    \ % p == 0);\n    n & (p - 1)", "    let mut res = 0;\n    while n > 0 {\n   \
    \     if n % p == 0 {\n            res += p;\n        }\n        n /= p;\n   \
    \ }\n    res", '    n & (p - 1)', '    n & (p - 1)', "    if n < 0 {\n       \
    \ n + (p as isize)\n    } else {\n        n % p\n    }", '    n & (p - 1)', '    n
    - (n % p)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(n %\
    \ p == 0);\n    debug_assert!(n / p < MAX_DIGITS);\n    debug_assert!(p < MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    ",
  "    let mut result = n;\n    while result > p {\n        result -= p;\n    }\n\
    \    result", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n\
    \    }", "    debug_assert!(n > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    ", "    if n < 0 {\n        n + (p as\
    \ isize)\n    } else {\n        n % p\n    }", "    let mut n2 = n;\n    while\
    \ n2 > p {\n        n2 -= p;\n    }\n    n2", "    if n < 0 {\n        n + (p\
    \ - 1)\n    } else {\n        n\n    }", "    let mut result = n;\n    while result\
    \ > p {\n        result -= p;\n    }\n    result", '    n & (p - 1)', "    if\
    \ n < 0 {\n        n + (p as isize)\n    } else {\n        n % p\n    }", "  \
    \  if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n &
    (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    ", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    ", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p < n);\n    let mut result = n;\n    while result > p {\n\
    \        result -= p;\n    }\n    result", "    let mut result = n;\n    while\
    \ result > p {\n        result -= p;\n    }\n    result", "    let mut result\
    \ = n;\n    while result > p {\n        result -= p;\n    }\n    result", "  \
    \  debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(", "    let mut res\
    \ = n;\n    if res < 0 {\n        res += p;\n    }\n    if res < p {\n       \
    \ res %= p;\n    }\n    res", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    n / p",
  '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n\
    \    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p <= n);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != 2);\n    debug_assert!(p != 3);\n    debug_assert!(p != 4);\n    debug_assert!(p\
    \ != 5);\n    debug_assert!(p != 6);\n    debug_assert!(p != 7);\n    debug_assert!(p\
    \ != 8);\n    debug_assert!(p != 9);\n    debug_assert!(p != 10);\n    debug_assert!(p\
    \ != 11);\n    debug_assert!(p != 12);\n    debug_assert!(p != 13);\n    debug_assert!(p\
    \ != 14);\n    debug_assert!(p != 15);\n    debug_assert!(p != 16);\n    debug_assert!(p\
    \ != 17);\n    debug_assert!(p != 18);\n    debug_assert!(p != 19);\n    debug_assert!(p\
    \ != 20);\n    debug_assert!(p != 21);\n    debug_assert!(p != 22);\n    debug_assert!(p\
    \ != 23);\n    debug_assert!(p != 24);\n    debug_assert!(p != 25);\n    debug_assert!(p\
    \ != 26);\n    debug_assert!(p != 27);\n    debug_assert!(p != 28);\n    debug_assert!(p\
    \ != 29);\n    debug_assert!(p != 30);\n    debug_assert!(p != 31);\n    debug_assert!(p\
    \ != 32);\n    debug_assert!(p != 33);\n    debug_assert!(p != 34);\n    debug_assert!(p\
    \ != 35);\n    debug_assert!(p != 36);\n    debug_assert!(p != 37);\n    debug_assert!(p\
    \ != 38);\n    debug_assert!(p != 39);\n    debug_assert!(p != 40);\n    debug_assert!(p\
    \ != 41);\n    debug_assert!(p != 42);\n    debug_assert!(p != 43);\n    debug_assert!(p\
    \ != 44);\n    debug_assert!(p != 45);\n    debug_assert!(p != 46);\n    debug_assert!(p\
    \ != 47);\n    debug_assert!(p != 48);\n    debug_assert!(p != 49);\n    debug_assert!(p\
    \ != 50);\n    debug_assert!(p != 51);\n    debug_assert!(p != 52);\n    debug_assert!(p\
    \ != 53);\n    debug_assert!(p != 54);\n    debug_assert!(p != 55);\n    debug_assert!(p\
    \ != 56);\n    debug_assert", "    if n < 0 {\n        n + (p - 1)\n    } else\
    \ {\n        n\n    }", '    n & (p - 1)', '    n & (p - 1)', '    n - (n % p)',
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "   \
    \ if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", '    n
    & (p - 1)', '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p < std::i32::MAX as isize);\n\
    \    debug_assert!(p < std::i64::MAX as isize);\n    debug_assert!(p < std::usize::MAX\
    \ as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p\
    \ < std::u32::MAX as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n\
    \    debug_assert!(p < std::isize::MAX as isize);\n    debug_assert!(p < std::i8::MAX\
    \ as isize);\n    debug_assert!(p < std::i16::MAX as isize);\n    debug_assert!(p\
    \ < std::i64::MAX as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n\
    \    debug_assert!(p < std::u8::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::i16::MAX\
    \ as isize);\n    debug_assert!(p < std::i64::MAX as isize);\n    debug_assert!(p\
    \ < std::usize::MAX as isize);\n    debug_assert!(p < std::u8::MAX as isize);\n\
    \    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p < std::u32::MAX\
    \ as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n    debug_assert!(p\
    \ < std::isize::MAX as isize);\n    debug_assert!(p < std::i8::MAX as isize);\n\
    \    debug_assert!(p < std::i16::MAX as isize);\n    debug_assert!(p < std::i64::MAX\
    \ as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p\
    \ < std::u8::MAX as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n\
    \    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p < std::u64::MAX\
    \ as isize);\n    debug_assert!(p < std::isize::MAX as ", "    let mut result\
    \ = n;\n    if result > p {\n        result %= p;\n    }\n    if result < 0 {\n\
    \        result += p;\n    }\n    result", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!((n % p) == 0);\n    (n\
    \ / p) as isize", '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    ", "    if n < 0 {\n        n + (p - 1)\n    } else {\n  \
    \      n\n    }", "    if n < 0 {\n        n + (p as isize)\n    } else {\n  \
    \      n % p\n    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!((n\
    \ % p) == 0);\n    (n / p) as isize", '    n & (p - 1)', "    let mut result =\
    \ n;\n    while result > p {\n        result -= p;\n    }\n    result", "    if\
    \ n < 0 {\n        n + (p as isize)\n    } else {\n        n % p\n    }", '    n
    & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);", '    n
    & (p - 1)', "    let mut result = n;\n    while result > p && result % p != 0\
    \ {\n        result -= p;\n    }\n    result", "    debug_assert!(n >= 0);\n \
    \   debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p <=\
    \ std::i32::MAX as isize);\n    let mut result = n;\n    while result > p {\n\
    \        result -= p;\n    }\n    result", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n\
    \ % p == 0);\n    n / p", "    if n < 0 {\n        n ^ (p - 1)\n    } else {\n\
    \        n & (p - 1)\n    }", '    n & (p - 1)', '    n - (n % p)', "    if n\
    \ < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "    if n <\
    \ 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)',
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p % 2 == 0);\n    let mut res = p;\n    while n > 0 {\n   \
    \     if n % 2 == 0 {\n            res -= 1;\n        }\n        n /= 2;\n   \
    \ }\n    res", '    n & (p - 1)', '    n & (p - 1)', "    if n < 0 {\n       \
    \ n + (p - 1)\n    } else {\n        n % p\n    }", "    if n < 0 {\n        n\
    \ + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', "    let mut\
    \ n2 = n * n;\n    while n2 >= p {\n        n2 -= p;\n    }\n    n2", "    let\
    \ mut res = 0;\n    while n > 0 {\n        if n % p == 0 {\n            res +=\
    \ p;\n        }\n        n /= p;\n    }\n    res", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    let mut res = n;\n\
    \    while res > p {\n        res -= p;\n    }\n    res", "    if n >= p {\n \
    \       n - p\n    } else {\n        p\n    }", '    n & (p - 1)', '    n - (n
    % p)', '    n & (p - 1)', "    let mut npow = pow2(n);\n    npow %= p;\n    if\
    \ npow == 0 {\n        npow = 1;\n    }\n    npow", "    let mut res = 0;\n  \
    \  while n >= p {\n        res += 1;\n        n -= p;\n    }\n    res % p", " \
    \   let mut result = n;\n    while result > p {\n        result -= p;\n    }\n\
    \    result", '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    if\
    \ n >= p {\n        n\n    } else {\n        n - p\n    }", "    let mut result\
    \ = n;\n    while result > p {\n        result -= p;\n    }\n    result", "  \
    \  let mut result = n;\n    while result > p && result % p != 0 {\n        result\
    \ -= p;\n    }\n    result", '    n & (p - 1)', '    n & (p - 1)', "    let mut\
    \ result = n;\n    while result > p {\n        result -= p;\n    }\n    result",
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!((n % p) == 0);\n    (n / p) as isize", "    let mut result\
    \ = n;\n    while result > p {\n        result -= p;\n    }\n    result", '    n
    & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n  \
    \  }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  '    n & (p - 1)', '    n - (n % p)', "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n\
    \ % 2 == 0);\n    n - (p as isize) / 2 % p", "    let mut result = n;\n    while\
    \ result > p {\n        result -= p;\n    }\n    result", "    if n < 0 {\n  \
    \      p\n    } else {\n        n & (p - 1)\n    }", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p);\n    debug_assert!(p > 0);\n    debug_assert!(p < 256);\n\
    \    let mut n = (n << 1) & p;\n    if n & 1 == 0 {\n        n >>= 1;\n    }\n\
    \    n", '    n & (p - 1)', "    let mut res = 0;\n    while n > 0 {\n       \
    \ if n % p == 0 {\n            res += p;\n        }\n        n /= p;\n    }\n\
    \    res", '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else\
    \ {\n        n % p\n    }", "    let mut n1 = n;\n    let mut n2 = n;\n    while\
    \ n2 % p != 0 {\n        n1 += 1;\n        n2 += 1;\n    }\n    n1", '    n &
    (p - 1)', '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p % n == 0);\n    n - (p\
    \ % n)", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    n / p", "    let mut n1 = n;\n  \
    \  let mut n2 = n;\n    while n2 > p {\n        n1 -= 1;\n        n2 -= 1;\n \
    \   }\n    n1 %= p;\n    n2 %= p;\n    n1", "    debug_assert!(n > 0);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    n / p",
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p <= std::i32::MAX);\n    debug_assert!(p <= std::i64::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert", '    n & (p - 1)',
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n\
    \ == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return p;\n    }\n\
    \    if p % n == 0 {\n        return p;\n    }\n    if p % n == 1 {\n        return\
    \ n;\n    }\n    if p % n == 2 {\n        return modp(n - 1, p);\n    }\n    if\
    \ p % n == 3 {\n        return modp(n - 2, p);\n    }\n    if p % n == 4 {\n \
    \       return modp(n - 3, p);\n    }\n    if p % n == 5 {\n        return modp(n\
    \ - 4, p);\n    }\n    if p % n == 6 {\n        return modp(n - 5, p);\n    }\n\
    \    if p % n == 7 {\n        return modp(n - 6, p);\n    }\n    if p % n == 8\
    \ {\n        return modp(n - 7, p);\n    }\n    if p % n == 9 {\n        return\
    \ modp(n - 8, p);\n    }\n    if p % n == 10 {\n        return modp(n - 9, p);\n\
    \    }\n    if p % n == 11 {\n        return modp(n - 10, p);\n    }\n    if p\
    \ % n == 12 {\n        return modp(n - 11, p);\n    }\n    if p % n == 13 {\n\
    \        return modp(n - 12, p);\n    }\n    if p % n == 14 {\n        return\
    \ modp(n - 13, p);\n    }\n    if p % n == 15 {\n        return modp(n - 14, p);\n\
    \    }\n    if p % n == 16 {\n        return modp(n - 15, p);\n    }\n    if p\
    \ % n == 17 {\n        return modp(n - 16, p);\n    }\n    if p % n == 18 {\n\
    \        return modp(n - 17, p);\n    }\n    if p % n == 19 {\n        return\
    \ modp(n - 18, p);\n    }\n    if p % n == 20 {\n        return modp(n - 19, p);\n\
    \    }\n    if p % n == 21 {\n        return modp(n - 20, p);\n    }\n    if p\
    \ % n == 22 {\n        return modp(n - 21, p);\n    }\n    if p % n == 23 {\n\
    \        return modp(n - 22, p);\n    }\n    if p % n == 24 {\n        return\
    \ modp(n - 23, p);\n    }\n    if p % n == 25 {\n        return modp(n - 24, p);\n\
    \    }\n    if p % n == 26 {\n        return modp(n - 25, p);\n    }\n    if p\
    \ % n == 27 {\n        return modp(n - 26, p);\n    }\n    if p % n == 28 {\n\
    \        return modp(n - 27, p);\n    }\n    if p % n == 29 {\n        return\
    \ modp(n - 28, p);\n    }\n    if p % n == 30 {\n        return modp(n - 29, p);\n\
    \    }\n    if p % n", '    n & (p - 1)', '    n & (p - 1)', "    if n >= p {\n\
    \        n\n    } else {\n        n % p\n    }", '    n & (p - 1)', "    let mut\
    \ result = n;\n    if result > p { result -= p }\n    if result < 0 { result +=\
    \ p }\n    result", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    ", '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p);\n    debug_assert!(p * p <= n);\n    debug_assert!((n\
    \ % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) ==\
    \ 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n  \
    \  debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n\
    \ % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) ==\
    \ 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n  \
    \  debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n\
    \ % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) ==\
    \ 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n  \
    \  debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n\
    \ % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) ==\
    \ 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n  \
    \  debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n\
    \ % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) ==\
    \ 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n  \
    \  debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n\
    \ % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) ==\
    \ 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n  \
    \  debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n\
    \ % p) == 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) ==\
    \ 0);\n    debug_assert!((n % p) == 0);\n    debug_assert!((n % p) == 0);\n  \
    \  debug_assert!((n % p) == 0);\n    debug_assert!((n % p", "    if n < 0 {\n\
    \        n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', '    n
    - (n % p)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);", "    debug_assert!(n > 0);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    n / p",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "   \
    \ let mut result = n;\n    while result > p {\n        result -= p;\n    }\n \
    \   result", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n \
    \   }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    n / p", "    if n < 0 {\n       \
    \ n + (p - 1)\n    } else {\n        n\n    }", "    let mut r = p % n;\n    if\
    \ r < 0 {\n        r += n;\n    }\n    r", '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    n / p", "    if n < 0 {\n        n + (p - 1)\n    } else {\n\
    \        n\n    }", '    n & (p - 1)', "    let mut res = n;\n    while res >\
    \ p && res > 0 {\n        res -= p;\n        res %= p;\n    }\n    res", '    n
    & (p - 1)', "    if n == 0 {\n        return 1;\n    }\n    if n == 1 {\n    \
    \    return p;\n    }\n    if p % n == 0 {\n        return p / n;\n    }\n   \
    \ if p % n == 1 {\n        return p + modp(n - 1, p);\n    }\n    if p % n ==\
    \ 2 {\n        return p + modp(n - 2, p) + modp(n - 1, p);\n    }\n    if p %\
    \ n == 3 {\n        return p + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p);\n\
    \    }\n    if p % n == 4 {\n        return p + modp(n - 4, p) + modp(n - 3, p)\
    \ + modp(n - 2, p) + modp(n - 1, p) + modp(n - 0, p);\n    }\n    if p % n ==\
    \ 5 {\n        return p + modp(n - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n\
    \ - 2, p) + modp(n - 1, p) + modp(n - 0, p) + modp(n - 1, p) + modp(n - 0, p);\n\
    \    }\n    if p % n == 6 {\n        return p + modp(n - 6, p) + modp(n - 5, p)\
    \ + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n\
    \ - 0, p) + modp(n - 1, p) + modp(n - 0, p) + modp(n - 0, p);\n    }\n    if p\
    \ % n == 7 {\n        return p + modp(n - 7, p) + modp(n - 6, p) + modp(n - 5,\
    \ p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n\
    \ - 0, p) + modp(n - 1, p) + modp(n - 0, p) + modp(n - 0, p) + modp(n - 0, p);\n\
    \    }\n    if p % n == 8 {\n        return p + modp(n - 8, p) + modp(n - 7, p)\
    \ + modp(n - 6, p) + modp(n - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n\
    \ - 2, p) + modp(n - 1, p) + modp(n - 0, p) + modp(n - 1, p) + modp(n - 0, p)\
    \ + modp(n - 0, p) + modp(n - 0, p) + modp(n - 0, p);\n    }\n    if p % n ==\
    \ 9 {\n        return p + modp(n - 9, p) + modp(n - 8, p) + modp(n - 7, p) + modp(n\
    \ - 6, p) + modp(n - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p)\
    \ + modp(n - 1, p) + modp(n - 0, p", '    n & (p - 1)', "    debug_assert!(n >=\
    \ 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!((n\
    \ % p) == 0);\n    (n / p) as isize", "    debug_assert!(n >= 0);\n    debug_assert!(p);\n\
    \    debug_assert!(p == 0 || n % p == 0);\n    if n == 0 {\n        return 1;\n\
    \    }\n    if n == 1 {\n        return p;\n    }\n    if n == 2 {\n        return\
    \ p / 2;\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p);\n    }\n\
    \    return modp(n / 2, p) + p;", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n", '    n -
    (n % p)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p <= std::i32::MAX);\n    debug_assert!(p <= std::i64::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::i64::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::i64::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::i64::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::i64::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_", "    debug_assert!(n >\
    \ 0);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    ", '    n & (p - 1)', '    n & (p - 1)', "    let mut result = n;\n\
    \    while result > p {\n        result -= p;\n    }\n    result", "    if n <\
    \ 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)',
  "    debug_assert!(n > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n\
    \    debug_assert!(n % p == 0);\n    n / p", '    n & (p - 1)', '    n & (p -
    1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }"]
stop_tokens:
- "\n}"
