name: HumanEval_49_modp
language: rs
prompt: "/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n///\
  \ 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3,\
  \ 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfn modp(n: isize, p: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = modp;\n    assert_eq!(candidate(3, 5),\
  \ 3);\n    assert_eq!(candidate(1101, 101), 2);\n    assert_eq!(candidate(0, 101),\
  \ 1);\n    assert_eq!(candidate(3, 11), 8);\n    assert_eq!(candidate(100, 101),\
  \ 1);\n    assert_eq!(candidate(30, 5), 4);\n    assert_eq!(candidate(31, 5), 3);\n\
  }\n"
completions: ["    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as i", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n \
    \   }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    ",
  "    let mut npow = pow2(n);\n    let mut nmod = pow2(p);\n    while nmod < npow\
    \ {\n        nmod += p;\n    }\n    nmod", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p <= std::i32::MAX as\
    \ isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i64::MAX as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::isize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX\
    \ as isize);\n    debug_assert!(p <= std::i8::MAX as isize);\n    debug_assert!(p\
    \ <= std::u8::MAX as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::i16::MAX as isize);\n    debug_assert!(p\
    \ <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::i64::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::isize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n\
    \    debug_assert!(p <= std::i8::MAX as isize);\n    debug_assert!(p <= std::u8::MAX\
    \ as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p\
    \ <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::i16::MAX as isize);\n    debug_assert!(p <= std::u16::MAX\
    \ as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p\
    \ <= std::u64::MAX as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX\
    \ as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p\
    \ <= std::i8::MAX as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n\
    \    ", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n  \
    \  }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p % n == 0);\n    debug_assert!(n % p == 0);\n    n +\
    \ (p - 1) * (n - p) % p", "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    ", "    let mut res = 0;\n    while n > 0 {\n        if n\
    \ % p == 0 {\n            res += p;\n        }\n        n /= p;\n    }\n    res",
  '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "  \
    \  debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p < std::i32::MAX as isize);\n    debug_assert!(p < std::i64::MAX\
    \ as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p\
    \ < std::u16::MAX as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n\
    \    debug_assert!(p < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX\
    \ as isize);\n    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p\
    \ < std::i16::MAX as isize);\n    debug_assert!(p < std::i32::MAX as isize);\n\
    \    debug_assert!(p < std::i64::MAX as isize);\n    debug_assert!(p < std::usize::MAX\
    \ as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p\
    \ < std::u32::MAX as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n\
    \    debug_assert!(p < std::isize::MAX as isize);\n    debug_assert!(p < std::i8::MAX\
    \ as isize);\n    debug_assert!(p < std::i16::MAX as isize);\n    debug_assert!(p\
    \ < std::i32::MAX as isize);\n    debug_assert!(p < std::i64::MAX as isize);\n\
    \    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::i16::MAX\
    \ as isize);\n    debug_assert!(p < std::i32::MAX as isize);\n    debug_assert!(p\
    \ < std::i64::MAX as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n\
    \    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p < std::u32::MAX\
    \ as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n    debug_assert!(p\
    \ < std::isize::MAX as ", "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p < n);\n    let mut result = n;\n    while result >\
    \ p {\n        result -= p;\n    }\n    result", '    n & (p - 1)', "    if n\
    \ == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return p;\n    }\n\
    \    if p < 0 {\n        p *= -1;\n    }\n    if p < 2 {\n        return n;\n\
    \    }\n    if p < 3 {\n        return n;\n    }\n    if p < 4 {\n        return\
    \ n;\n    }\n    if p < 5 {\n        return n;\n    }\n    if p < 6 {\n      \
    \  return n;\n    }\n    if p < 7 {\n        return n;\n    }\n    if p < 8 {\n\
    \        return n;\n    }\n    if p < 9 {\n        return n;\n    }\n    if p\
    \ < 10 {\n        return n;\n    }\n    if p < 11 {\n        return n;\n    }\n\
    \    if p < 12 {\n        return n;\n    }\n    if p < 13 {\n        return n;\n\
    \    }\n    if p < 14 {\n        return n;\n    }\n    if p < 15 {\n        return\
    \ n;\n    }\n    if p < 16 {\n        return n;\n    }\n    if p < 17 {\n    \
    \    return n;\n    }\n    if p < 18 {\n        return n;\n    }\n    if p < 19\
    \ {\n        return n;\n    }\n    if p < 20 {\n        return n;\n    }\n   \
    \ if p < 21 {\n        return n;\n    }\n    if p < 22 {\n        return n;\n\
    \    }\n    if p < 23 {\n        return n;\n    }\n    if p < 24 {\n        return\
    \ n;\n    }\n    if p < 25 {\n        return n;\n    }\n    if p < 26 {\n    \
    \    return n;\n    }\n    if p < 27 {\n        return n;\n    }\n    if p < 28\
    \ {\n        return n;\n    }\n    if p < 29 {\n        return n;\n    }\n   \
    \ if p < 30 {\n        return n;\n    }\n    if p < 31 {\n        return n;\n\
    \    }\n    if p < 32 {\n        return n;\n    }\n    if p < 33 {\n        return\
    \ n;\n    }\n    if p < 34 {\n        return n;\n    }\n    if p < 35 {\n    \
    \    return n;\n    }\n    if p < 36 {\n        return n;\n    }\n    if p < 37\
    \ {\n        return n;\n    }\n    if p < 38 {\n        return n;\n    }\n   \
    \ if p < 39 {\n        return n;\n    }\n    if p < 40 {\n        return n;\n\
    \    }\n    if p < 41 {\n        return n;\n    }\n    if p < 42 {\n        return\
    \ n;\n    }\n    if p < 43 {\n        return n;\n    }\n    if p < 44 {\n    \
    \    return n;\n    }\n    if p < 45 {\n        return n;\n    }\n    if p ",
  '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n   \
    \ debug_assert!(p <= n);\n    debug_assert!(p % n == 0);\n    debug_assert!(n\
    \ % p == 0);\n    n + (n - p) % n", "    if n < 0 {\n        n + (p - 1)\n   \
    \ } else {\n        n % p\n    }", '    n & (p - 1)', "    debug_assert!(n >=\
    \ 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ % n == 0);\n    (p / n) as isize", "    if n < 0 {\n        n + (p as isize)\n\
    \    } else {\n        n % p\n    }", "    if n == 0 {\n        return 1;\n  \
    \  }\n    if n == 1 {\n        return p;\n    }\n    if p % n == 0 {\n       \
    \ return p / n;\n    }\n    if p % n == 1 {\n        return modp(n - 1, p) + 1;\n\
    \    }\n    if p % n == 2 {\n        return modp(n - 2, p) + 1;\n    }\n    if\
    \ p % n == 3 {\n        return modp(n - 3, p) + 1;\n    }\n    if p % n == 4 {\n\
    \        return modp(n - 4, p) + 1;\n    }\n    if p % n == 5 {\n        return\
    \ modp(n - 5, p) + 1;\n    }\n    if p % n == 6 {\n        return modp(n - 6,\
    \ p) + 1;\n    }\n    if p % n == 7 {\n        return modp(n - 7, p) + 1;\n  \
    \  }\n    if p % n == 8 {\n        return modp(n - 8, p) + 1;\n    }\n    if p\
    \ % n == 9 {\n        return modp(n - 9, p) + 1;\n    }\n    if p % n == 10 {\n\
    \        return modp(n - 10, p) + 1;\n    }\n    if p % n == 11 {\n        return\
    \ modp(n - 11, p) + 1;\n    }\n    if p % n == 12 {\n        return modp(n - 12,\
    \ p) + 1;\n    }\n    if p % n == 13 {\n        return modp(n - 13, p) + 1;\n\
    \    }\n    if p % n == 14 {\n        return modp(n - 14, p) + 1;\n    }\n   \
    \ if p % n == 15 {\n        return modp(n - 15, p) + 1;\n    }\n    if p % n ==\
    \ 16 {\n        return modp(n - 16, p) + 1;\n    }\n    if p % n == 17 {\n   \
    \     return modp(n - 17, p) + 1;\n    }\n    if p % n == 18 {\n        return\
    \ modp(n - 18, p) + 1;\n    }\n    if p % n == 19 {\n        return modp(n - 19,\
    \ p) + 1;\n    }\n    if p % n == 20 {\n        return modp(n - 20, p) + 1;\n\
    \    }\n    if p % n == 21 {\n        return modp(n - 21, p) + 1;\n    }\n   \
    \ if p % n == 22 {\n        return modp(n - 22, p) + 1;\n    }\n    if p % n ==\
    \ 23 {\n        return modp(n - 23, p) + 1;\n    }\n    if p % n == 24 {\n   \
    \     return modp(n - 24, p) + 1;\n    }\n    if p % n == 25 {\n        return\
    \ modp(n - 25, p) + 1;\n    }\n    if p % n == 26 {\n        return modp(n - 26,\
    \ p) + 1;\n    }\n    if p % n == 27 {\n        return modp(n - 27, p) + 1;\n\
    \    }", "    let mut result = n;\n    while result > p && result % p != 0 {\n\
    \        result -= p;\n    }\n    result", '    n & (p - 1)', "    let mut n1\
    \ = n;\n    let mut n2 = n;\n    while n2 > p {\n        n1 -= 1;\n        n2\
    \ -= 1;\n    }\n    n1 %= p;\n    n2 %= p;\n    n1", '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > 0);\n    let mut result = n;\n    while result\
    \ > p {\n        result -= p;\n    }\n    result", '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p);\n    debug_assert!(p == 0 || n % p == 0);\n  \
    \  debug_assert!(p > 0);\n    debug_assert!(p <= std::i32::MAX);\n    debug_assert!(p\
    \ <= std::i64::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::i16::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::i64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::i8::MAX);\n    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i64::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= ", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p <=\
    \ std::i32::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::i64::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::usize::", '    n & (p - 1)',
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p < std::i32::MAX as isize);\n    debug_assert!(p < std::i64::MAX\
    \ as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p\
    \ < std::u16::MAX as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n\
    \    debug_assert!(p < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX\
    \ as isize);\n    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p\
    \ < std::usize::MAX as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n\
    \    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p < std::u64::MAX\
    \ as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n    debug_assert!(p\
    \ < std::i8::MAX as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n\
    \    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p < std::u32::MAX\
    \ as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n    debug_assert!(p\
    \ < std::isize::MAX as isize);\n    debug_assert!(p < std::i8::MAX as isize);\n\
    \    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::usize::MAX\
    \ as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p\
    \ < std::u32::MAX as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n\
    \    debug_assert!(p < std::isize::MAX as isize);\n    debug_assert!(p < std::i8::MAX\
    \ as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p\
    \ < std::u16::MAX as isize);\n", "    if n < 0 {\n        n + (p as isize)\n \
    \   } else {\n        n % p\n    }", '    n & (p - 1)', '    n & (p - 1)', " \
    \   debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    ", "    if n < 0 {\n\
    \        n + (p - 1)\n    } else {\n        n\n    }", "    debug_assert!(n >=\
    \ 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(n == 0 || n == 1);\n    debug_assert!(n == 0 || n\
    \ == 2);\n    debug_assert!(n == 0 || n == 3);\n    debug_assert!(n == 0 || n\
    \ == 4);\n    debug_assert!(n == 0 || n == 5);\n    debug_assert!(n == 0 || n\
    \ == 6);\n    debug_assert!(n == 0 || n == 7);\n    debug_assert!(n == 0 || n\
    \ == 8);\n    debug_assert!(n == 0 || n == 9);\n    debug_assert!(n == 0 || n\
    \ == 10);\n    debug_assert!(n == 0 || n == 11);\n    debug_assert!(n == 0 ||\
    \ n == 12);\n    debug_assert!(n == 0 || n == 13);\n    debug_assert!(n == 0 ||\
    \ n == 14);\n    debug_assert!(n == 0 || n == 15);\n    debug_assert!(n == 0 ||\
    \ n == 16);\n    debug_assert!(n == 0 || n == 17);\n    debug_assert!(n == 0 ||\
    \ n == 18);\n    debug_assert!(n == 0 || n == 19);\n    debug_assert!(n == 0 ||\
    \ n == 20);\n    debug_assert!(n == 0 || n == 21);\n    debug_assert!(n == 0 ||\
    \ n == 22);\n    debug_assert!(n == 0 || n == 23);\n    debug_assert!(n == 0 ||\
    \ n == 24);\n    debug_assert!(n == 0 || n == 25);\n    debug_assert!(n == 0 ||\
    \ n == 26);\n    debug_assert!(n == 0 || n == 27);\n    debug_assert!(n == 0 ||\
    \ n == 28);\n    debug_assert!(n == 0 || n == 29);\n    debug_assert!(n == 0 ||\
    \ n == 31);\n    debug_assert!(n == 0 || n == 32);\n    debug_assert!(n == 0 ||\
    \ n == 33);\n    debug_assert!(n == 0 || n == 34);\n    debug_assert!(n == 0 ||\
    \ n == 35);\n    debug_assert!(n == 0 || n == 36);\n    debug_assert!(n == 0 ||\
    \ n == 37);\n    debug_assert!(n == 0 || n == 38);\n    debug_assert!(n == 0 ||\
    \ n == 39);\n    debug_assert!(n == 0 || n == 41);\n    debug_assert!(n == 0 ||\
    \ n == 42);\n    debug_assert!(n == 0 || n == 43);\n    debug_assert!(n == 0 ||\
    \ n == 44);\n    debug_assert!(n == 0 || n == 45);\n    debug_assert!(n == 0 ||\
    \ n == 46);\n    debug_assert!(n == 0 || n == 47);\n    debug_assert!", "    if\
    \ n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n < 0\
    \ {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)',
  "    let mut result = n;\n    while result > p && result % p != 0 {\n        result\
    \ -= p;\n    }\n    result", "    if n < 0 {\n        n + (p - 1)\n    } else\
    \ {\n        n\n    }", '    n & (p - 1)', "    let mut npow = pow(n);\n    npow\
    \ %= p;\n    if npow == 0 {\n        npow\n    } else {\n        modpow(npow,\
    \ p)\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n %\
    \ p\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n <= p / 2);\n    debug_assert!(n >= p / 2);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p == 1);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert!(n / p == 1);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p == 1);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert!(n / p == 1);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p == 1);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert!(n / p == 1);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p == 1);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert!(n / p == 1);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p == 1);\n    debug_assert!(n % p == 0);\n    debug_assert!(n ", "    let\
    \ mut n2 = n * n;\n    while n2 > p {\n        n2 -= p;\n    }\n    n2", '    n
    & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    n / p", "    if n < 0 {\n       \
    \ n + (p - 1)\n    } else {\n        n\n    }", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(n %\
    \ p == 0);\n    n / p", "    let mut res = n;\n    while res > p {\n        res\
    \ -= p;\n    }\n    res", '    n & (p - 1)', "    if n < 0 {\n        n + (p -\
    \ 1)\n    } else {\n        n % p\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    ", '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n % p\n    }", '    n & (p - 1)', '    n & (p - 1)', " \
    \   let mut result = n;\n    while result > p && result % p != 0 {\n        result\
    \ -= p;\n    }\n    result", "    let mut result = n;\n    while result > p {\n\
    \        result -= p;\n    }\n    result", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", '    n & (p - 1)', "    if n < 0 {\n       \
    \ n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', '    n & (p
    - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n\
    \    }", '    n & (p - 1)', "    if n == 0 {\n        return 1;\n    }\n    if\
    \ n == 1 {\n        return p;\n    }\n    if p == 1 {\n        return n;\n   \
    \ }\n    if p == 0 {\n        return 0;\n    }\n    if p < n {\n        return\
    \ modp(n - 1, p) % p;\n    }\n    return modp(n, p - 1);", '    n & (p - 1)',
  '    n & (p - 1)', '    n & (p - 1)', "    let mut res = 0;\n    while n != 0 {\n\
    \        if n % p == 0 {\n            res += p;\n            n /= p;\n       \
    \ } else {\n            res += 1;\n        }\n    }\n    res", "    let mut result\
    \ = n;\n    while result > p && result % p != 0 {\n        result -= p;\n    }\n\
    \    result", "    if n >= p {\n        n - p\n    } else {\n        (p + n) %\
    \ p\n    }", '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    if\
    \ n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "    let\
    \ mut npow = n;\n    while npow < p {\n        npow *= 2;\n    }\n    npow % p",
  '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(p < std::i32::MAX as isize);\n\
    \    debug_assert!(p < std::i32::MAX as usize);\n    debug_assert!(p < std::i64::MAX\
    \ as isize);\n    debug_assert!(p < std::i64::MAX as usize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::u64::MAX as usize);\n\
    \    debug_assert!(p < std::u128::MAX as isize);\n    debug_assert!(p < std::u128::MAX\
    \ as usize);\n    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p\
    \ < std::usize::MAX as usize);\n    debug_assert!(p < std::i8::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as usize);\n    debug_assert!(p < std::i16::MAX\
    \ as isize);\n    debug_assert!(p < std::i16::MAX as usize);\n    debug_assert!(p\
    \ < std::u16::MAX as isize);\n    debug_assert!(p < std::u16::MAX as usize);\n\
    \    debug_assert!(p < std::i64::MAX as isize);\n    debug_assert!(p < std::i64::MAX\
    \ as usize);\n    debug_assert!(p < std::u64::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as usize);\n    debug_assert!(p < std::u128::MAX as isize);\n\
    \    debug_assert!(p < std::u128::MAX as usize);\n    debug_assert!(p < std::usize::MAX\
    \ as isize);\n    debug_assert!(p < std::usize::MAX as usize);\n    debug_assert!(p\
    \ < std::i8::MAX as isize);\n    debug_assert!(p < std::i8::MAX as usize);\n \
    \   debug_assert!(p < std::i16::MAX as isize);\n    debug_assert!(p < std::i16::MAX\
    \ as usize);\n    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p\
    \ < std::u16::MAX as usize);\n    debug_assert!(p < std::i64::MAX as isize);\n\
    \    debug_assert!(p < std::i64::MAX as usize);\n    debug_assert!(p < std::u64::MAX\
    \ as isize);\n    ", "    if n >= p {\n        n - p\n    } else {\n        p\
    \ + n\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n\
    \    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p < n);\n    debug_assert!(p < std::i32::MAX as isize);\n\
    \    debug_assert!(p < std::i64::MAX as isize);\n    debug_assert!(p < std::usize::MAX\
    \ as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p\
    \ < std::u32::MAX as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n\
    \    debug_assert!(p < std::isize::MAX as isize);\n    debug_assert!(p < std::i8::MAX\
    \ as isize);\n    debug_assert!(p < std::i16::MAX as isize);\n    debug_assert!(p\
    \ < std::i64::MAX as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n\
    \    debug_assert!(p < std::u8::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::i16::MAX\
    \ as isize);\n    debug_assert!(p < std::i64::MAX as isize);\n    debug_assert!(p\
    \ < std::usize::MAX as isize);\n    debug_assert!(p < std::u8::MAX as isize);\n\
    \    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p < std::u32::MAX\
    \ as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n    debug_assert!(p\
    \ < std::isize::MAX as isize);\n    debug_assert!(p < std::i8::MAX as isize);\n\
    \    debug_assert!(p < std::i16::MAX as isize);\n    debug_assert!(p < std::i64::MAX\
    \ as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p\
    \ < std::u8::MAX as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n\
    \    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p < std::u64::MAX\
    \ as isize);\n    debug_assert!(p < std::isize::MAX as ", "    let mut result\
    \ = n;\n    while result > p {\n        result -= p;\n    }\n    result", "  \
    \  if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n\
    \ < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)',
  "    if n < 0 {\n        n ^ (p - 1)\n    } else {\n        n & (p - 1)\n    }",
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!((n % p) == 0);\n    (n / p) as isize", "    if n < 0\
    \ {\n        n ^ (p - 1)\n    } else {\n        n & (p - 1)\n    }", "    let\
    \ mut npow = p;\n    while npow < n {\n        npow *= p;\n    }\n    npow % n",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n\
    \ < 0 {\n        n ^ (p - 1)\n    } else {\n        n & (p - 1)\n    }", '    n
    & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    if n < 0 {\n        n +\
    \ (p as isize)\n    } else {\n        n - (p as isize)\n    }", '    n & (p -
    1)', "    debug_assert!(n >= 0);\n    debug_assert!(p);\n    debug_assert!(p >\
    \ 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p != 0);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p < 256);\n", "    let mut res = 0;\n    while n >\
    \ 0 {\n        if n % p == 0 {\n            res += p;\n        }\n        n /=\
    \ p;\n    }\n    res", '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p);\n\
    \    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != 2);\n    debug_assert!(p != 4);\n    debug_assert!(p != 8);\n    debug_assert!(p\
    \ != 16);\n    debug_assert!(p != 32);\n    debug_assert!(p != 64);\n    debug_assert!(p\
    \ != 128);\n    debug_assert!(p != 256);\n    debug_assert!(p != 512);\n    debug_assert!(p\
    \ != 1024);\n    debug_assert!(p != 2048);\n    debug_assert!(p != 4096);\n  \
    \  debug_assert!(p != 8192);\n    debug_assert!(p != 16384);\n    debug_assert!(p\
    \ != 32768);\n    debug_assert!(p != 65536);\n    debug_assert!(p != 131072);\n\
    \    debug_assert!(p != 262144);\n    debug_assert!(p != 524288);\n    debug_assert!(p\
    \ != 1048576);\n    debug_assert!(p != 2097152);\n    debug_assert!(p != 4194304);\n\
    \    debug_assert!(p != 8388608);\n    debug_assert!(p != 16777216);\n    debug_assert!(p\
    \ != 33554432);\n    debug_assert!(p != 67108864);\n    debug_assert!(p != 134217728);\n\
    \    debug_assert!(p != 268435456);\n    debug_assert!(p != 536870912);\n    debug_assert!(p\
    \ != 1073741824);\n    debug_assert!(p != -2147483648);\n    debug_assert!(p !=\
    \ -2147483649);\n    debug_assert!(p != -1);\n    debug_assert!(p != -2);\n  \
    \  debug_assert!(p != -4);\n    debug_assert!(p != -8);\n    debug_assert!(p !=\
    \ -16);\n    debug_assert!(p != -32);\n    debug_assert!(p != -64);\n    debug_assert!(p\
    \ != -128);\n    debug_assert!(p != -256);\n    debug_assert!(p != -512);\n  \
    \  debug_assert!(p != -1024);\n    debug_assert!(p != -2048);\n    debug_assert!(p\
    \ != -4096);\n    debug_assert!(p != -8", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ % n == 0);\n    debug_assert!(n % p == 0);\n    n / p", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ % 2 == 1);\n    debug_assert!(n % p == 0);\n    n / p", '    n & (p - 1)', '    n
    & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n  \
    \  }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\
    \ % p\n    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(p\
    \ < std::i32::MAX as isize);\n    debug_assert!(p < std::i64::MAX as isize);\n\
    \    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::u16::",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n &
    (p - 1)', "    let mut result = n;\n    if result > p {\n        result %= p;\n\
    \    }\n    if result < 0 {\n        result += p;\n    }\n    result", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    n / p", '    n & (p - 1)', "    if n < 0 {\n        n + (p -\
    \ 1)\n    } else {\n        n\n    }", '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ < std::i32::MAX);\n    debug_assert!(p < std::i64::MAX);\n    debug_assert!(p\
    \ < std::usize::MAX);\n    debug_assert!(p < std::u16::MAX);\n    debug_assert!(p\
    \ < std::u32::MAX);\n    debug_assert!(p < std::u64::MAX);\n    debug_assert!(p\
    \ < std::isize::MAX);\n    debug_assert!(p < std::i8::MAX);\n    debug_assert!(p\
    \ < std::u16::MAX);\n    debug_assert!(p < std::u32::MAX);\n    debug_assert!(p\
    \ < std::u64::MAX);\n    debug_assert!(p < std::isize::MAX);\n    debug_assert!(p\
    \ < std::i8::MAX);\n    debug_assert!(p < std::u16::MAX);\n    debug_assert!(p\
    \ < std::u32::MAX);\n    debug_assert!(p < std::u64::MAX);\n    debug_assert!(p\
    \ < std::isize::MAX);\n    debug_assert!(p < std::i8::MAX);\n    debug_assert!(p\
    \ < std::u16::MAX);\n    debug_assert!(p < std::u32::MAX);\n    debug_assert!(p\
    \ < std::u64::MAX);\n    debug_assert!(p < std::isize::MAX);\n    debug_assert!(p\
    \ < std::i8::MAX);\n    debug_assert!(p < std::u16::MAX);\n    debug_assert!(p\
    \ < std::u32::MAX);\n    debug_assert!(p < std::u64::MAX);\n    debug_assert!(p\
    \ < std::isize::MAX);\n    debug_assert!(p < std::i8::MAX);\n    debug_assert!(p\
    \ < std::u16::MAX);\n    debug_assert!(p < std::u32::MAX);\n    debug_assert!(p\
    \ < std::u64::MAX);\n    debug_assert!(p < std::isize::MAX);\n    debug_assert!(p\
    \ < std::i8::MAX);\n    debug_assert!(p < std::u16::MAX);\n    debug_assert!(p\
    \ < std::u32::MAX);\n    debug_assert!(p < std::u64::MAX);\n    debug_assert!(p\
    \ < std::isize::MAX);\n    debug_assert!(p < std::i8::MAX);\n    debug_assert!(p\
    \ < std::u16::MAX);\n    debug_assert!(p < std::u32::MAX);", '    n & (p - 1)',
  '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    let mut npow = pow2(n);\n\
    \    let mut nmod = pow2(p);\n    while nmod < npow {\n        nmod += p;\n  \
    \      npow *= p;\n    }\n    nmod %= p;\n    npow", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p !=\
    \ 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n", '    n & (p - 1)', "    debug_assert!(n > 0);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p >= 1);\n    debug_assert!(n / p <= n);\n    debug_assert!(p / n >= 1);\n\
    \    debug_assert!(p / n <= p);\n    debug_assert!(p / n >= p);\n    debug_assert!(p\
    \ / n <= n);\n    debug_assert!(p / n <= p);\n    debug_assert!(p / n <= n);\n\
    \    debug_assert!(p / n <= p);\n    debug_assert!(p / n <= n);\n    debug_assert!(p\
    \ / n <= p);\n    debug_assert!(p / n <= n);\n    debug_assert!(p / n <= p);\n\
    \    debug_assert!(p / n <= n);\n    debug_assert!(p / n <= p);\n    debug_assert!(p\
    \ / n <= n);\n    debug_assert!(p / n <= p);\n    debug_assert!(p / n <= n);\n\
    \    debug_assert!(p / n <= p);\n    debug_assert!(p / n <= n);\n    debug_assert!(p\
    \ / n <= p);\n    debug_assert!(p / n <= n);\n    debug_assert!(p / n <= p);\n\
    \    debug_assert!(p / n <= n);\n    debug_assert!(p / n <= p);\n    debug_assert!(p\
    \ / n <= n);\n    debug_assert!(p / n <= p);\n    debug_assert!(p / n <= n);\n\
    \    debug_assert!(p / n <= p);\n    debug_assert!(p / n <= n);\n    debug_assert!(p\
    \ / n <= p);\n    debug_assert!(p / n <= n);\n    debug_assert!(p / n <= p);\n\
    \    debug_assert!(p / n <= n);\n    debug_assert!(p / n <= p);\n    debug_assert!(p\
    \ / n <= n);\n    debug_assert!(p / n <= p);\n    debug_assert!(p / n <= n);\n\
    \    debug_assert!(p / n <= p);\n    debug_assert!(p / n <= n);\n    debug_assert!(p\
    \ / n <= p);\n    debug_assert!(p / n <= n);\n    debug_assert!(p / n <= p);\n\
    \    debug_assert!(p / n <= n);\n    debug_assert!(p / n <= p);\n    debug_assert!(p\
    \ / n <= n);\n    debug_assert!(p / n <= p);\n    debug_assert!(p / n <= n);\n",
  '    n & (p - 1)', '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n   \
    \ } else {\n        n\n    }", '    n & (p - 1)', '    n & (p - 1)', "    let\
    \ mut result = n;\n    while result > p && result % p != 0 {\n        result -=\
    \ p;\n    }\n    result", "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p < n);\n    debug_assert!(p % n == 0);\n    debug_assert!(n\
    \ % p == 0);\n    n + (p - 1) % p", "    if n < 0 {\n        n + (p - 1)\n   \
    \ } else {\n        n\n    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <\
    \ 64);\n    debug_assert!(p < 256);\n    debug_assert!(p < 1024);\n    debug_assert!(p\
    \ < 2048);\n    debug_assert!(p < 4096);\n    debug_assert!(p < 8192);\n    debug_assert!(p\
    \ < 16384);\n    debug_assert!(p < 32768);\n    debug_assert!(p < 65536);\n  \
    \  debug_assert!(p < 131072);\n    debug_assert!(p < 262144);\n    debug_assert!(p\
    \ < 524288);\n    debug_assert!(p < 1048576);\n    debug_assert!(p < 2097152);\n\
    \    debug_assert!(p < 4194304);\n    debug_assert!(p < 8388608);\n    debug_assert!(p\
    \ < 16777216);\n    debug_assert!(p < 33554432);\n    debug_assert!(p < 67108864);\n\
    \    debug_assert!(p < 134217728);\n    debug_assert!(p < 268435456);\n    debug_assert!(p\
    \ < 536870912);\n    debug_assert!(p < 1073741824);\n    debug_assert!(p < 2147483648);\n\
    \    debug_assert!(p < 4294967296);\n    debug_assert!(p < 8589934592);\n    debug_assert!(p\
    \ < 17179869184);\n    debug_assert!(p < 34359738368);\n    debug_assert!(p <\
    \ 68719476736);\n    debug_assert!(p < 137438953472);\n    debug_assert!(p < 274877906944);\n\
    \    debug_assert!(p < 549755813888);\n    debug_assert!(p < 1099511627776);\n\
    \    debug_assert!(p < 2199023255552);\n    debug_assert!(p < 4398046511104);\n\
    \    debug_assert!(p < 8796093022208);\n    debug_assert!(p < 17592186044416);\n\
    \    debug_assert!(p < 35184372088832);\n    debug_assert!(p < 70368744177664);\n\
    \    debug_assert!(p < 140737488355328);\n    debug_assert!(p < 281474976710656);\n\
    \    debug_assert!(p < 56294", "    let mut result = n;\n    while result > p\
    \ && result % p != 0 {\n        result -= p;\n    }\n    result", "    if n <\
    \ 0 {\n        n ^ (p - 1)\n    } else {\n        n & (p - 1)\n    }", '    n
    & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    debug_assert!(n\
    \ > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ >= 0);\n    ", "    debug_assert!(n > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    ", "    if n < 0 {\n        n + (p -\
    \ 1)\n    } else {\n        n\n    }", '    n & (p - 1)', "    if n < 0 {\n  \
    \      n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', "    if\
    \ n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n - (n %
    p)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as usize);\n    debug_assert!(p <= std::u32::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as usize);\n    debug_assert!(p <= std::i64::MAX\
    \ as isize);\n    debug_assert!(p <= std::i64::MAX as usize);\n    debug_assert!(p\
    \ <= std::u64::MAX as isize);\n    debug_assert!(p <= std::u64::MAX as usize);\n\
    \    debug_assert!(p <= std::isize::MAX as isize);\n    debug_assert!(p <= std::isize::MAX\
    \ as usize);\n    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p\
    \ <= std::usize::MAX as usize);\n    debug_assert!(p <= std::i16::MAX as isize);\n\
    \    debug_assert!(p <= std::i16::MAX as usize);\n    debug_assert!(p <= std::u16::MAX\
    \ as isize);\n    debug_assert!(p <= std::u16::MAX as usize);\n    debug_assert!(p\
    \ <= std::i8::MAX as isize);\n    debug_assert!(p <= std::i8::MAX as usize);\n\
    \    debug_assert!(p <= std::u8::MAX as isize);\n    debug_assert!(p <= std::u8::MAX\
    \ as usize);\n    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p\
    \ <= std::i64::MAX as usize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as usize);\n    debug_assert!(p <= std::isize::MAX\
    \ as isize);\n    debug_assert!(p <= std::isize::MAX as usize);\n    debug_assert!(p\
    \ <= std::usize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX as usize);\n\
    \    debug_assert!(p <= std::i8::MAX as isize);\n    debug_assert!(p <= std::i8::MAX\
    \ as usize);\n    debug_assert!(p <= std::u8::MAX as isize);\n    debug_assert!(p\
    \ <= std::u8::MAX as usize);\n    debug_assert!(p <= std::i16::MAX as isize);\n\
    \    debug_assert!(p <= std::i16::MAX", '    n & (p - 1)', "    if n < 0 {\n \
    \       n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', '    n
    & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    ", '    n & (p - 1)', "    if n >= p {\n\
    \        n\n    } else {\n        n % p\n    }", '    n & (p - 1)', "    if n\
    \ >= p {\n        n - p\n    } else {\n        (p + n) % p\n    }", '    n & (p
    - 1)', "    let mut result = n;\n    while result > p && result % p != 0 {\n \
    \       result /= p;\n    }\n    result", '    n & (p - 1)', "    if n < 0 {\n\
    \        n + (p - 1)\n    } else {\n        n\n    }", "    if n < 0 {\n     \
    \   n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', "    let\
    \ mut result = n;\n    while result > p {\n        result -= p;\n    }\n    result",
  '    n & (p - 1)', "    if n < 0 {\n        p\n    } else {\n        n & (p - 1)\n\
    \    }", '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', '    n & (p
    - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= std::i32::MAX);\n    debug_assert!(p <= std::i64::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::u8::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::u8::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::u8::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::u8::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::u8::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32", " \
    \   debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <\
    \ n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert", '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 256);\n    debug_assert!(p < 65536);\n    debug_assert!(p\
    \ < 16777216);\n    debug_assert!(p < 4294967296);\n    debug_assert!(p < 18446744073709551616);\n\
    \    debug_assert!(p < 4294967296u);\n    debug_assert!(p < 18446744073709551616u);\n\
    \    debug_assert!(p < 4294967296u8);\n    debug_assert!(p < 18446744073709551616u8);\n\
    \    debug_assert!(p < 4294967296u16);\n    debug_assert!(p < 18446744073709551616u16);\n\
    \    debug_assert!(p < 4294967296u32);\n    debug_assert!(p < 18446744073709551616u32);\n\
    \    debug_assert!(p < 4294967296u64);\n    debug_assert!(p < 18446744073709551616u64);\n\
    \    debug_assert!(p < 4294967296usize);\n    debug_assert!(p < 18446744073709551616usize);\n\
    \    debug_assert!(p < 4294967296u8);\n    debug_assert!(p < 18446744073709551616u8);\n\
    \    debug_assert!(p < 4294967296u16);\n    debug_assert!(p < 18446744073709551616u16);\n\
    \    debug_assert!(p < 4294967296u32);\n    debug_assert!(p < 18446744073709551616u32);\n\
    \    debug_assert!(p < 4294967296u64);\n    debug_assert!(p < 18446744073709551616u64);\n\
    \    debug_assert!(p < 4294967296usize);\n    debug_assert!(p < 18446744073709551616usize);\n\
    \    debug_assert!(p < 4294967296u8);\n    debug_assert!(p < 18446744073709551616u8);\n\
    \    debug_assert!(p < 4294967296u16);\n    debug_assert!(p < 18446744073709551616u16);\n\
    \    debug_assert!(p ", "    let mut res = 0;\n    while n > 0 {\n        if n\
    \ % p == 0 {\n            res += 1;\n        }\n        n /= p;\n    }\n    res",
  '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n   \
    \ debug_assert!(p <= n);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n\
    \    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p !=\
    \ n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p\
    \ != n);\n    debug_assert!(p != 0);\n    debug_assert!(p != 1);\n", '    n &
    (p - 1)', '    n & (p - 1)', "    let mut res = 0;\n    while n > 0 {\n      \
    \  if n % p == 0 {\n            res += p;\n        }\n        n /= p;\n    }\n\
    \    res", '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p);\n\
    \    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(p % n\
    \ == 0);\n    debug_assert!(n % p == 0);\n    n + (n - p) % n"]
stop_tokens:
- "\n}"
