name: HumanEval_49_modp
language: rs
prompt: "/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n///\
  \ 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3,\
  \ 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfn modp(n: isize, p: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = modp;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut res = n;\n    while res > p {\n        res -= p;\n    }\n\
    \    res", '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    if n\
    \ < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n &
    (p - 1)', "    if n < 0 {\n        p\n    } else {\n        n & (p - 1)\n    }",
  '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    if n < 0 {\n     \
    \   n ^ (p - 1)\n    } else {\n        n & (p - 1)\n    }", '    n & (p - 1)',
  '    n & (p - 1)', '    n - (n % p)', '    n & (p - 1)', "    debug_assert!(n >\
    \ 0);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ / p < 2);\n    debug_assert!(p < n);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    debug_assert!(n / p ", "    if n\
    \ < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n < 0 {\n\
    \        n + (p - 1)\n    } else {\n        n % p\n    }", "    if n == 0 {\n\
    \        return 1;\n    }\n    if n == 1 {\n        return p;\n    }\n    if p\
    \ % n == 0 {\n        return p / n;\n    }\n    if p % n == 1 {\n        return\
    \ modp(n - 1, p) + 1;\n    }\n    if p % n == 2 {\n        return modp(n - 2,\
    \ p) + 1;\n    }\n    if p % n == 3 {\n        return modp(n - 3, p) + 1;\n  \
    \  }\n    if p % n == 4 {\n        return modp(n - 4, p) + 1;\n    }\n    if p\
    \ % n == 5 {\n        return modp(n - 5, p) + 1;\n    }\n    if p % n == 6 {\n\
    \        return modp(n - 6, p) + 1;\n    }\n    if p % n == 7 {\n        return\
    \ modp(n - 7, p) + 1;\n    }\n    if p % n == 8 {\n        return modp(n - 8,\
    \ p) + 1;\n    }\n    if p % n == 9 {\n        return modp(n - 9, p) + 1;\n  \
    \  }\n    if p % n == 10 {\n        return modp(n - 10, p) + 1;\n    }\n    if\
    \ p % n == 11 {\n        return modp(n - 11, p) + 1;\n    }\n    if p % n == 12\
    \ {\n        return modp(n - 12, p) + 1;\n    }\n    if p % n == 13 {\n      \
    \  return modp(n - 13, p) + 1;\n    }\n    if p % n == 14 {\n        return modp(n\
    \ - 14, p) + 1;\n    }\n    if p % n == 15 {\n        return modp(n - 15, p) +\
    \ 1;\n    }\n    if p % n == 16 {\n        return modp(n - 16, p) + 1;\n    }\n\
    \    if p % n == 17 {\n        return modp(n - 17, p) + 1;\n    }\n    if p %\
    \ n == 18 {\n        return modp(n - 18, p) + 1;\n    }\n    if p % n == 19 {\n\
    \        return modp(n - 19, p) + 1;\n    }\n    if p % n == 20 {\n        return\
    \ modp(n - 20, p) + 1;\n    }\n    if p % n == 21 {\n        return modp(n - 21,\
    \ p) + 1;\n    }\n    if p % n == 22 {\n        return modp(n - 22, p) + 1;\n\
    \    }\n    if p % n == 23 {\n        return modp(n - 23, p) + 1;\n    }\n   \
    \ if p % n == 24 {\n        return modp(n - 24, p) + 1;\n    }\n    if p % n ==\
    \ 25 {\n        return modp(n - 25, p) + 1;\n    }\n    if p % n == 26 {\n   \
    \     return modp(n - 26, p) + 1;\n    }\n    if p % n == 27 {\n        return\
    \ modp(n - 27, p) + 1;\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p);\n   \
    \ debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(", "    let mut result = n;\n    while result\
    \ > p && result % p != 0 {\n        result -= p;\n    }\n    result", "    let\
    \ mut npow = n;\n    while npow % p != 0 {\n        npow /= p;\n    }\n    npow",
  '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\
    \ % p\n    }", "    let mut result = n;\n    while result > p {\n        result\
    \ -= p;\n    }\n    result", "    if n < 0 {\n        n + (p - 1)\n    } else\
    \ {\n        n\n    }", "    let mut res = n;\n    while res > p {\n        res\
    \ -= p;\n    }\n    res", "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n\
    \ % 2 == 0);\n    n + (p - 1) as isize", '    n & (p - 1)', '    n & (p - 1)',
  '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "  \
    \  debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ <= 64);\n    debug_", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n\
    \ % p == 0);\n    n & (p - 1)", "    let mut res = 0;\n    while n > 0 {\n   \
    \     if n % p == 0 {\n            res += p;\n        }\n        n /= p;\n   \
    \ }\n    res", '    n & (p - 1)', '    n & (p - 1)', "    if n < 0 {\n       \
    \ n + (p as isize)\n    } else {\n        n % p\n    }", '    n & (p - 1)', '    n
    - (n % p)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(n %\
    \ p == 0);\n    debug_assert!(n / p < MAX_DIGITS);\n    debug_assert!(p < MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    ",
  "    let mut result = n;\n    while result > p {\n        result -= p;\n    }\n\
    \    result", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n\
    \    }", "    debug_assert!(n > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    "]
stop_tokens:
- "\n}"
