language: rs
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph0qq00k3.rs:30:85\n   |\n\
    30 |     let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \             ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmph0qq00k3.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char_length\
    \ = 0;\n    let mut paren_level_char_length_index = 0;\n    let mut paren_level_char_length_chars\
    \ = vec![];\n    let mut paren_level_char_length_char_index = 0;\n    let mut\
    \ paren_level_char_length_char_length = 0;\n    let mut paren_level_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_chars = vec![];\n    let\
    \ mut paren_level_char_length_char_length_char_index = 0;\n    let mut paren_level_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_index = 0;\n    let\
    \ mut paren_level_char_length_char_length_char_length_chars = vec![];\n    let\
    \ mut paren_level_char_length_char_length_char_length_char_index = 0;\n    let\
    \ mut paren_level_char_length_char_length_char_length_char_length = 0;\n    let\
    \ mut paren_level_char_length_char_length_char_length_char_index = 0;\n    let\
    \ mut paren_level_char_length_char_length_char_length_char_length_chars = vec![];\n\
    \    let mut paren_level_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_chars\
    \ = vec![];\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_chars\
    \ = vec![];\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4pmavbec.rs:38:97\n   |\n\
    38 |     let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_\n\
    \   |                                                                        \
    \                         ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp4pmavbec.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_stack\
    \ = Vec::new();\n    let mut paren_stack_top = paren_stack.len();\n    let mut\
    \ paren_stack_bottom = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n\
    \    let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n  \
    \  let mut paren_stack_top = paren_stack.len();\n    let mut paren_stack_bottom\
    \ = paren_stack.len();\n    let mut paren_stack_curr = paren_stack.len();\n\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6ar6nkah.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_depth\
    \ = 0;\n    let mut paren_levels = vec![];\n    let mut paren_level = 0;\n   \
    \ let mut paren_level_count = 0;\n    let mut paren_level_chars = vec![];\n  \
    \  let mut paren_level_char_count = 0;\n    let mut paren_level_char_index = 0;\n\
    \    let mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren_level_chars.len();\n    let mut paren_level_char_index = 0;\n    let\
    \ mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_count\
    \ = paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8rbstlrj.rs:46:43\n   |\n\
    46 |     let mut paren_level_char_count = paren\n   |                        \
    \                   ^ help: add `;` here\n47 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmp8rbstlrj.rs:46:38\n\
    \   |\n46 |     let mut paren_level_char_count = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `len` found for struct `Chars` in the current scope\n  --> /tmp/tmp8rbstlrj.rs:16:56\n\
    \   |\n16 |     let mut paren_level_char_count = paren_level_chars.len();\n  \
    \ |                                                        ^^^ method not found\
    \ in `Chars<'_>`\n\nerror[E0599]: no method named `len` found for struct `Chars`\
    \ in the current scope\n  --> /tmp/tmp8rbstlrj.rs:19:56\n   |\n19 |     let mut\
    \ paren_level_char_count = paren_level_chars.len();\n   |                    \
    \                                    ^^^ method not found in `Chars<'_>`\n\nerror[E0599]:\
    \ no method named `len` found for struct `Chars` in the current scope\n  --> /tmp/tmp8rbstlrj.rs:22:56\n\
    \   |\n22 |     let mut paren_level_char_count = paren_level_chars.len();\n  \
    \ |                                                        ^^^ method not found\
    \ in `Chars<'_>`\n\nerror[E0599]: no method named `len` found for struct `Chars`\
    \ in the current scope\n  --> /tmp/tmp8rbstlrj.rs:25:56\n   |\n25 |     let mut\
    \ paren_level_char_count = paren_level_chars.len();\n   |                    \
    \                                    ^^^ method not found in `Chars<'_>`\n\nerror[E0599]:\
    \ no method named `len` found for struct `Chars` in the current scope\n  --> /tmp/tmp8rbstlrj.rs:28:56\n\
    \   |\n28 |     let mut paren_level_char_count = paren_level_chars.len();\n  \
    \ |                                                        ^^^ method not found\
    \ in `Chars<'_>`\n\nerror[E0599]: no method named `len` found for struct `Chars`\
    \ in the current scope\n  --> /tmp/tmp8rbstlrj.rs:31:56\n   |\n31 |     let mut\
    \ paren_level_char_count = paren_level_chars.len();\n   |               "
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_level_count = vec![];\n    let mut\
    \ paren_level_counts = vec![];\n    let mut paren_level_counts_len = vec![];\n\
    \    let mut paren_level_counts_len_max = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let mut\
    \ paren_level_counts_len_max_len = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let mut\
    \ paren_level_counts_len_max_len = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let mut\
    \ paren_level_counts_len_max_len = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let mut\
    \ paren_level_counts_len_max_len = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let mut\
    \ paren_level_counts_len_max_len = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let mut\
    \ paren_level_counts_len_max_len = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let mut\
    \ paren_level_counts_len_max_len = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let mut\
    \ paren_level_counts_len_max_len = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let mut\
    \ paren_level_counts_len_max_len = vec![];\n    let mut paren_level_counts_len_max_len\
    \ = vec![];\n    let mut paren_level_counts_len_max_len = vec![];\n    let \n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpica9gpjx.rs:43:1\n  \
    \ |\n43 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_level_stack = Vec::new();\n    let mut paren_level_stack_len\
    \ = paren_level_stack.len();\n    let mut paren_level_stack_pos = 0;\n    let\
    \ mut paren_level_stack_len = paren_level_stack.len();\n    let mut paren_level_stack_pos\
    \ = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n    let\
    \ mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpc3gsj30w.rs:48:43\n   |\n\
    48 |     let mut paren_level_stack_len = paren_\n   |                        \
    \                   ^ help: add `;` here\n49 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren_` in this scope\n  --> /tmp/tmpc3gsj30w.rs:48:37\n\
    \   |\n48 |     let mut paren_level_stack_len = paren_\n   |                 \
    \                    ^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpc3gsj30w.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy42qqexo.rs:41:56\n   |\n\
    41 |     let mut paren_nesting_nesting_nesting_nesting_level\n   |           \
    \                                             ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy42qqexo.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    let mut paren_levels: Vec<isize> = vec![];\n\
    \    let mut paren_levels_len: usize = 0;\n    let mut paren_levels_lens: Vec<usize>\
    \ = vec![];\n    let mut paren_levels_lens_len: usize = 0;\n    let mut paren_levels_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_len: usize = 0;\n \
    \   let mut paren_levels_lens_lens_lens: Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens: Vec<usize> = vec![];\n\
    \    let mut paren_levels_lens_lens_lens_lens_len: usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens: Vec<usize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: usize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens: Vec<usize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcdnk72_f.rs:28:41\n   |\n\
    28 |     let mut paren_levels_lens_lens_lens_\n   |                          \
    \               ^ help: add `;` here\n29 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpcdnk72_f.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_levels = Vec::new();\n    let mut paren_levels_len = paren_levels;\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \    let mut paren_levels_len = paren_level\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptdc1bc9g.rs:32:43\n   |\n\
    32 |     let mut paren_levels_len = paren_level\n   |                        \
    \                   ^ help: add `;` here\n33 | }\n   | - unexpected token\n\n\
    error[E0282]: type annotations needed\n  --> /tmp/tmptdc1bc9g.rs:12:32\n   |\n\
    11 |     let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \   |         -------------------- consider giving `paren_levels_len` a type\n\
    12 |     let mut paren_levels_len = paren_levels_len.iter().cloned().collect();\n\
    \   |                                ^^^^^^^^^^^^^^^^ cannot infer type\n   |\n\
    \   = note: type must be known at this point\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmptdc1bc9g.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0282, E0308.\n\
    For more information about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_chars_index = 0;\n    let mut paren_level_chars_index2\
    \ = 0;\n    let mut paren_level_chars_index3 = 0;\n    let mut paren_level_chars_index4\
    \ = 0;\n    let mut paren_level_chars_index5 = 0;\n    let mut paren_level_chars_index6\
    \ = 0;\n    let mut paren_level_chars_index7 = 0;\n    let mut paren_level_chars_index8\
    \ = 0;\n    let mut paren_level_chars_index9 = 0;\n    let mut paren_level_chars_index10\
    \ = 0;\n    let mut paren_level_chars_index11 = 0;\n    let mut paren_level_chars_index12\
    \ = 0;\n    let mut paren_level_chars_index13 = 0;\n    let mut paren_level_chars_index14\
    \ = 0;\n    let mut paren_level_chars_index15 = 0;\n    let mut paren_level_chars_index16\
    \ = 0;\n    let mut paren_level_chars_index17 = 0;\n    let mut paren_level_chars_index18\
    \ = 0;\n    let mut paren_level_chars_index19 = 0;\n    let mut paren_level_chars_index20\
    \ = 0;\n    let mut paren_level_chars_index21 = 0;\n    let mut paren_level_chars_index22\
    \ = 0;\n    let mut paren_level_chars_index23 = 0;\n    let mut paren_level_chars_index24\
    \ = 0;\n    let mut paren_level_chars_index25 = 0;\n    let mut paren_level_chars_index26\
    \ = 0;\n    let mut paren_level_chars_index27 = 0;\n    let mut paren_level_chars_index28\
    \ = 0;\n    let mut paren_level_chars_index29 = 0;\n    let mut paren_level_chars_index30\
    \ = 0;\n    let mut paren_level_chars_index31 = 0;\n    let mut paren_level_chars_index32\
    \ = 0;\n    let mut paren_level_chars_index33 = 0;\n    let mut paren_level_chars_index34\
    \ = 0;\n    let mut paren_level_chars_index35 = 0;\n    let mut paren_level_chars_index36\
    \ = 0;\n    let mut paren_level_chars_index37 = 0;\n    let mut paren_level_chars_index38\
    \ = 0;\n    let mut paren_level_chars_index39 = 0;\n    let mut paren_level_chars_index40\
    \ = 0;\n    let mut paren_level_chars_index41 = 0;\n    let mut paren_level_chars_index42\
    \ = 0;\n    let mut paren_level_chars_index43 = 0;\n    let mut paren\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq1j3dq8d.rs:54:18\n   |\n\
    54 |     let mut paren\n   |                  ^ help: add `;` here\n55 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpq1j3dq8d.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: usize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == '(' {\n            paren_depth += 1;\n            paren_stack.push(paren_depth);\n\
    \        } else if paren == ')' {\n            paren_depth -= 1;\n           \
    \ if paren_depth == 0 {\n                paren_stack.push(paren_depth);\n    \
    \        }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq0hi3_wr.rs:12:30\n   |\n\
    12 |             paren_stack.push(paren_depth);\n   |                        \
    \      ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    12 |             paren_stack.push(paren_depth.try_into().unwrap());\n   |    \
    \                                     ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq0hi3_wr.rs:16:34\n   |\n16 |                 paren_stack.push(paren_depth);\n\
    \   |                                  ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |                 paren_stack.push(paren_depth.try_into().unwrap());\n\
    \   |                                             ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len()\
    \ - 1;\n    let mut paren_levels_stack_ptr_prev = paren_levels_stack_ptr;\n  \
    \  let mut paren_levels_stack_ptr_next = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_next_prev = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7rl5xp0f.rs:29:116\n   |\n\
    29 |     let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack\n   |                                                 \
    \                                                                   ^ help: add\
    \ `;` here\n30 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp7rl5xp0f.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpct_zclhk.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpct_zclhk.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars\
    \ = Vec::new();\n    let mut paren_level_chars_index = 0;\n    let mut paren_level_chars_len\
    \ = 0;\n    let mut paren_level_chars_chars_index = 0;\n    let mut paren_level_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\
    \ = 0;\n    let mut paren_level_chars_chars_chars_len_index = 0;\n    let mut\
    \ paren_level_chars_chars_chars_len_index = 0;\n    let mut paren_level_chars_chars_chars_len_index\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpamwzu26v.rs:47:52\n   |\n\
    47 |     let mut paren_level_chars_chars_chars_len_index\n   |               \
    \                                     ^ help: add `;` here\n48 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpamwzu26v.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfqd7s2nx.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfqd7s2nx.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_levels =\
    \ Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n   \
    \ assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp24qso61y.rs:30:112\n   |\n\
    30 |     let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new\n   |                                                           \
    \                                                     ^ help: add `;` here\n31\
    \ | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp24qso61y.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgoey7v1i.rs:29:63\n   |\n\
    29 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n   |    \
    \                                                           ^ help: add `;` here\n\
    30 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgoey7v1i.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_chars_index = 0;\n    let mut paren_level_chars_index2\
    \ = 0;\n    let mut paren_level_chars_index3 = 0;\n    let mut paren_level_chars_index4\
    \ = 0;\n    let mut paren_level_chars_index5 = 0;\n    let mut paren_level_chars_index6\
    \ = 0;\n    let mut paren_level_chars_index7 = 0;\n    let mut paren_level_chars_index8\
    \ = 0;\n    let mut paren_level_chars_index9 = 0;\n    let mut paren_level_chars_index10\
    \ = 0;\n    let mut paren_level_chars_index11 = 0;\n    let mut paren_level_chars_index12\
    \ = 0;\n    let mut paren_level_chars_index13 = 0;\n    let mut paren_level_chars_index14\
    \ = 0;\n    let mut paren_level_chars_index15 = 0;\n    let mut paren_level_chars_index16\
    \ = 0;\n    let mut paren_level_chars_index17 = 0;\n    let mut paren_level_chars_index18\
    \ = 0;\n    let mut paren_level_chars_index19 = 0;\n    let mut paren_level_chars_index20\
    \ = 0;\n    let mut paren_level_chars_index21 = 0;\n    let mut paren_level_chars_index22\
    \ = 0;\n    let mut paren_level_chars_index23 = 0;\n    let mut paren_level_chars_index24\
    \ = 0;\n    let mut paren_level_chars_index25 = 0;\n    let mut paren_level_chars_index26\
    \ = 0;\n    let mut paren_level_chars_index27 = 0;\n    let mut paren_level_chars_index28\
    \ = 0;\n    let mut paren_level_chars_index29 = 0;\n    let mut paren_level_chars_index30\
    \ = 0;\n    let mut paren_level_chars_index31 = 0;\n    let mut paren_level_chars_index32\
    \ = 0;\n    let mut paren_level_chars_index33 = 0;\n    let mut paren_level_chars_index34\
    \ = 0;\n    let mut paren_level_chars_index35 = 0;\n    let mut paren_level_chars_index36\
    \ = 0;\n    let mut paren_level_chars_index37 = 0;\n    let mut paren_level_chars_index38\
    \ = 0;\n    let mut paren_level_chars_index39 = 0;\n    let mut paren_level_chars_index40\
    \ = 0;\n    let mut paren_level_chars_index41 = 1;\n    let mut paren_level_chars_index42\
    \ = 1;\n    let mut paren_level_chars_index43 = 1;\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpcul_hc0t.rs:55:1\n\
    \   |\n55 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvvjzn5jw.rs:37:32\n   |\n\
    37 |     let mut paren_levels_stack_\n   |                                ^ help:\
    \ add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpvvjzn5jw.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcfsqrp2k.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcfsqrp2k.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq4_9ngxp.rs:37:43\n   |\n\
    37 |     let mut paren_levels_stack_top = paren\n   |                        \
    \                   ^ help: add `;` here\n38 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmpq4_9ngxp.rs:37:38\n\
    \   |\n37 |     let mut paren_levels_stack_top = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpq4_9ngxp.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp45cw7k99.rs:30:71\n   |\n\
    30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                       ^\
    \ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp45cw7k99.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: isize = 0;\n    let mut paren_level: isize = 0;\n    let\
    \ mut paren_levels: Vec<isize> = vec![];\n    let mut paren_levels_len: isize\
    \ = 0;\n    let mut paren_levels_lens: Vec<isize> = vec![];\n    let mut paren_levels_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens: Vec<isize> = vec![];\n    let\
    \ mut paren_levels_lens_lens_len: isize = 0;\n    let mut paren_levels_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_len: isize = 0;\n\
    \    let mut paren_levels_lens_lens_lens_lens: Vec<isize> = vec![];\n    let mut\
    \ paren_levels_lens_lens_lens_lens_len: isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: isize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len: isize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpj06gsg3i.rs:24:464\n   |\n\
    24 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            ^ help: add `;` here\n25 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpj06gsg3i.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: usize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == '(' {\n            paren_depth += 1;\n            paren_stack.push(paren_depth);\n\
    \        } else if paren == ')' {\n            paren_depth -= 1;\n           \
    \ if paren_depth == 0 {\n                paren_stack.push(paren_depth);\n    \
    \        }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq0hi3_wr.rs:12:30\n   |\n\
    12 |             paren_stack.push(paren_depth);\n   |                        \
    \      ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    12 |             paren_stack.push(paren_depth.try_into().unwrap());\n   |    \
    \                                     ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq0hi3_wr.rs:16:34\n   |\n16 |                 paren_stack.push(paren_depth);\n\
    \   |                                  ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |                 paren_stack.push(paren_depth.try_into().unwrap());\n\
    \   |                                             ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_nesting =\
    \ 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_len = 0;\n\
    \    let mut paren_levels_len2 = 0;\n    let mut paren_levels_len3 = 0;\n    let\
    \ mut paren_levels_len4 = 0;\n    let mut paren_levels_len5 = 0;\n    let mut\
    \ paren_levels_len6 = 0;\n    let mut paren_levels_len7 = 0;\n    let mut paren_levels_len8\
    \ = 0;\n    let mut paren_levels_len9 = 0;\n    let mut paren_levels_len10 = 0;\n\
    \    let mut paren_levels_len11 = 0;\n    let mut paren_levels_len12 = 0;\n  \
    \  let mut paren_levels_len13 = 0;\n    let mut paren_levels_len14 = 0;\n    let\
    \ mut paren_levels_len15 = 0;\n    let mut paren_levels_len16 = 0;\n    let mut\
    \ paren_levels_len17 = 0;\n    let mut paren_levels_len18 = 0;\n    let mut paren_levels_len19\
    \ = 0;\n    let mut paren_levels_len20 = 0;\n    let mut paren_levels_len21 =\
    \ 0;\n    let mut paren_levels_len22 = 0;\n    let mut paren_levels_len23 = 0;\n\
    \    let mut paren_levels_len24 = 0;\n    let mut paren_levels_len25 = 0;\n  \
    \  let mut paren_levels_len26 = 0;\n    let mut paren_levels_len27 = 0;\n    let\
    \ mut paren_levels_len28 = 0;\n    let mut paren_levels_len29 = 0;\n    let mut\
    \ paren_levels_len30 = 0;\n    let mut paren_levels_len31 = 0;\n    let mut paren_levels_len32\
    \ = 0;\n    let mut paren_levels_len33 = 0;\n    let mut paren_levels_len34 =\
    \ 0;\n    let mut paren_levels_len35 = 0;\n    let mut paren_levels_len36 = 0;\n\
    \    let mut paren_levels_len37 = 0;\n    let mut paren_levels_len38 = 0;\n  \
    \  let mut paren_levels_len39 = 0;\n    let mut paren_levels_len40 = 0;\n    let\
    \ mut paren_levels_len41 = 1;\n    let mut paren_levels_len42 = 1;\n    let mut\
    \ paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvq1tkx0k.rs:54:24\n   |\n\
    54 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvq1tkx0k.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy42qqexo.rs:41:56\n   |\n\
    41 |     let mut paren_nesting_nesting_nesting_nesting_level\n   |           \
    \                                             ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy42qqexo.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_stack\
    \ = vec![];\n    let mut paren_levels = vec![];\n    let mut paren_levels_size\
    \ = vec![];\n    let mut paren_levels_size_max = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_index\
    \ = vec![];\n    let mut paren_levels_size_max_index = vec![];\n    let mut paren_levels_size_max_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzlsbtriq.rs:44:35\n   |\n\
    44 |     let mut paren_levels_size_max_\n   |                                \
    \   ^ help: add `;` here\n45 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpzlsbtriq.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_stack\
    \ = Vec::new();\n    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len\
    \ = paren_level_stack.len();\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqo9h3fn0.rs:43:43\n   |\n\
    43 |     let mut paren_level_stack_top = paren_\n   |                        \
    \                   ^ help: add `;` here\n44 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren_` in this scope\n  --> /tmp/tmpqo9h3fn0.rs:43:37\n\
    \   |\n43 |     let mut paren_level_stack_top = paren_\n   |                 \
    \                    ^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqo9h3fn0.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_level_count = vec![];\n    let mut\
    \ paren_level_count_stack: Vec<isize> = vec![];\n    let mut paren_level_count_stack_count\
    \ = vec![];\n    let mut paren_level_count_stack_count2 = vec![];\n    let mut\
    \ paren_level_count_stack_count3 = vec![];\n    let mut paren_level_count_stack_count4\
    \ = vec![];\n    let mut paren_level_count_stack_count5 = vec![];\n    let mut\
    \ paren_level_count_stack_count6 = vec![];\n    let mut paren_level_count_stack_count7\
    \ = vec![];\n    let mut paren_level_count_stack_count8 = vec![];\n    let mut\
    \ paren_level_count_stack_count9 = vec![];\n    let mut paren_level_count_stack_count10\
    \ = vec![];\n    let mut paren_level_count_stack_count11 = vec![];\n    let mut\
    \ paren_level_count_stack_count12 = vec![];\n    let mut paren_level_count_stack_count13\
    \ = vec![];\n    let mut paren_level_count_stack_count14 = vec![];\n    let mut\
    \ paren_level_count_stack_count15 = vec![];\n    let mut paren_level_count_stack_count16\
    \ = vec![];\n    let mut paren_level_count_stack_count17 = vec![];\n    let mut\
    \ paren_level_count_stack_count18 = vec![];\n    let mut paren_level_count_stack_count19\
    \ = vec![];\n    let mut paren_level_count_stack_count20 = vec![];\n    let mut\
    \ paren_level_count_stack_count21 = vec![];\n    let mut paren_level_count_stack_count22\
    \ = vec![];\n    let mut paren_level_count_stack_count23 = vec![];\n    let mut\
    \ paren_level_count_stack_count24 = vec![];\n    let mut paren_level_count_stack_count25\
    \ = vec![];\n    let mut paren_level_count_stack_count26 = vec![];\n    let mut\
    \ paren_level_count_stack_count27 = vec![];\n    let mut paren_level_count_stack_count28\
    \ = vec![];\n    let mut paren_level_count_stack_count29 = vec![];\n    let mut\
    \ paren_level_count_stack_count30 = vec![];\n    let mut paren_level_count_stack_count31\
    \ = vec![];\n    let mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphun7zodl.rs:43:1\n\
    \   |\n43 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char_count_index = 0;\n    let mut paren_level_char_count_index2\
    \ = 0;\n    let mut paren_level_char_count_index3 = 0;\n    let mut paren_level_char_count_index4\
    \ = 0;\n    let mut paren_level_char_count_index5 = 0;\n    let mut paren_level_char_count_index6\
    \ = 0;\n    let mut paren_level_char_count_index7 = 0;\n    let mut paren_level_char_count_index8\
    \ = 0;\n    let mut paren_level_char_count_index9 = 0;\n    let mut paren_level_char_count_index10\
    \ = 0;\n    let mut paren_level_char_count_index11 = 0;\n    let mut paren_level_char_count_index12\
    \ = 0;\n    let mut paren_level_char_count_index13 = 0;\n    let mut paren_level_char_count_index14\
    \ = 0;\n    let mut paren_level_char_count_index15 = 0;\n    let mut paren_level_char_count_index16\
    \ = 0;\n    let mut paren_level_char_count_index17 = 0;\n    let mut paren_level_char_count_index18\
    \ = 0;\n    let mut paren_level_char_count_index19 = 0;\n    let mut paren_level_char_count_index20\
    \ = 0;\n    let mut paren_level_char_count_index21 = 0;\n    let mut paren_level_char_count_index22\
    \ = 0;\n    let mut paren_level_char_count_index23 = 0;\n    let mut paren_level_char_count_index24\
    \ = 0;\n    let mut paren_level_char_count_index25 = 0;\n    let mut paren_level_char_count_index26\
    \ = 0;\n    let mut paren_level_char_count_index27 = 0;\n    let mut paren_level_char_count_index28\
    \ = 0;\n    let mut paren_level_char_count_index29 = 0;\n    let mut paren_level_char_count_index30\
    \ = 0;\n    let mut paren_level_char_count_index31 = 0;\n    let mut paren_level_char_count_index32\
    \ = 0;\n    let mut paren_level_char_count_index33 = 0;\n    let mut paren_level_char_count_index34\
    \ = 0;\n    let mut paren_level_char_count_index35 = 0;\n    let mut paren_level_char_count_index36\
    \ = 0;\n    let mut paren_level_char_count_index37 = 0;\n    let mut paren_level_char_count_index38\
    \ = 0;\n    let mut paren_level_char_count_index39 = 0;\n    let mut paren_level_char_count_index40\
    \ = 0;\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy9slxb67.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = vec![];\n    let mut paren_nesting_levels =\
    \ vec![];\n    let mut paren_levels_stack = vec![];\n    let mut paren_nesting_levels_stack\
    \ = vec![];\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n\
    \    let mut paren_nesting_levels_stack_size = paren_nesting_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_nesting_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr = paren_levels_stack.as_mut_ptr();\n\
    \    let mut paren_nesting_levels_stack_ptr = paren_nesting_levels_stack.as_mut_ptr();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_nesting_levels_stack_end = paren_nesting_levels_stack_ptr.offset(\n\
    \        paren_nesting_levels_stack_size,\n    );\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr.offset(0);\n    let mut paren_nesting_levels_stack_top\
    \ = paren_nesting_levels_stack_ptr.offset(0);\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nesting_levels_stack_bottom\
    \ = paren_nesting_levels_stack_ptr.offset(\n        paren_nesting_levels_stack_size,\n\
    \    );\n    let mut paren_levels_stack_top = paren_levels_stack_ptr.offset(0);\n\
    \    let mut paren_nesting_levels_stack_top = paren_nesting_levels_stack_ptr.offset(0);\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_nesting_levels_stack_bottom = paren_nesting_levels_stack_ptr.offset(\n\
    \        paren_nesting_levels_stack_size,\n    );\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr.offset(0);\n    let mut paren_nesting_levels_stack_top\
    \ = paren_nesting_levels_stack_ptr.offset(0);\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr.offset(paren_level\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpwib0zvzi.rs:38:1\n   |\n38 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpwib0zvzi.rs:37:70\n   |\n6  | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n   |                                                      \
    \      - closing delimiter possibly meant for this\n...\n37 |     let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr.offset(paren_level\n   |                          \
    \                                            ^ unclosed delimiter\n38 | }\n  \
    \ | ^ mismatched closing delimiter\n\nwarning: type annotations needed\n  -->\
    \ /tmp/tmpwib0zvzi.rs:19:61\n   |\n19 |     let mut paren_levels_stack_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \   |                                                             ^^^^^^\n   |\n\
    \   = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this\
    \ is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n\
    \   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwib0zvzi.rs:19:68\n   |\n19 |\
    \     let mut paren_levels_stack_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \   |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     let mut\
    \ paren_levels_stack_end = paren_levels_stack_ptr.offset(paren_levels_stack_size.try_into().unwrap());\n\
    \   |                                                                        \
    \                   ++++++++++++++++++++\n\nwarning: type annotations needed\n\
    \  --> /tmp/tmpwib0zvzi.rs:20:77\n   |\n20 |     let mut paren_nesting_levels_stack_end\
    \ = paren_nesting_levels_stack_ptr.offset(\n   |                             \
    \                                                ^^^^^^\n   |\n "
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_max_max_pos = 0;\n    let mut paren_levels_stack_max_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_max_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_pos = 0;\n    let mut paren_levels_stack_max_max_max_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_max_max_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_max_max_max_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_pos = 0;\n    let mut paren_levels_stack_max_max_max_max_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_max_max_max_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_max_max_max_max_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max_pos = 0;\n    let mut\
    \ paren_levels_stack_max_max_max_max_max_max_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max_max_max_pos = 0;\n   \
    \ let mut paren_levels_stack_max_max_max_max_max_max_max_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max_max_max_max_pos = 0;\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max_max_max_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max_max_max_max_max_pos =\
    \ 0;\n    let mut paren_levels_stack_max_max_max_max_max_max_max_max_max_max_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_\n}\n\nfn main() {\n \
    \   let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbgbqchn5.rs:35:26\n   |\n\
    35 |     let mut paren_levels_\n   |                          ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpbgbqchn5.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n  |    -------------------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nesting_levels\
    \ = Vec::new();\n    let mut paren_nesting_levels_len = 0;\n    let mut paren_nesting_levels_lens\
    \ = Vec::new();\n    let mut paren_nesting_levels_lens_len = 0;\n    let mut paren_nesting_levels_lens_len2\
    \ = 0;\n    let mut paren_nesting_levels_lens_len3 = 0;\n    let mut paren_nesting_levels_lens_len4\
    \ = 0;\n    let mut paren_nesting_levels_lens_len5 = 0;\n    let mut paren_nesting_levels_lens_len6\
    \ = 0;\n    let mut paren_nesting_levels_lens_len7 = 0;\n    let mut paren_nesting_levels_lens_len8\
    \ = 0;\n    let mut paren_nesting_levels_lens_len9 = 0;\n    let mut paren_nesting_levels_lens_len10\
    \ = 0;\n    let mut paren_nesting_levels_lens_len11 = 0;\n    let mut paren_nesting_levels_lens_len12\
    \ = 0;\n    let mut paren_nesting_levels_lens_len13 = 0;\n    let mut paren_nesting_levels_lens_len14\
    \ = 0;\n    let mut paren_nesting_levels_lens_len15 = 0;\n    let mut paren_nesting_levels_lens_len16\
    \ = 0;\n    let mut paren_nesting_levels_lens_len17 = 0;\n    let mut paren_nesting_levels_lens_len18\
    \ = 0;\n    let mut paren_nesting_levels_lens_len19 = 0;\n    let mut paren_nesting_levels_lens_len20\
    \ = 0;\n    let mut paren_nesting_levels_lens_len21 = 0;\n    let mut paren_nesting_levels_lens_len22\
    \ = 0;\n    let mut paren_nesting_levels_lens_len23 = 0;\n    let mut paren_nesting_levels_lens_len24\
    \ = 0;\n    let mut paren_nesting_levels_lens_len25 = 0;\n    let mut paren_nesting_levels_lens_len26\
    \ = 0;\n    let mut paren_nesting_levels_lens_len27 = 0;\n    let mut paren_nesting_levels_lens_len28\
    \ = 0;\n    let mut paren_nesting_levels_lens_len29 = 0;\n    let mut paren_nesting_levels_lens_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvlff61bu.rs:42:39\n   |\n\
    42 |     let mut paren_nesting_levels_lens_\n   |                            \
    \           ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpvlff61bu.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == '(' {\n            paren_stack.push(paren_level);\n      \
    \      paren_level += 1;\n        } else if paren == ')' {\n            paren_level\
    \ -= 1;\n            if paren_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0]`,\n right: `[2, 3, 1, 3]`',\
    \ /tmp/tmpocam_ou0.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_level_count = vec![];\n    let mut\
    \ paren_level_max_count = vec![];\n    let mut paren_level_max_count_index = -1;\n\
    \    let mut paren_level_max_count_value = -1;\n    let mut paren_level_max_count_index2\
    \ = -1;\n    let mut paren_level_max_count_value2 = -1;\n    let mut paren_level_max_count_index3\
    \ = -1;\n    let mut paren_level_max_count_value3 = -1;\n    let mut paren_level_max_count_index4\
    \ = -1;\n    let mut paren_level_max_count_value4 = -1;\n    let mut paren_level_max_count_index5\
    \ = -1;\n    let mut paren_level_max_count_value5 = -1;\n    let mut paren_level_max_count_index6\
    \ = -1;\n    let mut paren_level_max_count_value6 = -1;\n    let mut paren_level_max_count_index7\
    \ = -1;\n    let mut paren_level_max_count_value7 = -1;\n    let mut paren_level_max_count_index8\
    \ = -1;\n    let mut paren_level_max_count_value8 = -1;\n    let mut paren_level_max_count_index9\
    \ = -1;\n    let mut paren_level_max_count_value9 = -1;\n    let mut paren_level_max_count_index10\
    \ = -1;\n    let mut paren_level_max_count_value10 = -1;\n    let mut paren_level_max_count_index11\
    \ = -1;\n    let mut paren_level_max_count_value11 = -1;\n    let mut paren_level_max_count_index12\
    \ = -1;\n    let mut paren_level_max_count_value12 = -1;\n    let mut paren_level_max_count_index13\
    \ = -1;\n    let mut paren_level_max_count_value13 = -1;\n    let mut paren_level_max_count_index14\
    \ = -1;\n    let mut paren_level_max_count_value14 = -1;\n    let mut paren_level_max_count_index15\
    \ = -1;\n    let mut paren_level_max_count_value15 = -1;\n    let mut paren_level_max_count_index16\
    \ = -1;\n    let mut paren_level_max_count_value16 = -1;\n    let mut paren_level_max_count_index17\
    \ = -1;\n    let mut paren_level_max_count_value17 = -1;\n    let mut paren_level_max_count_index18\
    \ = -1;\n    let mut paren_level_max_count_value18 = -1;\n    let mut paren_level_max_count_index19\
    \ = -1;\n    let mut paren_level_max_count_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpn4txg3jr.rs:48:35\n   |\n\
    48 |     let mut paren_level_max_count_\n   |                                \
    \   ^ help: add `;` here\n49 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpn4txg3jr.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_levels = Vec::new();\n    for paren in paren_string.chars()\
    \ {\n        if paren == '(' {\n            paren_stack.push(paren_depth);\n \
    \           paren_depth += 1;\n            paren_levels.push(paren_depth);\n \
    \       } else if paren == ')' {\n            paren_depth -= 1;\n            if\
    \ paren_depth == 0 {\n                paren_levels.pop();\n            }\n   \
    \     }\n    }\n    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 3, 2]`,\n right: `[2, 3, 1, 3]`', /tmp/tmpaxp6dsy7.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmplixl7g2h.rs:45:1\n   |\n45\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmplixl7g2h.rs:44:46\n\
    \   |\n44 |     let mut paren_levels_iter = paren_levels.\n   |              \
    \                                ^ help: add `;` here\n45 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmplixl7g2h.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len()\
    \ - 1;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqzls7qoo.rs:32:24\n   |\n\
    32 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    33 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqzls7qoo.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = String::new();\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n\
    \    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let\
    \ mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter\
    \ = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n\
    \    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let\
    \ mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter\
    \ = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n\
    \    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let\
    \ mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter\
    \ = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n\
    \    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let\
    \ mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter\
    \ = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n\
    \    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let\
    \ mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter\
    \ = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n\
    \    let mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let\
    \ mut paren_level_char_iter = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter\
    \ = paren_level_char_iter.peekable();\n    let mut paren_level_char_iter = paren_level_char_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqsigxcsz.rs:39:54\n   |\n\
    39 |     let mut paren_level_char_iter = paren_level_char_\n   |             \
    \                                         ^ help: add `;` here\n40 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `paren_level_char_` in this\
    \ scope\n  --> /tmp/tmpqsigxcsz.rs:39:37\n   |\n39 |     let mut paren_level_char_iter\
    \ = paren_level_char_\n   |                                     ^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_level_chars`\n\nerror[E0599]:\
    \ no method named `iter` found for struct `Chars` in the current scope\n  -->\
    \ /tmp/tmpqsigxcsz.rs:14:55\n   |\n14 |     let mut paren_level_char_iter = paren_level_chars.iter();\n\
    \   |                                                       ^^^^ private field,\
    \ not a method\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqsigxcsz.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices().rev();\n \
    \   let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph72jesj9.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_uaunc2u.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_uaunc2u.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_levels =\
    \ Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_eg36j1v.rs:29:83\n   |\n\
    29 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \           ^ help: add `;` here\n30 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp_eg36j1v.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: usize = 0;\n    let mut paren_level: usize = 0;\n    let\
    \ mut paren_levels: Vec<isize> = vec![];\n    let mut paren_levels_len: usize\
    \ = 0;\n    let mut paren_levels_lens: Vec<isize> = vec![];\n    let mut paren_levels_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens: Vec<isize> = vec![];\n    let\
    \ mut paren_levels_lens_lens_len: usize = 0;\n    let mut paren_levels_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_len: usize = 0;\n\
    \    let mut paren_levels_lens_lens_lens_lens: Vec<isize> = vec![];\n    let mut\
    \ paren_levels_lens_lens_lens_lens_len: usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: usize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len: usize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_len\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxl2pe46p.rs:29:39\n   |\n\
    29 |     let mut paren_levels_lens_lens_len\n   |                            \
    \           ^ help: add `;` here\n30 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpxl2pe46p.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy42qqexo.rs:41:56\n   |\n\
    41 |     let mut paren_nesting_nesting_nesting_nesting_level\n   |           \
    \                                             ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy42qqexo.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcfsqrp2k.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcfsqrp2k.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_level_count = 0;\n    let mut paren_level_max = 0;\n    let\
    \ mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n   \
    \ let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphb_wvs5n.rs:61:19\n   |\n\
    61 |     let mut paren_\n   |                   ^ help: add `;` here\n62 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmphb_wvs5n.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max = paren_levels_stack_size;\n    let mut paren_levels_stack_max_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_size = paren_levels_stack_max;\n\
    \    let mut paren_levels_stack_max_value = paren_levels_stack_max;\n    let mut\
    \ paren_levels_stack_max_pos = paren_levels_stack_size;\n    let mut paren_levels_stack_max_value\
    \ = paren_levels_stack_max;\n    let mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n   \
    \ let mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n    let\
    \ mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_max_value_pos = paren_levels_stack_size;\n    let mut paren_levels_stack_max_value_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n   \
    \ let mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n    let\
    \ mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_max_value_pos = paren_levels_stack_size;\n    let mut paren_levels_stack_max_value_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n   \
    \ let mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n    let\
    \ mut paren_levels_stack_max_value_pos = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_max_value_pos = paren_levels_stack_size;\n    let mut paren_levels_stack_max_value_pos\
    \ = paren_levels_stack_size;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpqkvdn2td.rs:37:1\n\
    \   |\n37 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcfsqrp2k.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcfsqrp2k.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == '(' {\n            paren_stack.push(paren_level);\n      \
    \      paren_level += 1;\n        } else if paren == ')' {\n            paren_level\
    \ -= 1;\n            if paren_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0]`,\n right: `[2, 3, 1, 3]`',\
    \ /tmp/tmpocam_ou0.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_levels =\
    \ Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpprpkd32t.rs:29:77\n   |\n\
    29 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \     ^ help: add `;` here\n30 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpprpkd32t.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string_index = 0;\n    while paren_level_string_index\
    \ < paren_string.len() {\n        let mut paren_level_string = paren_string.clone();\n\
    \        let mut paren_level_string_index = 0;\n        while paren_level_string_index\
    \ < paren_level_string.len() {\n            let mut paren_level_string = paren_level_string.clone();\n\
    \            let mut paren_level_string_index = 0;\n            while paren_level_string_index\
    \ < paren_level_string.len() {\n                let mut paren_level_string = paren_level_string.clone();\n\
    \                let mut paren_level_string_index = 0;\n                while\
    \ paren_level_string_index < paren_level_string.len() {\n                    let\
    \ mut paren_level_string = paren_level_string.clone();\n                    let\
    \ mut paren_level_string_index = 0;\n                    while paren_level_string_index\
    \ < paren_level_string.len() {\n                        let mut paren_level_string\
    \ = paren_level_string.clone();\n                        let mut paren_level_string_index\
    \ = 0;\n                        while paren_level_string_index < paren_level_string.len()\
    \ {\n                            let mut paren_level_string = paren_level_string.clone();\n\
    \                            let mut paren_level_string_index = 0;\n         \
    \                   while paren_level_string_index < paren_level_string.len()\
    \ {\n                                let mut paren_level_string = paren_level_string.clone();\n\
    \                                let mut paren_level_string_index = 0;\n     \
    \                           while paren_level_string_index < paren_level_string.len()\
    \ {\n                                    let mut paren_level_string = paren_level_string.clone();\n\
    \                                    let mut paren_level_string_index = 0;\n \
    \                                   while paren_level_string_index < paren_level_string.len()\
    \ {\n                                        let mut paren_level_string = paren_level_string.clone();\n\
    \                                        let mut paren_level_string_index = 0;\n\
    \                                        while paren_level_string_index < paren_level_string.len()\
    \ {\n                                            let mut paren_level_string =\
    \ paren_level_string.clone();\n                                            let\
    \ mut paren_level_string_index = 0;\n                                        \
    \    while paren_level_string_index < paren_level_string.len() {\n           \
    \                                     let mut paren_level_string = paren_level_string.clone();\n\
    \                                                let mut paren_level_string_index\
    \ = 0;\n                                                \n}\n\nfn main() {\n \
    \   let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_rc9wpci.rs:53:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n12 |     while paren_level_string_index < paren_string.len() {\n   |    \
    \                                                     - unclosed delimiter\n...\n\
    15 |         while paren_level_string_index < paren_level_string.len() {\n   |\
    \                                                                   - unclosed\
    \ delimiter\n...\n18 |             while paren_level_string_index < paren_level_string.len()\
    \ {\n   |                                                                    \
    \   - unclosed delimiter\n...\n21 |                 while paren_level_string_index\
    \ < paren_level_string.len() {\n   |                                         \
    \                                  - unclosed delimiter\n...\n24 |           \
    \          while paren_level_string_index < paren_level_string.len() {\n   | \
    \                                                                            \
    \  - unclosed delimiter\n...\n27 |                         while paren_level_string_index\
    \ < paren_level_string.len() {\n   |                                         \
    \                                          - unclosed delimiter\n...\n30 |   \
    \                          while paren_level_string_index < paren_level_string.len()\
    \ {\n   |                                                                    \
    \                   - unclosed delimiter\n...\n33 |                          \
    \       while paren_level_string_index < paren_level_string.len() {\n   |    \
    \                                                                            \
    \           - unclosed delimiter\n...\n36 |                                  \
    \   while paren_level_string_index < paren_level_string.len() {\n   |        \
    \                                                                            \
    \           - unclosed delimiter\n...\n39 |                                  \
    \       while paren_level_string_index < paren_"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string\
    \ = \"\";\n    let mut paren_level_char_count = 0;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_char_length = 0;\n    let mut paren_level_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_count = 0;\n    let mut paren_level_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length = 0;\n    let mut paren_level_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_count = 0;\n    let\
    \ mut paren_level_char_length_char_length_char_index = 0;\n    let mut paren_level_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_index = 0;\n\
    \    let mut paren_level_char_length_char_length_char_length_char_count = 0;\n\
    \    let mut paren_level_char_length_char_length_char_length_char_index = 0;\n\
    \    let mut paren_level_char_length_char_length_char_length_char_length = 0;\n\
    \    let mut paren_level_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_count\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfkzzul_c.rs:39:73\n   |\n\
    39 |     let mut paren_level_char_length_char_length_char_length_char_length_\n\
    \   |                                                                        \
    \ ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpfkzzul_c.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjxhgyj6y.rs:30:59\n   |\n\
    30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n   |        \
    \                                                   ^ help: add `;` here\n31 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjxhgyj6y.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_level_stack = vec![0];\n    let mut paren_level_stack_pos\
    \ = 0;\n    let mut paren_level_stack_size = paren_level_stack.len();\n    let\
    \ mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n   \
    \ let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mu\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqm6rg0pl.rs:57:11\n   |\n\
    57 |     let mu\n   |           ^ help: add `;` here\n58 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqm6rg0pl.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiji4wbc_.rs:40:18\n   |\n\
    40 |     let mut paren\n   |                  ^ help: add `;` here\n41 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpiji4wbc_.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.chars().enumerate();\n  \
    \  let mut paren_levels_iter = paren_levels_iter.filter_map(|(i, c)| {\n     \
    \   if c == '(' {\n            paren_level += 1;\n            paren_levels.push(paren_level);\n\
    \            Some(paren_level)\n        } else {\n            paren_level -= 1;\n\
    \            Some(paren_level)\n        }\n    });\n    paren_levels_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 0, -1, 0, 1, 2, 1, 0, -1, -2, -1, -2, -3, -2, -1, 0, -1, -2,\
    \ -1, -2, -1, -2, -3]`,\n right: `[2, 3, 1, 3]`', /tmp/tmpa8yoal_j.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_len = paren_levels_stack.len();\n    let mu\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5tfld6xv.rs:37:11\n   |\n\
    37 |     let mu\n   |           ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5tfld6xv.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp91r3b3cr.rs:27:64\n   |\n\
    27 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_\n   |   \
    \                                                             ^ help: add `;`\
    \ here\n28 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp91r3b3cr.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n  |    -------------------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = vec![];\n\
    \    for paren in paren_string.chars() {\n        if paren == '(' {\n        \
    \    paren_stack.push(level);\n            level += 1;\n        } else if paren\
    \ == ')' {\n            level -= 1;\n            if level == 0 {\n           \
    \     paren_stack.pop();\n            }\n        } else {\n            level +=\
    \ 1;\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1, 2, 3, 2, 3, 4, 5, 4, 4]`,\n right: `[2, 3, 1, 3]`', /tmp/tmpm_6votfs.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    for paren in paren_string.chars() {\n        if paren\
    \ == '(' {\n            paren_depth += 1;\n            paren_stack.push(paren_depth);\n\
    \        } else if paren == ')' {\n            paren_depth -= 1;\n           \
    \ if paren_depth == 0 {\n                paren_stack.push(paren_depth);\n    \
    \        }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 2, 2, 0]`,\n right: `[2, 3, 1, 3]`',\
    \ /tmp/tmp_pfk6xcz.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == ')' {\n            paren_stack.pop();\n            paren_level\
    \ += 1;\n        } else if paren == '(' {\n            paren_stack.push(paren_level);\n\
    \        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2, 3, 1, 3]`', /tmp/tmpsk149i6d.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphe0bdk9l.rs:35:27\n   |\n\
    35 |     let mut paren_nesting_\n   |                           ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmphe0bdk9l.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n  |    -------------------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuuabxdee.rs:29:71\n   |\n\
    29 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                       ^\
    \ help: add `;` here\n30 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpuuabxdee.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    let mut paren_levels: Vec<isize> = vec![];\n\
    \    let mut paren_levels_len: isize = 0;\n    let mut paren_levels_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_len: isize = 0;\n    let mut paren_levels_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_len: isize = 0;\n \
    \   let mut paren_levels_lens_lens_lens: Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens: Vec<isize> = vec![];\n\
    \    let mut paren_levels_lens_lens_lens_lens_len: isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: isize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpez68htmn.rs:28:56\n   |\n\
    28 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_\n   |           \
    \                                             ^ help: add `;` here\n29 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpez68htmn.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = vec![];\n\
    \    let mut paren_stack_len = paren_string.len();\n    let mut paren_stack_pos\
    \ = 0;\n    let mut paren_stack_char: char;\n    let mut paren_stack_char_len\
    \ = 0;\n    let mut paren_stack_char_pos = 0;\n    let mut paren_stack_char_next\
    \ = 0;\n    let mut paren_stack_char_next_len = 0;\n    let mut paren_stack_char_next_pos\
    \ = 0;\n    let mut paren_stack_char_next_next = 0;\n    let mut paren_stack_char_next_next_len\
    \ = 0;\n    let mut paren_stack_char_next_next_pos = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut paren_stack_char_next_next_next = 0;\n    let mut paren_stack_char_next_next_next\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmppxvvjmc6.rs:52:1\n\
    \   |\n52 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_level_depth\
    \ = 0;\n    let mut paren_level_level = 0;\n    let mut paren_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level = 0;\n    let mut paren_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level = 0;\n    let mut paren_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level = 0;\n   \
    \ let mut paren_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level_level_level = 0;\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk4xxcudq.rs:42:61\n   |\n\
    42 |     let mut paren_level_level_level_level_level_level_level_\n   |      \
    \                                                       ^ help: add `;` here\n\
    43 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk4xxcudq.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_stack = vec![];\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoioaswg7.rs:43:55\n   |\n\
    43 |     let mut paren_level_stack_top = paren_level_stack_\n   |            \
    \                                           ^ help: add `;` here\n44 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `paren_level_stack_` in\
    \ this scope\n  --> /tmp/tmpoioaswg7.rs:43:37\n   |\n43 |     let mut paren_level_stack_top\
    \ = paren_level_stack_\n   |                                     ^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_level_stack`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpoioaswg7.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpok4akjzf.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpok4akjzf.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_level_count = vec![];\n    let mut\
    \ paren_level_count_index = vec![];\n    let mut paren_level_count_index2 = vec![];\n\
    \    let mut paren_level_count_index3 = vec![];\n    let mut paren_level_count_index4\
    \ = vec![];\n    let mut paren_level_count_index5 = vec![];\n    let mut paren_level_count_index6\
    \ = vec![];\n    let mut paren_level_count_index7 = vec![];\n    let mut paren_level_count_index8\
    \ = vec![];\n    let mut paren_level_count_index9 = vec![];\n    let mut paren_level_count_index10\
    \ = vec![];\n    let mut paren_level_count_index11 = vec![];\n    let mut paren_level_count_index12\
    \ = vec![];\n    let mut paren_level_count_index13 = vec![];\n    let mut paren_level_count_index14\
    \ = vec![];\n    let mut paren_level_count_index15 = vec![];\n    let mut paren_level_count_index16\
    \ = vec![];\n    let mut paren_level_count_index17 = vec![];\n    let mut paren_level_count_index18\
    \ = vec![];\n    let mut paren_level_count_index19 = vec![];\n    let mut paren_level_count_index20\
    \ = vec![];\n    let mut paren_level_count_index21 = vec![];\n    let mut paren_level_count_index22\
    \ = vec![];\n    let mut paren_level_count_index23 = vec![];\n    let mut paren_level_count_index24\
    \ = vec![];\n    let mut paren_level_count_index25 = vec![];\n    let mut paren_level_count_index26\
    \ = vec![];\n    let mut paren_level_count_index27 = vec![];\n    let mut paren_level_count_index28\
    \ = vec![];\n    let mut paren_level_count_index29 = vec![];\n    let mut paren_level_count_index30\
    \ = vec![];\n    let mut paren_level_count_index31 = vec![];\n    let mut paren_level_count_index32\
    \ = vec![];\n    let mut paren_level_count_index33 = vec![];\n    let mut paren_level_count_index34\
    \ = vec![];\n    let mut paren_level_count_index35 = vec!\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `}`\n  --> /tmp/tmp1_0maic3.rs:45:1\n\
    \   |\n44 |     let mut paren_level_count_index35 = vec!\n   |               \
    \                              - expected one of `(`, `[`, or `{`\n45 | }\n  \
    \ | ^ unexpected token\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = \"\
    \";\n    let mut paren_level_string_index = 0;\n    let mut paren_level_string_len\
    \ = 0;\n    let mut paren_level_string_len_index = 0;\n    let mut paren_level_string_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let mut paren_level_string_len_len_index = 0;\n    let mut paren_level_string_len_len_len\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpuwobn5fl.rs:52:1\n  \
    \ |\n52 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_nestings_stack\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_nestings_stack_ptr = paren_nestings_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_nestings_stack_ptr_end = paren_nestings_stack.len();\n    let\
    \ mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_nestings_stack_ptr_end = paren_nestings_stack.len();\n    let\
    \ mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_nestings_stack_ptr_end = paren_nestings_stack.len();\n    let\
    \ mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_nestings_stack_ptr_end = paren_nestings_stack.len();\n    let\
    \ mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_nestings_stack_ptr_end = paren_nestings_stack.len();\n    let\
    \ mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp7zd8ws02.rs:36:1\n\
    \   |\n36 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_level_count = 0;\n    let mut paren_level_char_count = 0;\n\
    \    let mut paren_level_chars = vec![];\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmisf9m56.rs:43:11\n   |\n\
    43 |     let mu\n   |           ^ help: add `;` here\n44 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmisf9m56.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices().filter_map(|i|\
    \ {\n        if i.0.is_whitespace() {\n            None\n        } else {\n  \
    \          Some(paren_level += 1)\n        }\n    });\n    let mut paren_levels_iter\
    \ = paren_levels_iter.filter_map(|i| {\n        if i.0.is_whitespace() {\n   \
    \         None\n        } else {\n            Some(paren_level += 1)\n       \
    \ }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|i|\
    \ {\n        if i.0.is_whitespace() {\n            None\n        } else {\n  \
    \          Some(paren_level += 1)\n        }\n    });\n    let mut paren_levels_iter\
    \ = paren_levels_iter.filter_map(|i| {\n        if i.0.is_whitespace() {\n   \
    \         None\n        } else {\n            Some(paren_level += 1)\n       \
    \ }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|i|\
    \ {\n        if i.0.is_whitespace() {\n            None\n        } else {\n  \
    \          Some(paren_level += 1)\n        }\n    });\n    let mut paren_levels_iter\
    \ = paren_levels_iter.filter_map(|i| {\n        if i.0.is_whitespace() {\n   \
    \         None\n        } else {\n            Some(paren_level += 1)\n       \
    \ }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|i|\
    \ {\n        if i.0.is_whitespace() {\n            None\n        } else {\n  \
    \          Some(paren_level += 1)\n        }\n    });\n    let mut paren_levels_iter\
    \ = paren_levels_iter.filter_map(|i| {\n        if i.0.is_whitespace() {\n   \
    \         None\n        } else {\n            Some(paren_level += 1)\n       \
    \ }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|i|\
    \ {\n        if i.0.is_whitespace() {\n            None\n        } else {\n  \
    \          Some(paren_level += 1)\n        }\n    });\n    let mut paren_levels_iter\
    \ = paren_levels_iter.filter_map(|i| {\n        if i.0.is_whitespace() {\n   \
    \         None\n        } else {\n            Some(paren_level += 1)\n       \
    \ }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|i|\
    \ {\n        if i.0.is_whitespace() {\n            None\n        } else {\n  \
    \          Some(paren_level += 1)\n        }\n    });\n    let mut paren_levels_iter\
    \ = \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmposzdar89.rs:87:1\n\
    \   |\n87 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `is_whitespace`\
    \ found for type `usize` in the current scope\n  --> /tmp/tmposzdar89.rs:10:16\n\
    \   |\n10 |         if i.0.is_whitespace() {\n   |                ^^^^^^^^^^^^^\
    \ method not found in `usize`\n\nerror[E0609]: no field `0` on type `()`\n  -->\
    \ /tmp/tmposzdar89.rs:17:14\n   |\n17 |         if i.0.is_whitespace() {\n   |\
    \              ^\n\nerror[E0609]: no field `0` on type `()`\n  --> /tmp/tmposzdar89.rs:24:14\n\
    \   |\n24 |         if i.0.is_whitespace() {\n   |              ^\n\nerror[E0609]:\
    \ no field `0` on type `()`\n  --> /tmp/tmposzdar89.rs:31:14\n   |\n31 |     \
    \    if i.0.is_whitespace() {\n   |              ^\n\nerror[E0609]: no field `0`\
    \ on type `()`\n  --> /tmp/tmposzdar89.rs:38:14\n   |\n38 |         if i.0.is_whitespace()\
    \ {\n   |              ^\n\nerror[E0609]: no field `0` on type `()`\n  --> /tmp/tmposzdar89.rs:45:14\n\
    \   |\n45 |         if i.0.is_whitespace() {\n   |              ^\n\nerror[E0609]:\
    \ no field `0` on type `()`\n  --> /tmp/tmposzdar89.rs:52:14\n   |\n52 |     \
    \    if i.0.is_whitespace() {\n   |              ^\n\nerror[E0609]: no field `0`\
    \ on type `()`\n  --> /tmp/tmposzdar89.rs:59:14\n   |\n59 |         if i.0.is_whitespace()\
    \ {\n   |              ^\n\nerror[E0609]: no field `0` on type `()`\n  --> /tmp/tmposzdar89.rs:66:14\n\
    \   |\n66 |         if i.0.is_whitespace() {\n   |              ^\n\nerror[E0609]:\
    \ no field `0` on type `()`\n  --> /tmp/tmposzdar89.rs:73:14\n   |\n73 |     \
    \    if i.0.is_whitespace() {\n   |              ^\n\nerror[E0609]: no field `0`\
    \ on type `()`\n  --> /tmp/tmposzdar89.rs:80:14\n   |\n80 |         if i.0.is_whitespace()\
    \ {\n   |              ^\n\nerror: aborting due to 12 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0609.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end = Vec::new();\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl1uckvr7.rs:28:58\n   |\n\
    28 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n   |         \
    \                                                 ^ help: add `;` here\n29 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl1uckvr7.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mu\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpaqyo9n_f.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaqyo9n_f.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string\
    \ = paren_string;\n    while paren_level_count < paren_string.len() {\n      \
    \  let mut paren_level = paren_level + 1;\n        let mut paren_level_count =\
    \ 0;\n        while paren_level_count < paren_level_string.len() {\n         \
    \   if paren_level_count + paren_level > paren_string.len() {\n              \
    \  break;\n            }\n            if paren_level_string[paren_level_count]\
    \ == paren_string[paren_level_count + paren_level] {\n                paren_level_count\
    \ = paren_level_count + 1;\n            } else {\n                break;\n   \
    \         }\n        }\n        paren_levels.push(paren_level);\n        paren_level_string\
    \ = paren_string.split_off(paren_level_count);\n    }\n    paren_levels\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8docue_c.rs:18:16\n\
    \   |\n18 |             if paren_level_string[paren_level_count] == paren_string[paren_level_count\
    \ + paren_level] {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp8docue_c.rs:18:57\n   |\n18 |             if paren_level_string[paren_level_count]\
    \ == paren_string[paren_level_count + paren_level] {\n   |                   \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8docue_c.rs:27:5\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n27 |     paren_levels\n   |     ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 3 previous e"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mu\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpaqyo9n_f.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaqyo9n_f.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_char = 0;\n    let mut paren_level_char_pos = 0;\n  \
    \  let mut paren_level_char_len = paren_string.len();\n    let mut paren_level_char_len\
    \ = paren_level_char_len.saturating_sub(1);\n    while paren_level_char_pos <\
    \ paren_level_char_len {\n        paren_level_char = paren_level_string[paren_level_char_pos];\n\
    \        paren_level_char_pos += 1;\n        if paren_level_char == ' ' {\n  \
    \          paren_level_char_pos += 1;\n        }\n        if paren_level_char\
    \ == '(' {\n            paren_level += 1;\n            paren_levels.push(paren_level);\n\
    \            paren_level_index += 1;\n            paren_level_char_pos = paren_level_char_len;\n\
    \        }\n        if paren_level_char == ')' {\n            paren_level -= 1;\n\
    \            paren_levels.push(paren_level);\n            paren_level_index +=\
    \ 1;\n            paren_level_char_pos = paren_level_char_len;\n        }\n  \
    \  }\n    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvmxu6q_v.rs:16:28\n\
    \   |\n16 |         paren_level_char = paren_level_string[paren_level_char_pos];\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvmxu6q_v.rs:18:32\n\
    \   |\n18 |         if paren_level_char == ' ' {\n   |                       \
    \         ^^^ expected integer, found `char`\n\nerror[E0277]: can't compare `{integer}`\
    \ with `char`\n  --> /tmp/tmpvmxu6q_v.rs:18:29\n   |\n18 |         if paren_level_char\
    \ == ' ' {\n   |                             ^^ no implementation for `{integer}\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvmxu6q_v.rs:21:32\n\
    \   |\n21 |         if paren_level_char == '(' {\n   |                       \
    \         ^^^ expected integer, found `char`\n\nerror[E0277]: can't compare `{integer}`\
    \ with `char`\n  --> /tmp/tmpvmxu6q_v.rs:21:29\n   |\n21 |         if paren_level_char\
    \ == '(' {\n   |                             ^^ no implementation for `{integer}\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n           "
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string_index = 0;\n    while paren_level_string_index\
    \ < paren_string.len() {\n        let mut paren_level_char = paren_level_string[paren_level_string_index];\n\
    \        if paren_level_char == ')' {\n            paren_level_string_index +=\
    \ 1;\n            paren_level_string = paren_string.clone();\n            paren_level_string_index\
    \ = 0;\n            paren_level_string[paren_level_string_index] = '(';\n    \
    \        paren_level_string[paren_level_string_index + 1] = ')';\n           \
    \ paren_level_string[paren_level_string_index + 2] = ' ';\n            paren_level_string[paren_level_string_index\
    \ + 3] = ')';\n            paren_level_string[paren_level_string_index + 4] =\
    \ ')';\n            paren_level_string[paren_level_string_index + 5] = ')';\n\
    \            paren_level_string[paren_level_string_index + 6] = ')';\n       \
    \     paren_level_string[paren_level_string_index + 7] = ')';\n            paren_level_string[paren_level_string_index\
    \ + 8] = ')';\n            paren_level_string[paren_level_string_index + 9] =\
    \ ')';\n            paren_level_string[paren_level_string_index + 10] = ')';\n\
    \            paren_level_string[paren_level_string_index + 11] = ')';\n      \
    \      paren_level_string[paren_level_string_index + 12] = ')';\n            paren_level_string[paren_level_string_index\
    \ + 13] = ')';\n            paren_level_string[paren_level_string_index + 14]\
    \ = ')';\n            paren_level_string[paren_level_string_index + 15] = ')';\n\
    \            paren_level_string[paren_level_string_index + 16] = ')';\n      \
    \      paren_level_string[paren_level_string_index + 17] = ')';\n            paren_level_string[paren_level_string_index\
    \ + 18] = ')';\n            paren_level_string[paren_level_string_index + 19]\
    \ = ')';\n            paren_level_string[paren_level_string_index + 20] = ')';\n\
    \            paren_level_string[paren_level_string_index + 21] = ')';\n      \
    \      paren_level_string[paren_level_string_index + 22] = ')';\n            paren_level_string\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpr4536dlh.rs:49:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n12 |     while paren_level_string_index < paren_string.len() {\n   |    \
    \                                                     - unclosed delimiter\n13\
    \ |         let mut paren_level_char = paren_level_string[paren_level_string_index];\n\
    14 |         if paren_level_char == ')' {\n   |                              \
    \      - this delimiter might not be properly closed...\n...\n42 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n49 | }\n   |   ^\n\n\
    error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpr4536dlh.rs:13:36\n\
    \   |\n13 |         let mut paren_level_char = paren_level_string[paren_level_string_index];\n\
    \   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpr4536dlh.rs:18:13\n   |\n18 |             paren_level_string[paren_level_string_index]\
    \ = '(';\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <Strin"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgoey7v1i.rs:29:63\n   |\n\
    29 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n   |    \
    \                                                           ^ help: add `;` here\n\
    30 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgoey7v1i.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph0qq00k3.rs:30:85\n   |\n\
    30 |     let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \             ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmph0qq00k3.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_len\
    \ = Vec::new();\n    let mut paren_levels_lens = Vec::new();\n    let mut paren_levels_lens_len\
    \ = Vec::new();\n    let mut paren_levels_lens_lens = Vec::new();\n    let mut\
    \ paren_levels_lens_lens_len = Vec::new();\n    let mut paren_levels_lens_lens_lens\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_len = Vec::new();\n \
    \   let mut paren_levels_lens_lens_lens_lens = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_len\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens = Vec::new();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_len = Vec::new();\n    let\
    \ mut paren_levels_lens_lens_lens_lens_lens_lens = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens =\
    \ Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsemmhu2k.rs:29:89\n   |\n\
    29 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    \   |                                                                        \
    \                 ^ help: add `;` here\n30 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsemmhu2k.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7n0p_a6v.rs:41:18\n   |\n\
    41 |     let mut paren\n   |                  ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7n0p_a6v.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = Vec::new();\n\
    \    let mut paren_stack_len = paren_string.len();\n    let mut paren_stack_pos\
    \ = 0;\n    let mut paren_stack_char = paren_string[paren_stack_pos];\n    while\
    \ paren_stack_pos < paren_string.len() {\n        if paren_stack_char == ')' {\n\
    \            paren_stack.pop();\n            paren_stack_len -= paren_stack.len();\n\
    \            paren_stack_pos += 1;\n            level -= 1;\n        }\n     \
    \   if paren_stack_char == '(' {\n            paren_stack.push(level);\n     \
    \       paren_stack_len += 1;\n            paren_stack_pos += 1;\n           \
    \ level += 1;\n        }\n        paren_stack_char = paren_string[paren_stack_pos];\n\
    \    }\n    paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmphiw3p1eb.rs:11:32\n   |\n11 |     let mut paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is\
    \ not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmphiw3p1eb.rs:25:28\n   |\n25 |         paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr = 0;\n    let mut paren_levels_ptr = paren_levels_stack.as_mut_ptr();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfahmjr6a.rs:29:19\n   |\n\
    29 |     let mut paren_\n   |                   ^ help: add `;` here\n30 | }\n\
    \   | - unexpected token\n\nwarning: type annotations needed\n  --> /tmp/tmpfahmjr6a.rs:12:53\n\
    \   |\n12 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                     ^^^^^^\n   |\n   = note:\
    \ `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this is accepted\
    \ in the current edition (Rust 2015) but is a hard error in Rust 2018!\n   = note:\
    \ for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfahmjr6a.rs:12:60\n   |\n12 |\
    \     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len().try_into().unwrap());\n\
    \   |                                                                        \
    \            ++++++++++++++++++++\n\nwarning: type annotations needed\n  --> /tmp/tmpfahmjr6a.rs:13:53\n\
    \   |\n13 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                     ^^^^^^\n   |\n   = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2018!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfahmjr6a.rs:13:60\n   |\n13 |\
    \     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_level_count\
    \ = Vec::new();\n    let mut paren_level_count_stack = Vec::new();\n    let mut\
    \ paren_level_count_stack_ptr = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_level_count_stack_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_level_count_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_level_count_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpk7rnbl4n.rs:32:1\n  \
    \ |\n32 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mu\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpaqyo9n_f.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaqyo9n_f.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpct_zclhk.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpct_zclhk.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_nestings_stack\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = 0;\n    let mut paren_nestings_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr = 0;\n    let mut paren_nestings_ptr = 0;\n\
    \    let mut paren_levels_ptr_next = 0;\n    let mut paren_nestings_ptr_next =\
    \ 0;\n    let mut paren_levels_ptr_next2 = 0;\n    let mut paren_nestings_ptr_next2\
    \ = 0;\n    let mut paren_levels_ptr_next3 = 0;\n    let mut paren_nestings_ptr_next3\
    \ = 0;\n    let mut paren_levels_ptr_next4 = 0;\n    let mut paren_nestings_ptr_next4\
    \ = 0;\n    let mut paren_levels_ptr_next5 = 0;\n    let mut paren_nestings_ptr_next5\
    \ = 0;\n    let mut paren_levels_ptr_next6 = 0;\n    let mut paren_nestings_ptr_next6\
    \ = 0;\n    let mut paren_levels_ptr_next7 = 0;\n    let mut paren_nestings_ptr_next7\
    \ = 0;\n    let mut paren_levels_ptr_next8 = 0;\n    let mut paren_nestings_ptr_next8\
    \ = 0;\n    let mut paren_levels_ptr_next9 = 0;\n    let mut paren_nestings_ptr_next9\
    \ = 0;\n    let mut paren_levels_ptr_next10 = 0;\n    let mut paren_nestings_ptr_next10\
    \ = 0;\n    let mut paren_levels_ptr_next11 = 0;\n    let mut paren_nestings_ptr_next11\
    \ = 0;\n    let mut paren_levels_ptr_next12 = 0;\n    let mut paren_nestings_ptr_next12\
    \ = 0;\n    let mut paren_levels_ptr_next13 = 0;\n    let mut paren_nestings_ptr_next13\
    \ = 0;\n    let mut paren_levels_ptr_next14 = 0;\n    let mut paren_nestings_ptr_next14\
    \ = 0;\n    let mut paren_levels_ptr_next15 = 0;\n    let mut paren_nestings_ptr_next15\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3hrybgsp.rs:46:38\n   |\n\
    46 |     let mut paren_nestings_ptr_next15\n   |                             \
    \         ^ help: add `;` here\n47 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp3hrybgsp.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpct_zclhk.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpct_zclhk.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_char_index = 0;\n    let mut paren_level_char_length\
    \ = 0;\n    let mut paren_level_char_length_index = 0;\n    let mut paren_level_char_length_count\
    \ = 0;\n    let mut paren_level_char_length_char_count = 0;\n    let mut paren_level_char_length_char:\
    \ char;\n    let mut paren_level_char_length_char_index = 0;\n    let mut paren_level_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_index = 0;\n    let mut\
    \ paren_level_char_length_char_length_count = 0;\n    let mut paren_level_char_length_char_length_char_count\
    \ = 0;\n    let mut paren_level_char_length_char_length_char: char;\n    let mut\
    \ paren_level_char_length_char_length_char_index = 0;\n    let mut paren_level_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_index = 0;\n\
    \    let mut paren_level_char_length_char_length_char_length_count = 0;\n    let\
    \ mut paren_level_char_length_char_length_char_length_char_count = 0;\n    let\
    \ mut paren_level_char_length_char_length_char_length_char: char;\n    let mut\
    \ paren_level_char_length_char_length_char_length_char_index = 0;\n    let mut\
    \ paren_level_char_length_char_length_char_length_char_length = 0;\n    let mut\
    \ paren_level_char_length_char_length_char_length_char_length_index = 0;\n   \
    \ let mut paren_level_char_length_char_length_char_length_char_length_count =\
    \ 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_count\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char:\
    \ char;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_count\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw43ylg3w.rs:42:78\n   |\n\
    42 |     let mut paren_level_char_length_char_length_char_length_char_length_char_\n\
    \   |                                                                        \
    \      ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpw43ylg3w.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_len;\n    let mut paren_levels_stack_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_len = paren_levels_stack_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr = paren_levels_stack_ptr_len;\n    let\
    \ mut paren_levels_stack_ptr_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_ptr_len\
    \ = paren_levels_stack_ptr_ptr.len();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_len;\n    let mut paren_levels_stack_ptr_ptr_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr_len;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_len\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr.len();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_len;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbeezh185.rs:32:104\n   |\n\
    32 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n33 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpbeezh185.rs:30:62\n   |\n30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.len();\n   |                  \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpbeezh185.rs:32:62\n   |\n32 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr\n   |                         \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos`\n\
    \nerror[E0599]: no method named `len` found for type `usize` in the current scope\n\
    \  --> /tmp/tmpbeezh185.rs:14:65\n   |\n14 |     let mut paren_levels_stack_ptr_len\
    \ = paren_levels_stack_ptr.len();\n   |                                      \
    \                           ^^^ method not found in `usize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpbeezh185.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\n\
    For more information about an"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_size = Vec::new();\n    let mut paren_levels_size_ptr\
    \ = Vec::new();\n    let mut paren_levels_size_cur = Vec::new();\n    let mut\
    \ paren_levels_size_next = Vec::new();\n    let mut paren_levels_size_prev = Vec::new();\n\
    \    let mut paren_levels_size_next = Vec::new();\n    let mut paren_levels_size_prev\
    \ = Vec::new();\n    let mut paren_levels_size_next = Vec::new();\n    let mut\
    \ paren_levels_size_prev = Vec::new();\n    let mut paren_levels_size_next = Vec::new();\n\
    \    let mut paren_levels_size_prev = Vec::new();\n    let mut paren_levels_size_next\
    \ = Vec::new();\n    let mut paren_levels_size_prev = Vec::new();\n    let mut\
    \ paren_levels_size_next = Vec::new();\n    let mut paren_levels_size_prev = Vec::new();\n\
    \    let mut paren_levels_size_next = Vec::new();\n    let mut paren_levels_size_prev\
    \ = Vec::new();\n    let mut paren_levels_size_next = Vec::new();\n    let mut\
    \ paren_levels_size_prev = Vec::new();\n    let mut paren_levels_size_next = Vec::new();\n\
    \    let mut paren_levels_size_prev = Vec::new();\n    let mut paren_levels_size_next\
    \ = Vec::new();\n    let mut paren_levels_size_prev = Vec::new();\n    let mut\
    \ paren_levels_size_next = Vec::new();\n    let mut paren_levels_size_prev = Vec::new();\n\
    \    let mut paren_levels_size_next = Vec::new();\n    let mut paren_levels_size_prev\
    \ = Vec::new();\n    let mut paren_levels_size_next = Vec::new();\n    let mut\
    \ paren_levels_size_prev = Vec::new();\n    let mut paren_levels_size_next = Vec::new();\n\
    \    let mut paren_levels_size_prev = Vec::new();\n    let mut paren_levels_size_next\
    \ = Vec::new();\n    let mut paren_levels_size_prev = Vec::new();\n    let mut\
    \ paren_levels_size_next = Vec\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxyuwu3r3.rs:44:41\n   |\n\
    44 |     let mut paren_levels_size_next = Vec\n   |                          \
    \               ^ help: add `;` here\n45 | }\n   | - unexpected token\n\nerror[E0423]:\
    \ expected value, found struct `Vec`\n   --> /tmp/tmpxyuwu3r3.rs:44:38\n    |\n\
    44  |       let mut paren_levels_size_next = Vec\n    |                      \
    \                  ^^^ help: use struct literal syntax instead: `Vec { buf: val,\
    \ len: val }`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpxyuwu3r3.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0423.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels = vec![];\n    let mut paren_levels_len = paren_stack.len();\n\
    \    let mut paren_levels_ptr = paren_stack.as_ptr();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpm20wy9mk.rs:31:1\n   |\n31 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpm20wy9mk.rs:30:59\n   |\n6  | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n   |                                                      \
    \      - closing delimiter possibly meant for this\n...\n30 |     let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_\n   |                                     \
    \                      ^ unclosed delimiter\n31 | }\n   | ^ mismatched closing\
    \ delimiter\n\nwarning: type annotations needed\n  --> /tmp/tmpm20wy9mk.rs:12:53\n\
    \   |\n12 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_len);\n\
    \   |                                                     ^^^^^^\n   |\n   = note:\
    \ `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this is accepted\
    \ in the current edition (Rust 2015) but is a hard error in Rust 2018!\n   = note:\
    \ for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm20wy9mk.rs:12:60\n   |\n12 |\
    \     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_len);\n\
    \   |                                                            ^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_len.try_into().unwrap());\n\
    \   |                                                                        \
    \    ++++++++++++++++++++\n\nwarning: type annotations needed\n  --> /tmp/tmpm20wy9mk.rs:13:53\n\
    \   |\n13 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_len);\n\
    \   |                                                     ^^^^^^\n   |\n   = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2018!\n   = note: for more information, see issu"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char_count_index = 0;\n    let mut paren_level_char_count_index2\
    \ = 0;\n    let mut paren_level_char_count_index3 = 0;\n    let mut paren_level_char_count_index4\
    \ = 0;\n    let mut paren_level_char_count_index5 = 0;\n    let mut paren_level_char_count_index6\
    \ = 0;\n    let mut paren_level_char_count_index7 = 0;\n    let mut paren_level_char_count_index8\
    \ = 0;\n    let mut paren_level_char_count_index9 = 0;\n    let mut paren_level_char_count_index10\
    \ = 0;\n    let mut paren_level_char_count_index11 = 0;\n    let mut paren_level_char_count_index12\
    \ = 0;\n    let mut paren_level_char_count_index13 = 0;\n    let mut paren_level_char_count_index14\
    \ = 0;\n    let mut paren_level_char_count_index15 = 0;\n    let mut paren_level_char_count_index16\
    \ = 0;\n    let mut paren_level_char_count_index17 = 0;\n    let mut paren_level_char_count_index18\
    \ = 0;\n    let mut paren_level_char_count_index19 = 0;\n    let mut paren_level_char_count_index20\
    \ = 0;\n    let mut paren_level_char_count_index21 = 0;\n    let mut paren_level_char_count_index22\
    \ = 0;\n    let mut paren_level_char_count_index23 = 0;\n    let mut paren_level_char_count_index24\
    \ = 0;\n    let mut paren_level_char_count_index25 = 0;\n    let mut paren_level_char_count_index26\
    \ = 0;\n    let mut paren_level_char_count_index27 = 0;\n    let mut paren_level_char_count_index28\
    \ = 0;\n    let mut paren_level_char_count_index29 = 0;\n    let mut paren_level_char_count_index30\
    \ = 0;\n    let mut paren_level_char_count_index31 = 0;\n    let mut paren_level_char_count_index32\
    \ = 0;\n    let mut paren_level_char_count_index33 = 0;\n    let mut paren_level_char_count_index34\
    \ = 0;\n    let mut paren_level_char_count_index35 = 0;\n    let mut paren_level_char_count_index36\
    \ = 0;\n    let mut paren_level_char_count_index37 = 0;\n    let mut paren_level_char_count_index38\
    \ = 0;\n    let mut paren_level_char_count_index39 = 0;\n    let mut paren_level_char_count_index40\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwdv_0itw.rs:50:43\n   |\n\
    50 |     let mut paren_level_char_count_index40\n   |                        \
    \                   ^ help: add `;` here\n51 | }\n   | - unexpected token\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpwdv_0itw.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = vec![];\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_char.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_char.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp30vmkkzy.rs:49:1\n  \
    \ |\n49 | }\n   | ^ expected pattern\n\nerror[E0689]: can't call method `len`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmp30vmkkzy.rs:14:53\n   |\n\
    14 |     let mut paren_level_char_len = paren_level_char.len();\n   |        \
    \                                             ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp30vmkkzy.rs:16:53\n\
    \   |\n16 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp30vmkkzy.rs:18:53\n\
    \   |\n18 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp30vmkkzy.rs:20:53\n\
    \   |\n20 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp30vmkkzy.rs:22:53\n\
    \   |\n22 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_uaunc2u.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_uaunc2u.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_size = paren_stack.len();\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut paren_levels_pos\
    \ = 0;\n    let mut paren_levels_len = paren_levels_size;\n    let mut \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphdvpuq7j.rs:51:1\n\
    \   |\n51 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_max\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index\
    \ = 0;\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdvp9jgex.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr = paren_levels_stack.as_mut_slice();\n  \
    \  let mut paren_levels_ptr_end = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n    let mut paren_levels_ptr_end = paren_levels_ptr.end();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvp3kqto6.rs:36:52\n   |\n\
    36 |     let mut paren_levels_ptr_end = paren_levels_ptr\n   |               \
    \                                     ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0599]: no method named `end` found for mutable reference `&mut\
    \ [_]` in the current scope\n  --> /tmp/tmpvp3kqto6.rs:12:53\n   |\n12 |     let\
    \ mut paren_levels_ptr_end = paren_levels_ptr.end();\n   |                   \
    \                                  ^^^ method not found in `&mut [_]`\n\nerror[E0599]:\
    \ no method named `end` found for mutable reference `&mut [_]` in the current\
    \ scope\n  --> /tmp/tmpvp3kqto6.rs:13:53\n   |\n13 |     let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n   |                                            \
    \         ^^^ method not found in `&mut [_]`\n\nerror[E0599]: no method named\
    \ `end` found for mutable reference `&mut [_]` in the current scope\n  --> /tmp/tmpvp3kqto6.rs:14:53\n\
    \   |\n14 |     let mut paren_levels_ptr_end = paren_levels_ptr.end();\n   | \
    \                                                    ^^^ method not found in `&mut\
    \ [_]`\n\nerror[E0599]: no method named `end` found for mutable reference `&mut\
    \ [_]` in the current scope\n  --> /tmp/tmpvp3kqto6.rs:15:53\n   |\n15 |     let\
    \ mut paren_levels_ptr_end = paren_levels_ptr.end();\n   |                   \
    \                                  ^^^ method not found in `&mut [_]`\n\nerror[E0599]:\
    \ no method named `end` found for mutable reference `&mut [_]` in the current\
    \ scope\n  --> /tmp/tmpvp3kqto6.rs:16:53\n   |\n16 |     let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.end();\n   |                                            \
    \         ^^^ method not found in `&mut [_]`\n\nerror[E0599]: no method named\
    \ `end` found for mutable reference `&mut [_]` in the current scope\n  --> /tmp/tmpvp3kqto6.rs:17:53\n\
    \   |\n17 |     let mut paren_levels_ptr_end = paren_levels_ptr.end();\n   | \
    \                                                    ^^^ method not found in `&mut\
    \ [_]`\n\nerror[E0599]: no method named `end` found for mutable reference `&mut\
    \ [_]`"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq4_9ngxp.rs:37:43\n   |\n\
    37 |     let mut paren_levels_stack_top = paren\n   |                        \
    \                   ^ help: add `;` here\n38 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmpq4_9ngxp.rs:37:38\n\
    \   |\n37 |     let mut paren_levels_stack_top = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpq4_9ngxp.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len()\
    \ - 1;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len() - 1;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len()\
    \ - 1;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len() - 1;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len()\
    \ - 1;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len() - 1;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len()\
    \ - 1;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let\
    \ mut paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len() - 1;\n    let mu\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpug_7yg1f.rs:34:11\n   |\n\
    34 |     let mu\n   |           ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpug_7yg1f.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    for paren in paren_string.chars() {\n        if\
    \ paren == '(' {\n            paren_stack.push(paren_level);\n            paren_level\
    \ += 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n   \
    \         if paren_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0]`,\n right: `[2, 3, 1, 3]`',\
    \ /tmp/tmp08pzay7w.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    let mut paren_level_count: usize = 0;\n\
    \    let mut paren_level_max_count: usize = 0;\n    let mut paren_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_count: usize = 0;\n    let mut\
    \ paren_level_max_level_max_count: usize = 0;\n    let mut paren_level_max_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_count: usize = 0;\n\
    \    let mut paren_level_max_level_max_level_max_level: usize = 0;\n    let mut\
    \ paren_level_max_level_max_level_max_level_count: usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_count:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_count:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_count:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level_count:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level_count:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level_count:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_count:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level:\
    \ usize = 0;\n    let mut paren_level_max_level_max_level_max_level_max_\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprn00awiu.rs:33:59\n   |\n\
    33 |     let mut paren_level_max_level_max_level_max_level_max_\n   |        \
    \                                                   ^ help: add `;` here\n34 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmprn00awiu.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpv0q67oj0.rs:50:18\n   |\n\
    50 |     let mut paren\n   |                  ^ help: add `;` here\n51 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpv0q67oj0.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index2 = 0;\n    let mut paren_level_char_pos_count_max_index3\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index4 = 0;\n    let mut paren_level_char_pos_count_max_index5\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index6 = 0;\n    let mut paren_level_char_pos_count_max_index7\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index8 = 0;\n    let mut paren_level_char_pos_count_max_index9\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index10 = 0;\n    let mut paren_level_char_pos_count_max_index11\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index12 = 0;\n    let mut paren_level_char_pos_count_max_index13\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index14 = 0;\n    let mut paren_level_char_pos_count_max_index15\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index16 = 0;\n    let mut paren_level_char_pos_count_max_index17\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index18 = 0;\n    let mut paren_level_char_pos_count_max_index19\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index20 = 0;\n    let mut paren_level_char_pos_count_max_index21\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index22 = 0;\n    let mut paren_level_char_pos_count_max_index23\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index24 = 0;\n    let mut paren_level_char_pos_count_max_index25\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index26 = 0;\n    let mut paren_level_char_pos_count_max_index27\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index28 = 0;\n    let mut paren_level_char_pos_count_max_index29\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index30 = 0;\n    let mut paren_level_char_pos_count_max_index31\
    \ = 0;\n    let mut paren_level_char_pos_count_max_index32 = 0;\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg74yvb56.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_depth\
    \ = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = vec![];\n   \
    \ let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7_37chpd.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_ptr = 0;\n    let mut paren_levels_ptr\
    \ = 0;\n    let mut paren_levels_ptr_next = 0;\n    let mut paren_levels_ptr_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next = 0;\n    let mut paren_levels_ptr_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next = 0;\n    let mut\
    \ paren_levels_ptr_next_next_next_next_next_next = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next =\
    \ 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next = 0;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next = 0;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgzpyzggo.rs:33:65\n   |\n\
    33 |     let mut paren_levels_ptr_next_next_next_next_next_next_next_\n   |  \
    \                                                               ^ help: add `;`\
    \ here\n34 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpgzpyzggo.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n  |    -------------------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = vec![0];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char_count =\
    \ 0;\n    let mut paren_level_chars = paren_string.chars();\n    while paren_level_char_index\
    \ < paren_level_chars.len() {\n        let paren_level_char = paren_level_chars[paren_level_char_index];\n\
    \        if paren_level_char == '(' {\n            paren_level += 1;\n       \
    \     paren_levels[paren_level_index] = paren_level;\n            paren_level_char_index\
    \ += 1;\n            paren_level_char_count += 1;\n        } else if paren_level_char\
    \ == ')' {\n            paren_level -= 1;\n            paren_levels[paren_level_index]\
    \ = paren_level;\n            paren_level_char_index += 1;\n            paren_level_char_count\
    \ += 1;\n        } else {\n            paren_level_char_index += 1;\n        \
    \    paren_level_char_count += 1;\n        }\n        paren_level_index += 1;\n\
    \    }\n    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmpiaa30ife.rs:14:54\n   |\n14 |     while paren_level_char_index\
    \ < paren_level_chars.len() {\n   |                                          \
    \            ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index\
    \ into a value of type `Chars<'_>`\n  --> /tmp/tmpiaa30ife.rs:15:32\n   |\n15\
    \ |         let paren_level_char = paren_level_chars[paren_level_char_index];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: usize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == '(' {\n            paren_stack.push(paren_level);\n      \
    \      paren_level += 1;\n        } else if paren == ')' {\n            paren_level\
    \ -= 1;\n            if paren_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxd8ezqn5.rs:11:30\n   |\n\
    11 |             paren_stack.push(paren_level);\n   |                        \
    \      ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    11 |             paren_stack.push(paren_level.try_into().unwrap());\n   |    \
    \                                     ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxd8ezqn5.rs:16:34\n   |\n16 |                 paren_stack.push(paren_level);\n\
    \   |                                  ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |                 paren_stack.push(paren_level.try_into().unwrap());\n\
    \   |                                             ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = vec![0];\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_char.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_char.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpp23e4zz1.rs:49:1\n  \
    \ |\n49 | }\n   | ^ expected pattern\n\nerror[E0689]: can't call method `len`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmpp23e4zz1.rs:14:53\n   |\n\
    14 |     let mut paren_level_char_len = paren_level_char.len();\n   |        \
    \                                             ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpp23e4zz1.rs:16:53\n\
    \   |\n16 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpp23e4zz1.rs:18:53\n\
    \   |\n18 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpp23e4zz1.rs:20:53\n\
    \   |\n20 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpp23e4zz1.rs:22:53\n\
    \   |\n22 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphe0bdk9l.rs:35:27\n   |\n\
    35 |     let mut paren_nesting_\n   |                           ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmphe0bdk9l.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n  |    -------------------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr = &mut paren_levels_stack;\n    let mut paren_levels_stack_ptr_ptr\
    \ = &mut paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr =\
    \ &mut paren_levels_stack_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n \
    \   let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp76756gdn.rs:24:51\n   |\n\
    24 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\n   |                \
    \                                   ^ help: add `;` here\n25 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmp76756gdn.rs:21:91\n   |\n21 | ...ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmp76756gdn.rs:22:95\n   |\n22 | ...ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp76756gdn.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = vec![];\n\
    \    let mut paren_stack_len = paren_string.len();\n    let mut paren_stack_pos\
    \ = 0;\n    let mut paren_stack_char = paren_string[paren_stack_pos];\n    while\
    \ paren_stack_pos < paren_string.len() {\n        if paren_stack_char == ')' {\n\
    \            paren_stack.pop();\n            paren_stack_len -= paren_stack.len();\n\
    \            if paren_stack.len() == 0 {\n                level += 1;\n      \
    \      }\n        }\n        if paren_stack_char == '(' {\n            paren_stack.push(paren_stack_pos);\n\
    \            paren_stack_len += 1;\n        }\n        paren_stack_pos += 1;\n\
    \        paren_stack_char = paren_string[paren_stack_pos];\n    }\n    level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpp329dtuw.rs:11:32\n   |\n11 |     let mut paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is\
    \ not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpp329dtuw.rs:25:28\n   |\n25 |         paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp329dtuw.rs:27:5\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n27 |     level\n   |     ^^^^^ expected struct\
    \ `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `{integer}`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E027"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    let mut paren_levels: Vec<isize> = vec![];\n\
    \    let mut paren_levels_len: usize = 0;\n    let mut paren_levels_lens: Vec<usize>\
    \ = vec![];\n    let mut paren_levels_lens_len: usize = 0;\n    let mut paren_levels_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_len: usize = 0;\n \
    \   let mut paren_levels_lens_lens_lens: Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens: Vec<usize> = vec![];\n\
    \    let mut paren_levels_lens_lens_lens_lens_len: usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens: Vec<usize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: usize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens: Vec<usize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk7_di8lk.rs:28:56\n   |\n\
    28 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_\n   |           \
    \                                             ^ help: add `;` here\n29 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk7_di8lk.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmppifh3pz3.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = vec![];\n\
    \    let mut paren_stack_len = paren_string.len();\n    let mut paren_stack_pos\
    \ = 0;\n    let mut paren_stack_char = paren_string[paren_stack_pos];\n    while\
    \ paren_stack_pos < paren_string.len() {\n        if paren_stack_char == ')' {\n\
    \            paren_stack_len -= 1;\n            paren_stack_pos += 1;\n      \
    \      paren_stack_char = paren_string[paren_stack_pos];\n        } else if paren_stack_char\
    \ == '(' {\n            paren_stack.push(level);\n            level += 1;\n  \
    \          paren_stack_pos += 1;\n            paren_stack_char = paren_string[paren_stack_pos];\n\
    \        } else {\n            paren_stack_len -= 1;\n            paren_stack_pos\
    \ += 1;\n            paren_stack_char = paren_string[paren_stack_pos];\n     \
    \   }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmp1gtx9wl2.rs:11:32\n   |\n11 |     let mut paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is\
    \ not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp1gtx9wl2.rs:16:32\n   |\n16 |             paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp1gtx9wl2.rs:21:32\n   |\n21 |             paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usi"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_ptr = paren_levels.as_ptr();\n\
    \    let mut paren_levels_ptr_len = paren_levels_ptr.len();\n    let mut paren_levels_ptr_cur\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end = paren_levels_ptr + paren_levels_ptr_len;\n\
    \    let mut paren_levels_ptr_cur = paren_levels_ptr;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr + paren_levels_ptr_len;\n    let mut paren_levels_ptr_cur\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end = paren_levels_ptr + paren_levels_ptr_len;\n\
    \    let mut paren_levels_ptr_cur = paren_levels_ptr;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr + paren_levels_ptr_len;\n    let mut paren_levels_ptr_cur\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end = paren_levels_ptr + paren_levels_ptr_len;\n\
    \    let mut paren_levels_ptr_cur = paren_levels_ptr;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr + paren_levels_ptr_len;\n    let mut paren_levels_ptr_cur\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end = paren_levels_ptr + paren_levels_ptr_len;\n\
    \    let mut paren_levels_ptr_cur = paren_levels_ptr;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr + paren_levels_ptr_len;\n    let mut paren_levels_ptr_cur\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end = paren_levels_ptr + paren_levels_ptr_len;\n\
    \    let mut paren_levels_ptr_cur = paren_levels_ptr;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr + paren_levels_ptr_len;\n    let mut paren_levels_ptr_cur\
    \ = \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpsgo_uusl.rs:34:1\n\
    \   |\n34 | }\n   | ^ expected expression\n\nwarning: type annotations needed\n\
    \  --> /tmp/tmpsgo_uusl.rs:12:53\n   |\n12 |     let mut paren_levels_ptr_len\
    \ = paren_levels_ptr.len();\n   |                                            \
    \         ^^^\n   |\n   = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n\
    \   = warning: this is accepted in the current edition (Rust 2015) but is a hard\
    \ error in Rust 2018!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0658]: use of unstable library feature 'slice_ptr_len'\n  --> /tmp/tmpsgo_uusl.rs:12:53\n\
    \   |\n12 |     let mut paren_levels_ptr_len = paren_levels_ptr.len();\n   | \
    \                                                    ^^^\n   |\n   = note: see\
    \ issue #71146 <https://github.com/rust-lang/rust/issues/71146> for more information\n\
    \nerror[E0277]: the size for values of type `[_]` cannot be known at compilation\
    \ time\n   --> /tmp/tmpsgo_uusl.rs:11:45\n    |\n11  |     let mut paren_levels_ptr\
    \ = paren_levels.as_ptr();\n    |                                            \
    \ ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `[_]`\nnote: required by a bound in `Vec::<T,\
    \ A>::as_ptr`\n\nerror[E0277]: the size for values of type `[_]` cannot be known\
    \ at compilation time\n   --> /tmp/tmpsgo_uusl.rs:9:28\n    |\n9   |     let mut\
    \ paren_levels = Vec::new();\n    |                            ^^^^^^^^ doesn't\
    \ have a size known at compile-time\n    |\n    = help: the trait `Sized` is not\
    \ implemented for `[_]`\nnote: required by a bound in `Vec::<T>::new`\n\nerror[E0277]:\
    \ the size for values of type `[_]` cannot be known at compilation time\n   -->\
    \ /tmp/tmpsgo_uusl.rs:9:28\n    |\n9   |     let mut paren_levels = Vec::new();\n\
    \    |                            ^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `[_]`\nnote: required\
    \ by a bound in `Vec`\n\nerror[E0369]: cannot add `usize` to `*cons"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_level_count = 0;\n    let mut paren_level_max = 0;\n    let\
    \ mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n   \
    \ let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_level_max_count = 0;\n    let mut paren_level_max_index = 0;\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphb_wvs5n.rs:61:19\n   |\n\
    61 |     let mut paren_\n   |                   ^ help: add `;` here\n62 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmphb_wvs5n.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_stack: Vec<isize> = vec![];\n\
    \    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n    let mut paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_bottom:\
    \ isize = 0;\n\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n \
    \   assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpceal7agr.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_size = vec![0];\n    let mut paren_levels_stack_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = vec![0];\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n \
    \   let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptmbnqtnr.rs:30:18\n   |\n\
    30 |     let mut paren\n   |                  ^ help: add `;` here\n31 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmptmbnqtnr.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char_count_in_paren = 0;\n    let mut paren_level_char_count_in_paren_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group = 0;\n    let\
    \ mut paren_level_char_count_in_paren_group_group_group = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    let mut paren_level_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4_gz_g26.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = vec![];\n\
    \    for paren in paren_string.chars() {\n        if paren == '(' {\n        \
    \    paren_stack.push(level);\n            level += 1;\n        } else if paren\
    \ == ')' {\n            level -= 1;\n            if level == 0 {\n           \
    \     paren_stack.pop();\n            }\n        } else {\n            level +=\
    \ 1;\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1, 2, 3, 2, 3, 4, 5, 4, 4]`,\n right: `[2, 3, 1, 3]`', /tmp/tmpm_6votfs.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos = 0;\n    let mut paren_levels_stack_pos_pos_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos_pos_bottom =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_pos_pos_pos = 0;\n\
    \    let mut paren_levels_stack_pos_pos_pos_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_pos_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_pos_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_pos_pos_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_pos_pos_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_pos_pos_pos_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_pos_pos_pos_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_pos_pos_pos_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos_pos_pos_pos_pos_pos_pos_pos_pos_bottom = paren_levels_stack.len();\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9j4ez6hy.rs:33:19\n   |\n\
    33 |     let mut paren_\n   |                   ^ help: add `;` here\n34 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9j4ez6hy.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = \"\
    \";\n    let mut paren_level_char = 0;\n    let mut paren_level_char_next = 0;\n\
    \    let mut paren_level_char_next_next = 0;\n    let mut paren_level_char_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next = 0;\n    let mut paren_level_char_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next = 0;\n    let\
    \ mut paren_level_char_next_next_next_next_next_next_next = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmptq3w6ati.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    let mut paren_levels: Vec<isize> = vec![];\n\
    \    let mut paren_levels_len: usize = 0;\n    let mut paren_levels_lens: Vec<usize>\
    \ = vec![];\n    let mut paren_levels_lens_len: usize = 0;\n    let mut paren_levels_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_len: usize = 0;\n \
    \   let mut paren_levels_lens_lens_lens: Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens: Vec<usize> = vec![];\n\
    \    let mut paren_levels_lens_lens_lens_lens_len: usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens: Vec<usize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: usize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens: Vec<usize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut paren_levels_lens_lens_lens_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcdnk72_f.rs:28:41\n   |\n\
    28 |     let mut paren_levels_lens_lens_lens_\n   |                          \
    \               ^ help: add `;` here\n29 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpcdnk72_f.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_char = 0;\n\
    \    let mut paren_level_char_next = 0;\n    let mut paren_level_char_next_index\
    \ = 0;\n    let mut paren_level_char_next_index2 = 0;\n    let mut paren_level_char_next_index3\
    \ = 0;\n    let mut paren_level_char_next_index4 = 0;\n    let mut paren_level_char_next_index5\
    \ = 0;\n    let mut paren_level_char_next_index6 = 0;\n    let mut paren_level_char_next_index7\
    \ = 0;\n    let mut paren_level_char_next_index8 = 0;\n    let mut paren_level_char_next_index9\
    \ = 0;\n    let mut paren_level_char_next_index10 = 0;\n    let mut paren_level_char_next_index11\
    \ = 0;\n    let mut paren_level_char_next_index12 = 0;\n    let mut paren_level_char_next_index13\
    \ = 0;\n    let mut paren_level_char_next_index14 = 0;\n    let mut paren_level_char_next_index15\
    \ = 0;\n    let mut paren_level_char_next_index16 = 0;\n    let mut paren_level_char_next_index17\
    \ = 0;\n    let mut paren_level_char_next_index18 = 0;\n    let mut paren_level_char_next_index19\
    \ = 0;\n    let mut paren_level_char_next_index20 = 0;\n    let mut paren_level_char_next_index21\
    \ = 0;\n    let mut paren_level_char_next_index22 = 0;\n    let mut paren_level_char_next_index23\
    \ = 0;\n    let mut paren_level_char_next_index24 = 0;\n    let mut paren_level_char_next_index25\
    \ = 0;\n    let mut paren_level_char_next_index26 = 0;\n    let mut paren_level_char_next_index27\
    \ = 0;\n    let mut paren_level_char_next_index28 = 0;\n    let mut paren_level_char_next_index29\
    \ = 0;\n    let mut paren_level_char_next_index30 = 0;\n    let mut paren_level_char_next_index31\
    \ = 0;\n    let mut paren_level_char_next_index32 = 0;\n    let mut paren_level_char_next_index33\
    \ = 0;\n    let mut paren_level_char_next_index34 = 0;\n    let mut paren_level_char_next_index35\
    \ = 0;\n    let mut paren_level_char_next_index36 = 0;\n    let mut paren_level_char_next_index37\
    \ = 0;\n    let mut paren_level_char_next_index38 = 0;\n    let mut paren_level_char_next_index39\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_432qq3y.rs:51:11\n   |\n\
    51 |     let mu\n   |           ^ help: add `;` here\n52 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_432qq3y.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices().rev();\n \
    \   let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph72jesj9.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1vsl_wle.rs:37:38\n   |\n\
    37 |     let mut paren_levels_stack_bottom\n   |                             \
    \         ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1vsl_wle.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp814fjvo_.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp814fjvo_.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = String::new();\n    let mut paren_level_chars_len\
    \ = paren_level_chars.len();\n    let mut paren_level_chars_pos = 0;\n    let\
    \ mut paren_level_chars_end = paren_level_chars_len;\n    let mut paren_level_chars_start\
    \ = paren_level_chars_len;\n    let mut paren_level_chars_end_pos = 0;\n    let\
    \ mut paren_level_chars_start_pos = 0;\n    let mut paren_level_chars_end_pos_end\
    \ = paren_level_chars_len;\n    let mut paren_level_chars_start_pos_end = paren_level_chars_len;\n\
    \    let mut paren_level_chars_start_pos_start = paren_level_chars_len;\n    let\
    \ mut paren_level_chars_start_pos_end = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_start\
    \ = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_start = paren_level_chars_len;\n\
    \    let mut paren_level_chars_end_pos_end = paren_level_chars_len;\n    let mut\
    \ paren_level_chars_end_pos_start = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_end\
    \ = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_start = paren_level_chars_len;\n\
    \    let mut paren_level_chars_end_pos_end = paren_level_chars_len;\n    let mut\
    \ paren_level_chars_end_pos_start = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_end\
    \ = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_start = paren_level_chars_len;\n\
    \    let mut paren_level_chars_end_pos_end = paren_level_chars_len;\n    let mut\
    \ paren_level_chars_end_pos_start = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_end\
    \ = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_start = paren_level_chars_len;\n\
    \    let mut paren_level_chars_end_pos_end = paren_level_chars_len;\n    let mut\
    \ paren_level_chars_end_pos_start = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_end\
    \ = paren_level_chars_len;\n    let mut paren_level_chars_end_pos_start = paren_level_chars_len;\n\
    \    let mut paren_level_chars_end_pos_end = paren_level_chars_len;\n    let mut\
    \ paren_level_chars_end_pos_start = paren_level_chars_len;\n\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0ekqes1f.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    while paren_level_count <\
    \ paren_level {\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        while paren_level_count < paren_level\
    \ {\n            let mut paren_level_string = paren_string;\n            let mut\
    \ paren_level_string = paren_string;\n            while paren_level_count < paren_level\
    \ {\n                let mut paren_level_string = paren_string;\n            \
    \    let mut paren_level_string = paren_string;\n                while paren_level_count\
    \ < paren_level {\n                    let mut paren_level_string = paren_string;\n\
    \                    let mut paren_level_string = paren_string;\n            \
    \        while paren_level_count < paren_level {\n                        let\
    \ mut paren_level_string = paren_string;\n                        let mut paren_level_string\
    \ = paren_string;\n                        while paren_level_count < paren_level\
    \ {\n                            let mut paren_level_string = paren_string;\n\
    \                            let mut paren_level_string = paren_string;\n    \
    \                        while paren_level_count < paren_level {\n           \
    \                     let mut paren_level_string = paren_string;\n           \
    \                     let mut paren_level_string = paren_string;\n           \
    \                     while paren_level_count < paren_level {\n              \
    \                      let mut paren_level_string = paren_string;\n          \
    \                          let mut paren_level_string = paren_string;\n      \
    \                              while paren_level_count < paren_level {\n     \
    \                                   let mut paren_level_string = paren_string;\n\
    \                                        let mut paren_level_string = paren_string;\n\
    \                                        while paren_level_count < paren_level\
    \ {\n                                            let mut paren_level_string =\
    \ paren_string;\n                                            let mut paren_level_string\
    \ = paren_string;\n                                            while paren_level_count\
    \ < paren_level {\n                                                let mut paren_level_string\
    \ = paren_string;\n                                                let mut paren_level_string\
    \ = paren_string;\n                                            }\n           \
    \                             }\n                                    }\n     \
    \                           }\n                            }\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        paren_level_count = paren_level;\n        paren_level += 1;\n   \
    \ }\n    paren_levels\n\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `paren_level_string`\n  --> /tmp/tmprb0ubcnk.rs:10:13\n\
    \   |\n10 |     let mut paren_level_string = paren_string;\n   |             ^^^^^^^^^^^^^^^^^^\
    \ help: if this is intentional, prefix it with an underscore: `_paren_level_string`\n\
    \   |\n   = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused\
    \ variable: `paren_level_string`\n  --> /tmp/tmprb0ubcnk.rs:11:13\n   |\n11 |\
    \     let mut paren_level_string = paren_string;\n   |             ^^^^^^^^^^^^^^^^^^\
    \ help: if this is intentional, prefix it with an underscore: `_paren_level_string`\n\
    \nwarning: unused variable: `paren_level_string`\n  --> /tmp/tmprb0ubcnk.rs:13:17\n\
    \   |\n13 |         let mut paren_level_string = paren_string;\n   |         \
    \        ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_paren_level_string`\n\nwarning: unused variable: `paren_level_string`\n  -->\
    \ /tmp/tmprb0ubcnk.rs:14:17\n   |\n14 |         let mut paren_level_string = paren_string;\n\
    \   |                 ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix\
    \ it with an underscore: `_paren_level_string`\n\nwarning: unused variable: `paren_level_string`\n\
    \  --> /tmp/tmprb0ubcnk.rs:16:21\n   |\n16 |             let mut paren_level_string\
    \ = paren_string;\n   |                     ^^^^^^^^^^^^^^^^^^ help: if this is\
    \ intentional, prefix it with an underscore: `_paren_level_string`\n\nwarning:\
    \ unused variable: `paren_level_string`\n  --> /tmp/tmprb0ubcnk.rs:17:21\n   |\n\
    17 |             let mut paren_level_string = paren_string;\n   |            \
    \         ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_paren_level_string`\n\nwarning: unused variable: `paren_level_string`\n  -->\
    \ /tmp/tmprb0ubcnk.rs:19:25\n   |\n19 |                 let mut paren_level_string\
    \ = paren_string;\n   |                         ^^^^^^^^^^^^^^^^^^ help: if this\
    \ is intentional, prefix it with an underscore: `_paren_level_string`\n\nwarning:\
    \ unused variable: `paren_level_string`\n  --> /tmp/tmprb0ubcnk.rs:20:25\n   |\n\
    20 |                 let mut paren_level_string ="
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_levels =\
    \ Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end = Vec::new();\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp01wi6chr.rs:28:58\n   |\n\
    28 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n   |         \
    \                                                 ^ help: add `;` here\n29 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp01wi6chr.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    for paren in paren_string.chars() {\n        if\
    \ paren == '(' {\n            paren_stack.push(paren_level);\n            paren_level\
    \ += 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n   \
    \         if paren_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0]`,\n right: `[2, 3, 1, 3]`',\
    \ /tmp/tmp08pzay7w.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr = 0;\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_last_ptr = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_last_ptr_prev = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_last_ptr_next = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx7acy3z4.rs:29:109\n   |\n\
    29 |     let mut paren_levels_stack_last_ptr_next_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_level\n   |                                                        \
    \                                                     ^ help: add `;` here\n30\
    \ | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpx7acy3z4.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphe0bdk9l.rs:35:27\n   |\n\
    35 |     let mut paren_nesting_\n   |                           ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmphe0bdk9l.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n  |    -------------------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nesting_levels\
    \ = Vec::new();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_nesting_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_end = paren_levels_iter.next();\n    let mut paren_nesting_levels_end\
    \ = paren_nesting_levels_iter.next();\n    let mut paren_levels_end_index = paren_levels_end.unwrap();\n\
    \    let mut paren_nesting_levels_end_index = paren_nesting_levels_end.unwrap();\n\
    \    let mut paren_levels_end_chars = paren_levels_end.unwrap();\n    let mut\
    \ paren_nesting_levels_end_chars = paren_nesting_levels_end.unwrap();\n    let\
    \ mut paren_levels_end_chars_index = paren_levels_end_chars.unwrap();\n    let\
    \ mut paren_nesting_levels_end_chars_index = paren_nesting_levels_end_chars.unwrap();\n\
    \    let mut paren_levels_end_chars_value = paren_levels_end_chars_index as char;\n\
    \    let mut paren_nesting_levels_end_chars_value = paren_nesting_levels_end_chars_index\
    \ as char;\n    let mut paren_levels_end_chars_value_index = paren_levels_end_chars_value\
    \ as usize;\n    let mut paren_nesting_levels_end_chars_value_index = paren_nesting_levels_end_chars_value\
    \ as usize;\n    let mut paren_levels_end_chars_value_value = paren_levels_end_chars_value_index\
    \ as usize;\n    let mut paren_nesting_levels_end_chars_value_value = paren_nesting_levels_end_chars_value_index\
    \ as usize;\n    let mut paren_levels_end_chars_value_value_index = paren_levels_end_chars_value_value\
    \ as usize;\n    let mut paren_nesting_levels_end_chars_value_value_index = paren_nesting_levels_end_chars_value_value\
    \ as usize;\n    let mut paren_levels_end_chars_value_value_value = paren_levels_end_chars_value_value_index\
    \ as usize;\n    let mut paren_nesting_levels_end_chars_value_value_value = paren_nesting_levels_end_chars_value_value_index\
    \ as usize;\n    let mut paren_levels_end_chars_value_value_value_index = paren_levels_end_chars_value_value_value\
    \ as usize;\n    let mut paren_nesting_levels_end_\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvzczexo4.rs:32:38\n   |\n\
    32 |     let mut paren_nesting_levels_end_\n   |                             \
    \         ^ help: add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0599]:\
    \ no method named `unwrap` found for tuple `(usize, char)` in the current scope\n\
    \  --> /tmp/tmpvzczexo4.rs:19:67\n   |\n19 |     let mut paren_levels_end_chars_index\
    \ = paren_levels_end_chars.unwrap();\n   |                                   \
    \                                ^^^^^^ method not found in `(usize, char)`\n\n\
    error[E0599]: no method named `unwrap` found for tuple `(usize, char)` in the\
    \ current scope\n  --> /tmp/tmpvzczexo4.rs:20:83\n   |\n20 |     let mut paren_nesting_levels_end_chars_index\
    \ = paren_nesting_levels_end_chars.unwrap();\n   |                           \
    \                                                        ^^^^^^ method not found\
    \ in `(usize, char)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvzczexo4.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7n0p_a6v.rs:41:18\n   |\n\
    41 |     let mut paren\n   |                  ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7n0p_a6v.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars\
    \ = paren_string.chars();\n    let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_iter = paren\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnzo9inin.rs:38:43\n   |\n\
    38 |     let mut paren_level_chars_iter = paren\n   |                        \
    \                   ^ help: add `;` here\n39 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmpnzo9inin.rs:38:38\n\
    \   |\n38 |     let mut paren_level_chars_iter = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `iter` found for struct `Chars` in the current scope\n  --> /tmp/tmpnzo9inin.rs:11:56\n\
    \   |\n11 |     let mut paren_level_chars_iter = paren_level_chars.iter();\n \
    \  |                                                        ^^^^ private field,\
    \ not a method\n\nerror[E0599]: no method named `iter` found for struct `Chars`\
    \ in the current scope\n  --> /tmp/tmpnzo9inin.rs:12:56\n   |\n12 |     let mut\
    \ paren_level_chars_iter = paren_level_chars.iter();\n   |                   \
    \                                     ^^^^ private field, not a method\n\nerror[E0599]:\
    \ no method named `iter` found for struct `Chars` in the current scope\n  -->\
    \ /tmp/tmpnzo9inin.rs:13:56\n   |\n13 |     let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \   |                                                        ^^^^ private field,\
    \ not a method\n\nerror[E0599]: no method named `iter` found for struct `Chars`\
    \ in the current scope\n  --> /tmp/tmpnzo9inin.rs:14:56\n   |\n14 |     let mut\
    \ paren_level_chars_iter = paren_level_chars.iter();\n   |                   \
    \                                     ^^^^ private field, not a method\n\nerror[E0599]:\
    \ no method named `iter` found for struct `Chars` in the current scope\n  -->\
    \ /tmp/tmpnzo9inin.rs:15:56\n   |\n15 |     let mut paren_level_chars_iter = paren_level_chars.iter();\n\
    \   |                                                        ^^^^ private field,\
    \ not a method\n\nerror[E0599]: no method named `iter` found for struct `Chars`\
    \ in the current scope\n  --> /tmp/tmpnzo9inin.rs:16:56\n   |\n16 |     let mut\
    \ paren_level_chars_iter = paren_level_chars.iter();\n   |                  "
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmputl38pnt.rs:37:59\n   |\n\
    37 |     let mut paren_levels_stack_bottom = paren_levels_stack\n   |        \
    \                                                   ^ help: add `;` here\n38 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmputl38pnt.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_level_stack = vec![0];\n    let mut paren_level_stack_pos\
    \ = 0;\n    let mut paren_level_stack_size = paren_level_stack.len();\n    let\
    \ mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n   \
    \ let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mu\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqm6rg0pl.rs:57:11\n   |\n\
    57 |     let mu\n   |           ^ help: add `;` here\n58 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqm6rg0pl.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0nvyjzd1.rs:29:53\n   |\n\
    29 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr\n   |              \
    \                                       ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0nvyjzd1.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_nesting =\
    \ 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_len = 0;\n\
    \    let mut paren_levels_len2 = 0;\n    let mut paren_levels_len3 = 0;\n    let\
    \ mut paren_levels_len4 = 0;\n    let mut paren_levels_len5 = 0;\n    let mut\
    \ paren_levels_len6 = 0;\n    let mut paren_levels_len7 = 0;\n    let mut paren_levels_len8\
    \ = 0;\n    let mut paren_levels_len9 = 0;\n    let mut paren_levels_len10 = 0;\n\
    \    let mut paren_levels_len11 = 0;\n    let mut paren_levels_len12 = 0;\n  \
    \  let mut paren_levels_len13 = 0;\n    let mut paren_levels_len14 = 0;\n    let\
    \ mut paren_levels_len15 = 0;\n    let mut paren_levels_len16 = 0;\n    let mut\
    \ paren_levels_len17 = 0;\n    let mut paren_levels_len18 = 0;\n    let mut paren_levels_len19\
    \ = 0;\n    let mut paren_levels_len20 = 0;\n    let mut paren_levels_len21 =\
    \ 0;\n    let mut paren_levels_len22 = 0;\n    let mut paren_levels_len23 = 0;\n\
    \    let mut paren_levels_len24 = 0;\n    let mut paren_levels_len25 = 0;\n  \
    \  let mut paren_levels_len26 = 0;\n    let mut paren_levels_len27 = 0;\n    let\
    \ mut paren_levels_len28 = 0;\n    let mut paren_levels_len29 = 0;\n    let mut\
    \ paren_levels_len30 = 0;\n    let mut paren_levels_len31 = 0;\n    let mut paren_levels_len32\
    \ = 0;\n    let mut paren_levels_len33 = 0;\n    let mut paren_levels_len34 =\
    \ 0;\n    let mut paren_levels_len35 = 0;\n    let mut paren_levels_len36 = 0;\n\
    \    let mut paren_levels_len37 = 0;\n    let mut paren_levels_len38 = 0;\n  \
    \  let mut paren_levels_len39 = 0;\n    let mut paren_levels_len40 = 0;\n    let\
    \ mut paren_levels_len41 = 1;\n    let mut paren_levels_len42 = 1;\n    let mut\
    \ paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvq1tkx0k.rs:54:24\n   |\n\
    54 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvq1tkx0k.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_len;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpv_f4o8hh.rs:37:60\n   |\n\
    37 |     let mut paren_levels_stack_top = paren_levels_stack_ptr\n   |       \
    \                                                     ^ help: add `;` here\n38\
    \ | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpv_f4o8hh.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpct_zclhk.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpct_zclhk.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    for paren in paren_string.chars() {\n        if\
    \ paren == '(' {\n            paren_stack.push(paren_level);\n            paren_level\
    \ += 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n   \
    \         if paren_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0]`,\n right: `[2, 3, 1, 3]`',\
    \ /tmp/tmp08pzay7w.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_level_stack\
    \ = Vec::new();\n    let mut paren_level_stack_size = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = paren_level_stack.len();\n    let mut paren_level_stack_pos\
    \ = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos\
    \ + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let\
    \ mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos\
    \ = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos\
    \ + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let\
    \ mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos\
    \ = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos\
    \ + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let\
    \ mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos\
    \ = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos\
    \ + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let\
    \ mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos\
    \ = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos\
    \ + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let\
    \ mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos\
    \ = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos\
    \ + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let\
    \ mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos\
    \ = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos\
    \ + 1;\n    let mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let\
    \ mut paren_level_stack_pos = paren_level_stack_pos + 1;\n    let mut paren_level_stack_pos\
    \ = paren_level_stack_pos + 1;\n    let mut paren_level_stack_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpyns0b799.rs:42:31\n   |\n\
    42 |     let mut paren_level_stack_\n   |                               ^ help:\
    \ add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpyns0b799.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_stack\
    \ = Vec::new();\n    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len\
    \ = paren_level_stack.len();\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqo9h3fn0.rs:43:43\n   |\n\
    43 |     let mut paren_level_stack_top = paren_\n   |                        \
    \                   ^ help: add `;` here\n44 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren_` in this scope\n  --> /tmp/tmpqo9h3fn0.rs:43:37\n\
    \   |\n43 |     let mut paren_level_stack_top = paren_\n   |                 \
    \                    ^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqo9h3fn0.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_stack = vec![];\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoioaswg7.rs:43:55\n   |\n\
    43 |     let mut paren_level_stack_top = paren_level_stack_\n   |            \
    \                                           ^ help: add `;` here\n44 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `paren_level_stack_` in\
    \ this scope\n  --> /tmp/tmpoioaswg7.rs:43:37\n   |\n43 |     let mut paren_level_stack_top\
    \ = paren_level_stack_\n   |                                     ^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_level_stack`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpoioaswg7.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == '(' {\n            paren_stack.push(paren_level);\n      \
    \      paren_level += 1;\n        } else if paren == ')' {\n            paren_level\
    \ -= 1;\n            if paren_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 0]`,\n right: `[2, 3, 1, 3]`',\
    \ /tmp/tmpocam_ou0.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_levels = Vec::new();\n    let mut paren_levels_len = 0;\n \
    \   let mut paren_levels_lens = Vec::new();\n    let mut paren_levels_lens_len\
    \ = 0;\n    let mut paren_levels_lens_lens = Vec::new();\n    let mut paren_levels_lens_lens_len\
    \ = 0;\n    let mut paren_levels_lens_lens_lens = Vec::new();\n    let mut paren_levels_lens_lens_lens_len\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens = Vec::new();\n    let mut\
    \ paren_levels_lens_lens_lens_lens_len = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_len = 0;\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens = Vec::new();\n    let\
    \ mut paren_levels_lens_lens_lens_lens_lens_lens_len = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens\
    \ = Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = Vec::new();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0;\n \
    \   let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = Vec::new();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0;\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens =\
    \ Vec::new();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = Vec::new();\n    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmparlgaxo2.rs:32:11\n   |\n\
    32 |     let mu\n   |           ^ help: add `;` here\n33 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmparlgaxo2.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max = paren_levels_stack_size;\n    let mut paren_levels_stack_max_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_max_val_pos = paren_levels_stack_size;\n    let\
    \ mut paren_levels_stack_max_val_val = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val =\
    \ paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val_val\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val_val_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val_val_val\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val_val_val_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val_val_val_val\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val_val_val_val_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val_val_val_val_val\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_val_val_val_val_val_val_pos\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_max_val_val_val_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6vv34qjm.rs:32:48\n   |\n\
    32 |     let mut paren_levels_stack_max_val_val_val_\n   |                   \
    \                             ^ help: add `;` here\n33 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6vv34qjm.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxz_ulkpw.rs:42:11\n   |\n\
    42 |     let mu\n   |           ^ help: add `;` here\n43 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpxz_ulkpw.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpheu_cs93.rs:37:61\n   |\n\
    37 |     let mut paren_levels_stack_top = paren_levels_stack_size\n   |      \
    \                                                       ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpheu_cs93.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_stack = vec![];\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4xwz0mnx.rs:43:55\n   |\n\
    43 |     let mut paren_level_stack_top = paren_level_stack_\n   |            \
    \                                           ^ help: add `;` here\n44 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `paren_level_stack_` in\
    \ this scope\n  --> /tmp/tmp4xwz0mnx.rs:43:37\n   |\n43 |     let mut paren_level_stack_top\
    \ = paren_level_stack_\n   |                                     ^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_level_stack`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp4xwz0mnx.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5ywyr1ua.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp5ywyr1ua.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsuqp33sm.rs:50:18\n   |\n\
    50 |     let mut paren\n   |                  ^ help: add `;` here\n51 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsuqp33sm.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr = 0;\n    let mut paren_levels_stack_ptr_max = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_max_ptr = paren_levels_stack_ptr_max.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max = paren_levels_stack_ptr_max_ptr.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr = paren_levels_stack_ptr_max_ptr_max_ptr.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max = paren_levels_stack_ptr_max_ptr_max_ptr_max.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr = paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max = paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr = paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max = paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr =\
    \ paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr.as_ptr();\n \
    \   let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplydna7az.rs:22:153\n   |\n\
    22 |     let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_\n   |    \
    \                                                                            \
    \                                                                         ^ help:\
    \ add `;` here\n23 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `paren_levels_stack_ptr_max_ptr_max_ptr` in this scope\n  --> /tmp/tmplydna7az.rs:14:54\n\
    \   |\n14 |     let mut paren_levels_stack_ptr_max_ptr_max_ptr = paren_levels_stack_ptr_max_ptr_max_ptr.as_ptr();\n\
    \   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_max_ptr_max`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_max_ptr_max_ptr_max`\
    \ in this scope\n  --> /tmp/tmplydna7az.rs:15:58\n   |\n15 |     let mut paren_levels_stack_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_stack_ptr_max_ptr_max_ptr_max.as_ptr();\n   |               \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_max_ptr_max_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr`\
    \ in this scope\n  --> /tmp/tmplydna7az.rs:16:62\n   |\n16 |     let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr\
    \ = paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr.as_ptr();\n   |           \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_max_ptr_max_ptr_max`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max`\
    \ in this scope\n  --> /tmp/tmplydna7az.rs:17:66\n   |\n17 |     let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max.as_ptr();\n   |       \
    \          "
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp814fjvo_.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp814fjvo_.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_ptr = 0;\n    let mut paren_levels_ptr\
    \ = 0;\n    let mut paren_levels_ptr_end = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr = paren_levels_ptr;\n    let mut\
    \ paren_levels_ptr_end_ptr_end_ptr_end = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcnuw2isv.rs:27:37\n   |\n\
    27 |     let mut paren_levels_ptr_end_ptr\n   |                              \
    \       ^ help: add `;` here\n28 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpcnuw2isv.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels = vec![];\n    for paren in paren_string.chars()\
    \ {\n        if paren == '(' {\n            paren_stack.push(paren_level);\n \
    \           paren_level += 1;\n            paren_levels.push(paren_level);\n \
    \       } else if paren == ')' {\n            paren_level -= 1;\n            if\
    \ paren_level == 0 {\n                paren_levels.push(paren_level);\n      \
    \      }\n        }\n    }\n    paren_levels\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 2, 2, 0]`,\n right: `[2, 3, 1, 3]`',\
    \ /tmp/tmpkaxacg47.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzglp4sb0.rs:50:11\n   |\n\
    50 |     let mu\n   |           ^ help: add `;` here\n51 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzglp4sb0.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string_index = 0;\n    while paren_level_string_index\
    \ < paren_string.len() {\n        let mut paren_level_string = paren_string;\n\
    \        let mut paren_level_string_index = 0;\n        while paren_level_string_index\
    \ < paren_string.len() {\n            let mut paren_level_string = paren_string;\n\
    \            let mut paren_level_string_index = 0;\n            while paren_level_string_index\
    \ < paren_string.len() {\n                let mut paren_level_string = paren_string;\n\
    \                let mut paren_level_string_index = 0;\n                while\
    \ paren_level_string_index < paren_string.len() {\n                    let mut\
    \ paren_level_string = paren_string;\n                    let mut paren_level_string_index\
    \ = 0;\n                    while paren_level_string_index < paren_string.len()\
    \ {\n                        let mut paren_level_string = paren_string;\n    \
    \                    let mut paren_level_string_index = 0;\n                 \
    \       while paren_level_string_index < paren_string.len() {\n              \
    \              let mut paren_level_string = paren_string;\n                  \
    \          let mut paren_level_string_index = 0;\n                           \
    \ while paren_level_string_index < paren_string.len() {\n                    \
    \            let mut paren_level_string = paren_string;\n                    \
    \            let mut paren_level_string_index = 0;\n                         \
    \       while paren_level_string_index < paren_string.len() {\n              \
    \                      let mut paren_level_string = paren_string;\n          \
    \                          let mut paren_level_string_index = 0;\n           \
    \                         while paren_level_string_index < paren_string.len()\
    \ {\n                                        let mut paren_level_string = paren_string;\n\
    \                                        let mut paren_level_string_index = 0;\n\
    \                                        while paren_level_string_index < paren_string.len()\
    \ {\n                                            let mut paren_level_string =\
    \ paren_string;\n                                            let mut paren_level_string_index\
    \ = 0;\n                                            if paren_level_string == \"\
    (\" || paren_level_string == \"{\" || paren_level_string == \"[\"\n          \
    \                                      || paren_level_string == \"(()\" || paren_level_string\
    \ == \"(()()\"\n                                                || paren_level_string\
    \ == \"(()()()\" || paren_level_string == \"(()()()()\"\n                    \
    \                            || paren_level_string == \"(()()()()()\" || paren_level_string\
    \ == \"(()()()\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n \
    \   assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp31eph6pd.rs:52:54\n\
    \   |\n52 |       assert_eq!(candidate(String::from(\"(()(())((())))\")), vec![4]);\n\
    \   |  ______________________________________________________^\n53 | | }\n   |\
    \ |__^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: isize = 0;\n    let mut paren_level: isize = 0;\n    let\
    \ mut paren_levels: Vec<isize> = vec![];\n    let mut paren_levels_len: isize\
    \ = 0;\n    let mut paren_levels_lens: Vec<isize> = vec![];\n    let mut paren_levels_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens: Vec<isize> = vec![];\n    let\
    \ mut paren_levels_lens_lens_len: isize = 0;\n    let mut paren_levels_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_len: isize = 0;\n\
    \    let mut paren_levels_lens_lens_lens_lens: Vec<isize> = vec![];\n    let mut\
    \ paren_levels_lens_lens_lens_lens_len: isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: isize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len: isize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpj06gsg3i.rs:24:464\n   |\n\
    24 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            ^ help: add `;` here\n25 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpj06gsg3i.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_max\
    \ = 0;\n    let mut paren_level_max_count = 0;\n    let mut paren_level_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_count = 0;\n    let mut paren_level_max_depth_max\
    \ = 0;\n    let mut paren_level_max_depth_max_count = 0;\n    let mut paren_level_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_count = 0;\n    let mut paren_level_max_depth_max_depth_max\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_count = 0;\n    let mut\
    \ paren_level_max_depth_max_depth_max_depth = 0;\n    let mut paren_level_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth = 0;\n    let mut\
    \ paren_level_max_depth_max_depth_max_depth_count = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_count = 0;\n\
    \    let mut paren_level_max_depth_max_depth_max_depth_max_depth = 0;\n    let\
    \ mut paren_level_max_depth_max_depth_max_depth_max_count = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max =\
    \ 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjhqmtbtc.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_chars_index = 0;\n    let mut paren_level_chars_index2\
    \ = 0;\n    let mut paren_level_chars_index3 = 0;\n    let mut paren_level_chars_index4\
    \ = 0;\n    let mut paren_level_chars_index5 = 0;\n    let mut paren_level_chars_index6\
    \ = 0;\n    let mut paren_level_chars_index7 = 0;\n    let mut paren_level_chars_index8\
    \ = 0;\n    let mut paren_level_chars_index9 = 0;\n    let mut paren_level_chars_index10\
    \ = 0;\n    let mut paren_level_chars_index11 = 0;\n    let mut paren_level_chars_index12\
    \ = 0;\n    let mut paren_level_chars_index13 = 0;\n    let mut paren_level_chars_index14\
    \ = 0;\n    let mut paren_level_chars_index15 = 0;\n    let mut paren_level_chars_index16\
    \ = 0;\n    let mut paren_level_chars_index17 = 0;\n    let mut paren_level_chars_index18\
    \ = 0;\n    let mut paren_level_chars_index19 = 0;\n    let mut paren_level_chars_index20\
    \ = 0;\n    let mut paren_level_chars_index21 = 0;\n    let mut paren_level_chars_index22\
    \ = 0;\n    let mut paren_level_chars_index23 = 0;\n    let mut paren_level_chars_index24\
    \ = 0;\n    let mut paren_level_chars_index25 = 0;\n    let mut paren_level_chars_index26\
    \ = 0;\n    let mut paren_level_chars_index27 = 0;\n    let mut paren_level_chars_index28\
    \ = 0;\n    let mut paren_level_chars_index29 = 0;\n    let mut paren_level_chars_index30\
    \ = 0;\n    let mut paren_level_chars_index31 = 0;\n    let mut paren_level_chars_index32\
    \ = 0;\n    let mut paren_level_chars_index33 = 0;\n    let mut paren_level_chars_index34\
    \ = 0;\n    let mut paren_level_chars_index35 = 0;\n    let mut paren_level_chars_index36\
    \ = 0;\n    let mut paren_level_chars_index37 = 0;\n    let mut paren_level_chars_index38\
    \ = 0;\n    let mut paren_level_chars_index39 = 0;\n    let mut paren_level_chars_index40\
    \ = 0;\n    let mut paren_level_chars_index41 = 0;\n    let mut paren_level_chars_index42\
    \ = 0;\n    let mut paren_level_chars_index43 = 0;\n    let mut paren\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq1j3dq8d.rs:54:18\n   |\n\
    54 |     let mut paren\n   |                  ^ help: add `;` here\n55 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpq1j3dq8d.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_max_count\
    \ = 0;\n    let mut paren_level_max_count_index = 0;\n    let mut paren_level_max_count_index2\
    \ = 0;\n    let mut paren_level_max_count_index3 = 0;\n    let mut paren_level_max_count_index4\
    \ = 0;\n    let mut paren_level_max_count_index5 = 0;\n    let mut paren_level_max_count_index6\
    \ = 0;\n    let mut paren_level_max_count_index7 = 0;\n    let mut paren_level_max_count_index8\
    \ = 0;\n    let mut paren_level_max_count_index9 = 0;\n    let mut paren_level_max_count_index10\
    \ = 0;\n    let mut paren_level_max_count_index11 = 0;\n    let mut paren_level_max_count_index12\
    \ = 0;\n    let mut paren_level_max_count_index13 = 0;\n    let mut paren_level_max_count_index14\
    \ = 0;\n    let mut paren_level_max_count_index15 = 0;\n    let mut paren_level_max_count_index16\
    \ = 0;\n    let mut paren_level_max_count_index17 = 0;\n    let mut paren_level_max_count_index18\
    \ = 0;\n    let mut paren_level_max_count_index19 = 0;\n    let mut paren_level_max_count_index20\
    \ = 0;\n    let mut paren_level_max_count_index21 = 0;\n    let mut paren_level_max_count_index22\
    \ = 0;\n    let mut paren_level_max_count_index23 = 0;\n    let mut paren_level_max_count_index24\
    \ = 0;\n    let mut paren_level_max_count_index25 = 0;\n    let mut paren_level_max_count_index26\
    \ = 0;\n    let mut paren_level_max_count_index27 = 0;\n    let mut paren_level_max_count_index28\
    \ = 0;\n    let mut paren_level_max_count_index29 = 0;\n    let mut paren_level_max_count_index30\
    \ = 0;\n    let mut paren_level_max_count_index31 = 0;\n    let mut paren_level_max_count_index32\
    \ = 0;\n    let mut paren_level_max_count_index33 = 0;\n    let mut paren_level_max_count_index34\
    \ = 0;\n    let mut paren_level_max_count_index35 = 0;\n    let mut paren_level_max_count_index36\
    \ = 0;\n    let mut paren_level_max_count_index37 = 0;\n    let mut paren_level_max_count_index38\
    \ = 0;\n    let mut paren_level_max_count_index39 = 0;\n    let mut paren_level_max_count_index40\
    \ = 0;\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps98jidi6.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_chars.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_chars.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq4qd9ibs.rs:47:30\n   |\n\
    47 |     let mut paren_level_char_\n   |                              ^ help:\
    \ add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpq4qd9ibs.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_nesting =\
    \ 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_len = paren_stack.len();\n\
    \    let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_len = paren_stack.len();\n  \
    \  let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppuwr1kuh.rs:45:11\n   |\n\
    45 |     let mu\n   |           ^ help: add `;` here\n46 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmppuwr1kuh.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: isize = 0;\n    let mut paren_level: isize = 0;\n    for\
    \ paren in paren_string.chars() {\n        if paren == ')' {\n            paren_stack.pop();\n\
    \            if paren_stack.len() == 0 {\n                paren_depth += 1;\n\
    \            }\n        }\n        if paren == '(' {\n            paren_stack.push(paren_depth);\n\
    \            paren_depth += 1;\n        }\n        if paren == ' ' {\n       \
    \     paren_level += 1;\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2, 3, 1, 3]`', /tmp/tmpa3l0kjyz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnyni07s3.rs:37:32\n   |\n\
    37 |     let mut paren_levels_stack_\n   |                                ^ help:\
    \ add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpnyni07s3.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_chars.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_chars.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq4qd9ibs.rs:47:30\n   |\n\
    47 |     let mut paren_level_char_\n   |                              ^ help:\
    \ add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpq4qd9ibs.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_stack: Vec<isize> = vec![];\n\
    \    let mut paren_levels_stack_ptr = 0;\n    let mut paren_levels_ptr = 0;\n\
    \    let mut paren_levels_ptr_stack = 0;\n    let mut paren_levels_ptr_stack_end\
    \ = 0;\n    let mut paren_levels_ptr_stack_start = 0;\n    let mut paren_levels_ptr_stack_start_end\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_end = 0;\n    let mut paren_levels_ptr_stack_start_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_end = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_end = 0;\n    let mut\
    \ paren_levels_ptr_stack_start_ptr_start_ptr = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_end\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start = 0;\n  \
    \  let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_end = 0;\n    let\
    \ mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr_end\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr_start\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr_start_end\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr_start_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr_start_ptr_end\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr_start_ptr_start\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr_start_ptr_start_end\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr_start_ptr_start_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_start_ptr_start_ptr_start_ptr_start_ptr_start_ptr_end\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpgx8hg4p3.rs:36:1\n\
    \   |\n36 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nestings_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_end = paren_levels_iter.next();\n\
    \    let mut paren_nestings_end = paren_nestings_iter.next();\n    while paren_levels_end.unwrap()\
    \ != None && paren_nestings_end.unwrap() != None {\n        if paren_levels_end.unwrap().unwrap()\
    \ == paren_nestings_end.unwrap().unwrap() {\n            paren_levels.push(paren_level);\n\
    \            paren_nestings.push(paren_nesting);\n            paren_levels_iter.next();\n\
    \            paren_nestings_iter.next();\n            paren_level += 1;\n    \
    \        paren_nesting += 1;\n        } else {\n            paren_level += 1;\n\
    \            paren_nesting += 1;\n        }\n        paren_levels_end = paren_levels_iter.next();\n\
    \        paren_nestings_end = paren_nestings_iter.next();\n    }\n    if paren_levels_end.unwrap()\
    \ != None {\n        paren_levels.push(paren_level);\n        paren_nestings.push(paren_nesting);\n\
    \    }\n    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz3o6mdqk.rs:15:40\n   |\n\
    15 |     while paren_levels_end.unwrap() != None && paren_nestings_end.unwrap()\
    \ != None {\n   |                                        ^^^^ expected tuple,\
    \ found enum `Option`\n   |\n   = note: expected tuple `(usize, char)`\n     \
    \          found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz3o6mdqk.rs:15:79\n\
    \   |\n15 |     while paren_levels_end.unwrap() != None && paren_nestings_end.unwrap()\
    \ != None {\n   |                                                            \
    \                   ^^^^ expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(usize, char)`\n               found enum `Option<_>`\n\nerror[E0599]:\
    \ no method named `unwrap` found for tuple `(usize, char)` in the current scope\n\
    \  --> /tmp/tmpz3o6mdqk.rs:16:38\n   |\n16 |         if paren_levels_end.unwrap().unwrap()\
    \ == paren_nestings_end.unwrap().unwrap() {\n   |                            \
    \          ^^^^^^ method not found in `(usize, char)`\n\nerror[E0599]: no method\
    \ named `unwrap` found for tuple `(usize, char)` in the current scope\n  --> /tmp/tmpz3o6mdqk.rs:16:78\n\
    \   |\n16 |         if paren_levels_end.unwrap().unwrap() == paren_nestings_end.unwrap().unwrap()\
    \ {\n   |                                                                    \
    \          ^^^^^^ method not found in `(usize, char)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz3o6mdqk.rs:30:37\n   |\n30 |     if paren_levels_end.unwrap()\
    \ != None {\n   |                                     ^^^^ expected tuple, found\
    \ enum `Option`\n   |\n   = note: expected tuple `(usize, char)`\n           \
    \    found enum `Option<_>`\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3aiekzl4.rs:37:19\n   |\n\
    37 |     let mut paren_\n   |                   ^ help: add `;` here\n38 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3aiekzl4.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqwrlbui5.rs:37:52\n   |\n\
    37 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqwrlbui5.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices().rev();\n \
    \   let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph72jesj9.rs:6:49\n  |\n6 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_levels = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr = Vec::new();\n  \
    \  let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n  \
    \  let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfr8m7hog.rs:30:99\n   |\n\
    30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \                           ^ help: add `;` here\n31 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpfr8m7hog.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_nestings_stack\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = 0;\n    let mut paren_nestings_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr = 0;\n    let mut paren_nestings_ptr = 0;\n\
    \    let mut paren_levels_ptr_next = 0;\n    let mut paren_nestings_ptr_next =\
    \ 0;\n    let mut paren_levels_ptr_next2 = 0;\n    let mut paren_nestings_ptr_next2\
    \ = 0;\n    let mut paren_levels_ptr_next3 = 0;\n    let mut paren_nestings_ptr_next3\
    \ = 0;\n    let mut paren_levels_ptr_next4 = 0;\n    let mut paren_nestings_ptr_next4\
    \ = 0;\n    let mut paren_levels_ptr_next5 = 0;\n    let mut paren_nestings_ptr_next5\
    \ = 0;\n    let mut paren_levels_ptr_next6 = 0;\n    let mut paren_nestings_ptr_next6\
    \ = 0;\n    let mut paren_levels_ptr_next7 = 0;\n    let mut paren_nestings_ptr_next7\
    \ = 0;\n    let mut paren_levels_ptr_next8 = 0;\n    let mut paren_nestings_ptr_next8\
    \ = 0;\n    let mut paren_levels_ptr_next9 = 0;\n    let mut paren_nestings_ptr_next9\
    \ = 0;\n    let mut paren_levels_ptr_next10 = 0;\n    let mut paren_nestings_ptr_next10\
    \ = 0;\n    let mut paren_levels_ptr_next11 = 0;\n    let mut paren_nestings_ptr_next11\
    \ = 0;\n    let mut paren_levels_ptr_next12 = 0;\n    let mut paren_nestings_ptr_next12\
    \ = 0;\n    let mut paren_levels_ptr_next13 = 0;\n    let mut paren_nestings_ptr_next13\
    \ = 0;\n    let mut paren_levels_ptr_next14 = 0;\n    let mut paren_nestings_ptr_next14\
    \ = 0;\n    let mut paren_levels_ptr_next15 = 0;\n    let mut paren_nestings_ptr_next15\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_bwmwoyz.rs:47:11\n   |\n\
    47 |     let mu\n   |           ^ help: add `;` here\n48 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_bwmwoyz.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.filter_map(|(_, index)| {\n      \
    \  if paren_levels_iter.peek().is_some() {\n            paren_levels_iter.next();\n\
    \            Some(paren_level + 1)\n        } else {\n            None\n     \
    \   }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(_,\
    \ index)| {\n        if paren_levels_iter.peek().is_some() {\n            paren_levels_iter.next();\n\
    \            Some(paren_level + 1)\n        } else {\n            None\n     \
    \   }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(_,\
    \ index)| {\n        if paren_levels_iter.peek().is_some() {\n            paren_levels_iter.next();\n\
    \            Some(paren_level + 1)\n        } else {\n            None\n     \
    \   }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(_,\
    \ index)| {\n        if paren_levels_iter.peek().is_some() {\n            paren_levels_iter.next();\n\
    \            Some(paren_level + 1)\n        } else {\n            None\n     \
    \   }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(_,\
    \ index)| {\n        if paren_levels_iter.peek().is_some() {\n            paren_levels_iter.next();\n\
    \            Some(paren_level + 1)\n        } else {\n            None\n     \
    \   }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(_,\
    \ index)| {\n        if paren_levels_iter.peek().is_some() {\n            paren_levels_iter.next();\n\
    \            Some(paren_level + 1)\n        } else {\n            None\n     \
    \   }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(_,\
    \ index)| {\n        if paren_levels_iter.peek().is_some() {\n            paren_levels_iter.next();\n\
    \            Some(paren_level + 1)\n        } else {\n            None\n     \
    \   }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(_,\
    \ index)| {\n        if paren_levels_iter.peek().is_some() {\n            paren_levels_iter.next();\n\
    \            Some(paren_level + 1)\n        } else {\n            None\n     \
    \   }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkmtfjtty.rs:74:58\n   |\n\
    74 |     let mut paren_levels_iter = paren_levels_iter.filter_\n   |         \
    \                                                 ^ help: add `;` here\n75 | }\n\
    \   | - unexpected token\n\nerror[E0599]: no method named `peek` found for struct\
    \ `CharIndices` in the current scope\n  --> /tmp/tmpkmtfjtty.rs:11:30\n   |\n\
    11 |         if paren_levels_iter.peek().is_some() {\n   |                   \
    \           ^^^^ method not found in `CharIndices<'_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkmtfjtty.rs:18:63\n   |\n18 |     let mut paren_levels_iter\
    \ = paren_levels_iter.filter_map(|(_, index)| {\n   |                        \
    \                                       ^^^^^^^^^-\n   |                     \
    \                                          |        |\n   |                  \
    \                                             |        expected due to this\n\
    \   |                                                               expected integer,\
    \ found tuple\n   |\n   = note: expected type `{integer}`\n             found\
    \ tuple `(_, _)`\n\nerror[E0599]: no method named `peek` found for struct `FilterMap`\
    \ in the current scope\n  --> /tmp/tmpkmtfjtty.rs:19:30\n   |\n19 |         if\
    \ paren_levels_iter.peek().is_some() {\n   |                              ^^^^\
    \ method not found in `FilterMap<CharIndices<'_>, [closure@/tmp/tmpkmtfjtty.rs:10:62:\
    \ 17:6]>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkmtfjtty.rs:26:63\n\
    \   |\n26 |     let mut paren_levels_iter = paren_levels_iter.filter_map(|(_,\
    \ index)| {\n   |                                                            \
    \   ^^^^^^^^^-\n   |                                                         \
    \      |        |\n   |                                                      \
    \         |        expected due to this\n   |                                \
    \                               expected integer, found tuple\n   |\n   = note:\
    \ expected type `{integer}`\n             found tuple `(_, _)`\n\nerror[E0599]:\
    \ no method named `peek` found for struct `FilterMap` in the current sco"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_level_count\
    \ = Vec::new();\n    let mut paren_level_count_index = 0;\n    let mut paren_level_count_index2\
    \ = 0;\n    let mut paren_level_count_index3 = 0;\n    let mut paren_level_count_index4\
    \ = 0;\n    let mut paren_level_count_index5 = 0;\n    let mut paren_level_count_index6\
    \ = 0;\n    let mut paren_level_count_index7 = 0;\n    let mut paren_level_count_index8\
    \ = 0;\n    let mut paren_level_count_index9 = 0;\n    let mut paren_level_count_index10\
    \ = 0;\n    let mut paren_level_count_index11 = 0;\n    let mut paren_level_count_index12\
    \ = 0;\n    let mut paren_level_count_index13 = 0;\n    let mut paren_level_count_index14\
    \ = 0;\n    let mut paren_level_count_index15 = 0;\n    let mut paren_level_count_index16\
    \ = 0;\n    let mut paren_level_count_index17 = 0;\n    let mut paren_level_count_index18\
    \ = 0;\n    let mut paren_level_count_index19 = 0;\n    let mut paren_level_count_index20\
    \ = 0;\n    let mut paren_level_count_index21 = 0;\n    let mut paren_level_count_index22\
    \ = 0;\n    let mut paren_level_count_index23 = 0;\n    let mut paren_level_count_index24\
    \ = 0;\n    let mut paren_level_count_index25 = 0;\n    let mut paren_level_count_index26\
    \ = 0;\n    let mut paren_level_count_index27 = 0;\n    let mut paren_level_count_index28\
    \ = 0;\n    let mut paren_level_count_index29 = 0;\n    let mut paren_level_count_index30\
    \ = 0;\n    let mut paren_level_count_index31 = 0;\n    let mut paren_level_count_index32\
    \ = 0;\n    let mut paren_level_count_index33 = 0;\n    let mut paren_level_count_index34\
    \ = 0;\n    let mut paren_level_count_index35 = 0;\n    let mut paren_level_count_index36\
    \ = 0;\n    let mut paren_level_count_index37 = 0;\n    let mut paren_level_count_index38\
    \ = 0;\n    let mut paren_level_count_index39 = 0;\n    let mut paren_level_count_index40\
    \ = 0;\n    let mut paren_level_count_index41 = 0;\n    let mut paren_level_count_index42\
    \ = 0;\n    let mut paren_level_count_index43 = 0;\n    let mut paren\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmvqgsiya.rs:54:18\n   |\n\
    54 |     let mut paren\n   |                  ^ help: add `;` here\n55 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmvqgsiya.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_char_next: char;\n    let mut paren_level_char_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next: char;\n    let mut paren_level_char_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next: char;\n    let\
    \ mut paren_level_char_next_next_next_next_next_next: char;\n    let mut paren_level_char_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next:\
    \ char;\n    let mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpaaxa1b3i.rs:34:18\n   |\n\
    34 |     let mut paren\n   |                  ^ help: add `;` here\n35 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaaxa1b3i.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_nestings_stack\
    \ = Vec::new();\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n\
    \    let mut paren_nestings_stack_size = paren_nestings_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack.as_mut_ptr();\n    let mut paren_nestings_stack_ptr\
    \ = paren_nestings_stack.as_mut_ptr();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpyoaxwkdq.rs:29:26\n   |\n\
    29 |     let mut paren_levels_\n   |                          ^ help: add `;`\
    \ here\n30 | }\n   | - unexpected token\n\nwarning: type annotations needed\n\
    \  --> /tmp/tmpyoaxwkdq.rs:17:65\n   |\n17 |     let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n   |            \
    \                                                     ^^^^^^\n   |\n   = note:\
    \ `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this is accepted\
    \ in the current edition (Rust 2015) but is a hard error in Rust 2018!\n   = note:\
    \ for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyoaxwkdq.rs:17:72\n   |\n17 |\
    \     let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \   |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |     let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size.try_into().unwrap());\n\
    \   |                                                                        \
    \                       ++++++++++++++++++++\n\nwarning: type annotations needed\n\
    \  --> /tmp/tmpyoaxwkdq.rs:18:69\n   |\n18 |     let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n   |        \
    \                                                             ^^^^^^\n   |\n \
    \  = warning: this is accepted in the current edition (Rust 2015) but is a hard\
    \ error in Rust 2018!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyoaxwkdq.rs:18:76\n   |\n18 |\
    \     let mut paren_nestings_stack_ptr_end = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n\
    \   |                                                               "
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_len = 0;\n    let mut paren_levels_len2 = 0;\n\
    \    let mut paren_levels_len3 = 0;\n    let mut paren_levels_len4 = 0;\n    let\
    \ mut paren_levels_len5 = 0;\n    let mut paren_levels_len6 = 0;\n    let mut\
    \ paren_levels_len7 = 0;\n    let mut paren_levels_len8 = 0;\n    let mut paren_levels_len9\
    \ = 0;\n    let mut paren_levels_len10 = 0;\n    let mut paren_levels_len11 =\
    \ 0;\n    let mut paren_levels_len12 = 0;\n    let mut paren_levels_len13 = 0;\n\
    \    let mut paren_levels_len14 = 0;\n    let mut paren_levels_len15 = 0;\n  \
    \  let mut paren_levels_len16 = 0;\n    let mut paren_levels_len17 = 0;\n    let\
    \ mut paren_levels_len18 = 0;\n    let mut paren_levels_len19 = 0;\n    let mut\
    \ paren_levels_len20 = 0;\n    let mut paren_levels_len21 = 0;\n    let mut paren_levels_len22\
    \ = 0;\n    let mut paren_levels_len23 = 0;\n    let mut paren_levels_len24 =\
    \ 0;\n    let mut paren_levels_len25 = 0;\n    let mut paren_levels_len26 = 0;\n\
    \    let mut paren_levels_len27 = 0;\n    let mut paren_levels_len28 = 0;\n  \
    \  let mut paren_levels_len29 = 0;\n    let mut paren_levels_len30 = 0;\n    let\
    \ mut paren_levels_len31 = 0;\n    let mut paren_levels_len32 = 0;\n    let mut\
    \ paren_levels_len33 = 0;\n    let mut paren_levels_len34 = 0;\n    let mut paren_levels_len35\
    \ = 0;\n    let mut paren_levels_len36 = 0;\n    let mut paren_levels_len37 =\
    \ 0;\n    let mut paren_levels_len38 = 0;\n    let mut paren_levels_len39 = 0;\n\
    \    let mut paren_levels_len40 = 0;\n    let mut paren_levels_len41 = 1;\n  \
    \  let mut paren_levels_len42 = 1;\n    let mut paren_levels_len43 = 1;\n    let\
    \ mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw33hcwzd.rs:54:18\n   |\n\
    54 |     let mut paren\n   |                  ^ help: add `;` here\n55 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw33hcwzd.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = vec![];\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_count = 0;\n    let mut paren_level_char_pos_chars\
    \ = vec![];\n    let mut paren_level_char_pos_char = 0;\n    let mut paren_level_char_pos_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_count = 0;\n    let mut paren_level_char_pos_char_pos_char_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_chars = vec![];\n    let mut\
    \ paren_level_char_pos_char_pos_char = 0;\n    let mut paren_level_char_pos_char_pos_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_count = 0;\n    let\
    \ mut paren_level_char_pos_char_pos_char_pos_char_count = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_chars\
    \ = vec![];\n    let mut paren_level_char_pos_char_pos_char_pos_char = 0;\n  \
    \  let mut paren_level_char_pos_char_pos_char_pos_char_pos = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_chars = vec![];\n\
    \    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char = 0;\n    let\
    \ mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos = 0;\n    let mut\
    \ paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_count = 0;\n    let\
    \ mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_count = 0;\n\
    \    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_chars =\
    \ vec![];\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_count\
    \ = 0;\n    let mut paren_level_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzokq56ax.rs:41:25\n   |\n\
    41 |     let mut paren_level_\n   |                         ^ help: add `;` here\n\
    42 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzokq56ax.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcfsqrp2k.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcfsqrp2k.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_depth\
    \ = 0;\n    for paren in paren_string.chars() {\n        if paren == '(' {\n \
    \           paren_depth += 1;\n            paren_stack.push(paren_depth);\n  \
    \      } else if paren == ')' {\n            paren_depth -= 1;\n            if\
    \ paren_depth == 0 {\n                paren_stack.push(paren_depth);\n       \
    \     }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 2, 2, 0]`,\n right: `[2, 3, 1, 3]`',\
    \ /tmp/tmptkh3fxcw.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = vec![];\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_in_paren = 0;\n    let mut paren_level_char_pos_in_paren_group\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren = 0;\n    let\
    \ mut paren_level_char_pos_in_paren_group_in_paren_group = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0;\n    let mut paren_level_char_pos_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0;\n    let mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2tzud9av.rs:30:18\n   |\n\
    30 |     let mut paren\n   |                  ^ help: add `;` here\n31 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2tzud9av.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nesting_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_nesting_levels_stack\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = 0;\n    let mut paren_nesting_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr = 0;\n    let mut paren_nesting_levels_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack = Vec::new();\n    let mut paren_nesting_levels_ptr_stack\
    \ = Vec::new();\n    let mut paren_levels_ptr_stack_ptr = 0;\n    let mut paren_nesting_levels_ptr_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_ptr = 0;\n    let mut paren_nesting_levels_ptr_stack_ptr_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_ptr_ptr = 0;\n    let mut paren_nesting_levels_ptr_stack_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_ptr_ptr_ptr = 0;\n    let mut paren_nesting_levels_ptr_stack_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr = 0;\n    let mut\
    \ paren_nesting_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr = 0;\n    let mut paren_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_nesting_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n\
    \    let mut paren_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n    let\
    \ mut paren_nesting_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n    let\
    \ mut paren_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n    let mut\
    \ paren_nesting_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n    let mut\
    \ paren_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n    let mut paren_nesting_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_nesting_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5trmj_zg.rs:38:63\n   |\n\
    38 |     let mut paren_nesting_levels_ptr_stack_ptr_ptr_ptr_ptr_ptr\n   |    \
    \                                                           ^ help: add `;` here\n\
    39 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5trmj_zg.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_stack: Vec<isize> = Vec::new();\n    let mut\
    \ paren_nesting_level: Vec<isize> = Vec::new();\n    let mut paren_nesting_level_stack:\
    \ Vec<isize> = Vec::new();\n    let mut paren_nesting_level_stack_size: Vec<isize>\
    \ = Vec::new();\n    let mut paren_nesting_level_stack_ptr: Vec<isize> = Vec::new();\n\
    \    let mut paren_nesting_level_stack_ptr_ptr: Vec<isize> = Vec::new();\n   \
    \ let mut paren_nesting_level_stack_ptr_ptr_ptr: Vec<isize> = Vec::new();\n  \
    \  let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr: Vec<isize> = Vec::new();\n\
    \    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr: Vec<isize> = Vec::new();\n\
    \    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr_ptr: Vec<isize> = Vec::new();\n\
    \    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr: Vec<isize>\
    \ = Vec::new();\n    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr:\
    \ Vec<isize> = Vec::new();\n    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr:\
    \ Vec<isize> = Vec::new();\n    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr:\
    \ Vec<isize> = Vec::new();\n    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr:\
    \ Vec<isize> = Vec::new();\n    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr:\
    \ Vec<isize> = Vec::new();\n    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr:\
    \ Vec<isize> = Vec::new();\n    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr:\
    \ Vec<isize> = Vec::new();\n    let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdp174qz.rs:27:54\n   |\n\
    27 |     let mut paren_nesting_level_stack_ptr_ptr_ptr_ptr\n   |             \
    \                                         ^ help: add `;` here\n28 | }\n   | -\
    \ unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsdp174qz.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxnba86ih.rs:29:99\n   |\n\
    29 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \                           ^ help: add `;` here\n30 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpxnba86ih.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_nestings_stack\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = 0;\n    let mut paren_nestings_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr = 0;\n    let mut paren_nestings_ptr = 0;\n\
    \    let mut paren_levels_ptr_next = 0;\n    let mut paren_nestings_ptr_next =\
    \ 0;\n    let mut paren_levels_ptr_next2 = 0;\n    let mut paren_nestings_ptr_next2\
    \ = 0;\n    let mut paren_levels_ptr_next3 = 0;\n    let mut paren_nestings_ptr_next3\
    \ = 0;\n    let mut paren_levels_ptr_next4 = 0;\n    let mut paren_nestings_ptr_next4\
    \ = 0;\n    let mut paren_levels_ptr_next5 = 0;\n    let mut paren_nestings_ptr_next5\
    \ = 0;\n    let mut paren_levels_ptr_next6 = 0;\n    let mut paren_nestings_ptr_next6\
    \ = 0;\n    let mut paren_levels_ptr_next7 = 0;\n    let mut paren_nestings_ptr_next7\
    \ = 0;\n    let mut paren_levels_ptr_next8 = 0;\n    let mut paren_nestings_ptr_next8\
    \ = 0;\n    let mut paren_levels_ptr_next9 = 0;\n    let mut paren_nestings_ptr_next9\
    \ = 0;\n    let mut paren_levels_ptr_next10 = 0;\n    let mut paren_nestings_ptr_next10\
    \ = 0;\n    let mut paren_levels_ptr_next11 = 0;\n    let mut paren_nestings_ptr_next11\
    \ = 0;\n    let mut paren_levels_ptr_next12 = 0;\n    let mut paren_nestings_ptr_next12\
    \ = 0;\n    let mut paren_levels_ptr_next13 = 0;\n    let mut paren_nestings_ptr_next13\
    \ = 0;\n    let mut paren_levels_ptr_next14 = 0;\n    let mut paren_nestings_ptr_next14\
    \ = 0;\n    let mut paren_levels_ptr_next15 = 0;\n    let mut paren_nestings_ptr_next15\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_bwmwoyz.rs:47:11\n   |\n\
    47 |     let mu\n   |           ^ help: add `;` here\n48 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_bwmwoyz.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp3ro609po.rs:38:1\n   |\n38\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp3ro609po.rs:37:60\n\
    \   |\n37 |     let mut paren_levels_stack_bottom = paren_levels_stack.\n   |\
    \                                                            ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3ro609po.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_size = vec![0];\n    let mut paren_levels_stack_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = vec![0];\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n \
    \   let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5w414eak.rs:30:67\n   |\n\
    30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n   |\
    \                                                                   ^ help: add\
    \ `;` here\n31 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp5w414eak.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_size;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5g4fswo7.rs:37:56\n   |\n\
    37 |     let mut paren_levels_stack_top = paren_levels_stack\n   |           \
    \                                             ^ help: add `;` here\n38 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5g4fswo7.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_stack\
    \ = Vec::new();\n    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len\
    \ = paren_level_stack.len();\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppwvqqkb2.rs:44:49\n   |\n\
    44 |     let mut paren_level_stack_top = paren_level_\n   |                  \
    \                               ^ help: add `;` here\n45 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `paren_level_` in this scope\n  -->\
    \ /tmp/tmppwvqqkb2.rs:44:37\n   |\n44 |     let mut paren_level_stack_top = paren_level_\n\
    \   |                                     ^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `paren_level`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmppwvqqkb2.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_len = 0;\n    let mut paren_levels_lens: Vec<isize>\
    \ = Vec::new();\n    let mut paren_levels_lens_len = 0;\n    let mut paren_levels_lens_len2\
    \ = 0;\n    let mut paren_levels_lens_len3 = 0;\n    let mut paren_levels_lens_len4\
    \ = 0;\n    let mut paren_levels_lens_len5 = 0;\n    let mut paren_levels_lens_len6\
    \ = 0;\n    let mut paren_levels_lens_len7 = 0;\n    let mut paren_levels_lens_len8\
    \ = 0;\n    let mut paren_levels_lens_len9 = 0;\n    let mut paren_levels_lens_len10\
    \ = 0;\n    let mut paren_levels_lens_len11 = 0;\n    let mut paren_levels_lens_len12\
    \ = 0;\n    let mut paren_levels_lens_len13 = 0;\n    let mut paren_levels_lens_len14\
    \ = 0;\n    let mut paren_levels_lens_len15 = 0;\n    let mut paren_levels_lens_len16\
    \ = 0;\n    let mut paren_levels_lens_len17 = 0;\n    let mut paren_levels_lens_len18\
    \ = 0;\n    let mut paren_levels_lens_len19 = 0;\n    let mut paren_levels_lens_len20\
    \ = 0;\n    let mut paren_levels_lens_len21 = 0;\n    let mut paren_levels_lens_len22\
    \ = 0;\n    let mut paren_levels_lens_len23 = 0;\n    let mut paren_levels_lens_len24\
    \ = 0;\n    let mut paren_levels_lens_len25 = 0;\n    let mut paren_levels_lens_len26\
    \ = 0;\n    let mut paren_levels_lens_len27 = 0;\n    let mut paren_levels_lens_len28\
    \ = 0;\n    let mut paren_levels_lens_len29 = 0;\n    let mut paren_levels_lens_len30\
    \ = 0;\n    let mut paren_levels_lens_len31 = 0;\n    let mut paren_levels_lens_len32\
    \ = 0;\n    let mut paren_levels_lens_len33 = 0;\n    let mut paren_levels_lens_len34\
    \ = 0;\n    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwc_rz959.rs:47:24\n   |\n\
    47 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    48 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwc_rz959.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mu\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpaqyo9n_f.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaqyo9n_f.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011051
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string_index = 0;\n    while paren_level_string_index\
    \ < paren_string.len() {\n        let mut paren_level_char = paren_level_string[paren_level_string_index];\n\
    \        if paren_level_char == ')' {\n            paren_level_string_index +=\
    \ 1;\n            paren_level_string[paren_level_string_index] = '(';\n      \
    \      paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = ')';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = ')';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = '(';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = ')';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = ')';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = '(';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = ')';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = '(';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = ')';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = '(';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = ')';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = '(';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = ')';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = '(';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = ')';\n            paren_level_string_index += 1;\n            paren_level_string[paren_level_string_index]\
    \ = '(';\n            paren_level_string_index += 1;\n            paren_\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp14gotwws.rs:58:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n12 |     while paren_level_string_index < paren_string.len() {\n   |    \
    \                                                     - unclosed delimiter\n13\
    \ |         let mut paren_level_char = paren_level_string[paren_level_string_index];\n\
    14 |         if paren_level_char == ')' {\n   |                              \
    \      - this delimiter might not be properly closed...\n...\n51 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n58 | }\n   |   ^\n\n\
    error[E0425]: cannot find value `paren_` in this scope\n  --> /tmp/tmp14gotwws.rs:50:13\n\
    \   |\n50 |             paren_\n   |             ^^^^^^ not found in this scope\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp14gotwws.rs:13:36\n\
    \   |\n13 |         let mut paren_level_char = paren_level_string[paren_level_string_index];\n\
    \   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp14gotwws.rs:16:13\n   |\n16 |             paren_level_string[paren_level_string_index]\
    \ = '(';\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:"
  stdout: ''
  timestamp: 1660011052
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_ptr = vec![0];\n    let mut paren_levels_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr = vec![0];\n    let mut paren_levels_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr = vec![0];\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n\
    \    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n    let\
    \ mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n    let\
    \ mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![0];\n\
    \    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![0];\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpctiiruz_.rs:30:49\n   |\n\
    30 |     let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr\n   |                  \
    \                               ^ help: add `;` here\n31 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpctiiruz_.rs:6:49\n  |\n\
    6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011052
