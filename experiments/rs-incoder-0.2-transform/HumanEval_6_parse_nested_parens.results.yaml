language: rs
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_stack\
    \ = Vec::new();\n    let mut paren_stack_size = paren_stack.len();\n    let mut\
    \ paren_stack_pos = 0;\n    let mut paren_stack_end = paren_stack_size;\n    let\
    \ mut paren_stack_cur = paren_stack[paren_stack_pos];\n    let mut paren_stack_top\
    \ = paren_stack[paren_stack_end - 1];\n    let mut paren_stack_cur_depth = 0;\n\
    \    let mut paren_stack_cur_pos = 0;\n    let mut paren_stack_cur_end = paren_stack_end;\n\
    \    let mut paren_stack_cur_top = paren_stack_top;\n    let mut paren_stack_cur_cur\
    \ = paren_stack_cur;\n    let mut paren_stack_cur_top = paren_stack_top;\n   \
    \ let mut paren_stack_cur_cur_depth = 0;\n    let mut paren_stack_cur_cur_pos\
    \ = 0;\n    let mut paren_stack_cur_cur_end = paren_stack_cur_end;\n    let mut\
    \ paren_stack_cur_cur_top = paren_stack_cur_top;\n    let mut paren_stack_cur_cur_cur\
    \ = paren_stack_cur_cur;\n    let mut paren_stack_cur_cur_top = paren_stack_cur_top;\n\
    \    let mut paren_stack_cur_cur_cur_depth = 0;\n    let mut paren_stack_cur_cur_cur_pos\
    \ = 0;\n    let mut paren_stack_cur_cur_cur_end = paren_stack_cur_cur_end;\n \
    \   let mut paren_stack_cur_cur_cur_top = paren_stack_cur_cur_top;\n    let mut\
    \ paren_stack_cur_cur_cur_cur = paren_stack_cur_cur_cur;\n    let mut paren_stack_cur_cur_cur_top\
    \ = paren_stack_cur_cur_top;\n    let mut paren_stack_cur_cur_cur_cur = paren_stack_cur_cur_cur;\n\
    \    let mut paren_stack_cur_cur_cur_top = paren_stack_cur_cur_cur;\n    let mut\
    \ paren_stack_cur_cur_cur_cur_depth = 0;\n    let mut paren_stack_cur_cur_cur_cur_pos\
    \ = 0;\n    let mut paren_stack_cur_cur_cur_cur_end = paren_stack_cur_cur_cur_end;\n\
    \    let mut paren_stack_cur_cur_cur_cur_top = paren_stack_cur_cur_cur_top;\n\
    \    let mut paren_stack_cur_cur_cur_cur_cur = paren_stack_cur_cur_cur_cur;\n\
    \    let mut paren_stack_cur_cur_cur_cur_top = paren_stack_cur_cur_cur_cur;\n\
    \    let mut paren_stack_cur_cur_cur_cur_cur_depth = 0;\n    let mut paren_stack_cur_cur_cur_cur_cur_pos\
    \ = 0;\n\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvfoaajgb.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvfoaajgb.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvfoaajgb.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvfoaajgb.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvfoaajgb.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvfoaajgb.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvfoaajgb.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_nesting =\
    \ 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_size =\
    \ paren_stack.len();\n    let mut paren_levels_index = paren_stack.len();\n  \
    \  let mut paren_levels_index2 = paren_stack.len();\n    let mut paren_levels_index3\
    \ = paren_stack.len();\n    let mut paren_levels_index4 = paren_stack.len();\n\
    \    let mut paren_levels_index5 = paren_stack.len();\n    let mut paren_levels_index6\
    \ = paren_stack.len();\n    let mut paren_levels_index7 = paren_stack.len();\n\
    \    let mut paren_levels_index8 = paren_stack.len();\n    let mut paren_levels_index9\
    \ = paren_stack.len();\n    let mut paren_levels_index10 = paren_stack.len();\n\
    \    let mut paren_levels_index11 = paren_stack.len();\n    let mut paren_levels_index12\
    \ = paren_stack.len();\n    let mut paren_levels_index13 = paren_stack.len();\n\
    \    let mut paren_levels_index14 = paren_stack.len();\n    let mut paren_levels_index15\
    \ = paren_stack.len();\n    let mut paren_levels_index16 = paren_stack.len();\n\
    \    let mut paren_levels_index17 = paren_stack.len();\n    let mut paren_levels_index18\
    \ = paren_stack.len();\n    let mut paren_levels_index19 = paren_stack.len();\n\
    \    let mut paren_levels_index20 = paren_stack.len();\n    let mut paren_levels_index21\
    \ = paren_stack.len();\n    let mut paren_levels_index22 = paren_stack.len();\n\
    \    let mut paren_levels_index23 = paren_stack.len();\n    let mut paren_levels_index24\
    \ = paren_stack.len();\n    let mut paren_levels_index25 = paren_stack.len();\n\
    \    let mut paren_levels_index26 = paren_stack.len();\n    let mut paren_levels_index27\
    \ = paren_stack.len();\n    let mut paren_levels_index28 = paren_stack.len();\n\
    \    let mut paren_levels_index29 = paren_stack.len();\n}\n\nfn main() {\n   \
    \ let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpn7mk3kkb.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn7mk3kkb.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn7mk3kkb.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn7mk3kkb.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn7mk3kkb.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn7mk3kkb.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn7mk3kkb.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_level_count\
    \ = 0;\n    let mut paren_level_char_count = 0;\n    let mut paren_level_chars\
    \ = Vec::new();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut paren_level_chars = paren_level_chars.clone();\n\
    \    let mut paren_level_chars = paren_level_chars.clone();\n    let mut paren_level_chars\
    \ = paren_level_chars.clone();\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp_8ve0t6s.rs:44:1\n\
    \   |\n44 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp_8ve0t6s.rs:48:17\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp_8ve0t6s.rs:48:25\n \
    \  |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_8ve0t6s.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_8ve0t6s.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_8ve0t6s.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_8ve0t6s.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    let mut paren_levels: Vec<isize> = vec![];\n\
    \    let mut paren_levels_len: isize = 0;\n    let mut paren_levels_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_len: isize = 0;\n    let mut paren_levels_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_len: isize = 0;\n \
    \   let mut paren_levels_lens_lens_lens: Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens: Vec<isize> = vec![];\n\
    \    let mut paren_levels_lens_lens_lens_lens_len: isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: isize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp89zm6e3g.rs:28:71\n   |\n\
    28 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    \   |                                                                       ^\
    \ help: add `;` here\n29 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp89zm6e3g.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp89zm6e3g.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp89zm6e3g.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp89zm6e3g.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp89zm6e3g.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp89zm6e3g.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp89zm6e3g.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nestings_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_end = paren_levels_iter.next();\n\
    \    let mut paren_nestings_end = paren_nestings_iter.next();\n    while paren_levels_end.unwrap()\
    \ != None && paren_nestings_end.unwrap() != None {\n        if paren_levels_end.unwrap().unwrap()\
    \ == paren_nestings_end.unwrap().unwrap() {\n            paren_levels.push(paren_level);\n\
    \            paren_nestings.push(paren_nesting);\n            paren_levels_end\
    \ = paren_levels_iter.next();\n            paren_nestings_end = paren_nestings_iter.next();\n\
    \            paren_level += 1;\n            paren_nesting += 1;\n        } else\
    \ {\n            paren_level += 1;\n            paren_nesting += 1;\n        }\n\
    \    }\n    if paren_levels_end.unwrap() == None || paren_nestings_end.unwrap()\
    \ == None {\n        paren_levels.push(paren_level);\n        paren_nestings.push(paren_nesting);\n\
    \    }\n    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6ppd5pu.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6ppd5pu.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6ppd5pu.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6ppd5pu.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6ppd5pu.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6ppd5pu.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk6ppd5pu.rs:15:40\n\
    \   |\n15 |     while paren_levels_end.unwrap() != None && paren_nestings_end.unwrap()\
    \ != None {\n   |                                        ^^^^ expected tuple,\
    \ found enum `Option`\n   |\n   = note: expected tuple `(usize, char)`\n     \
    \          found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk6ppd5pu.rs:15:79\n\
    \   |\n15 |     while paren_levels_end.unwrap() != None && paren_nestings_end.unwrap()\
    \ != None {\n   |                                                            \
    \                   ^^^^ expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(usize, char)`\n               found enum `Option<_>`\n\nerror[E0599]:\
    \ no method named `unwrap` found for tuple `(usize, char)` in the current scope\n\
    \  --> /tmp/tmpk6ppd5pu.rs:16:38\n   |\n16 |         if paren_levels_end.unwrap().unwrap()\
    \ == paren_nestings_end.unwrap().unwrap() {\n   |                     "
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_start = paren_level_string.chars().nth(0).unwrap();\n\
    \    let mut paren_level_end = paren_level_string.chars().nth(paren_level_string.len()\
    \ - 1).unwrap();\n    let mut paren_level_char = paren_level_start;\n    let mut\
    \ paren_level_char_next = paren_level_end;\n    let mut paren_level_char_prev\
    \ = paren_level_end;\n    let mut paren_level_char_prev = paren_level_end;\n \
    \   let mut paren_level_char_next = paren_level_end;\n    let mut paren_level_char_next\
    \ = paren_level_end;\n    let mut paren_level_char_prev = paren_level_end;\n \
    \   let mut paren_level_char_prev = paren_level_end;\n    let mut paren_level_char_next\
    \ = paren_level_end;\n    let mut paren_level_char_next = paren_level_end;\n \
    \   let mut paren_level_char_prev = paren_level_end;\n    let mut paren_level_char_prev\
    \ = paren_level_end;\n    let mut paren_level_char_next = paren_level_end;\n \
    \   let mut paren_level_char_next = paren_level_end;\n    let mut paren_level_char_prev\
    \ = paren_level_end;\n    let mut paren_level_char_prev = paren_level_end;\n \
    \   let mut paren_level_char_next = paren_level_end;\n    let mut paren_level_char_next\
    \ = paren_level_end;\n    let mut paren_level_char_prev = paren_level_end;\n \
    \   let mut paren_level_char_prev = paren_level_end;\n    let mut paren_level_char_next\
    \ = paren_level_end;\n    let mut paren_level_char_next = paren_level_end;\n \
    \   let mut paren_level_char_prev = paren_level_end;\n    let mut paren_level_char_prev\
    \ = paren_level_end;\n    let mut paren_level_char_next = paren_level_end;\n \
    \   let mut paren_level_char_next = paren_level_end;\n    let mut paren_level_char_prev\
    \ = paren_level_end;\n    let mut paren_level_char_prev = paren_level_end;\n \
    \   let mut paren_level_char_next = paren_level_end;\n    let mut paren_level_char_next\
    \ = paren_level_end;\n    let mut paren_level_char_prev = paren_level_end;\n \
    \   let mut paren_level_char_prev = paren_level_end;\n    let mut paren_level_char_next\
    \ = paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpes2dqwzg.rs:45:43\n   |\n\
    45 |     let mut paren_level_char_next = paren_\n   |                        \
    \                   ^ help: add `;` here\n46 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren_` in this scope\n  --> /tmp/tmpes2dqwzg.rs:45:37\n\
    \   |\n45 |     let mut paren_level_char_next = paren_\n   |                 \
    \                    ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpes2dqwzg.rs:50:17\n   |\n50 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpes2dqwzg.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpes2dqwzg.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpes2dqwzg.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpes2dqwzg.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpes2dqwzg.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpes2dqwzg.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an "
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    while paren_level_count\
    \ < MAX_NESTING {\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpayidbspg.rs:58:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n12 |     while paren_level_count < MAX_NESTING {\n   |                  \
    \                         - this delimiter might not be properly closed...\n...\n\
    51 | }\n   | - ...as it matches this but it has different indentation\n...\n58\
    \ | }\n   |   ^\n\nerror: expected identifier, found `}`\n  --> /tmp/tmpayidbspg.rs:51:1\n\
    \   |\n51 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `MAX_NESTING`\
    \ in this scope\n  --> /tmp/tmpayidbspg.rs:12:31\n   |\n12 |     while paren_level_count\
    \ < MAX_NESTING {\n   |                               ^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpayidbspg.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpayidbspg.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpayidbspg.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpayidbspg.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpayidbspg.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpayidbspg.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpayidbspg.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  --"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_len = 0;\n    let mut paren_levels_lens = Vec::new();\n\
    \    let mut paren_levels_lens_len = 0;\n    let mut paren_levels_lens_len2 =\
    \ 0;\n    let mut paren_levels_lens_len3 = 0;\n    let mut paren_levels_lens_len4\
    \ = 0;\n    let mut paren_levels_lens_len5 = 0;\n    let mut paren_levels_lens_len6\
    \ = 0;\n    let mut paren_levels_lens_len7 = 0;\n    let mut paren_levels_lens_len8\
    \ = 0;\n    let mut paren_levels_lens_len9 = 0;\n    let mut paren_levels_lens_len10\
    \ = 0;\n    let mut paren_levels_lens_len11 = 0;\n    let mut paren_levels_lens_len12\
    \ = 0;\n    let mut paren_levels_lens_len13 = 0;\n    let mut paren_levels_lens_len14\
    \ = 0;\n    let mut paren_levels_lens_len15 = 0;\n    let mut paren_levels_lens_len16\
    \ = 0;\n    let mut paren_levels_lens_len17 = 0;\n    let mut paren_levels_lens_len18\
    \ = 0;\n    let mut paren_levels_lens_len19 = 0;\n    let mut paren_levels_lens_len20\
    \ = 0;\n    let mut paren_levels_lens_len21 = 0;\n    let mut paren_levels_lens_len22\
    \ = 0;\n    let mut paren_levels_lens_len23 = 0;\n    let mut paren_levels_lens_len24\
    \ = 0;\n    let mut paren_levels_lens_len25 = 0;\n    let mut paren_levels_lens_len26\
    \ = 0;\n    let mut paren_levels_lens_len27 = 0;\n    let mut paren_levels_lens_len28\
    \ = 0;\n    let mut paren_levels_lens_len29 = 0;\n    let mut paren_levels_lens_len30\
    \ = 0;\n    let mut paren_levels_lens_len31 = 0;\n    let mut paren_levels_lens_len32\
    \ = 0;\n    let mut paren_levels_lens_len33 = 0;\n    let mut paren_levels_lens_len34\
    \ = 0;\n    let mut paren_levels_lens_len35 = 0;\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb6r9ll9r.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb6r9ll9r.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb6r9ll9r.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb6r9ll9r.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb6r9ll9r.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb6r9ll9r.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpb6r9ll9r.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_top = vec![0];\n    let mut paren_levels_stack_bottom\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mut paren_levels_stack_bottom = vec![0];\n    let mut paren_levels_stack_top\
    \ = vec![0];\n    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0oaecyng.rs:45:11\n   |\n\
    45 |     let mu\n   |           ^ help: add `;` here\n46 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0oaecyng.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0oaecyng.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0oaecyng.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0oaecyng.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0oaecyng.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0oaecyng.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0oaecyng.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfwbbt6hs.rs:41:18\n   |\n\
    41 |     let mut paren\n   |                  ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfwbbt6hs.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfwbbt6hs.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfwbbt6hs.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfwbbt6hs.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfwbbt6hs.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfwbbt6hs.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpfwbbt6hs.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = String::new();\n    let mut paren_level_chars_index\
    \ = 0;\n    let mut paren_level_chars_index2 = 0;\n    let mut paren_level_chars_index3\
    \ = 0;\n    let mut paren_level_chars_index4 = 0;\n    let mut paren_level_chars_index5\
    \ = 0;\n    let mut paren_level_chars_index6 = 0;\n    let mut paren_level_chars_index7\
    \ = 0;\n    let mut paren_level_chars_index8 = 0;\n    let mut paren_level_chars_index9\
    \ = 0;\n    let mut paren_level_chars_index10 = 0;\n    let mut paren_level_chars_index11\
    \ = 0;\n    let mut paren_level_chars_index12 = 0;\n    let mut paren_level_chars_index13\
    \ = 0;\n    let mut paren_level_chars_index14 = 0;\n    let mut paren_level_chars_index15\
    \ = 0;\n    let mut paren_level_chars_index16 = 0;\n    let mut paren_level_chars_index17\
    \ = 0;\n    let mut paren_level_chars_index18 = 0;\n    let mut paren_level_chars_index19\
    \ = 0;\n    let mut paren_level_chars_index20 = 0;\n    let mut paren_level_chars_index21\
    \ = 0;\n    let mut paren_level_chars_index22 = 0;\n    let mut paren_level_chars_index23\
    \ = 0;\n    let mut paren_level_chars_index24 = 0;\n    let mut paren_level_chars_index25\
    \ = 0;\n    let mut paren_level_chars_index26 = 0;\n    let mut paren_level_chars_index27\
    \ = 0;\n    let mut paren_level_chars_index28 = 0;\n    let mut paren_level_chars_index29\
    \ = 0;\n    let mut paren_level_chars_index30 = 0;\n    let mut paren_level_chars_index31\
    \ = 0;\n    let mut paren_level_chars_index32 = 0;\n    let mut paren_level_chars_index33\
    \ = 0;\n    let mut paren_level_chars_index34 = 0;\n    let mut paren_level_chars_index35\
    \ = 0;\n    let mut paren_level_chars_index36 = 0;\n    let mut paren_level_chars_index37\
    \ = 0;\n    let mut paren_level_chars_index38 = 0;\n    let mut paren_level_chars_index39\
    \ = 0;\n    let mut paren_level_chars_index40 = 0;\n    let mut paren_level_chars_index41\
    \ = 0;\n    let mut paren_level_chars_index42 = 0;\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpx8ped7h8.rs:55:1\n\
    \   |\n55 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpx8ped7h8.rs:59:17\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpx8ped7h8.rs:59:25\n \
    \  |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx8ped7h8.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx8ped7h8.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx8ped7h8.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx8ped7h8.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpeovyi316.rs:53:26\n   |\n\
    53 |     let mut paren_levels_\n   |                          ^ help: add `;`\
    \ here\n54 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpeovyi316.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpeovyi316.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpeovyi316.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpeovyi316.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpeovyi316.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpeovyi316.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpeovyi316.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_levels =\
    \ Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_next\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr = Vec::new();\n    let\
    \ mut paren_levels_ptr_next_ptr_next = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next = Vec::new();\n\
    \    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr = Vec::new();\n    let\
    \ mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next = Vec::new();\n    let\
    \ mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr = Vec::new();\n   \
    \ let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next = Vec::new();\n\
    \    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr\n}\n\nfn main() {\n   \
    \ let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkaz6jm_7.rs:28:38\n   |\n\
    28 |     let mut paren_levels_ptr_next_ptr\n   |                             \
    \         ^ help: add `;` here\n29 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkaz6jm_7.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkaz6jm_7.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkaz6jm_7.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkaz6jm_7.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkaz6jm_7.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkaz6jm_7.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkaz6jm_7.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_level_count = 0;\n    let mut paren_level_char_count = 0;\n\
    \    let mut paren_level_chars: Vec<String> = vec![];\n    let mut paren_level_char:\
    \ char = '(';\n    let mut paren_level_chars: Vec<String> = vec![];\n    let mut\
    \ paren_level_char: char = '(';\n    let mut paren_level_chars: Vec<String> =\
    \ vec![];\n    let mut paren_level_char: char = '(';\n    let mut paren_level_chars:\
    \ Vec<String> = vec![];\n    let mut paren_level_char: char = '(';\n    let mut\
    \ paren_level_chars: Vec<String> = vec![];\n    let mut paren_level_char: char\
    \ = '(';\n    let mut paren_level_chars: Vec<String> = vec![];\n    let mut paren_level_char:\
    \ char = '(';\n    let mut paren_level_chars: Vec<String> = vec![];\n    let mut\
    \ paren_level_char: char = '(';\n    let mut paren_level_chars: Vec<String> =\
    \ vec![];\n    let mut paren_level_char: char = '(';\n    let mut paren_level_chars:\
    \ Vec<String> = vec![];\n    let mut paren_level_char: char = '(';\n    let mut\
    \ paren_level_chars: Vec<String> = vec![];\n    let mut paren_level_char: char\
    \ = '(';\n    let mut paren_level_chars: Vec<String> = vec![];\n    let mut paren_level_char:\
    \ char = '(';\n    let mut paren_level_chars: Vec<String> = vec![];\n    let mut\
    \ paren_level_char: char = '(';\n    let mut paren_level_chars: Vec<String> =\
    \ vec![];\n    let mut paren_level_char: char = '(';\n    let mut paren_level_chars:\
    \ Vec<String> = vec![];\n    let mut paren_level_char: char = '(';\n    let mut\
    \ paren_level_chars: Vec<String> = vec![];\n    let mut paren_level_char: char\
    \ = '(';\n    let mut paren_level_chars: Vec<String> = vec![];\n    let mut paren_level_char:\
    \ char = '(';\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1swfdj4q.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1swfdj4q.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1swfdj4q.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1swfdj4q.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1swfdj4q.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1swfdj4q.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1swfdj4q.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmenuow1_.rs:37:59\n   |\n\
    37 |     let mut paren_levels_stack_bottom = paren_levels_stack\n   |        \
    \                                                   ^ help: add `;` here\n38 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpmenuow1_.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmenuow1_.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmenuow1_.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmenuow1_.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmenuow1_.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmenuow1_.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmenuow1_.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack_size;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfurrnfyk.rs:37:49\n   |\n\
    37 |     let mut paren_levels_stack_top = paren_level\n   |                  \
    \                               ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfurrnfyk.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfurrnfyk.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfurrnfyk.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfurrnfyk.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfurrnfyk.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfurrnfyk.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfurrnfyk.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9g61ktss.rs:41:56\n   |\n\
    41 |     let mut paren_nesting_nesting_nesting_nesting_level\n   |           \
    \                                             ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9g61ktss.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9g61ktss.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9g61ktss.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9g61ktss.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9g61ktss.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9g61ktss.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9g61ktss.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_8ytdta8.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp_8ytdta8.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_8ytdta8.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_8ytdta8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpnh7xfx_r.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpnh7xfx_r.rs:42:17\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnh7xfx_r.rs:42:25\n \
    \  |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnh7xfx_r.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnh7xfx_r.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnh7xfx_r.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnh7xfx_r.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxz4u54ya.rs:37:52\n   |\n\
    37 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxz4u54ya.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxz4u54ya.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxz4u54ya.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxz4u54ya.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxz4u54ya.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxz4u54ya.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpxz4u54ya.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_depth\
    \ = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = vec![];\n   \
    \ let mut paren_levels_len = 0;\n    let mut paren_levels_lens = vec![];\n   \
    \ let mut paren_levels_lens_len = 0;\n    let mut paren_levels_lens_len2 = 0;\n\
    \    let mut paren_levels_lens_len3 = 0;\n    let mut paren_levels_lens_len4 =\
    \ 0;\n    let mut paren_levels_lens_len5 = 0;\n    let mut paren_levels_lens_len6\
    \ = 0;\n    let mut paren_levels_lens_len7 = 0;\n    let mut paren_levels_lens_len8\
    \ = 0;\n    let mut paren_levels_lens_len9 = 0;\n    let mut paren_levels_lens_len10\
    \ = 0;\n    let mut paren_levels_lens_len11 = 0;\n    let mut paren_levels_lens_len12\
    \ = 0;\n    let mut paren_levels_lens_len13 = 0;\n    let mut paren_levels_lens_len14\
    \ = 0;\n    let mut paren_levels_lens_len15 = 0;\n    let mut paren_levels_lens_len16\
    \ = 0;\n    let mut paren_levels_lens_len17 = 0;\n    let mut paren_levels_lens_len18\
    \ = 0;\n    let mut paren_levels_lens_len19 = 0;\n    let mut paren_levels_lens_len20\
    \ = 0;\n    let mut paren_levels_lens_len21 = 0;\n    let mut paren_levels_lens_len22\
    \ = 0;\n    let mut paren_levels_lens_len23 = 0;\n    let mut paren_levels_lens_len24\
    \ = 0;\n    let mut paren_levels_lens_len25 = 0;\n    let mut paren_levels_lens_len26\
    \ = 0;\n    let mut paren_levels_lens_len27 = 0;\n    let mut paren_levels_lens_len28\
    \ = 0;\n    let mut paren_levels_lens_len29 = 0;\n    let mut paren_levels_lens_len30\
    \ = 0;\n    let mut paren_levels_lens_len31 = 0;\n    let mut paren_levels_lens_len32\
    \ = 0;\n    let mut paren_levels_lens_len33 = 0;\n    let mut paren_levels_lens_len34\
    \ = 0;\n    let mut paren_levels_lens_len35 = 0;\n    let mu\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgo34uq_a.rs:48:11\n   |\n\
    48 |     let mu\n   |           ^ help: add `;` here\n49 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgo34uq_a.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgo34uq_a.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgo34uq_a.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgo34uq_a.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgo34uq_a.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgo34uq_a.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgo34uq_a.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_stack\
    \ = vec![];\n    for paren in paren_string.chars() {\n        if paren == '('\
    \ {\n            paren_stack.push(paren_level);\n            paren_level += 1;\n\
    \        } else if paren == ')' {\n            paren_level -= 1;\n           \
    \ if paren_level == 0 {\n                paren_stack.push(paren_level);\n    \
    \        }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnyssz_7d.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnyssz_7d.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnyssz_7d.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnyssz_7d.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnyssz_7d.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnyssz_7d.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nest\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnj_ugatb.rs:41:31\n   |\n\
    41 |     let mut paren_nesting_nest\n   |                               ^ help:\
    \ add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnj_ugatb.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnj_ugatb.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnj_ugatb.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps5ixwpub.rs:29:71\n   |\n\
    29 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                       ^\
    \ help: add `;` here\n30 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps5ixwpub.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps5ixwpub.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps5ixwpub.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps5ixwpub.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps5ixwpub.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps5ixwpub.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmps5ixwpub.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcxxiw8s_.rs:29:114\n   |\n\
    29 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new\n   |                                                           \
    \                                                       ^ help: add `;` here\n\
    30 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpcxxiw8s_.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcxxiw8s_.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcxxiw8s_.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcxxiw8s_.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcxxiw8s_.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcxxiw8s_.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcxxiw8s_.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: usize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == '(' {\n            paren_stack.push(paren_depth);\n      \
    \      paren_depth += 1;\n        } else if paren == ')' {\n            paren_depth\
    \ -= 1;\n            if paren_depth == 0 {\n                paren_stack.push(paren_depth);\n\
    \            }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4a_0oixa.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4a_0oixa.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4a_0oixa.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4a_0oixa.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4a_0oixa.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4a_0oixa.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4a_0oixa.rs:11:30\n\
    \   |\n11 |             paren_stack.push(paren_depth);\n   |                 \
    \             ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n11 |             paren_stack.push(paren_depth.try_into().unwrap());\n \
    \  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4a_0oixa.rs:16:34\n   |\n16 |              \
    \   paren_stack.push(paren_depth);\n   |                                  ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |           \
    \      paren_stack.push(paren_depth.try_into().unwrap());\n   |              \
    \                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed "
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len2\
    \ = paren_levels_len;\n    let mut paren_levels_len3 = paren_levels_len;\n   \
    \ let mut paren_levels_len4 = paren_levels_len;\n    let mut paren_levels_len5\
    \ = paren_levels_len;\n    let mut paren_levels_len6 = paren_levels_len;\n   \
    \ let mut paren_levels_len7 = paren_levels_len;\n    let mut paren_levels_len8\
    \ = paren_levels_len;\n    let mut paren_levels_len9 = paren_levels_len;\n   \
    \ let mut paren_levels_len10 = paren_levels_len;\n    let mut paren_levels_len11\
    \ = paren_levels_len;\n    let mut paren_levels_len12 = paren_levels_len;\n  \
    \  let mut paren_levels_len13 = paren_levels_len;\n    let mut paren_levels_len14\
    \ = paren_levels_len;\n    let mut paren_levels_len15 = paren_levels_len;\n  \
    \  let mut paren_levels_len16 = paren_levels_len;\n    let mut paren_levels_len17\
    \ = paren_levels_len;\n    let mut paren_levels_len18 = paren_levels_len;\n  \
    \  let mut paren_levels_len19 = paren_levels_len;\n    let mut paren_levels_len20\
    \ = paren_levels_len;\n    let mut paren_levels_len21 = paren_levels_len;\n  \
    \  let mut paren_levels_len22 = paren_levels_len;\n    let mut paren_levels_len23\
    \ = paren_levels_len;\n    let mut paren_levels_len24 = paren_levels_len;\n  \
    \  let mut paren_levels_len25 = paren_levels_len;\n    let mut paren_levels_len26\
    \ = paren_levels_len;\n    let mut paren_levels_len27 = paren_levels_len;\n  \
    \  let mut paren_levels_len28 = paren_levels_len;\n    let mut paren_levels_len29\
    \ = paren_levels_len;\n    let mut paren_levels_len30 = paren_levels_len;\n  \
    \  let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9cniew_f.rs:41:24\n   |\n\
    41 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp9cniew_f.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9cniew_f.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9cniew_f.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9cniew_f.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9cniew_f.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9cniew_f.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9cniew_f.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string_index = 0;\n    let mut paren_level_char: char;\n\
    \    let mut paren_level_char_length = 0;\n    let mut paren_level_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_string: String;\n    let mut paren_level_char_length_string_index\
    \ = 0;\n    let mut paren_level_char_length_string_index2 = 0;\n    let mut paren_level_char_length_string_index3\
    \ = 0;\n    let mut paren_level_char_length_string_index4 = 0;\n    let mut paren_level_char_length_string_index5\
    \ = 0;\n    let mut paren_level_char_length_string_index6 = 0;\n    let mut paren_level_char_length_string_index7\
    \ = 0;\n    let mut paren_level_char_length_string_index8 = 0;\n    let mut paren_level_char_length_string_index9\
    \ = 0;\n    let mut paren_level_char_length_string_index10 = 0;\n    let mut paren_level_char_length_string_index11\
    \ = 0;\n    let mut paren_level_char_length_string_index12 = 0;\n    let mut paren_level_char_length_string_index13\
    \ = 0;\n    let mut paren_level_char_length_string_index14 = 0;\n    let mut paren_level_char_length_string_index15\
    \ = 0;\n    let mut paren_level_char_length_string_index16 = 0;\n    let mut paren_level_char_length_string_index17\
    \ = 0;\n    let mut paren_level_char_length_string_index18 = 0;\n    let mut paren_level_char_length_string_index19\
    \ = 0;\n    let mut paren_level_char_length_string_index20 = 0;\n    let mut paren_level_char_length_string_index21\
    \ = 0;\n    let mut paren_level_char_length_string_index22 = 0;\n    let mut paren_level_char_length_string_index23\
    \ = 0;\n    let mut paren_level_char_length_string_index24 = 0;\n    let mut paren_level_char_length_string_index25\
    \ = 0;\n    let mut paren_level_char_length_string_index26 = 0;\n    let mut paren_level_char_length_string_index27\
    \ = 0;\n    let mut paren_level_char_length_string_index28 = 0;\n    let mut paren_level_char_length_string_index29\
    \ = 0;\n    let mut paren_level_char_length_string_index30 = 0;\n    let mut paren_level_char_length_string_index31\
    \ = 0;\n    let mut paren_level_char_length_string_index32 = 0;\n    let mut paren_level_char_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnn8dkz5c.rs:48:30\n   |\n\
    48 |     let mut paren_level_char_\n   |                              ^ help:\
    \ add `;` here\n49 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpnn8dkz5c.rs:53:17\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnn8dkz5c.rs:53:25\n \
    \  |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnn8dkz5c.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnn8dkz5c.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnn8dkz5c.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnn8dkz5c.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnn8dkz5c.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9g61ktss.rs:41:56\n   |\n\
    41 |     let mut paren_nesting_nesting_nesting_nesting_level\n   |           \
    \                                             ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9g61ktss.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9g61ktss.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9g61ktss.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9g61ktss.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9g61ktss.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9g61ktss.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9g61ktss.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string_index = 0;\n    let mut paren_level_string\
    \ = paren_string;\n    while paren_level_string_index < paren_string.len() {\n\
    \        let mut paren_level_string = paren_string;\n        let mut paren_level_string_index\
    \ = 0;\n        while paren_level_string_index < paren_string.len() {\n      \
    \      let mut paren_level_string = paren_string;\n            let mut paren_level_string_index\
    \ = 0;\n            while paren_level_string_index < paren_string.len() {\n  \
    \              let mut paren_level_string = paren_string;\n                let\
    \ mut paren_level_string_index = 0;\n                while paren_level_string_index\
    \ < paren_string.len() {\n                    let mut paren_level_string = paren_string;\n\
    \                    let mut paren_level_string_index = 0;\n                 \
    \   while paren_level_string_index < paren_string.len() {\n                  \
    \      let mut paren_level_string = paren_string;\n                        let\
    \ mut paren_level_string_index = 0;\n                        while paren_level_string_index\
    \ < paren_string.len() {\n                            let mut paren_level_string\
    \ = paren_string;\n                            let mut paren_level_string_index\
    \ = 0;\n                            while paren_level_string_index < paren_string.len()\
    \ {\n                                let mut paren_level_string = paren_string;\n\
    \                                let mut paren_level_string_index = 0;\n     \
    \                           while paren_level_string_index < paren_string.len()\
    \ {\n                                    let mut paren_level_string = paren_string;\n\
    \                                    let mut paren_level_string_index = 0;\n \
    \                                   while paren_level_string_index < paren_string.len()\
    \ {\n                                        let mut paren_level_string = paren_string;\n\
    \                                        let mut paren_level_string_index = 0;\n\
    \                                        while paren_level_string_index < paren_string.len()\
    \ {\n                                            let mut paren_level_string =\
    \ paren_string;\n                                            let mut paren_level_string_index\
    \ = 0;\n                                            while paren_level_string_index\
    \ < paren_string.len() {\n                                                let\
    \ mut paren_level_string = paren_string;\n                                   \
    \             let mut paren_level_string_index = 0;\n                        \
    \                        while paren_level_string_index < paren_string.len() {\n\
    \                                                    let mut paren_level_string\
    \ = paren_string;\n                                                    let mut\
    \ paren_level_string_index = 0;\n                                            \
    \        \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0a9oyu0z.rs:57:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n13 |     while paren_level_string_index < paren_string.len() {\n   |    \
    \                                                     - unclosed delimiter\n...\n\
    16 |         while paren_level_string_index < paren_string.len() {\n   |     \
    \                                                        - unclosed delimiter\n\
    ...\n19 |             while paren_level_string_index < paren_string.len() {\n\
    \   |                                                                 - unclosed\
    \ delimiter\n...\n22 |                 while paren_level_string_index < paren_string.len()\
    \ {\n   |                                                                    \
    \ - unclosed delimiter\n...\n25 |                     while paren_level_string_index\
    \ < paren_string.len() {\n   |                                               \
    \                          - unclosed delimiter\n...\n28 |                   \
    \      while paren_level_string_index < paren_string.len() {\n   |           \
    \                                                                  - unclosed\
    \ delimiter\n...\n31 |                             while paren_level_string_index\
    \ < paren_string.len() {\n   |                                               \
    \                                  - unclosed delimiter\n...\n34 |           \
    \                      while paren_level_string_index < paren_string.len() {\n\
    \   |                                                                        \
    \             - unclosed delimiter\n...\n37 |                                \
    \     while paren_level_string_index < paren_string.len() {\n   |            \
    \                                                                            \
    \ - unclosed delimiter\n...\n40 |                                         while\
    \ paren_level_string_index < paren_string.len() {\n   |                      \
    \                                                       "
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_chars_count\
    \ = Vec::new();\n    let mut paren_level_chars_index = Vec::new();\n    let mut\
    \ paren_level_chars_index_count = Vec::new();\n    let mut paren_level_chars_index_count\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max = Vec::new();\n\
    \    let mut paren_level_chars_index_count_max_count = Vec::new();\n    let mut\
    \ paren_level_chars_index_count_max_count_max = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_max_max_max_max_max_max_max_max_max\
    \ = Vec::new();\n    let mut paren_level_chars_index_count_max_count_max_max_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzaraicz6.rs:34:61\n   |\n\
    34 |     let mut paren_level_chars_index_count_max_count_max_max_\n   |      \
    \                                                       ^ help: add `;` here\n\
    35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpzaraicz6.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzaraicz6.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzaraicz6.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzaraicz6.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzaraicz6.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzaraicz6.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpzaraicz6.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_stack\
    \ = vec![];\n    let mut paren_stack_len = paren_string.len();\n    let mut paren_stack_pos\
    \ = 0;\n    let mut paren_stack_char = paren_string[paren_stack_pos];\n    while\
    \ paren_stack_pos < paren_string.len() {\n        if paren_stack_char == ')' {\n\
    \            paren_stack.pop();\n            paren_stack_len -= paren_stack.len();\n\
    \            paren_stack_pos += 1;\n            paren_stack_char = paren_string[paren_stack_pos];\n\
    \        }\n        if paren_stack_char == '(' {\n            paren_stack.push(paren_level);\n\
    \            paren_stack_len += 1;\n            paren_stack_pos += 1;\n      \
    \      paren_stack_char = paren_string[paren_stack_pos];\n        }\n        paren_level\
    \ += 1;\n        paren_stack_char = paren_string[paren_stack_pos];\n    }\n  \
    \  paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpu81fv0cg.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu81fv0cg.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu81fv0cg.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpu81fv0cg.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu81fv0cg.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu81fv0cg.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpu81fv0cg.rs:11:32\n   |\n11 |     let mut paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is\
    \ not implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpu81fv0cg.rs:17:32\n   |\n17 |             paren_stack_char\
    \ = paren_string[paren_stack_pos];\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpu81fv0cg.rs:23:32\n   |\n23 |            \
    \ paren_stack_char = paren_string[paren_stack_pos];\n   |                    \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: usize = 0;\n    let mut paren_levels: Vec<isize> = vec![];\n\
    \    for paren in paren_string.chars() {\n        if paren == '(' {\n        \
    \    paren_stack.push(paren_level);\n            paren_level += 1;\n         \
    \   paren_levels.push(paren_level);\n        } else if paren == ')' {\n      \
    \      paren_level -= 1;\n            if paren_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        } else if paren == ' ' {\n            if paren_stack.len()\
    \ == 0 {\n                continue;\n            }\n            paren_level -=\
    \ 1;\n            paren_levels.push(paren_level);\n        }\n    }\n    paren_levels\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjpxn4b4p.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpxn4b4p.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjpxn4b4p.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjpxn4b4p.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjpxn4b4p.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjpxn4b4p.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpxn4b4p.rs:12:30\n\
    \   |\n12 |             paren_stack.push(paren_level);\n   |                 \
    \             ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n12 |             paren_stack.push(paren_level.try_into().unwrap());\n \
    \  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjpxn4b4p.rs:14:31\n   |\n14 |             paren_levels.push(paren_level);\n\
    \   |                               ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |             paren_levels.push(paren_level.try_into().unwrap());\n\
    \   |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjpxn4b4p.rs:18:34\n   |\n18 |        "
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_chars.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_chars.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpm7k65vuy.rs:47:30\n   |\n\
    47 |     let mut paren_level_char_\n   |                              ^ help:\
    \ add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpm7k65vuy.rs:52:17\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpm7k65vuy.rs:52:25\n \
    \  |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpm7k65vuy.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm7k65vuy.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm7k65vuy.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm7k65vuy.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpm7k65vuy.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphqrmqwoo.rs:37:32\n   |\n\
    37 |     let mut paren_levels_stack_\n   |                                ^ help:\
    \ add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmphqrmqwoo.rs:42:17\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphqrmqwoo.rs:42:25\n \
    \  |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphqrmqwoo.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphqrmqwoo.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphqrmqwoo.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphqrmqwoo.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmphqrmqwoo.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_next = 0;\n    let mut paren_levels_stack_ptr_next2\
    \ = 0;\n    let mut paren_levels_stack_ptr_next3 = 0;\n    let mut paren_levels_stack_ptr_next4\
    \ = 0;\n    let mut paren_levels_stack_ptr_next5 = 0;\n    let mut paren_levels_stack_ptr_next6\
    \ = 0;\n    let mut paren_levels_stack_ptr_next7 = 0;\n    let mut paren_levels_stack_ptr_next8\
    \ = 0;\n    let mut paren_levels_stack_ptr_next9 = 0;\n    let mut paren_levels_stack_ptr_next10\
    \ = 0;\n    let mut paren_levels_stack_ptr_next11 = 0;\n    let mut paren_levels_stack_ptr_next12\
    \ = 0;\n    let mut paren_levels_stack_ptr_next13 = 0;\n    let mut paren_levels_stack_ptr_next14\
    \ = 0;\n    let mut paren_levels_stack_ptr_next15 = 0;\n    let mut paren_levels_stack_ptr_next16\
    \ = 0;\n    let mut paren_levels_stack_ptr_next17 = 0;\n    let mut paren_levels_stack_ptr_next18\
    \ = 0;\n    let mut paren_levels_stack_ptr_next19 = 0;\n    let mut paren_levels_stack_ptr_next20\
    \ = 0;\n    let mut paren_levels_stack_ptr_next21 = 0;\n    let mut paren_levels_stack_ptr_next22\
    \ = 0;\n    let mut paren_levels_stack_ptr_next23 = 0;\n    let mut paren_levels_stack_ptr_next24\
    \ = 0;\n    let mut paren_levels_stack_ptr_next25 = 0;\n    let mut paren_levels_stack_ptr_next26\
    \ = 0;\n    let mut paren_levels_stack_ptr_next27 = 0;\n    let mut paren_levels_stack_ptr_next28\
    \ = 0;\n    let mut paren_levels_stack_ptr_next29 = 0;\n    let mut paren_levels_stack_ptr_next30\
    \ = 0;\n    let mut paren_levels_stack_ptr_next31 = 0;\n    let mut paren_levels_stack_ptr_next32\
    \ = 0;\n    let mut paren_levels_stack_ptr_next33 = 0;\n    let mut paren_levels_stack\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmjfg7k10.rs:44:31\n   |\n\
    44 |     let mut paren_levels_stack\n   |                               ^ help:\
    \ add `;` here\n45 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpmjfg7k10.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpmjfg7k10.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmjfg7k10.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmjfg7k10.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmjfg7k10.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmjfg7k10.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpmjfg7k10.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_levels\
    \ = vec![];\n    let mut paren_nesting_levels = vec![];\n    let mut paren_levels_len\
    \ = 0;\n    let mut paren_nesting_levels_len = 0;\n    let mut paren_levels_lens\
    \ = vec![];\n    let mut paren_nesting_levels_lens = vec![];\n    let mut paren_levels_lens_len\
    \ = 0;\n    let mut paren_nesting_levels_lens_len = 0;\n    let mut paren_levels_lens_lens\
    \ = vec![];\n    let mut paren_nesting_levels_lens_lens = vec![];\n    let mut\
    \ paren_levels_lens_lens_len = 0;\n    let mut paren_nesting_levels_lens_lens_len\
    \ = 0;\n    let mut paren_levels_lens_lens_lens = vec![];\n    let mut paren_nesting_levels_lens_lens_lens\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_len = 0;\n    let mut paren_nesting_levels_lens_lens_lens_len\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens = vec![];\n    let mut paren_nesting_levels_lens_lens_lens_lens\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_len = 0;\n    let mut\
    \ paren_nesting_levels_lens_lens_lens_lens_len = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens\
    \ = vec![];\n    let mut paren_nesting_levels_lens_lens_lens_lens_lens = vec![];\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_len = 0;\n    let mut paren_nesting_levels_lens_lens_lens_lens_lens_len\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens = vec![];\n   \
    \ let mut paren_nesting_levels_lens_lens_lens_lens_lens_lens = vec![];\n    let\
    \ mut paren_levels_lens_lens_lens_lens_lens_lens_len = 0;\n    let mut paren_nesting_levels_lens_len\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpg9_zc5zl.rs:37:42\n   |\n\
    37 |     let mut paren_nesting_levels_lens_len\n   |                         \
    \                 ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg9_zc5zl.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg9_zc5zl.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg9_zc5zl.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg9_zc5zl.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg9_zc5zl.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg9_zc5zl.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpg9_zc5zl.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmfu3q2d0.rs:30:59\n   |\n\
    30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n   |        \
    \                                                   ^ help: add `;` here\n31 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpmfu3q2d0.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmfu3q2d0.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmfu3q2d0.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmfu3q2d0.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmfu3q2d0.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmfu3q2d0.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmfu3q2d0.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_stack = vec![0];\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7qx8b5m0.rs:43:55\n   |\n\
    43 |     let mut paren_level_stack_top = paren_level_stack_\n   |            \
    \                                           ^ help: add `;` here\n44 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `paren_level_stack_` in\
    \ this scope\n  --> /tmp/tmp7qx8b5m0.rs:43:37\n   |\n43 |     let mut paren_level_stack_top\
    \ = paren_level_stack_\n   |                                     ^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_level_stack`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7qx8b5m0.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7qx8b5m0.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7qx8b5m0.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7qx8b5m0.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7qx8b5m0.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7qx8b5m0.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7qx8b5m0.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nest\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnj_ugatb.rs:41:31\n   |\n\
    41 |     let mut paren_nesting_nest\n   |                               ^ help:\
    \ add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnj_ugatb.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnj_ugatb.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnj_ugatb.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqt7kllc4.rs:30:51\n   |\n\
    30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\n   |                \
    \                                   ^ help: add `;` here\n31 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqt7kllc4.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqt7kllc4.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqt7kllc4.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqt7kllc4.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqt7kllc4.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqt7kllc4.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqt7kllc4.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphkwtyu0d.rs:37:43\n   |\n\
    37 |     let mut paren_levels_stack_top = paren\n   |                        \
    \                   ^ help: add `;` here\n38 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmphkwtyu0d.rs:37:38\n\
    \   |\n37 |     let mut paren_levels_stack_top = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmphkwtyu0d.rs:42:17\n   |\n42 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphkwtyu0d.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphkwtyu0d.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphkwtyu0d.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphkwtyu0d.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphkwtyu0d.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmphkwtyu0d.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an e"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = Vec::new();\n\
    \    let mut paren_stack_len = paren_string.len();\n    let mut paren_stack_pos\
    \ = 0;\n    let mut paren_stack_char = paren_string[paren_stack_pos];\n    while\
    \ paren_stack_pos < paren_string.len() {\n        if paren_stack_char == ')' {\n\
    \            paren_stack.pop();\n            paren_stack_len -= paren_stack.len();\n\
    \            paren_stack_pos += 1;\n            level += 1;\n        } else if\
    \ paren_stack_char == '(' {\n            paren_stack.push(level);\n          \
    \  paren_stack_len += 1;\n            paren_stack_pos += 1;\n            level\
    \ += 1;\n        } else {\n            paren_stack_pos += 1;\n            level\
    \ += 1;\n        }\n        paren_stack_char = paren_string[paren_stack_pos];\n\
    \    }\n    paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpa1minf2s.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa1minf2s.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa1minf2s.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa1minf2s.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa1minf2s.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa1minf2s.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpa1minf2s.rs:11:32\n   |\n11 |     let mut paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is\
    \ not implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpa1minf2s.rs:27:28\n   |\n27 |         paren_stack_char\
    \ = paren_string[paren_stack_pos];\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_char = 0;\n\
    \    let mut paren_level_char_next = 0;\n    let mut paren_level_char_next_index\
    \ = 0;\n    let mut paren_level_char_next_index2 = 0;\n    let mut paren_level_char_next_index3\
    \ = 0;\n    let mut paren_level_char_next_index4 = 0;\n    let mut paren_level_char_next_index5\
    \ = 0;\n    let mut paren_level_char_next_index6 = 0;\n    let mut paren_level_char_next_index7\
    \ = 0;\n    let mut paren_level_char_next_index8 = 0;\n    let mut paren_level_char_next_index9\
    \ = 0;\n    let mut paren_level_char_next_index10 = 0;\n    let mut paren_level_char_next_index11\
    \ = 0;\n    let mut paren_level_char_next_index12 = 0;\n    let mut paren_level_char_next_index13\
    \ = 0;\n    let mut paren_level_char_next_index14 = 0;\n    let mut paren_level_char_next_index15\
    \ = 0;\n    let mut paren_level_char_next_index16 = 0;\n    let mut paren_level_char_next_index17\
    \ = 0;\n    let mut paren_level_char_next_index18 = 0;\n    let mut paren_level_char_next_index19\
    \ = 0;\n    let mut paren_level_char_next_index20 = 0;\n    let mut paren_level_char_next_index21\
    \ = 0;\n    let mut paren_level_char_next_index22 = 0;\n    let mut paren_level_char_next_index23\
    \ = 0;\n    let mut paren_level_char_next_index24 = 0;\n    let mut paren_level_char_next_index25\
    \ = 0;\n    let mut paren_level_char_next_index26 = 0;\n    let mut paren_level_char_next_index27\
    \ = 0;\n    let mut paren_level_char_next_index28 = 0;\n    let mut paren_level_char_next_index29\
    \ = 0;\n    let mut paren_level_char_next_index30 = 0;\n    let mut paren_level_char_next_index31\
    \ = 0;\n    let mut paren_level_char_next_index32 = 0;\n    let mut paren_level_char_next_index33\
    \ = 0;\n    let mut paren_level_char_next_index34 = 0;\n    let mut paren_level_char_next_index35\
    \ = 0;\n    let mut paren_level_char_next_index36 = 0;\n    let mut paren_level_char_next_index37\
    \ = 0;\n    let mut paren_level_char_next_index38 = 0;\n    let mut paren_level_char_next_index39\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp088ihres.rs:51:11\n   |\n\
    51 |     let mu\n   |           ^ help: add `;` here\n52 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp088ihres.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp088ihres.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp088ihres.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp088ihres.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp088ihres.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp088ihres.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp088ihres.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_char_indexes: Vec<usize>;\n    let mut paren_level_char_indexes_len:\
    \ usize;\n    let mut paren_level_char_indexes_len_index = 0;\n    let mut paren_level_char_indexes_len_indexes:\
    \ Vec<usize>;\n    let mut paren_level_char_indexes_len_indexes_len: usize;\n\
    \    let mut paren_level_char_indexes_len_indexes_len_index = 0;\n    let mut\
    \ paren_level_char_indexes_len_indexes_len_indexes: Vec<usize>;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len:\
    \ usize;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<usize>;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes_len:\
    \ usize;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<usize>;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<usize>;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<usize>;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_char_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<usize>;\n    let mut paren_level_char_indexes_len\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_9nh1e0z.rs:32:41\n   |\n\
    32 |     let mut paren_level_char_indexes_len\n   |                          \
    \               ^ help: add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_9nh1e0z.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_9nh1e0z.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_9nh1e0z.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_9nh1e0z.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_9nh1e0z.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_9nh1e0z.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_9nh1e0z.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphqrmqwoo.rs:37:32\n   |\n\
    37 |     let mut paren_levels_stack_\n   |                                ^ help:\
    \ add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmphqrmqwoo.rs:42:17\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphqrmqwoo.rs:42:25\n \
    \  |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphqrmqwoo.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphqrmqwoo.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphqrmqwoo.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphqrmqwoo.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmphqrmqwoo.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = vec![];\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.chars().count();\n    let mut paren_level_char_pos = 0;\n   \
    \ let mut paren_level_char_len = paren_string.chars().count();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n   \
    \ let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_string.chars().count();\n\
    \    let mut paren_level_char_pos = 0;\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbefzrsvs.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbefzrsvs.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbefzrsvs.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbefzrsvs.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbefzrsvs.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbefzrsvs.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbefzrsvs.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt0qp7bi3.rs:35:27\n   |\n\
    35 |     let mut paren_nesting_\n   |                           ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt0qp7bi3.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt0qp7bi3.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt0qp7bi3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt0qp7bi3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt0qp7bi3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt0qp7bi3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpt0qp7bi3.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_max = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_max_ptr = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_level\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6te3u7el.rs:30:62\n   |\n\
    30 |     let mut paren_levels_stack_ptr_max_ptr_copy = paren_level\n   |     \
    \                                                         ^ help: add `;` here\n\
    31 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp6te3u7el.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6te3u7el.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6te3u7el.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6te3u7el.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6te3u7el.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6te3u7el.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp6te3u7el.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut \n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp9vkrwdnm.rs:38:1\n\
    \   |\n38 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp9vkrwdnm.rs:42:17\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp9vkrwdnm.rs:42:25\n \
    \  |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9vkrwdnm.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9vkrwdnm.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9vkrwdnm.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9vkrwdnm.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_3vu9mbr.rs:30:85\n   |\n\
    30 |     let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \             ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_3vu9mbr.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_3vu9mbr.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_3vu9mbr.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_3vu9mbr.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_3vu9mbr.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_3vu9mbr.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_3vu9mbr.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack;\n    let mut paren_levels_stack_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_size = paren_levels_stack_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_ptr_size\
    \ = paren_levels_stack_ptr_ptr.len();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_size\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr.len();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphjjia5wu.rs:33:31\n   |\n\
    33 |     let mut paren_levels_stack\n   |                               ^ help:\
    \ add `;` here\n34 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr` in this scope\n  --> /tmp/tmphjjia5wu.rs:28:63\n\
    \   |\n28 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.len();\n\
    \   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmphjjia5wu.rs:30:63\n   |\n30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_size\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.len();\n   |                  \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmphjjia5wu.rs:32:63\n   |\n32 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_size\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.len();\n   |                  \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphjjia5wu.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphjjia5wu.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphjjia5wu.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_nestings_stack\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = 0;\n    let mut paren_nestings_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr = 0;\n    let mut paren_nestings_ptr = 0;\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr;\n    let mut paren_nestings_ptr_end\
    \ = paren_nestings_ptr;\n    let mut paren_levels_ptr_end_ptr = paren_levels_ptr_end;\n\
    \    let mut paren_nestings_ptr_end_ptr = paren_nestings_ptr_end;\n    let mut\
    \ paren_levels_ptr_end_ptr_end = paren_levels_ptr_end_ptr;\n    let mut paren_nestings_ptr_end_ptr_end\
    \ = paren_nestings_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr\
    \ = paren_levels_ptr_end_ptr_end;\n    let mut paren_nestings_ptr_end_ptr_end_ptr\
    \ = paren_nestings_ptr_end_ptr_end;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_ptr_end_ptr_end_ptr;\n    let mut paren_nestings_ptr_end_ptr_end_ptr_end\
    \ = paren_nestings_ptr_end_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_ptr_end_ptr_end_ptr_end;\n    let mut paren_nestings_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_nestings_ptr_end_ptr_end_ptr_end;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_ptr_end_ptr_end_ptr_end_ptr;\n    let mut paren_nestings_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_nestings_ptr_end_ptr_end_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp75a64laj.rs:31:58\n   |\n\
    31 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n   |         \
    \                                                 ^ help: add `;` here\n32 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp75a64laj.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp75a64laj.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp75a64laj.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp75a64laj.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp75a64laj.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp75a64laj.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp75a64laj.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_depth = 0;\n    let mut paren_level_level = 0;\n\
    \    let mut paren_level_level_depth = 0;\n    let mut paren_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_depth = 0;\n    let mut paren_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_depth = 0;\n    let mut paren_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_depth = 0;\n   \
    \ let mut paren_level_level_level_level_level_level_level = 0;\n    let mut paren_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level = 0;\n\
    \    let mut paren_level_level_level_level_level_level_level_level_depth = 0;\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppw6vnc38.rs:37:127\n   |\n\
    37 |     let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_\n\
    \   |                                                                        \
    \                                                       ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmppw6vnc38.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppw6vnc38.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppw6vnc38.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppw6vnc38.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppw6vnc38.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppw6vnc38.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmppw6vnc38.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: isize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == '(' {\n            paren_stack.push(paren_depth);\n      \
    \      paren_depth += 1;\n        } else if paren == ')' {\n            paren_depth\
    \ -= 1;\n            if paren_depth == 0 {\n                paren_stack.push(paren_depth);\n\
    \            }\n        } else {\n            paren_depth += 1;\n        }\n \
    \   }\n    paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp95jbnxpx.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp95jbnxpx.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp95jbnxpx.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp95jbnxpx.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp95jbnxpx.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp95jbnxpx.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nest\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnj_ugatb.rs:41:31\n   |\n\
    41 |     let mut paren_nesting_nest\n   |                               ^ help:\
    \ add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnj_ugatb.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnj_ugatb.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnj_ugatb.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.chars().count();\n    let mut paren_level_char_len = paren_level_char_len\
    \ as usize;\n    let mut paren_level_char_pos = paren_level_char_len as usize;\n\
    \    let mut paren_level_char_pos = paren_level_char_pos as usize;\n    let mut\
    \ paren_level_char_len = paren_level_char_len as usize;\n    let mut paren_level_char_pos\
    \ = paren_level_char_pos as usize;\n    let mut paren_level_char_len = paren_level_char_len\
    \ as usize;\n    let mut paren_level_char_pos = paren_level_char_pos as usize;\n\
    \    let mut paren_level_char_len = paren_level_char_len as usize;\n    let mut\
    \ paren_level_char_pos = paren_level_char_pos as usize;\n    let mut paren_level_char_len\
    \ = paren_level_char_len as usize;\n    let mut paren_level_char_pos = paren_level_char_pos\
    \ as usize;\n    let mut paren_level_char_len = paren_level_char_len as usize;\n\
    \    let mut paren_level_char_pos = paren_level_char_pos as usize;\n    let mut\
    \ paren_level_char_len = paren_level_char_len as usize;\n    let mut paren_level_char_pos\
    \ = paren_level_char_pos as usize;\n    let mut paren_level_char_len = paren_level_char_len\
    \ as usize;\n    let mut paren_level_char_pos = paren_level_char_pos as usize;\n\
    \    let mut paren_level_char_len = paren_level_char_len as usize;\n    let mut\
    \ paren_level_char_pos = paren_level_char_pos as usize;\n    let mut paren_level_char_len\
    \ = paren_level_char_len as usize;\n    let mut paren_level_char_pos = paren_level_char_pos\
    \ as usize;\n    let mut paren_level_char_len = paren_level_char_len as usize;\n\
    \    let mut paren_level_char_pos = paren_level_char_pos as usize;\n    let mut\
    \ paren_level_char_len = paren_level_char_len as usize;\n    let mut paren_level_char_pos\
    \ = paren_level_char_pos as usize;\n\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9lpo_o89.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9lpo_o89.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9lpo_o89.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9lpo_o89.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9lpo_o89.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9lpo_o89.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9lpo_o89.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack.len();\n    let mut paren_levels_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpyu40qe_0.rs:38:26\n   |\n\
    38 |     let mut paren_levels_\n   |                          ^ help: add `;`\
    \ here\n39 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpyu40qe_0.rs:43:17\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpyu40qe_0.rs:43:25\n \
    \  |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyu40qe_0.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyu40qe_0.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyu40qe_0.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyu40qe_0.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpyu40qe_0.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end = Vec::new();\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbl20gd9k.rs:28:69\n   |\n\
    28 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\n  \
    \ |                                                                     ^ help:\
    \ add `;` here\n29 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpbl20gd9k.rs:33:17\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpbl20gd9k.rs:33:25\n \
    \  |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbl20gd9k.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbl20gd9k.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbl20gd9k.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbl20gd9k.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpbl20gd9k.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_level_count = 0;\n    for paren\
    \ in paren_string.chars() {\n        if paren == '(' {\n            paren_stack.push(paren_level);\n\
    \            paren_level_count += 1;\n        } else if paren == ')' {\n     \
    \       paren_level -= 1;\n            paren_level_count -= 1;\n            if\
    \ paren_level_count == 0 {\n                paren_stack.push(paren_level);\n \
    \           }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq98u5cxe.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq98u5cxe.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq98u5cxe.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq98u5cxe.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq98u5cxe.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq98u5cxe.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels = vec![];\n    let mut paren_levels_len = 0;\n\
    \    let mut paren_levels_lens = vec![];\n    let mut paren_levels_lens_len =\
    \ 0;\n    let mut paren_levels_lens_len2 = 0;\n    let mut paren_levels_lens_len3\
    \ = 0;\n    let mut paren_levels_lens_len4 = 0;\n    let mut paren_levels_lens_len5\
    \ = 0;\n    let mut paren_levels_lens_len6 = 0;\n    let mut paren_levels_lens_len7\
    \ = 0;\n    let mut paren_levels_lens_len8 = 0;\n    let mut paren_levels_lens_len9\
    \ = 0;\n    let mut paren_levels_lens_len10 = 0;\n    let mut paren_levels_lens_len11\
    \ = 0;\n    let mut paren_levels_lens_len12 = 0;\n    let mut paren_levels_lens_len13\
    \ = 0;\n    let mut paren_levels_lens_len14 = 0;\n    let mut paren_levels_lens_len15\
    \ = 0;\n    let mut paren_levels_lens_len16 = 0;\n    let mut paren_levels_lens_len17\
    \ = 0;\n    let mut paren_levels_lens_len18 = 0;\n    let mut paren_levels_lens_len19\
    \ = 0;\n    let mut paren_levels_lens_len20 = 0;\n    let mut paren_levels_lens_len21\
    \ = 0;\n    let mut paren_levels_lens_len22 = 0;\n    let mut paren_levels_lens_len23\
    \ = 0;\n    let mut paren_levels_lens_len24 = 0;\n    let mut paren_levels_lens_len25\
    \ = 0;\n    let mut paren_levels_lens_len26 = 0;\n    let mut paren_levels_lens_len27\
    \ = 0;\n    let mut paren_levels_lens_len28 = 0;\n    let mut paren_levels_lens_len29\
    \ = 0;\n    let mut paren_levels_lens_len30 = 0;\n    let mut paren_levels_lens_len31\
    \ = 0;\n    let mut paren_levels_lens_len32 = 0;\n    let mut paren_levels_lens_len33\
    \ = 0;\n    let mut paren_levels_lens_len34 = 0;\n    let mut paren_levels_lens_len35\
    \ = 0;\n    let mut paren_levels_lens_\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp00cr2k84.rs:47:31\n   |\n\
    47 |     let mut paren_levels_lens_\n   |                               ^ help:\
    \ add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp00cr2k84.rs:52:17\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp00cr2k84.rs:52:25\n \
    \  |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp00cr2k84.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp00cr2k84.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp00cr2k84.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp00cr2k84.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp00cr2k84.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nest\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnj_ugatb.rs:41:31\n   |\n\
    41 |     let mut paren_nesting_nest\n   |                               ^ help:\
    \ add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnj_ugatb.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnj_ugatb.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnj_ugatb.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptxqsorx1.rs:37:32\n   |\n\
    37 |     let mut paren_levels_stack_\n   |                                ^ help:\
    \ add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmptxqsorx1.rs:42:17\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptxqsorx1.rs:42:25\n \
    \  |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptxqsorx1.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptxqsorx1.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptxqsorx1.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptxqsorx1.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmptxqsorx1.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = 0;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcg3c5sf4.rs:33:39\n   |\n\
    33 |     let mut paren_levels_stack_ptr_ptr\n   |                            \
    \           ^ help: add `;` here\n34 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcg3c5sf4.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcg3c5sf4.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcg3c5sf4.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcg3c5sf4.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcg3c5sf4.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcg3c5sf4.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpcg3c5sf4.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = Vec::new();\n\
    \    let mut paren_stack_len = paren_string.len();\n    let mut paren_stack_pos\
    \ = 0;\n    let mut paren_stack_char = paren_string[paren_stack_pos];\n    while\
    \ paren_stack_pos < paren_string.len() {\n        if paren_stack_char == ')' {\n\
    \            paren_stack.pop();\n            paren_stack_len -= paren_stack.len();\n\
    \            paren_stack_pos += 1;\n            level -= 1;\n        } else if\
    \ paren_stack_char == '(' {\n            paren_stack.push(level);\n          \
    \  paren_stack_len += 1;\n            paren_stack_pos += 1;\n            level\
    \ += 1;\n        } else {\n            paren_stack_pos += 1;\n            paren_stack_char\
    \ = paren_string[paren_stack_pos];\n        }\n    }\n    paren_stack\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3cqn9jsm.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3cqn9jsm.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3cqn9jsm.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3cqn9jsm.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3cqn9jsm.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3cqn9jsm.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmp3cqn9jsm.rs:11:32\n   |\n11 |     let mut paren_stack_char = paren_string[paren_stack_pos];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is\
    \ not implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmp3cqn9jsm.rs:25:32\n   |\n25 |             paren_stack_char\
    \ = paren_string[paren_stack_pos];\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_char.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_char.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0724qj3l.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0724qj3l.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0724qj3l.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0724qj3l.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0724qj3l.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0724qj3l.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0689]: can't call method `len` on ambiguous numeric\
    \ type `{integer}`\n  --> /tmp/tmp0724qj3l.rs:14:53\n   |\n14 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n12 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp0724qj3l.rs:16:53\n   |\n16 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n12 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp0724qj3l.rs:18:53\n   |\n18 |     let mut paren_level_char_len\
    \ = paren_lev"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_depth\
    \ = 0;\n    for paren in paren_string.chars().filter(|c| c == '(' || c == '['\
    \ || c == '{') {\n        if paren_depth == paren_stack.len() {\n            paren_stack.push(paren_depth);\n\
    \        }\n        if paren_depth == paren_stack.len() {\n            paren_depth++;\n\
    \        }\n        if paren_depth == paren_stack.len() {\n            paren_depth++;\n\
    \        }\n        paren_depth++;\n    }\n    paren_stack\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmp681t4_vy.rs:14:25\n\
    \   |\n14 |             paren_depth++;\n   |                         ^ expected\
    \ expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmp681t4_vy.rs:17:25\n\
    \   |\n17 |             paren_depth++;\n   |                         ^ expected\
    \ expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmp681t4_vy.rs:19:21\n\
    \   |\n19 |         paren_depth++;\n   |                     ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp681t4_vy.rs:26:17\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp681t4_vy.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp681t4_vy.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp681t4_vy.rs:27:25\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp681t4_vy.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp681t4_vy.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: can't compare `&char` with `char`\n --> /tmp/tmp681t4_vy.rs:9:52\n\
    \  |\n9 |     for paren in paren_string.chars().filter(|c| c == '(' || c == '['\
    \ || c == '{') {\n  |                                                    ^^ no\
    \ implementation for `&char == char`\n  |\n  = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \ --> /tmp/tmp681t4_vy.rs:9:64\n  |\n9 |     for paren in paren_string.chars().filter(|c|"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_char = 0;\n    let mut paren_level_char_pos = 0;\n  \
    \  let mut paren_level_char_len = paren_string.len();\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_len = paren_level_char_len;\n    let mut paren_level_char_len\
    \ = paren_level_char_len;\n    let mut paren_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd5lvve3l.rs:45:19\n   |\n\
    45 |     let mut paren_\n   |                   ^ help: add `;` here\n46 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd5lvve3l.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd5lvve3l.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd5lvve3l.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd5lvve3l.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd5lvve3l.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd5lvve3l.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpd5lvve3l.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_levels = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr = Vec::new();\n  \
    \  let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n  \
    \  let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnjoetvyx.rs:30:63\n   |\n\
    30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n   |    \
    \                                                           ^ help: add `;` here\n\
    31 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpnjoetvyx.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnjoetvyx.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnjoetvyx.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnjoetvyx.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnjoetvyx.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnjoetvyx.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpnjoetvyx.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    let mut paren_level_count: isize = 0;\n\
    \    let mut paren_level_string: String = String::new();\n    let mut paren_level_string_len:\
    \ usize = 0;\n    let mut paren_level_string_len_len: usize = 0;\n    let mut\
    \ paren_level_string_len_len2: usize = 0;\n    let mut paren_level_string_len_len3:\
    \ usize = 0;\n    let mut paren_level_string_len4: usize = 0;\n    let mut paren_level_string_len5:\
    \ usize = 0;\n    let mut paren_level_string_len6: usize = 0;\n    let mut paren_level_string_len7:\
    \ usize = 0;\n    let mut paren_level_string_len8: usize = 0;\n    let mut paren_level_string_len9:\
    \ usize = 0;\n    let mut paren_level_string_len10: usize = 0;\n    let mut paren_level_string_len11:\
    \ usize = 0;\n    let mut paren_level_string_len12: usize = 0;\n    let mut paren_level_string_len13:\
    \ usize = 0;\n    let mut paren_level_string_len14: usize = 0;\n    let mut paren_level_string_len15:\
    \ usize = 0;\n    let mut paren_level_string_len16: usize = 0;\n    let mut paren_level_string_len17:\
    \ usize = 0;\n    let mut paren_level_string_len18: usize = 0;\n    let mut paren_level_string_len19:\
    \ usize = 0;\n    let mut paren_level_string_len20: usize = 0;\n    let mut paren_level_string_len21:\
    \ usize = 0;\n    let mut paren_level_string_len22: usize = 0;\n    let mut paren_level_string_len23:\
    \ usize = 0;\n    let mut paren_level_string_len24: usize = 0;\n    let mut paren_level_string_len25:\
    \ usize = 0;\n    let mut paren_level_string_len26: usize = 0;\n    let mut paren_level_string_len27:\
    \ usize = 0;\n    let mut paren_level_string_len28: usize = 0;\n    let mut paren_level_string_len29:\
    \ usize = 0;\n    let mut paren_level_string_len30: usize = 0;\n    let mut paren_level_string_len31:\
    \ usize = 0;\n    let mut paren_level_string_len32: usize = 0;\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8x5p_it3.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8x5p_it3.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8x5p_it3.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8x5p_it3.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8x5p_it3.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8x5p_it3.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8x5p_it3.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_stack: Vec<isize> = vec![];\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr = paren_levels_stack_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmp_22q29xr.rs:16:62\n   |\n16 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n   |                    \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmp_22q29xr.rs:23:90\n   |\n23 | ...tr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_22q29xr.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_22q29xr.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_22q29xr.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_22q29xr.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_22q29xr.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_22q29xr.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\ner"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mu\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfuf4xhn7.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfuf4xhn7.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfuf4xhn7.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfuf4xhn7.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfuf4xhn7.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfuf4xhn7.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfuf4xhn7.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfuf4xhn7.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    while !paren_level_string.is_empty()\
    \ {\n        let mut paren_level_string = paren_string;\n        let mut paren_level_count\
    \ = 0;\n        while !paren_level_string.is_empty() {\n            let mut paren_level_string\
    \ = paren_string;\n            let mut paren_level = 0;\n            while !paren_level_string.is_empty()\
    \ {\n                let mut paren_level_string = paren_string;\n            \
    \    let mut paren_level = 0;\n                while !paren_level_string.is_empty()\
    \ {\n                    let mut paren_level_string = paren_string;\n        \
    \            let mut paren_level = 0;\n                    while !paren_level_string.is_empty()\
    \ {\n                        let mut paren_level_string = paren_string;\n    \
    \                    let mut paren_level = 0;\n                        while !paren_level_string.is_empty()\
    \ {\n                            let mut paren_level_string = paren_string;\n\
    \                            let mut paren_level = 0;\n                      \
    \      while !paren_level_string.is_empty() {\n                              \
    \  let mut paren_level_string = paren_string;\n                              \
    \  let mut paren_level = 0;\n                                while !paren_level_string.is_empty()\
    \ {\n                                    let mut paren_level_string = paren_string;\n\
    \                                    let mut paren_level = 0;\n              \
    \                      while !paren_level_string.is_empty() {\n              \
    \                          let mut paren_level_string = paren_string;\n      \
    \                                  let mut paren_level = 0;\n                \
    \                        while !paren_level_string.is_empty() {\n            \
    \                                let mut paren_level_string = paren_string;\n\
    \                                            let mut paren_level = 0;\n      \
    \                                      while !paren_level_string.is_empty() {\n\
    \                                                let mut paren_level_string =\
    \ paren_string;\n                                                let mut paren_level\
    \ = 0;\n                                            }\n                      \
    \                  }\n                                    }\n                \
    \                }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n            paren_level_string\
    \ = paren_string;\n            paren_level_count = 0;\n        }\n        paren_level_string\
    \ = paren_string;\n        paren_level_count = 0;\n    }\n    paren_levels\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp779o4bf8.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp779o4bf8.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp779o4bf8.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp779o4bf8.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp779o4bf8.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp779o4bf8.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_max = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_max_ptr = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy_ptr = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_max.clone();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ paren_levels_stack_ptr_max.clone();\n    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_max.clone();\n    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_max.clone();\n    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_max.clone();\n    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_max.clone();\n    let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpphhz7uzl.rs:26:118\n   |\n\
    26 |     let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_\n   |                                            \
    \                                                                          ^ help:\
    \ add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `paren_levels_stack_ptr_` in this scope\n  --> /tmp/tmpphhz7uzl.rs:26:95\n \
    \  |\n26 |     let mut paren_levels_stack_ptr_max_ptr_copy_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_\n   |                                            \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `paren_levels_stack_ptr`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpphhz7uzl.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpphhz7uzl.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpphhz7uzl.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpphhz7uzl.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpphhz7uzl.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpphhz7uzl.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpphhz7uzl.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  --------"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_max_count\
    \ = 0;\n    let mut paren_level_max_count_index = 0;\n    let mut paren_level_max_count_index2\
    \ = 0;\n    let mut paren_level_max_count_index3 = 0;\n    let mut paren_level_max_count_index4\
    \ = 0;\n    let mut paren_level_max_count_index5 = 0;\n    let mut paren_level_max_count_index6\
    \ = 0;\n    let mut paren_level_max_count_index7 = 0;\n    let mut paren_level_max_count_index8\
    \ = 0;\n    let mut paren_level_max_count_index9 = 0;\n    let mut paren_level_max_count_index10\
    \ = 0;\n    let mut paren_level_max_count_index11 = 0;\n    let mut paren_level_max_count_index12\
    \ = 0;\n    let mut paren_level_max_count_index13 = 0;\n    let mut paren_level_max_count_index14\
    \ = 0;\n    let mut paren_level_max_count_index15 = 0;\n    let mut paren_level_max_count_index16\
    \ = 0;\n    let mut paren_level_max_count_index17 = 0;\n    let mut paren_level_max_count_index18\
    \ = 0;\n    let mut paren_level_max_count_index19 = 0;\n    let mut paren_level_max_count_index20\
    \ = 0;\n    let mut paren_level_max_count_index21 = 0;\n    let mut paren_level_max_count_index22\
    \ = 0;\n    let mut paren_level_max_count_index23 = 0;\n    let mut paren_level_max_count_index24\
    \ = 0;\n    let mut paren_level_max_count_index25 = 0;\n    let mut paren_level_max_count_index26\
    \ = 0;\n    let mut paren_level_max_count_index27 = 0;\n    let mut paren_level_max_count_index28\
    \ = 0;\n    let mut paren_level_max_count_index29 = 0;\n    let mut paren_level_max_count_index30\
    \ = 0;\n    let mut paren_level_max_count_index31 = 0;\n    let mut paren_level_max_count_index32\
    \ = 0;\n    let mut paren_level_max_count_index33 = 0;\n    let mut paren_level_max_count_index34\
    \ = 0;\n    let mut paren_level_max_count_index35 = 0;\n    let mut paren_level_max_count_index36\
    \ = 0;\n    let mut paren_level_max_count_index37 = 0;\n    let mut paren_level_max_count_index38\
    \ = 0;\n    let mut paren_level_max_count_index39 = 0;\n    let mut paren_level_max_count_index40\
    \ = 0;\n\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpalabrmfw.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpalabrmfw.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpalabrmfw.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpalabrmfw.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpalabrmfw.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpalabrmfw.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpalabrmfw.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphzbyweho.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmphzbyweho.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphzbyweho.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphzbyweho.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphzbyweho.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphzbyweho.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphzbyweho.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphzbyweho.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvd8uavtu.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvd8uavtu.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvd8uavtu.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvd8uavtu.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpvd8uavtu.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_len;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvd01a5gs.rs:37:60\n   |\n\
    37 |     let mut paren_levels_stack_top = paren_levels_stack_ptr\n   |       \
    \                                                     ^ help: add `;` here\n38\
    \ | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpvd01a5gs.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvd01a5gs.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvd01a5gs.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvd01a5gs.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvd01a5gs.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvd01a5gs.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpvd01a5gs.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_ptr = 0;\n    let mut paren_levels_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack = 0;\n    let mut paren_levels_ptr_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack = 0;\n    let mut\
    \ paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr =\
    \ 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack\
    \ = 0;\n    let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjz1dzqfh.rs:30:80\n   |\n\
    30 |     let mut paren_levels_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_stack_ptr_\n\
    \   |                                                                        \
    \        ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjz1dzqfh.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjz1dzqfh.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjz1dzqfh.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjz1dzqfh.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjz1dzqfh.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjz1dzqfh.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjz1dzqfh.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_8ytdta8.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp_8ytdta8.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_8ytdta8.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_8ytdta8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_level_count = vec![];\n    let mut\
    \ paren_level_count_stack = vec![];\n    let mut paren_level_count_stack_count\
    \ = vec![];\n    let mut paren_level_count_stack_count2 = vec![];\n    let mut\
    \ paren_level_count_stack_count3 = vec![];\n    let mut paren_level_count_stack_count4\
    \ = vec![];\n    let mut paren_level_count_stack_count5 = vec![];\n    let mut\
    \ paren_level_count_stack_count6 = vec![];\n    let mut paren_level_count_stack_count7\
    \ = vec![];\n    let mut paren_level_count_stack_count8 = vec![];\n    let mut\
    \ paren_level_count_stack_count9 = vec![];\n    let mut paren_level_count_stack_count10\
    \ = vec![];\n    let mut paren_level_count_stack_count11 = vec![];\n    let mut\
    \ paren_level_count_stack_count12 = vec![];\n    let mut paren_level_count_stack_count13\
    \ = vec![];\n    let mut paren_level_count_stack_count14 = vec![];\n    let mut\
    \ paren_level_count_stack_count15 = vec![];\n    let mut paren_level_count_stack_count16\
    \ = vec![];\n    let mut paren_level_count_stack_count17 = vec![];\n    let mut\
    \ paren_level_count_stack_count18 = vec![];\n    let mut paren_level_count_stack_count19\
    \ = vec![];\n    let mut paren_level_count_stack_count20 = vec![];\n    let mut\
    \ paren_level_count_stack_count21 = vec![];\n    let mut paren_level_count_stack_count22\
    \ = vec![];\n    let mut paren_level_count_stack_count23 = vec![];\n    let mut\
    \ paren_level_count_stack_count24 = vec![];\n    let mut paren_level_count_stack_count25\
    \ = vec![];\n    let mut paren_level_count_stack_count26 = vec![];\n    let mut\
    \ paren_level_count_stack_count27 = vec![];\n    let mut paren_level_count_stack_count28\
    \ = vec![];\n    let mut paren_level_count_stack_count29 = vec![];\n    let mut\
    \ paren_level_count_stack_count30 = vec![];\n    let mut paren_level_count_stack_count31\
    \ = vec![];\n    let mut paren_level_count_stack_count\n}\n\nfn main() {\n   \
    \ let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpc9nrf5h7.rs:42:42\n   |\n\
    42 |     let mut paren_level_count_stack_count\n   |                         \
    \                 ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc9nrf5h7.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc9nrf5h7.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc9nrf5h7.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc9nrf5h7.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc9nrf5h7.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc9nrf5h7.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpc9nrf5h7.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_level_count = 0;\n    let mut paren_level_max_count = 0;\n\
    \    let mut paren_level_max_depth = 0;\n    let mut paren_level_max_depth_count\
    \ = 0;\n    let mut paren_level_max_depth_max_count = 0;\n    let mut paren_level_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_count = 0;\n    let mut paren_level_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth = 0;\n    let mut\
    \ paren_level_max_depth_max_depth_max_depth_count = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth = 0;\n\
    \    let mut paren_level_max_depth_max_depth_max_depth_max_count = 0;\n    let\
    \ mut paren_level_max_depth_max_depth_max_depth_max_depth = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0;\n    let mut paren_level_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0;\n    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprs5nnfwi.rs:41:19\n   |\n\
    41 |     let mut paren_\n   |                   ^ help: add `;` here\n42 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprs5nnfwi.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprs5nnfwi.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprs5nnfwi.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprs5nnfwi.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprs5nnfwi.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprs5nnfwi.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprs5nnfwi.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_levels = Vec::new();\n    let mut paren_levels_len = paren_levels;\n\
    \    let mut paren_levels_len_len = paren_levels_len;\n    let mut paren_levels_len_len_len\
    \ = paren_levels_len_len;\n    let mut paren_levels_len_len_len_len = paren_levels_len_len_len;\n\
    \    let mut paren_levels_len_len_len_len_len = paren_levels_len_len_len_len;\n\
    \    let mut paren_levels_len_len_len_len_len_len = paren_levels_len_len_len_len_len_len;\n\
    \    let mut paren_levels_len_len_len_len_len_len_len_len = paren_levels_len_len_len_len_len_len_len_len_len;\n\
    \    let mut paren_levels_len_len_len_len_len_len_len_len_len_len = paren_levels_len_len_len_len_len_len_len_len_len_len_len_len;\n\
    \    let mut paren_levels_len_len_len_len_len_len_len_len_len_len_len_len = paren_levels_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len;\n\
    \    let mut paren_levels_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp52c2gs8t.rs:19:1094\n   |\n\
    19 |     let mut paren_levels_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_\n\
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           "
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nest\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnj_ugatb.rs:41:31\n   |\n\
    41 |     let mut paren_nesting_nest\n   |                               ^ help:\
    \ add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnj_ugatb.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnj_ugatb.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnj_ugatb.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_levels =\
    \ Vec::new();\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_nesting_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nesting_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_nesting_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nesting_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_nesting_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nesting_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_nesting_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nesting_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_nesting_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nesting_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_nesting_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nesting_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_nesting_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nesting_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_iter = paren\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptgnp1sx_.rs:40:38\n   |\n\
    40 |     let mut paren_levels_iter = paren\n   |                             \
    \         ^ help: add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `paren` in this scope\n  --> /tmp/tmptgnp1sx_.rs:40:33\n \
    \  |\n40 |     let mut paren_levels_iter = paren\n   |                       \
    \          ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmptgnp1sx_.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptgnp1sx_.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptgnp1sx_.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptgnp1sx_.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptgnp1sx_.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptgnp1sx_.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmptgnp1sx_.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --e"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbiomhdam.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpbiomhdam.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbiomhdam.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbiomhdam.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbiomhdam.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbiomhdam.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbiomhdam.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpbiomhdam.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9pwsub7x.rs:39:19\n   |\n\
    39 |     let mut paren_\n   |                   ^ help: add `;` here\n40 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9pwsub7x.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9pwsub7x.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9pwsub7x.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9pwsub7x.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9pwsub7x.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9pwsub7x.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9pwsub7x.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: usize = 0;\n    let mut paren_levels: Vec<isize> = vec![];\n\
    \    let mut paren_levels_len: usize = 0;\n    let mut paren_levels_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_len: usize = 0;\n    let mut paren_levels_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_len: usize = 0;\n \
    \   let mut paren_levels_lens_lens_lens: Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens: Vec<isize> = vec![];\n\
    \    let mut paren_levels_lens_lens_lens_lens_len: usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: usize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi3z_6agm.rs:28:56\n   |\n\
    28 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_\n   |           \
    \                                             ^ help: add `;` here\n29 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi3z_6agm.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi3z_6agm.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi3z_6agm.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi3z_6agm.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi3z_6agm.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi3z_6agm.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi3z_6agm.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    let mut paren_level_count: isize = 0;\n\
    \    let mut paren_level_string: String = String::new();\n    let mut paren_level_string_count:\
    \ isize = 0;\n    let mut paren_level_strings: Vec<String> = vec![];\n    let\
    \ mut paren_level_strings_count: isize = 0;\n    let mut paren_level_strings_string:\
    \ String = String::new();\n    let mut paren_level_strings_string_count: isize\
    \ = 0;\n    let mut paren_level_strings_strings: Vec<String> = vec![];\n    let\
    \ mut paren_level_strings_strings_count: isize = 0;\n    let mut paren_level_strings_strings_string:\
    \ String = String::new();\n    let mut paren_level_strings_strings_string_count:\
    \ isize = 0;\n    let mut paren_level_strings_strings_strings: Vec<String> = vec![];\n\
    \    let mut paren_level_strings_strings_strings_count: isize = 0;\n    let mut\
    \ paren_level_strings_strings_strings_string: String = String::new();\n    let\
    \ mut paren_level_strings_strings_strings_string_count: isize = 0;\n    let mut\
    \ paren_level_strings_strings_strings_strings: Vec<String> = vec![];\n    let\
    \ mut paren_level_strings_strings_strings_strings_count: isize = 0;\n    let mut\
    \ paren_level_strings_strings_strings_strings_string: String = String::new();\n\
    \    let mut paren_level_strings_strings_strings_strings_strings_count: isize\
    \ = 0;\n    let mut paren_level_strings_strings_strings_strings_strings: Vec<String>\
    \ = vec![];\n    let mut paren_level_strings_strings_strings_strings_strings_count:\
    \ isize = 0;\n    let mut paren_level_strings_strings_strings_strings_strings_string:\
    \ String = String::new();\n    let mut paren_level_strings_strings_strings_strings_strings_strings_count:\
    \ isize = 0;\n    let mut paren_level_strings_strings_strings_strings_strings_strings:\
    \ Vec<String> = vec![];\n    let mut paren_level_strings_strings_strings_strings_strings_strings_count:\
    \ isize = 0;\n    let mut paren_level_strings_strings_\n}\n\nfn main() {\n   \
    \ let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8hqbrx5q.rs:34:41\n   |\n\
    34 |     let mut paren_level_strings_strings_\n   |                          \
    \               ^ help: add `;` here\n35 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8hqbrx5q.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8hqbrx5q.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8hqbrx5q.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8hqbrx5q.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8hqbrx5q.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8hqbrx5q.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8hqbrx5q.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoew1ga55.rs:29:65\n   |\n\
    29 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n   |  \
    \                                                               ^ help: add `;`\
    \ here\n30 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpoew1ga55.rs:34:17\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpoew1ga55.rs:34:25\n \
    \  |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoew1ga55.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoew1ga55.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoew1ga55.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoew1ga55.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpoew1ga55.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvd8uavtu.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvd8uavtu.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvd8uavtu.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvd8uavtu.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpvd8uavtu.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_lens = Vec::new();\n    let mut\
    \ paren_levels_lens_len = paren_levels_lens.len();\n    let mut paren_levels_lens_lens\
    \ = paren_levels_lens_lens.len();\n    let mut paren_levels_lens_lens_len = paren_levels_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_len = paren_levels_lens_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_len = paren_levels_lens_lens_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_len = paren_levels_lens_lens_lens_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_len = paren_levels_lens_lens_lens_lens_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len = paren_levels_lens_lens_lens_lens_lens_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = paren_levels_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpm3rq_tgk.rs:23:115\n   |\n\
    23 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = paren_levels_\n   |                                                      \
    \                                                             ^ help: add `;`\
    \ here\n24 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `paren_levels_lens_lens`\
    \ in this scope\n  --> /tmp/tmpm3rq_tgk.rs:13:38\n   |\n13 |     let mut paren_levels_lens_lens\
    \ = paren_levels_lens_lens.len();\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_lens_len`\n\
    \nerror[E0425]: cannot find value `paren_levels_lens_lens_lens` in this scope\n\
    \  --> /tmp/tmpm3rq_tgk.rs:15:47\n   |\n15 |     let mut paren_levels_lens_lens_lens_len\
    \ = paren_levels_lens_lens_lens.len();\n   |                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `paren_levels_lens_lens_len`\n\nerror[E0425]: cannot find value\
    \ `paren_levels_lens_lens_lens_lens` in this scope\n  --> /tmp/tmpm3rq_tgk.rs:16:52\n\
    \   |\n16 |     let mut paren_levels_lens_lens_lens_lens_len = paren_levels_lens_lens_lens_lens.len();\n\
    \   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_lens_lens_lens_len`\n\
    \nerror[E0425]: cannot find value `paren_levels_lens_lens_lens_lens_lens` in this\
    \ scope\n  --> /tmp/tmpm3rq_tgk.rs:17:57\n   |\n17 |     let mut paren_levels_lens_lens_lens_lens_lens_len\
    \ = paren_levels_lens_lens_lens_lens_lens.len();\n   |                       \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `paren_levels_lens_lens_lens_lens_len`\n\
    \nerror[E0425]: cannot find value `paren_levels_lens_lens_lens_lens_lens_lens`\
    \ in this scope\n  --> /tmp/tmpm3rq_tgk.rs:18:62\n   |\n18 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_len\
    \ = paren"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels = vec![];\n    let mut paren_levels_size = paren_stack.len();\n\
    \    let mut paren_levels_pos = 0;\n    let mut paren_levels_pos = paren_stack.len();\n\
    \    let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_stack.len();\n    let mut paren_levels_pos = paren_stack.len();\n  \
    \  let mut paren_levels_pos = paren_stack.len();\n    let mut paren_levels_pos\
    \ = paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgw9dcgvx.rs:44:38\n   |\n\
    44 |     let mut paren_levels_pos = paren_\n   |                             \
    \         ^ help: add `;` here\n45 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `paren_` in this scope\n  --> /tmp/tmpgw9dcgvx.rs:44:32\n\
    \   |\n44 |     let mut paren_levels_pos = paren_\n   |                      \
    \          ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpgw9dcgvx.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpgw9dcgvx.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgw9dcgvx.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgw9dcgvx.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgw9dcgvx.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgw9dcgvx.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpgw9dcgvx.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string_index = 0;\n    while paren_level_string_index\
    \ < paren_string.len() {\n        let mut paren_level_string = paren_string.clone();\n\
    \        let mut paren_level_string_index = 0;\n        while paren_level_string_index\
    \ < paren_level_string.len() {\n            let mut paren_level_string = paren_level_string.clone();\n\
    \            let mut paren_level_string_index = 0;\n            while paren_level_string_index\
    \ < paren_level_string.len() {\n                let mut paren_level_string = paren_level_string.clone();\n\
    \                let mut paren_level_string_index = 0;\n                while\
    \ paren_level_string_index < paren_level_string.len() {\n                    let\
    \ mut paren_level_string = paren_level_string.clone();\n                    let\
    \ mut paren_level_string_index = 0;\n                    while paren_level_string_index\
    \ < paren_level_string.len() {\n                        let mut paren_level_string\
    \ = paren_level_string.clone();\n                        let mut paren_level_string_index\
    \ = 0;\n                        while paren_level_string_index < paren_level_string.len()\
    \ {\n                            let mut paren_level_string = paren_level_string.clone();\n\
    \                            let mut paren_level_string_index = 0;\n         \
    \                   while paren_level_string_index < paren_level_string.len()\
    \ {\n                                let mut paren_level_string = paren_level_string.clone();\n\
    \                                let mut paren_level_string_index = 0;\n     \
    \                           while paren_level_string_index < paren_level_string.len()\
    \ {\n                                    let mut paren_level_string = paren_level_string.clone();\n\
    \                                    let mut paren_level_string_index = 0;\n \
    \                                   while paren_level_string_index < paren_level_string.len()\
    \ {\n                                        let mut paren_level_string = paren_level_string.clone();\n\
    \                                        let mut paren_level_string_index = 0;\n\
    \                                        while paren_level_string_index < paren_level_string.len()\
    \ {\n                                            let mut paren_level_string =\
    \ paren_level_string.clone();\n                                            let\
    \ mut paren_level_string_index = 0;\n                                        \
    \    while paren_level_string_index < paren_level_string.len() {\n           \
    \                                     let mut paren_level_string = paren_level_string.clone();\n\
    \                                                let mut paren_level_string_index\
    \ = 0;\n\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpb3aeezaa.rs:53:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n12 |     while paren_level_string_index < paren_string.len() {\n   |    \
    \                                                     - unclosed delimiter\n...\n\
    15 |         while paren_level_string_index < paren_level_string.len() {\n   |\
    \                                                                   - unclosed\
    \ delimiter\n...\n18 |             while paren_level_string_index < paren_level_string.len()\
    \ {\n   |                                                                    \
    \   - unclosed delimiter\n...\n21 |                 while paren_level_string_index\
    \ < paren_level_string.len() {\n   |                                         \
    \                                  - unclosed delimiter\n...\n24 |           \
    \          while paren_level_string_index < paren_level_string.len() {\n   | \
    \                                                                            \
    \  - unclosed delimiter\n...\n27 |                         while paren_level_string_index\
    \ < paren_level_string.len() {\n   |                                         \
    \                                          - unclosed delimiter\n...\n30 |   \
    \                          while paren_level_string_index < paren_level_string.len()\
    \ {\n   |                                                                    \
    \                   - unclosed delimiter\n...\n33 |                          \
    \       while paren_level_string_index < paren_level_string.len() {\n   |    \
    \                                                                            \
    \           - unclosed delimiter\n...\n36 |                                  \
    \   while paren_level_string_index < paren_level_string.len() {\n   |        \
    \                                                                            \
    \           - unclosed delimiter\n...\n39 |                                  \
    \       while paren_level_string_index < paren_"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    for paren in paren_string.chars() {\n        if paren\
    \ == '(' {\n            paren_depth += 1;\n            paren_stack.push(paren_depth);\n\
    \        } else if paren == ')' {\n            paren_depth -= 1;\n           \
    \ if paren_depth == 0 {\n                paren_stack.push(paren_depth);\n    \
    \        }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6kxawhck.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6kxawhck.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6kxawhck.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6kxawhck.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6kxawhck.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6kxawhck.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_levels_stack\
    \ = vec![0];\n    let mut paren_levels_stack_ptr = 0;\n    let mut paren_levels_ptr\
    \ = 0;\n    let mut paren_levels_ptr_max = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_max_ptr_max_ptr = paren_levels_ptr;\n    let mut\
    \ paren_levels_ptr_max_ptr_max_ptr_max = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max_ptr_max\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_max_\n}\n\nfn main() {\n \
    \   let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdkkuzyfj.rs:27:34\n   |\n\
    27 |     let mut paren_levels_ptr_max_\n   |                                 \
    \ ^ help: add `;` here\n28 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdkkuzyfj.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdkkuzyfj.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdkkuzyfj.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdkkuzyfj.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdkkuzyfj.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdkkuzyfj.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpdkkuzyfj.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len_ptr\
    \ = paren_levels_len;\n    let mut paren_levels_ptr = paren_levels;\n    let mut\
    \ paren_levels_ptr_len = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.len();\n    let mut paren_levels_ptr_end\
    \ = paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqu0jamb3.rs:36:41\n   |\n\
    36 |     let mut paren_levels_ptr_end = paren\n   |                          \
    \               ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `paren` in this scope\n  --> /tmp/tmpqu0jamb3.rs:36:36\n \
    \  |\n36 |     let mut paren_levels_ptr_end = paren\n   |                    \
    \                ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpqu0jamb3.rs:41:17\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqu0jamb3.rs:41:25\n \
    \  |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqu0jamb3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqu0jamb3.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqu0jamb3.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqu0jamb3.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpqu0jamb3.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, tr"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_depth\
    \ = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = vec![];\n   \
    \ let mut paren_levels_len = 0;\n    let mut paren_levels_lens = vec![];\n   \
    \ let mut paren_levels_lens_len = 0;\n    let mut paren_levels_lens_len2 = 0;\n\
    \    let mut paren_levels_lens_len3 = 0;\n    let mut paren_levels_lens_len4 =\
    \ 0;\n    let mut paren_levels_lens_len5 = 0;\n    let mut paren_levels_lens_len6\
    \ = 0;\n    let mut paren_levels_lens_len7 = 0;\n    let mut paren_levels_lens_len8\
    \ = 0;\n    let mut paren_levels_lens_len9 = 0;\n    let mut paren_levels_lens_len10\
    \ = 0;\n    let mut paren_levels_lens_len11 = 0;\n    let mut paren_levels_lens_len12\
    \ = 0;\n    let mut paren_levels_lens_len13 = 0;\n    let mut paren_levels_lens_len14\
    \ = 0;\n    let mut paren_levels_lens_len15 = 0;\n    let mut paren_levels_lens_len16\
    \ = 0;\n    let mut paren_levels_lens_len17 = 0;\n    let mut paren_levels_lens_len18\
    \ = 0;\n    let mut paren_levels_lens_len19 = 0;\n    let mut paren_levels_lens_len20\
    \ = 0;\n    let mut paren_levels_lens_len21 = 0;\n    let mut paren_levels_lens_len22\
    \ = 0;\n    let mut paren_levels_lens_len23 = 0;\n    let mut paren_levels_lens_len24\
    \ = 0;\n    let mut paren_levels_lens_len25 = 0;\n    let mut paren_levels_lens_len26\
    \ = 0;\n    let mut paren_levels_lens_len27 = 0;\n    let mut paren_levels_lens_len28\
    \ = 0;\n    let mut paren_levels_lens_len29 = 0;\n    let mut paren_levels_lens_len30\
    \ = 0;\n    let mut paren_levels_lens_len31 = 0;\n    let mut paren_levels_lens_len32\
    \ = 0;\n    let mut paren_levels_lens_len33 = 0;\n    let mut paren_levels_lens_len34\
    \ = 0;\n    let mut paren_levels_lens_len35 = 0;\n    let mu\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgo34uq_a.rs:48:11\n   |\n\
    48 |     let mu\n   |           ^ help: add `;` here\n49 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgo34uq_a.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgo34uq_a.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgo34uq_a.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgo34uq_a.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgo34uq_a.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgo34uq_a.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgo34uq_a.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars\
    \ = Vec::new();\n    let mut paren_level_chars_index = 0;\n    let mut paren_level_chars_index2\
    \ = 0;\n    let mut paren_level_chars_index3 = 0;\n    let mut paren_level_chars_index4\
    \ = 0;\n    let mut paren_level_chars_index5 = 0;\n    let mut paren_level_chars_index6\
    \ = 0;\n    let mut paren_level_chars_index7 = 0;\n    let mut paren_level_chars_index8\
    \ = 0;\n    let mut paren_level_chars_index9 = 0;\n    let mut paren_level_chars_index10\
    \ = 0;\n    let mut paren_level_chars_index11 = 0;\n    let mut paren_level_chars_index12\
    \ = 0;\n    let mut paren_level_chars_index13 = 0;\n    let mut paren_level_chars_index14\
    \ = 0;\n    let mut paren_level_chars_index15 = 0;\n    let mut paren_level_chars_index16\
    \ = 0;\n    let mut paren_level_chars_index17 = 0;\n    let mut paren_level_chars_index18\
    \ = 0;\n    let mut paren_level_chars_index19 = 0;\n    let mut paren_level_chars_index20\
    \ = 0;\n    let mut paren_level_chars_index21 = 0;\n    let mut paren_level_chars_index22\
    \ = 0;\n    let mut paren_level_chars_index23 = 0;\n    let mut paren_level_chars_index24\
    \ = 0;\n    let mut paren_level_chars_index25 = 0;\n    let mut paren_level_chars_index26\
    \ = 0;\n    let mut paren_level_chars_index27 = 0;\n    let mut paren_level_chars_index28\
    \ = 0;\n    let mut paren_level_chars_index29 = 0;\n    let mut paren_level_chars_index30\
    \ = 0;\n    let mut paren_level_chars_index31 = 0;\n    let mut paren_level_chars_index32\
    \ = 0;\n    let mut paren_level_chars_index33 = 0;\n    let mut paren_level_chars_index34\
    \ = 0;\n    let mut paren_level_chars_index35 = 0;\n    let mut paren_level_chars_index36\
    \ = 0;\n    let mut paren_level_chars_index37 = 0;\n    let mut paren_level_chars_index38\
    \ = 0;\n    let mut paren_level_chars_index39 = 0;\n    let mut paren_level_chars_index40\
    \ = 0;\n    let mut paren_level_chars_index41 = 0;\n    let mut paren_level_chars_index42\
    \ = 0;\n    let mut paren_level_chars_index43 = 0;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpn7ki2xhm.rs:54:11\n   |\n\
    54 |     let mu\n   |           ^ help: add `;` here\n55 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpn7ki2xhm.rs:59:17\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn7ki2xhm.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn7ki2xhm.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn7ki2xhm.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn7ki2xhm.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn7ki2xhm.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn7ki2xhm.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nesting_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_nesting_levels_stack\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_nesting_levels_stack_ptr = paren_nesting_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_max = paren_levels_stack.len();\n    let mut\
    \ paren_nesting_levels_stack_ptr_max = paren_nesting_levels_stack.len();\n   \
    \ let mut paren_levels_stack_ptr_max_ptr = paren_levels_stack.len();\n    let\
    \ mut paren_nesting_levels_stack_ptr_max_ptr = paren_nesting_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max = paren_levels_stack.len();\n\
    \    let mut paren_nesting_levels_stack_ptr_max_ptr_max = paren_nesting_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr = paren_levels_stack.len();\n\
    \    let mut paren_nesting_levels_stack_ptr_max_ptr_max_ptr = paren_nesting_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max = paren_levels_stack.len();\n\
    \    let mut paren_nesting_levels_stack_ptr_max_ptr_max_ptr_max = paren_nesting_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr = paren_levels_stack.len();\n\
    \    let mut paren_nesting_levels_stack_ptr_max_ptr_max_ptr_max_ptr = paren_nesting_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max = paren_levels_stack.len();\n\
    \    let mut paren_nesting_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max = paren_nesting_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_max_ptr_max_ptr_max_ptr_max_ptr = paren_levels_stack.len();\n\
    \    let mut paren_nesting_levels_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1nutwtye.rs:30:34\n   |\n\
    30 |     let mut paren_nesting_levels_\n   |                                 \
    \ ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1nutwtye.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1nutwtye.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1nutwtye.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1nutwtye.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1nutwtye.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1nutwtye.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1nutwtye.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_8ytdta8.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp_8ytdta8.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_8ytdta8.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_8ytdta8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nest\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnj_ugatb.rs:41:31\n   |\n\
    41 |     let mut paren_nesting_nest\n   |                               ^ help:\
    \ add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnj_ugatb.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnj_ugatb.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnj_ugatb.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    while paren_level_count <\
    \ MAX_NESTING {\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        while paren_level_count < MAX_NESTING {\n           \
    \ let mut paren_level_string = paren_string;\n            let mut paren_level_string\
    \ = paren_string;\n            let mut paren_level_string = paren_string;\n  \
    \          while paren_level_count < MAX_NESTING {\n                let mut paren_level_string\
    \ = paren_string;\n                let mut paren_level_string = paren_string;\n\
    \                let mut paren_level_string = paren_string;\n                while\
    \ paren_level_count < MAX_NESTING {\n                    let mut paren_level_string\
    \ = paren_string;\n                    let mut paren_level_string = paren_string;\n\
    \                    let mut paren_level_string = paren_string;\n            \
    \        while paren_level_count < MAX_NESTING {\n                        let\
    \ mut paren_level_string = paren_string;\n                        let mut paren_level_string\
    \ = paren_string;\n                        let mut paren_level_string = paren_string;\n\
    \                        while paren_level_count < MAX_NESTING {\n           \
    \                 let mut paren_level_string = paren_string;\n               \
    \             let mut paren_level_string = paren_string;\n                   \
    \         let mut paren_level_string = paren_string;\n                       \
    \     while paren_level_count < MAX_NESTING {\n                              \
    \  let mut paren_level_string = paren_string;\n                              \
    \  let mut paren_level_string = paren_string;\n                              \
    \  let mut paren_level_string = paren_string;\n                              \
    \  while paren_level_count < MAX_NESTING {\n                                 \
    \   let mut paren_level_string = paren_string;\n                             \
    \       let mut paren_level_string = paren_string;\n                         \
    \           let mut paren_level_string = paren_string;\n                     \
    \               while paren_level_count < MAX_NESTING {\n                    \
    \                    let mut paren_level_string = paren_string;\n            \
    \                            let mut paren_level_string = paren_string;\n    \
    \                                    let mut paren_level_string = paren_string;\n\
    \                                    }\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpc9_vtc0c.rs:56:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n12 |     while paren_level_count < MAX_NESTING {\n   |                  \
    \                         - unclosed delimiter\n...\n16 |         while paren_level_count\
    \ < MAX_NESTING {\n   |                                               - unclosed\
    \ delimiter\n...\n20 |             while paren_level_count < MAX_NESTING {\n \
    \  |                                                   - unclosed delimiter\n\
    ...\n24 |                 while paren_level_count < MAX_NESTING {\n   |      \
    \                                                 - unclosed delimiter\n...\n\
    28 |                     while paren_level_count < MAX_NESTING {\n   |       \
    \                                                    - unclosed delimiter\n...\n\
    32 |                         while paren_level_count < MAX_NESTING {\n   |   \
    \                                                            - unclosed delimiter\n\
    ...\n36 |                             while paren_level_count < MAX_NESTING {\n\
    \   |                                                                   - unclosed\
    \ delimiter\n...\n40 |                                 while paren_level_count\
    \ < MAX_NESTING {\n   |                                                      \
    \                 - this delimiter might not be properly closed...\n...\n49 |\
    \ }\n   | - ...as it matches this but it has different indentation\n...\n56 |\
    \ }\n   |   ^\n\nerror[E0425]: cannot find value `MAX_NESTING` in this scope\n\
    \  --> /tmp/tmpc9_vtc0c.rs:12:31\n   |\n12 |     while paren_level_count < MAX_NESTING\
    \ {\n   |                               ^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `MAX_NESTING` in this scope\n  --> /tmp/tmpc9_vtc0c.rs:16:35\n\
    \   |\n16 |         while paren_level_count < MAX_NESTING {\n   |            \
    \                       ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `MAX_NESTING` in this s"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkkufcm9e.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkkufcm9e.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkkufcm9e.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkkufcm9e.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkkufcm9e.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkkufcm9e.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkkufcm9e.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpkkufcm9e.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = vec![];\n    let mut paren_level_chars_index\
    \ = 0;\n    let mut paren_level_chars_index2 = 0;\n    let mut paren_level_chars_index3\
    \ = 0;\n    let mut paren_level_chars_index4 = 0;\n    let mut paren_level_chars_index5\
    \ = 0;\n    let mut paren_level_chars_index6 = 0;\n    let mut paren_level_chars_index7\
    \ = 0;\n    let mut paren_level_chars_index8 = 0;\n    let mut paren_level_chars_index9\
    \ = 0;\n    let mut paren_level_chars_index10 = 0;\n    let mut paren_level_chars_index11\
    \ = 0;\n    let mut paren_level_chars_index12 = 0;\n    let mut paren_level_chars_index13\
    \ = 0;\n    let mut paren_level_chars_index14 = 0;\n    let mut paren_level_chars_index15\
    \ = 0;\n    let mut paren_level_chars_index16 = 0;\n    let mut paren_level_chars_index17\
    \ = 0;\n    let mut paren_level_chars_index18 = 0;\n    let mut paren_level_chars_index19\
    \ = 0;\n    let mut paren_level_chars_index20 = 0;\n    let mut paren_level_chars_index21\
    \ = 0;\n    let mut paren_level_chars_index22 = 0;\n    let mut paren_level_chars_index23\
    \ = 0;\n    let mut paren_level_chars_index24 = 0;\n    let mut paren_level_chars_index25\
    \ = 0;\n    let mut paren_level_chars_index26 = 0;\n    let mut paren_level_chars_index27\
    \ = 0;\n    let mut paren_level_chars_index28 = 0;\n    let mut paren_level_chars_index29\
    \ = 0;\n    let mut paren_level_chars_index30 = 0;\n    let mut paren_level_chars_index31\
    \ = 0;\n    let mut paren_level_chars_index32 = 0;\n    let mut paren_level_chars_index33\
    \ = 0;\n    let mut paren_level_chars_index34 = 0;\n    let mut paren_level_chars_index35\
    \ = 0;\n    let mut paren_level_chars_index36 = 0;\n    let mut paren_level_chars_index37\
    \ = 0;\n    let mut paren_level_chars_index38 = 0;\n    let mut paren_level_chars_index39\
    \ = 0;\n    let mut paren_level_chars_index40 = 0;\n    let mut paren_level_chars_index41\
    \ = 1;\n    let mut paren_level_chars_index42 = 1;\n    let mut paren\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3r80v1vs.rs:54:18\n   |\n\
    54 |     let mut paren\n   |                  ^ help: add `;` here\n55 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3r80v1vs.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3r80v1vs.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3r80v1vs.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3r80v1vs.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3r80v1vs.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3r80v1vs.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp3r80v1vs.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_depth\
    \ = 0;\n    let mut paren_level = 0;\n    for paren in paren_string.chars() {\n\
    \        if paren == '(' {\n            paren_stack.push(paren_depth);\n     \
    \       paren_depth += 1;\n            paren_level += 1;\n        } else if paren\
    \ == ')' {\n            paren_depth -= 1;\n            paren_level -= 1;\n   \
    \         if paren_stack.is_empty() {\n                return vec![paren_level];\n\
    \            }\n        }\n    }\n    panic!(\"Parentheses string should contain\
    \ at least one open and one close parenthesis.\");\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpuum1s7v4.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuum1s7v4.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuum1s7v4.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuum1s7v4.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuum1s7v4.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuum1s7v4.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = vec![];\n\
    \    for paren in paren_string.chars() {\n        if paren == ')' {\n        \
    \    paren_stack.pop();\n            level += 1;\n        } else if paren == '('\
    \ {\n            paren_stack.push(level);\n        }\n    }\n    paren_stack\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph32l5pn2.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph32l5pn2.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph32l5pn2.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph32l5pn2.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph32l5pn2.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph32l5pn2.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_size\
    \ = Vec::new();\n    let mut paren_levels_size_ptr = Vec::new();\n    let mut\
    \ paren_levels_size_max = Vec::new();\n    let mut paren_levels_size_max_ptr =\
    \ Vec::new();\n    let mut paren_levels_size_min = Vec::new();\n    let mut paren_levels_size_min_ptr\
    \ = Vec::new();\n    let mut paren_levels_size_max = Vec::new();\n    let mut\
    \ paren_levels_size_max_ptr = Vec::new();\n    let mut paren_levels_size_min =\
    \ Vec::new();\n    let mut paren_levels_size_min_ptr = Vec::new();\n    let mut\
    \ paren_levels_size_max = Vec::new();\n    let mut paren_levels_size_max_ptr =\
    \ Vec::new();\n    let mut paren_levels_size_min = Vec::new();\n    let mut paren_levels_size_min_ptr\
    \ = Vec::new();\n    let mut paren_levels_size_max = Vec::new();\n    let mut\
    \ paren_levels_size_max_ptr = Vec::new();\n    let mut paren_levels_size_min =\
    \ Vec::new();\n    let mut paren_levels_size_min_ptr = Vec::new();\n    let mut\
    \ paren_levels_size_max = Vec::new();\n    let mut paren_levels_size_max_ptr =\
    \ Vec::new();\n    let mut paren_levels_size_min = Vec::new();\n    let mut paren_levels_size_min_ptr\
    \ = Vec::new();\n    let mut paren_levels_size_max = Vec::new();\n    let mut\
    \ paren_levels_size_max_ptr = Vec::new();\n    let mut paren_levels_size_min =\
    \ Vec::new();\n    let mut paren_levels_size_min_ptr = Vec::new();\n    let mut\
    \ paren_levels_size_max = Vec::new();\n    let mut paren_levels_size_max_ptr =\
    \ Vec::new();\n    let mut paren_levels_size_min = Vec::new();\n    let mut paren_levels_size_min_ptr\
    \ = Vec::new();\n    let mut paren_levels_size_max = Vec::new();\n    let mut\
    \ paren_levels_size_max_ptr = Vec::new();\n    let mu\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8l29c71k.rs:42:11\n   |\n\
    42 |     let mu\n   |           ^ help: add `;` here\n43 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8l29c71k.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8l29c71k.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8l29c71k.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8l29c71k.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8l29c71k.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8l29c71k.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8l29c71k.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices().rev();\n \
    \   let mut paren_levels_iter = paren_levels_iter.map(|i| {\n        if paren_level\
    \ == 0 {\n            paren_level = i.0;\n            paren_levels.push(0)\n \
    \       } else {\n            paren_levels.push(i.0 - paren_level);\n        \
    \    paren_level = i.0;\n        }\n        paren_level\n    });\n    let mut\
    \ paren_levels_iter = paren_levels_iter.map(|i| {\n        if paren_level == 0\
    \ {\n            paren_level = i.0;\n            paren_levels.push(0)\n      \
    \  } else {\n            paren_levels.push(i.0 - paren_level);\n            paren_level\
    \ = i.0;\n        }\n        paren_level\n    });\n    let mut paren_levels_iter\
    \ = paren_levels_iter.map(|i| {\n        if paren_level == 0 {\n            paren_level\
    \ = i.0;\n            paren_levels.push(0)\n        } else {\n            paren_levels.push(i.0\
    \ - paren_level);\n            paren_level = i.0;\n        }\n        paren_level\n\
    \    });\n    let mut paren_levels_iter = paren_levels_iter.map(|i| {\n      \
    \  if paren_level == 0 {\n            paren_level = i.0;\n            paren_levels.push(0)\n\
    \        } else {\n            paren_levels.push(i.0 - paren_level);\n       \
    \     paren_level = i.0;\n        }\n        paren_level\n    });\n    let mut\
    \ paren_levels_iter = paren_levels_iter.map(|i| {\n        if paren_level == 0\
    \ {\n            paren_level = i.0;\n            paren_levels.push(0)\n      \
    \  } else {\n            paren_levels.push(i.0 - paren_level);\n            paren_level\
    \ = i.0;\n        }\n        paren_level\n    });\n    let mut paren_levels_iter\
    \ = paren_levels_iter.map(|i| {\n        if paren_level == 0 {\n            paren_level\
    \ = i.0;\n            paren_levels.push(0)\n        } else {\n            paren_levels.push(i.0\
    \ - paren_level);\n            paren_level = i.0;\n        }\n        paren_level\n\
    \    });\n    let mut paren_levels_iter = paren_levels_iter.map(|i| {\n      \
    \  if paren_level == 0 {\n            paren_level = i.0;\n            paren_levels.push(0)\n\
    \        } else {\n            paren_levels.push(i.0 - paren_level);\n       \
    \     paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0fdvxx1u.rs:84:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n70 |     let mut paren_levels_iter = paren_levels_iter.map(|i| {\n   |  \
    \                                                    -    - unclosed delimiter\n\
    \   |                                                      |\n   |           \
    \                                           unclosed delimiter\n...\n74 |    \
    \     } else {\n   |                - this delimiter might not be properly closed...\n\
    ...\n77 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    84 | }\n   |   ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmp0fdvxx1u.rs:84:3\n   |\n84 | }\n   |   ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0610]: `usize` is a primitive\
    \ type and therefore doesn't have fields\n  --> /tmp/tmp0fdvxx1u.rs:22:29\n  \
    \ |\n22 |             paren_level = i.0;\n   |                             ^\n\
    \nerror[E0610]: `usize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmp0fdvxx1u.rs:25:33\n   |\n25 |             paren_levels.push(i.0\
    \ - paren_level);\n   |                                 ^\n\nerror[E0610]: `usize`\
    \ is a primitive type and therefore doesn't have fields\n  --> /tmp/tmp0fdvxx1u.rs:26:29\n\
    \   |\n26 |             paren_level = i.0;\n   |                             ^\n\
    \nerror[E0610]: `usize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmp0fdvxx1u.rs:32:29\n   |\n32 |             paren_level = i.0;\n\
    \   |                             ^\n\nerror[E0610]: `usize` is a primitive type\
    \ and therefore doesn't have fields\n  --> /tmp/tmp0fdvxx1u.rs:35:33\n   |\n35\
    \ |             paren_levels.push(i.0 - paren_level);\n   |                  \
    \               ^\n\nerror[E0610]: `usize` is a primitive type and therefore doesn't\
    \ have fields\n  --> /tmp/tmp0fdvxx1u.rs:36:29\n   |\n36 |             paren_level\
    \ = i.0;\n   |                             ^\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_chars: Vec<char>;\n\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4d7svawf.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4d7svawf.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4d7svawf.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4d7svawf.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4d7svawf.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4d7svawf.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4d7svawf.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt0x9x0o3.rs:30:29\n   |\n\
    30 |     let mut paren_levels_ptr\n   |                             ^ help: add\
    \ `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpt0x9x0o3.rs:35:17\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt0x9x0o3.rs:35:25\n \
    \  |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt0x9x0o3.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt0x9x0o3.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt0x9x0o3.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt0x9x0o3.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpt0x9x0o3.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvd8uavtu.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvd8uavtu.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvd8uavtu.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvd8uavtu.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpvd8uavtu.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_next = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_level\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphuif27as.rs:37:49\n   |\n\
    37 |     let mut paren_levels_stack_top = paren_level\n   |                  \
    \                               ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphuif27as.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphuif27as.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphuif27as.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphuif27as.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphuif27as.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphuif27as.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmphuif27as.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.chars().enumerate().filter_map(|(i,\
    \ c)| {\n        if c.is_whitespace() {\n            paren_level += 1;\n     \
    \       Some(paren_level)\n        } else {\n            paren_level += 1;\n \
    \           None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n        if c.is_whitespace() {\n            paren_level -= 1;\n     \
    \       Some(paren_level)\n        } else {\n            paren_level -= 1;\n \
    \           None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n        if c.is_whitespace() {\n            paren_level -= 1;\n     \
    \       Some(paren_level)\n        } else {\n            paren_level -= 1;\n \
    \           None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n        if c.is_whitespace() {\n            paren_level -= 1;\n     \
    \       Some(paren_level)\n        } else {\n            paren_level -= 1;\n \
    \           None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n        if c.is_whitespace() {\n            paren_level -= 1;\n     \
    \       Some(paren_level)\n        } else {\n            paren_level -= 1;\n \
    \           None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n        if c.is_whitespace() {\n            paren_level -= 1;\n     \
    \       Some(paren_level)\n        } else {\n            paren_level -= 1;\n \
    \           None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n        if c.is_whitespace() {\n            paren_level -= 1;\n     \
    \       Some(paren_level)\n        } else {\n            paren_level -= 1;\n \
    \           None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n        if c.is_whitespace() {\n            paren_level -= 1;\n     \
    \       Some(paren_level)\n        } else {\n            paren_level -= 1;\n \
    \           None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n        if c.is_whitespace() {\n            paren_level -= 1;\n     \
    \       \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5hmhlkag.rs:92:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n81 |     let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n   |                                                             -  \
    \         - unclosed delimiter\n   |                                         \
    \                    |\n   |                                                 \
    \            unclosed delimiter\n82 |         if c.is_whitespace() {\n   |   \
    \                           - this delimiter might not be properly closed...\n\
    ...\n85 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    92 | }\n   |   ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmp5hmhlkag.rs:92:3\n   |\n92 | }\n   |   ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5hmhlkag.rs:18:63\n   |\n18 |     let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n   |                                                               ^^^^^^^-\n\
    \   |                                                               |      |\n\
    \   |                                                               |      expected\
    \ due to this\n   |                                                          \
    \     expected integer, found tuple\n   |\n   = note: expected type `{integer}`\n\
    \             found tuple `(_, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hmhlkag.rs:27:63\n\
    \   |\n27 |     let mut paren_levels_iter = paren_levels_iter.filter_map(|(idx,\
    \ c)| {\n   |                                                               ^^^^^^^-\n\
    \   |                                                               |      |\n\
    \   |                                                               |      expected\
    \ due to this\n   |                                                          \
    \     expected integer, found tuple\n   |\n   = note: expected type "
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack_len;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplyhkhfdc.rs:37:49\n   |\n\
    37 |     let mut paren_levels_stack_top = paren_level\n   |                  \
    \                               ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplyhkhfdc.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplyhkhfdc.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplyhkhfdc.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplyhkhfdc.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplyhkhfdc.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplyhkhfdc.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmplyhkhfdc.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_char = '(';\n    let mut paren_level_char_index = 0;\n\
    \    let mut paren_level_char_length = 0;\n    let mut paren_level_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_string = paren_level_char.to_string();\n\
    \    let mut paren_level_char_length_char = '(';\n    let mut paren_level_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length = 0;\n    let mut paren_level_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_string = paren_level_char_length_char.to_string();\n\
    \    let mut paren_level_char_length_char_length_char = '(';\n    let mut paren_level_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length = 0;\n   \
    \ let mut paren_level_char_length_char_length_char_index = 0;\n    let mut paren_level_char_length_char_length_char_length_string\
    \ = paren_level_char_length_char_length_char.to_string();\n    let mut paren_level_char_length_char_length_char_length_char\
    \ = '(';\n    let mut paren_level_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_string\
    \ = paren_level_char_length_char_length_char_length_char_char.to_string();\n \
    \   let mut paren_level_char_length_char_length_char_length_char_length_char =\
    \ '(';\n    let mut paren_level_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_string\
    \ = paren_level_char_length_char_length_char_length_char_char_length_char_length_char.to_string();\n\
    \    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpg6aczzl3.rs:38:54\n   |\n\
    38 |     let mut paren_level_char_length_char_length_char_\n   |             \
    \                                         ^ help: add `;` here\n39 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `paren_level_char_length_char_length_char_length_char_char`\
    \ in this scope\n  --> /tmp/tmpg6aczzl3.rs:30:82\n   |\n30 | ...ar_length_char_length_string\
    \ = paren_level_char_length_char_length_char_length_char_char.to_string();\n \
    \  |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_level_char_length_char_length_char_length_char`\n\
    \nerror[E0425]: cannot find value `paren_level_char_length_char_length_char_length_char_char_length_char_length_char`\
    \ in this scope\n  --> /tmp/tmpg6aczzl3.rs:35:94\n   |\n35 | ...char_length_string\
    \ = paren_level_char_length_char_length_char_length_char_char_length_char_length_char.to_string();\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_level_char_length_char_length_char_length_char_length_char_length`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg6aczzl3.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg6aczzl3.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg6aczzl3.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg6aczzl3.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg6aczzl3.rs:45:17\n   |"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    for paren in paren_string.chars()\
    \ {\n        if paren == '(' {\n            paren_level += 1;\n            paren_level_count\
    \ += 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n   \
    \         paren_level_count += 1;\n            if paren_level == 0 {\n       \
    \         paren_levels.push(paren_level_count);\n            }\n        }\n  \
    \  }\n    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7il31_p1.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7il31_p1.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7il31_p1.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7il31_p1.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7il31_p1.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7il31_p1.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpnh7xfx_r.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpnh7xfx_r.rs:42:17\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnh7xfx_r.rs:42:25\n \
    \  |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnh7xfx_r.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnh7xfx_r.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnh7xfx_r.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnh7xfx_r.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = \n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpd1ijii5f.rs:48:1\n\
    \   |\n48 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpd1ijii5f.rs:52:17\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpd1ijii5f.rs:52:25\n \
    \  |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd1ijii5f.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd1ijii5f.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd1ijii5f.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd1ijii5f.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_size;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl4lg_wh8.rs:37:56\n   |\n\
    37 |     let mut paren_levels_stack_top = paren_levels_stack\n   |           \
    \                                             ^ help: add `;` here\n38 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl4lg_wh8.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl4lg_wh8.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl4lg_wh8.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl4lg_wh8.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl4lg_wh8.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl4lg_wh8.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpl4lg_wh8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    while !paren_level_string.is_empty()\
    \ {\n        let mut paren_level_string = paren_string;\n        let mut paren_level\
    \ = 0;\n        while !paren_level_string.is_empty() {\n            let mut paren_level_string\
    \ = paren_string;\n            let mut paren_level = 0;\n            while !paren_level_string.is_empty()\
    \ {\n                let mut paren_level_string = paren_string;\n            \
    \    let mut paren_level = 0;\n                while !paren_level_string.is_empty()\
    \ {\n                    let mut paren_level_string = paren_string;\n        \
    \            let mut paren_level = 0;\n                    while !paren_level_string.is_empty()\
    \ {\n                        let mut paren_level_string = paren_string;\n    \
    \                    let mut paren_level = 0;\n                        while !paren_level_string.is_empty()\
    \ {\n                            let mut paren_level_string = paren_string;\n\
    \                            let mut paren_level = 0;\n                      \
    \      while !paren_level_string.is_empty() {\n                              \
    \  let mut paren_level_string = paren_string;\n                              \
    \  let mut paren_level = 0;\n                                while !paren_level_string.is_empty()\
    \ {\n                                    let mut paren_level_string = paren_string;\n\
    \                                    let mut paren_level = 0;\n              \
    \                      while !paren_level_string.is_empty() {\n              \
    \                          let mut paren_level_string = paren_string;\n      \
    \                                  let mut paren_level = 0;\n                \
    \                        while !paren_level_string.is_empty() {\n            \
    \                                let mut paren_level_string = paren_string;\n\
    \                                            let mut paren_level = 0;\n      \
    \                                      while !paren_level_string.is_empty() {\n\
    \                                                let mut paren_level_string =\
    \ paren_string;\n                                                let mut paren_level\
    \ = 0;\n                                            }\n                      \
    \                  }\n                                    }\n                \
    \                }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        paren_levels.push(paren_level);\n\
    \        paren_level_count = paren_level_count\n            + paren_level\n  \
    \          + 1;\n        paren_level_string = paren_string;\n        paren_level_string\
    \ = paren_string;\n        paren_level_string = paren_string;\n        paren_level_string\
    \ = paren_string;\n        paren_level_string = paren_string;\n        \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3_27mm7w.rs:72:3\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n12 |     while !paren_level_string.is_empty() {\n   |                   \
    \                       - this delimiter might not be properly closed...\n...\n\
    65 | }\n   | - ...as it matches this but it has different indentation\n...\n72\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3_27mm7w.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3_27mm7w.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3_27mm7w.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3_27mm7w.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3_27mm7w.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3_27mm7w.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3_27mm7w.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanation"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcxsz81oe.rs:50:18\n   |\n\
    50 |     let mut paren\n   |                  ^ help: add `;` here\n51 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcxsz81oe.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcxsz81oe.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcxsz81oe.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcxsz81oe.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcxsz81oe.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcxsz81oe.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcxsz81oe.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_len = paren_levels.len();\n    let mut paren_nestings_len\
    \ = paren_nestings.len();\n    let mut paren_levels_ptr = paren_levels.as_mut_ptr();\n\
    \    let mut paren_nestings_ptr = paren_nestings.as_mut_ptr();\n    let mut paren_levels_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_nestings_end\
    \ = paren_nestings_ptr.offset(paren_nestings_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_nestings_ptr_end\
    \ = paren_nestings_ptr.offset(paren_nestings_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_nestings_ptr_end\
    \ = paren_nestings_ptr.offset(paren_nestings_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_nestings_ptr_end\
    \ = paren_nestings_ptr.offset(paren_nestings_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_nestings_ptr_end\
    \ = paren_nestings_ptr.offset(paren_nestings_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_nestings_ptr_end\
    \ = paren_nestings_ptr.offset(paren_nestings_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_nestings_ptr_end\
    \ = paren_nestings_ptr.offset(paren_nestings_len);\n    let mut paren_levels_ptr_end\
    \ = paren_levels_ptr.offset(paren_levels_len);\n    let mut paren_nestings_ptr_end\
    \ = paren_nestings_ptr.offset(paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpy7zyyznq.rs:31:1\n   |\n31 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpy7zyyznq.rs:30:63\n   |\n6  | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n   |                                                      \
    \      - closing delimiter possibly meant for this\n...\n30 |     let mut paren_nestings_ptr_end\
    \ = paren_nestings_ptr.offset(paren_\n   |                                   \
    \                            ^ unclosed delimiter\n31 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpy7zyyznq.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy7zyyznq.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy7zyyznq.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy7zyyznq.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy7zyyznq.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy7zyyznq.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nwarning: type annotations needed\n  --> /tmp/tmpy7zyyznq.rs:15:49\n\
    \   |\n15 |     let mut paren_levels_end = paren_levels_ptr.offset(paren_levels_len);\n\
    \   |                                                 ^^^^^^\n   |\n   = note:\
    \ `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this is accepte"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut\
    \ paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut\
    \ paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut\
    \ paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut\
    \ paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut\
    \ paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut\
    \ paren_levels_iter_next = paren_levels_iter.peekable();\n    let mut paren_levels_iter_next\
    \ = paren_levels_iter.peekable();\n    let mu\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuo9_9o2l.rs:37:11\n   |\n\
    37 |     let mu\n   |           ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpuo9_9o2l.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuo9_9o2l.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuo9_9o2l.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuo9_9o2l.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuo9_9o2l.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuo9_9o2l.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuo9_9o2l.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n    let\
    \ mut paren_levels_stack_pos = paren_levels_stack_top;\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack_top;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack_top;\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack_top;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack_top;\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack_top;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack_top;\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack_top;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack_top;\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack_top;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack_top;\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack_top;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack_top;\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack_top;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack_top;\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack_top;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n\
    \    let mut paren_levels_stack_pos = paren_levels_stack_top;\n    let mut paren_levels_stack_pos\
    \ = paren_levels_stack_top;\n    let mut paren_levels_stack_pos = paren_levels_stack_top;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0cfsly7t.rs:40:11\n   |\n\
    40 |     let mu\n   |           ^ help: add `;` here\n41 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0cfsly7t.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0cfsly7t.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0cfsly7t.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0cfsly7t.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0cfsly7t.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0cfsly7t.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0cfsly7t.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp0pao4pys.rs:38:1\n   |\n38\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp0pao4pys.rs:37:60\n\
    \   |\n37 |     let mut paren_levels_stack_bottom = paren_levels_stack.\n   |\
    \                                                            ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp0pao4pys.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0pao4pys.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0pao4pys.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0pao4pys.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0pao4pys.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0pao4pys.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0pao4pys.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_depth\
    \ = 0;\n    let mut paren_levels = vec![];\n    let mut paren_level = 0;\n   \
    \ let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_len2\
    \ = paren_levels_len;\n    let mut paren_levels_len3 = paren_levels_len2;\n  \
    \  let mut paren_levels_len4 = paren_levels_len3;\n    let mut paren_levels_len5\
    \ = paren_levels_len4;\n    let mut paren_levels_len6 = paren_levels_len5;\n \
    \   let mut paren_levels_len7 = paren_levels_len6;\n    let mut paren_levels_len8\
    \ = paren_levels_len7;\n    let mut paren_levels_len9 = paren_levels_len8;\n \
    \   let mut paren_levels_len10 = paren_levels_len9;\n    let mut paren_levels_len11\
    \ = paren_levels_len10;\n    let mut paren_levels_len12 = paren_levels_len11;\n\
    \    let mut paren_levels_len13 = paren_levels_len12;\n    let mut paren_levels_len14\
    \ = paren_levels_len13;\n    let mut paren_levels_len15 = paren_levels_len14;\n\
    \    let mut paren_levels_len16 = paren_levels_len15;\n    let mut paren_levels_len17\
    \ = paren_levels_len16;\n    let mut paren_levels_len18 = paren_levels_len17;\n\
    \    let mut paren_levels_len19 = paren_levels_len18;\n    let mut paren_levels_len20\
    \ = paren_levels_len19;\n    let mut paren_levels_len21 = paren_levels_len20;\n\
    \    let mut paren_levels_len22 = paren_levels_len21;\n    let mut paren_levels_len23\
    \ = paren_levels_len22;\n    let mut paren_levels_len24 = paren_levels_len23;\n\
    \    let mut paren_levels_len25 = paren_levels_len24;\n    let mut paren_levels_len26\
    \ = paren_levels_len25;\n    let mut paren_levels_len27 = paren_levels_len26;\n\
    \    let mut paren_levels_len28 = paren_levels_len27;\n    let mut paren\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpynzul_u7.rs:39:18\n   |\n\
    39 |     let mut paren\n   |                  ^ help: add `;` here\n40 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpynzul_u7.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpynzul_u7.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpynzul_u7.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpynzul_u7.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpynzul_u7.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpynzul_u7.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpynzul_u7.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nest\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnj_ugatb.rs:41:31\n   |\n\
    41 |     let mut paren_nesting_nest\n   |                               ^ help:\
    \ add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnj_ugatb.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnj_ugatb.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnj_ugatb.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = vec![];\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_size\
    \ = vec![];\n    let mut paren_levels_stack_ptr = vec![];\n    let mut paren_levels_stack_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr = vec![];\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptuml1ajx.rs:31:43\n   |\n\
    31 |     let mut paren_levels_stack_ptr_ptr_ptr\n   |                        \
    \                   ^ help: add `;` here\n32 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptuml1ajx.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptuml1ajx.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptuml1ajx.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptuml1ajx.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptuml1ajx.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptuml1ajx.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmptuml1ajx.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt0qp7bi3.rs:35:27\n   |\n\
    35 |     let mut paren_nesting_\n   |                           ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt0qp7bi3.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt0qp7bi3.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt0qp7bi3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt0qp7bi3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt0qp7bi3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt0qp7bi3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpt0qp7bi3.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpmzz0pa1s.rs:36:1\n\
    \   |\n36 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpmzz0pa1s.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpmzz0pa1s.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmzz0pa1s.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmzz0pa1s.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmzz0pa1s.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmzz0pa1s.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9p5dicw8.rs:50:18\n   |\n\
    50 |     let mut paren\n   |                  ^ help: add `;` here\n51 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9p5dicw8.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9p5dicw8.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9p5dicw8.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9p5dicw8.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9p5dicw8.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9p5dicw8.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9p5dicw8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfwbbt6hs.rs:41:18\n   |\n\
    41 |     let mut paren\n   |                  ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfwbbt6hs.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfwbbt6hs.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfwbbt6hs.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfwbbt6hs.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfwbbt6hs.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfwbbt6hs.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpfwbbt6hs.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl4l7pa95.rs:30:51\n   |\n\
    30 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\n   |                \
    \                                   ^ help: add `;` here\n31 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpl4l7pa95.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl4l7pa95.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl4l7pa95.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl4l7pa95.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl4l7pa95.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl4l7pa95.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl4l7pa95.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_levels = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_size = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppgu7ik9i.rs:31:19\n   |\n\
    31 |     let mut paren_\n   |                   ^ help: add `;` here\n32 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppgu7ik9i.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppgu7ik9i.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppgu7ik9i.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppgu7ik9i.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppgu7ik9i.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppgu7ik9i.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmppgu7ik9i.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_level_stack = Vec::new();\n \
    \   let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_size = paren_level_stack.len();\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_pos = 0;\n\
    \    let mut paren_level_stack_pos = 0;\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi04h4t_v.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi04h4t_v.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi04h4t_v.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi04h4t_v.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi04h4t_v.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi04h4t_v.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpi04h4t_v.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkkufcm9e.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkkufcm9e.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkkufcm9e.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkkufcm9e.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkkufcm9e.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkkufcm9e.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkkufcm9e.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpkkufcm9e.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_size\
    \ = paren_stack.len();\n    let mut paren_levels_sizes = Vec::new();\n    let\
    \ mut paren_levels_sizes_size = paren_levels_sizes.len();\n    let mut paren_levels_sizes_sizes\
    \ = paren_levels_sizes_sizes.len();\n    let mut paren_levels_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes.len();\n    let mut paren_levels_sizes_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes_sizes.len();\n    let mut paren_levels_sizes_sizes_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes_sizes_sizes.len();\n    let mut paren_levels_sizes_sizes_sizes_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes_sizes_sizes_sizes.len();\n    let mut paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes.len();\n    let mut\
    \ paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes.len();\n\
    \    let mut paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes.len();\n\
    \    let mut paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes.len();\n\
    \    let mut paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes.len();\n\
    \    let mut paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = paren_levels_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnmcnjyxh.rs:23:112\n   |\n\
    23 |     let mut paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = paren_levels_\n   |                                                      \
    \                                                          ^ help: add `;` here\n\
    24 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `paren_levels_sizes_sizes`\
    \ in this scope\n  --> /tmp/tmpnmcnjyxh.rs:13:40\n   |\n13 |     let mut paren_levels_sizes_sizes\
    \ = paren_levels_sizes_sizes.len();\n   |                                    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `paren_levels_sizes_size`\n\nerror[E0425]: cannot find value `paren_levels_sizes_sizes_sizes`\
    \ in this scope\n  --> /tmp/tmpnmcnjyxh.rs:14:45\n   |\n14 |     let mut paren_levels_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes.len();\n   |                              \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `paren_levels_sizes_sizes`\n\nerror[E0425]: cannot find value `paren_levels_sizes_sizes_sizes_sizes`\
    \ in this scope\n  --> /tmp/tmpnmcnjyxh.rs:15:51\n   |\n15 |     let mut paren_levels_sizes_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes_sizes.len();\n   |                        \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `paren_levels_sizes_sizes_size`\n\nerror[E0425]:\
    \ cannot find value `paren_levels_sizes_sizes_sizes_sizes_sizes` in this scope\n\
    \  --> /tmp/tmpnmcnjyxh.rs:16:57\n   |\n16 |     let mut paren_levels_sizes_sizes_sizes_sizes_size\
    \ = paren_levels_sizes_sizes_sizes_sizes_sizes.len();\n   |                  \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_sizes_sizes_sizes_size`\n\
    \nerror[E0425]: cannot find value `paren_levels_sizes_sizes_sizes_sizes_sizes_sizes`\
    \ in this scope\n  --> /tmp/tmpnmcnjyxh.rs:17:63\n   |\n17 |     let mut paren_levels_size"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_pos = 0;\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = 0;\n \
    \   let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp42qlsngg.rs:42:11\n   |\n\
    42 |     let mu\n   |           ^ help: add `;` here\n43 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp42qlsngg.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp42qlsngg.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp42qlsngg.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp42qlsngg.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp42qlsngg.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp42qlsngg.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp42qlsngg.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvd8uavtu.rs:41:35\n   |\n\
    41 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvd8uavtu.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvd8uavtu.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvd8uavtu.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvd8uavtu.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpvd8uavtu.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmpdz88q5.rs:37:59\n   |\n\
    37 |     let mut paren_levels_stack_bottom = paren_levels_stack\n   |        \
    \                                                   ^ help: add `;` here\n38 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpmpdz88q5.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmpdz88q5.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmpdz88q5.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmpdz88q5.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmpdz88q5.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmpdz88q5.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmpdz88q5.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt0qp7bi3.rs:35:27\n   |\n\
    35 |     let mut paren_nesting_\n   |                           ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt0qp7bi3.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt0qp7bi3.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt0qp7bi3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt0qp7bi3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt0qp7bi3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt0qp7bi3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpt0qp7bi3.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = Vec::new();\n\
    \    for paren in paren_string.chars().filter_map(|c| match c {\n        '(' |\
    \ ')' | ' ' => false,\n        _ => true,\n    }) {\n        if paren == ' ' {\n\
    \            paren_stack.push(level);\n            level += 1;\n        } else\
    \ {\n            level -= 1;\n            if paren_stack.len() == 0 {\n      \
    \          return vec![level];\n            }\n            paren_stack.pop();\n\
    \        }\n    }\n    vec![level]\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgi5eykn7.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgi5eykn7.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgi5eykn7.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgi5eykn7.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgi5eykn7.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgi5eykn7.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgi5eykn7.rs:10:28\n\
    \   |\n10 |         '(' | ')' | ' ' => false,\n   |                          \
    \  ^^^^^\n   |                            |\n   |                            expected\
    \ enum `Option`, found `bool`\n   |                            help: try using\
    \ a variant of the expected enum: `Some(false)`\n   |\n   = note: expected enum\
    \ `Option<_>`\n              found type `bool`\n\nerror: aborting due to 7 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_depth\
    \ = 0;\n    for paren in paren_string.chars() {\n        if paren == ')' {\n \
    \           paren_depth += 1;\n        } else if paren == '(' {\n            paren_depth\
    \ += 1;\n            if paren_depth > paren_stack.len() {\n                paren_stack.push(paren_depth);\n\
    \            }\n        } else {\n            paren_depth = 0;\n        }\n  \
    \  }\n    paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1e5v_ex0.rs:26:17\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1e5v_ex0.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1e5v_ex0.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1e5v_ex0.rs:27:25\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1e5v_ex0.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1e5v_ex0.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1e5v_ex0.rs:21:5\n\
    \   |\n6  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     paren_stack\n   |     ^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nest\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnj_ugatb.rs:41:31\n   |\n\
    41 |     let mut paren_nesting_nest\n   |                               ^ help:\
    \ add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnj_ugatb.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnj_ugatb.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnj_ugatb.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnj_ugatb.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_stack\
    \ = Vec::new();\n    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len\
    \ = paren_level_stack.len();\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbc5azh8z.rs:43:43\n   |\n\
    43 |     let mut paren_level_stack_top = paren_\n   |                        \
    \                   ^ help: add `;` here\n44 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren_` in this scope\n  --> /tmp/tmpbc5azh8z.rs:43:37\n\
    \   |\n43 |     let mut paren_level_stack_top = paren_\n   |                 \
    \                    ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpbc5azh8z.rs:48:17\n   |\n48 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbc5azh8z.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbc5azh8z.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbc5azh8z.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbc5azh8z.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbc5azh8z.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpbc5azh8z.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an "
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_8ytdta8.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp_8ytdta8.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_8ytdta8.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_8ytdta8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = vec![];\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_char.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_char.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpbjjb6mqm.rs:49:1\n  \
    \ |\n49 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpbjjb6mqm.rs:53:17\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpbjjb6mqm.rs:53:25\n \
    \  |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbjjb6mqm.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbjjb6mqm.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbjjb6mqm.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbjjb6mqm.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0689]:\
    \ can't call method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpbjjb6mqm.rs:14:53\n\
    \   |\n14 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpbjjb6mqm.rs:16:53\n\
    \   |\n16 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n12 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric "
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_nestings_stack\
    \ = Vec::new();\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n\
    \    let mut paren_nestings_stack_size = paren_nestings_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack.as_mut_ptr();\n    let mut paren_nestings_stack_ptr\
    \ = paren_nestings_stack.as_mut_ptr();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n    let mut paren_nestings_stack_ptr_end\
    \ = paren_nestings_stack_ptr.offset(paren_nestings_stack_size);\n    let mut paren_levels_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4glug6bl.rs:29:26\n   |\n\
    29 |     let mut paren_levels_\n   |                          ^ help: add `;`\
    \ here\n30 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp4glug6bl.rs:34:17\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4glug6bl.rs:34:25\n \
    \  |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4glug6bl.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4glug6bl.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4glug6bl.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4glug6bl.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nwarning:\
    \ type annotations needed\n  --> /tmp/tmp4glug6bl.rs:17:65\n   |\n17 |     let\
    \ mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \   |                                                                 ^^^^^^\n\
    \   |\n   = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2018!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4glug6bl.rs:17:72\n   |\n17 |\
    \     let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \   |                                                                        ^^"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_level_count = vec![];\n    for paren\
    \ in paren_string.chars() {\n        if paren == '(' {\n            paren_stack.push(paren_level);\n\
    \            paren_level_count.push(paren_level);\n            paren_level +=\
    \ 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n      \
    \      paren_level_count[paren_level] -= 1;\n            if paren_level_count[paren_level]\
    \ == 0 {\n                paren_stack.push(paren_level);\n            }\n    \
    \    }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1cm19lsl.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1cm19lsl.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1cm19lsl.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1cm19lsl.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1cm19lsl.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1cm19lsl.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp1cm19lsl.rs:17:13\n   |\n17 |             paren_level_count[paren_level]\
    \ -= 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1cm19lsl.rs:18:16\n   |\n18 |  \
    \           if paren_level_count[paren_level] == 0 {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 8 previous errors\n\nSome errors have detailed explana"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_level_count\
    \ = paren_stack.len();\n    let mut paren_level_depth = paren_level;\n    let\
    \ mut paren_level_level_stack = paren_stack.clone();\n    let mut paren_level_level_level_count\
    \ = paren_level_level_stack.len();\n    let mut paren_level_level_level_level_depth\
    \ = paren_level_level_level;\n    let mut paren_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_stack.clone();\n    let mut paren_level_level_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_stack.clone();\n    let mut\
    \ paren_level_level_level_level_level_level_level_level_level_stack = paren_level_level_level_level_level_level_level_level_level_level_stack.clone();\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_level_level_level_level_level_level_stack.clone();\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack.clone();\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack.clone();\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack.clone();\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack.clone();\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack.clone();\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_stack.clone();\n\
    \    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy1zo5_kc.rs:25:115\n   |\n\
    25 |     let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_\n\
    \   |                                                                        \
    \                                           ^ help: add `;` here\n26 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `paren_level_level_level`\
    \ in this scope\n  --> /tmp/tmpy1zo5_kc.rs:14:51\n   |\n14 |     let mut paren_level_level_level_level_depth\
    \ = paren_level_level_level;\n   |                                           \
    \        ^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `paren_level_level_stack`\n\nerror[E0425]: cannot find value `paren_level_level_level_stack`\
    \ in this scope\n  --> /tmp/tmpy1zo5_kc.rs:15:63\n   |\n15 |     let mut paren_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_stack.clone();\n   |                             \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `paren_level_level_level_count`\n\nerror[E0425]:\
    \ cannot find value `paren_level_level_level_level_level_level_level_stack` in\
    \ this scope\n  --> /tmp/tmpy1zo5_kc.rs:16:75\n   |\n16 |     let mut paren_level_level_level_level_level_level_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_stack.clone();\n   |     \
    \                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_level_level_level_level_level_level_stack`\n\
    \nerror[E0425]: cannot find value `paren_level_level_level_level_level_level_level_level_level_level_stack`\
    \ in this scope\n  --> /tmp/tmpy1zo5_kc.rs:17:81\n   |\n17 | ...evel_level_level_stack\
    \ = paren_level_level_level_level_level_level_level_level_level_level_stack.clone();\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exis"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    for paren in paren_string.chars()\
    \ {\n        if paren == '(' {\n            paren_level += 1;\n            paren_nesting\
    \ += 1;\n            paren_levels.push(paren_nesting);\n        } else if paren\
    \ == ')' {\n            paren_nesting -= 1;\n            paren_level -= 1;\n \
    \           if paren_nesting == 0 {\n                paren_levels.pop();\n   \
    \         }\n        } else {\n            paren_nesting = 0;\n        }\n   \
    \ }\n    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1a26a3ox.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1a26a3ox.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1a26a3ox.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1a26a3ox.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1a26a3ox.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1a26a3ox.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mu\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd2up15d4.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd2up15d4.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd2up15d4.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd2up15d4.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd2up15d4.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd2up15d4.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd2up15d4.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpd2up15d4.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_nesting =\
    \ 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_len = paren_stack.len();\n\
    \    let mut paren_levels_len2 = paren_levels_len;\n    let mut paren_levels_len3\
    \ = paren_levels_len;\n    let mut paren_levels_len4 = paren_levels_len;\n   \
    \ let mut paren_levels_len5 = paren_levels_len;\n    let mut paren_levels_len6\
    \ = paren_levels_len;\n    let mut paren_levels_len7 = paren_levels_len;\n   \
    \ let mut paren_levels_len8 = paren_levels_len;\n    let mut paren_levels_len9\
    \ = paren_levels_len;\n    let mut paren_levels_len10 = paren_levels_len;\n  \
    \  let mut paren_levels_len11 = paren_levels_len;\n    let mut paren_levels_len12\
    \ = paren_levels_len;\n    let mut paren_levels_len13 = paren_levels_len;\n  \
    \  let mut paren_levels_len14 = paren_levels_len;\n    let mut paren_levels_len15\
    \ = paren_levels_len;\n    let mut paren_levels_len16 = paren_levels_len;\n  \
    \  let mut paren_levels_len17 = paren_levels_len;\n    let mut paren_levels_len18\
    \ = paren_levels_len;\n    let mut paren_levels_len19 = paren_levels_len;\n  \
    \  let mut paren_levels_len20 = paren_levels_len;\n    let mut paren_levels_len21\
    \ = paren_levels_len;\n    let mut paren_levels_len22 = paren_levels_len;\n  \
    \  let mut paren_levels_len23 = paren_levels_len;\n    let mut paren_levels_len24\
    \ = paren_levels_len;\n    let mut paren_levels_len25 = paren_levels_len;\n  \
    \  let mut paren_levels_len26 = paren_levels_len;\n    let mut paren_levels_len27\
    \ = paren_levels_len;\n    let mut paren_levels_len28 = paren_levels_len;\n  \
    \  let mut paren_levels_len29 = paren_levels_len;\n    let mut paren_levels_len30\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpecq5n0hq.rs:41:45\n   |\n\
    41 |     let mut paren_levels_len30 = paren_level\n   |                      \
    \                       ^ help: add `;` here\n42 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpecq5n0hq.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpecq5n0hq.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpecq5n0hq.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpecq5n0hq.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpecq5n0hq.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpecq5n0hq.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpecq5n0hq.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmpdz88q5.rs:37:59\n   |\n\
    37 |     let mut paren_levels_stack_bottom = paren_levels_stack\n   |        \
    \                                                   ^ help: add `;` here\n38 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpmpdz88q5.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmpdz88q5.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmpdz88q5.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmpdz88q5.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmpdz88q5.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmpdz88q5.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmpdz88q5.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_3vu9mbr.rs:30:85\n   |\n\
    30 |     let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \             ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_3vu9mbr.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_3vu9mbr.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_3vu9mbr.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_3vu9mbr.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_3vu9mbr.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_3vu9mbr.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_3vu9mbr.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9g61ktss.rs:41:56\n   |\n\
    41 |     let mut paren_nesting_nesting_nesting_nesting_level\n   |           \
    \                                             ^ help: add `;` here\n42 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9g61ktss.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9g61ktss.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9g61ktss.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9g61ktss.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9g61ktss.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9g61ktss.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9g61ktss.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_char = 0;\n    let mut paren_level_char_pos = 0;\n  \
    \  let mut paren_level_char_len = paren_string.len();\n    let mut paren_level_char_len_pos\
    \ = 0;\n    let mut paren_level_char_len_len = 0;\n    let mut paren_level_char_len_len_pos\
    \ = 0;\n    let mut paren_level_char_len_len_len = 0;\n    let mut paren_level_char_len_len_len_pos\
    \ = 0;\n    let mut paren_level_char_len_len_len_len = 0;\n    let mut paren_level_char_len_len_len_len_pos\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len = 0;\n    let mut paren_level_char_len_len_len_len_len_pos\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len_len = 0;\n    let mut\
    \ paren_level_char_len_len_len_len_len_len_pos = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_pos = 0;\n  \
    \  let mut paren_level_char_len_len_len_len_len_len_len_len_len = 0;\n    let\
    \ mut paren_level_char_len_len_len_len_len_len_len_len_pos = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_len_len_pos =\
    \ 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len = 0;\n\
    \    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len_pos = 0;\n\
    \    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len_len_pos\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len_len_len_pos\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len_len_len_len_pos\
    \ = 0;\n    let mut paren_level_char_len_len_len_len_len_len_len_len_len_len_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9vdp1r8d.rs:39:70\n   |\n\
    39 |     let mut paren_level_char_len_len_len_len_len_len_len_len_len_len_\n \
    \  |                                                                      ^ help:\
    \ add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp9vdp1r8d.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp9vdp1r8d.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9vdp1r8d.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9vdp1r8d.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9vdp1r8d.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9vdp1r8d.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp9vdp1r8d.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_nesting_level = 0;\n    for paren\
    \ in paren_string.chars() {\n        if paren == '(' {\n            paren_stack.push(paren_level);\n\
    \            paren_level += 1;\n            paren_nesting_level += 1;\n      \
    \  } else if paren == ')' {\n            paren_level -= 1;\n            paren_nesting_level\
    \ -= 1;\n            if paren_nesting_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        } else if paren == ' ' {\n            if paren_nesting_level\
    \ == 0 {\n                paren_stack.push(paren_level);\n            }\n    \
    \    }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpy2rzmch0.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy2rzmch0.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy2rzmch0.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy2rzmch0.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy2rzmch0.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy2rzmch0.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_8ytdta8.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp_8ytdta8.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_8ytdta8.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_8ytdta8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_8ytdta8.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp_8ytdta8.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_8ytdta8.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_8ytdta8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack_pos;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0cr2y2mx.rs:37:49\n   |\n\
    37 |     let mut paren_levels_stack_top = paren_level\n   |                  \
    \                               ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0cr2y2mx.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0cr2y2mx.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0cr2y2mx.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0cr2y2mx.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0cr2y2mx.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0cr2y2mx.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0cr2y2mx.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting\
    \ = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_nestings_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_end = paren_levels_iter.next();\n\
    \    let mut paren_nestings_end = paren_nestings_iter.next();\n    while paren_levels_end.unwrap()\
    \ != None && paren_nestings_end.unwrap() != None {\n        if paren_levels_end.unwrap().unwrap()\
    \ == paren_nestings_end.unwrap().unwrap() {\n            paren_levels.push(paren_level);\n\
    \            paren_nestings.push(paren_nesting);\n            paren_levels_end\
    \ = paren_levels_iter.next();\n            paren_nestings_end = paren_nestings_iter.next();\n\
    \            paren_level += 1;\n            paren_nesting += 1;\n        } else\
    \ {\n            paren_level += 1;\n            paren_nesting += 1;\n        }\n\
    \    }\n    paren_levels.push(paren_level);\n    paren_nestings.push(paren_nesting);\n\
    \    paren_levels_end.unwrap()\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzd4xz1s_.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzd4xz1s_.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzd4xz1s_.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzd4xz1s_.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzd4xz1s_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzd4xz1s_.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzd4xz1s_.rs:15:40\n\
    \   |\n15 |     while paren_levels_end.unwrap() != None && paren_nestings_end.unwrap()\
    \ != None {\n   |                                        ^^^^ expected tuple,\
    \ found enum `Option`\n   |\n   = note: expected tuple `(usize, char)`\n     \
    \          found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzd4xz1s_.rs:15:79\n\
    \   |\n15 |     while paren_levels_end.unwrap() != None && paren_nestings_end.unwrap()\
    \ != None {\n   |                                                            \
    \                   ^^^^ expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(usize, char)`\n               found enum `Option<_>`\n\nerror[E0599]:\
    \ no method named `unwrap` found for tuple `(usize, char)` in the current scope\n\
    \  --> /tmp/tmpzd4xz1s_.rs:16:38\n   |\n16 |         if paren_levels_end.unwrap().unwrap()\
    \ == paren_nestings_end.unwrap().unwrap() {\n   |                     "
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels = Vec::new();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_lens = Vec::new();\n    let mut\
    \ paren_levels_lens_len = paren_levels_lens.len();\n    let mut paren_levels_lens_lens\
    \ = paren_levels_lens_lens.len();\n    let mut paren_levels_lens_lens_len = paren_levels_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_len = paren_levels_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_len = paren_levels_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_len = paren_levels_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_len = paren_levels_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len = paren_levels_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = paren_levels_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = paren_levels_lens_lens.len();\n\
    \    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = paren_levels_lens_lens.len();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = paren_levels_lens_lens.len();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = paren_levels_lens_lens.len();\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = paren_levels_lens_lens.len();\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpma1fw2_x.rs:27:1\n\
    \   |\n27 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `paren_levels_lens_lens`\
    \ in this scope\n  --> /tmp/tmpma1fw2_x.rs:13:38\n   |\n13 |     let mut paren_levels_lens_lens\
    \ = paren_levels_lens_lens.len();\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_lens_len`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpma1fw2_x.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpma1fw2_x.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpma1fw2_x.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpma1fw2_x.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpma1fw2_x.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpma1fw2_x.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 8 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_stack = Vec::new();\n\
    \    let mut paren_stack_pos = 0;\n    let mut paren_stack_len = paren_string.len();\n\
    \    while paren_stack_pos < paren_stack_len {\n        let mut paren_stack_char\
    \ = paren_string[paren_stack_pos];\n        if paren_stack_char == ')' {\n   \
    \         paren_stack.pop_back();\n            level -= 1;\n        }\n      \
    \  if paren_stack_char == '(' {\n            paren_stack.push(level);\n      \
    \      level += 1;\n        }\n        paren_stack_pos += 1;\n    }\n    paren_stack\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6mcyd1g3.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6mcyd1g3.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6mcyd1g3.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6mcyd1g3.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6mcyd1g3.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6mcyd1g3.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp6mcyd1g3.rs:12:36\n   |\n12 |         let mut paren_stack_char\
    \ = paren_string[paren_stack_pos];\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0599]: no method named `pop_back`\
    \ found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp6mcyd1g3.rs:14:25\n\
    \   |\n14 |             paren_stack.pop_back();\n   |                        \
    \ ^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_level_depth\
    \ = 0;\n    let mut paren_level_level = 0;\n    let mut paren_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level = 0;\n    let mut paren_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level = 0;\n    let mut paren_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level = 0;\n    let mut paren_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level = 0;\n   \
    \ let mut paren_level_level_level_level_level_level_level_depth = 0;\n    let\
    \ mut paren_level_level_level_level_level_level_level_level = 0;\n    let mut\
    \ paren_level_level_level_level_level_level_level_level_depth = 0;\n    let mut\
    \ paren_level_level_level_level_level_level_level_level_level_level = 0;\n   \
    \ let mut paren_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_depth\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = 0;\n    let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxkqpm2fc.rs:36:115\n   |\n\
    36 |     let mut paren_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_\n\
    \   |                                                                        \
    \                                           ^ help: add `;` here\n37 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxkqpm2fc.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxkqpm2fc.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxkqpm2fc.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxkqpm2fc.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxkqpm2fc.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxkqpm2fc.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpxkqpm2fc.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: usize = 0;\n    let mut paren_level: usize = 0;\n    let\
    \ mut paren_levels: Vec<isize> = vec![];\n    let mut paren_levels_len: usize\
    \ = 0;\n    let mut paren_levels_lens: Vec<isize> = vec![];\n    let mut paren_levels_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens: Vec<isize> = vec![];\n    let\
    \ mut paren_levels_lens_lens_len: usize = 0;\n    let mut paren_levels_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_len: usize = 0;\n\
    \    let mut paren_levels_lens_lens_lens_lens: Vec<isize> = vec![];\n    let mut\
    \ paren_levels_lens_lens_lens_lens_len: usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: usize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len: usize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut paren_levels_lens_lens_len\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl87ztcs8.rs:29:39\n   |\n\
    29 |     let mut paren_levels_lens_lens_len\n   |                            \
    \           ^ help: add `;` here\n30 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl87ztcs8.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl87ztcs8.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl87ztcs8.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl87ztcs8.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl87ztcs8.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl87ztcs8.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl87ztcs8.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = vec![];\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_chars.len();\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4j3adey9.rs:47:41\n   |\n\
    47 |     let mut paren_level_char_len = paren\n   |                          \
    \               ^ help: add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `paren` in this scope\n  --> /tmp/tmp4j3adey9.rs:47:36\n \
    \  |\n47 |     let mut paren_level_char_len = paren\n   |                    \
    \                ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp4j3adey9.rs:52:17\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4j3adey9.rs:52:25\n \
    \  |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4j3adey9.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4j3adey9.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4j3adey9.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4j3adey9.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp4j3adey9.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, tr"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_min = 0;\n    let mut paren_level_char_pos_count_min_index\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_min = 0;\n    let mut paren_level_char_pos_count_min_index\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_min = 0;\n    let mut paren_level_char_pos_count_min_index\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_min = 0;\n    let mut paren_level_char_pos_count_min_index\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_min = 0;\n    let mut paren_level_char_pos_count_min_index\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_min = 0;\n    let mut paren_level_char_pos_count_min_index\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_min = 0;\n    let mut paren_level_char_pos_count_min_index\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_min = 0;\n    let mut paren_level_char_pos_count_min_index\
    \ = 0;\n    let mut paren_level_char_pos_count_max = 0;\n    let mut paren_level_char_pos_count_max_index\
    \ = 0;\n    let mut paren_level_char_pos_count_min = 0;\n    let mut paren_level_char_pos_count_min_index\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpsivoecdr.rs:50:1\n\
    \   |\n50 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpsivoecdr.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpsivoecdr.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsivoecdr.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsivoecdr.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsivoecdr.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsivoecdr.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = vec![0];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = paren_string.chars();\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char_index =\
    \ 0;\n    let mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_char_index = 0;\n    let mut paren_level_chars\
    \ = paren_string.chars();\n    let mut paren_level_char_index = 0;\n    let mut\
    \ paren_level_char_index = 0;\n    let mut paren_level_chars = paren_string.chars();\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char_index =\
    \ 0;\n    let mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_char_index = 0;\n    let mut paren_level_chars\
    \ = paren_string.chars();\n    let mut paren_level_char_index = 0;\n    let mut\
    \ paren_level_char_index = 0;\n    let mut paren_level_chars = paren_string.chars();\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char_index =\
    \ 0;\n    let mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_char_index = 0;\n    let mut paren_level_chars\
    \ = paren_string.chars();\n    let mut paren_level_char_index = 0;\n    let mut\
    \ paren_level_char_index = 0;\n    let mut paren_level_chars = paren_string.chars();\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char_index =\
    \ 0;\n    let mut paren_level_chars = paren_string.chars();\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_char_index = 0;\n    let mut paren_level_chars\
    \ = paren_string.chars();\n    let mut paren_level_char_index = 0;\n    let mut\
    \ paren_level_char_index = 0;\n    let mut paren_level_chars = paren_string.chars();\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char_index =\
    \ 0;\n    let mut paren_level_chars = paren_string.chars();\n    let mut paren_level_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpebcfq5vx.rs:52:25\n   |\n\
    52 |     let mut paren_level_\n   |                         ^ help: add `;` here\n\
    53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpebcfq5vx.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpebcfq5vx.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpebcfq5vx.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpebcfq5vx.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpebcfq5vx.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpebcfq5vx.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpebcfq5vx.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = vec![];\n    let mut paren_level\
    \ = 0;\n    for paren in paren_string.chars() {\n        if paren == '(' {\n \
    \           paren_stack.push(paren_level);\n            paren_level += 1;\n  \
    \      } else if paren == ')' {\n            paren_level -= 1;\n            if\
    \ paren_level == 0 {\n                paren_stack.push(paren_level);\n       \
    \     }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptevkmbrz.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptevkmbrz.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptevkmbrz.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptevkmbrz.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptevkmbrz.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptevkmbrz.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_start\
    \ = paren_string.chars().nth(0).unwrap();\n    let mut paren_level_end = paren_level_start;\n\
    \    let mut paren_level_end = paren_level_end;\n    let mut paren_level_end =\
    \ paren_level_end;\n    let mut paren_level_end = paren_level_end;\n    let mut\
    \ paren_level_end = paren_level_end;\n    let mut paren_level_end = paren_level_end;\n\
    \    let mut paren_level_end = paren_level_end;\n    let mut paren_level_end =\
    \ paren_level_end;\n    let mut paren_level_end = paren_level_end;\n    let mut\
    \ paren_level_end = paren_level_end;\n    let mut paren_level_end = paren_level_end;\n\
    \    let mut paren_level_end = paren_level_end;\n    let mut paren_level_end =\
    \ paren_level_end;\n    let mut paren_level_end = paren_level_end;\n    let mut\
    \ paren_level_end = paren_level_end;\n    let mut paren_level_end = paren_level_end;\n\
    \    let mut paren_level_end = paren_level_end;\n    let mut paren_level_end =\
    \ paren_level_end;\n    let mut paren_level_end = paren_level_end;\n    let mut\
    \ paren_level_end = paren_level_end;\n    let mut paren_level_end = paren_level_end;\n\
    \    let mut paren_level_end = paren_level_end;\n    let mut paren_level_end =\
    \ paren_level_end;\n    let mut paren_level_end = paren_level_end;\n    let mut\
    \ paren_level_end = paren_level_end;\n    let mut paren_level_end = paren_level_end;\n\
    \    let mut paren_level_end = paren_level_end;\n    let mut paren_level_end =\
    \ paren_level_end;\n    let mut paren_level_end = paren_level_end;\n    let mut\
    \ paren_level_end = paren_level_end;\n    let mut paren_level_end = paren_level_end;\n\
    \    let mut paren_level_end = paren_level_end;\n    let mut paren_level_end =\
    \ paren_level_end;\n    let mut paren_level_end = paren_level_end;\n    let mut\
    \ paren_level_end = paren_level_end;\n    let mut paren_level_end = paren_level_end;\n\
    \    let mut paren_level_end = paren_level_end;\n    let mut paren_level_end =\
    \ paren_level_end;\n    let mut paren_level_end = paren_level_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7n4r_73k.rs:49:43\n   |\n\
    49 |     let mut paren_level_end = paren_level_\n   |                        \
    \                   ^ help: add `;` here\n50 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren_level_` in this scope\n  --> /tmp/tmp7n4r_73k.rs:49:31\n\
    \   |\n49 |     let mut paren_level_end = paren_level_\n   |                 \
    \              ^^^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `paren_level`\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7n4r_73k.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7n4r_73k.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7n4r_73k.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7n4r_73k.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7n4r_73k.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7n4r_73k.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7n4r_73k.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 9 previous errors\n\nSome\
    \ errors have detailed explanation"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_level_count = vec![];\n    let mut\
    \ paren_level_count_index = -1;\n    let mut paren_level_count_index2 = 0;\n \
    \   let mut paren_level_count_index3 = 0;\n    let mut paren_level_count_index4\
    \ = 0;\n    let mut paren_level_count_index5 = 0;\n    let mut paren_level_count_index6\
    \ = 0;\n    let mut paren_level_count_index7 = 0;\n    let mut paren_level_count_index8\
    \ = 0;\n    let mut paren_level_count_index9 = 0;\n    let mut paren_level_count_index10\
    \ = 0;\n    let mut paren_level_count_index11 = 0;\n    let mut paren_level_count_index12\
    \ = 0;\n    let mut paren_level_count_index13 = 0;\n    let mut paren_level_count_index14\
    \ = 0;\n    let mut paren_level_count_index15 = 0;\n    let mut paren_level_count_index16\
    \ = 0;\n    let mut paren_level_count_index17 = 0;\n    let mut paren_level_count_index18\
    \ = 0;\n    let mut paren_level_count_index19 = 0;\n    let mut paren_level_count_index20\
    \ = 0;\n    let mut paren_level_count_index21 = 0;\n    let mut paren_level_count_index22\
    \ = 0;\n    let mut paren_level_count_index23 = 0;\n    let mut paren_level_count_index24\
    \ = 0;\n    let mut paren_level_count_index25 = 0;\n    let mut paren_level_count_index26\
    \ = 0;\n    let mut paren_level_count_index27 = 0;\n    let mut paren_level_count_index28\
    \ = 0;\n    let mut paren_level_count_index29 = 0;\n    let mut paren_level_count_index30\
    \ = 0;\n    let mut paren_level_count_index31 = 0;\n    let mut paren_level_count_index32\
    \ = 0;\n    let mut paren_level_count_index33 = 0;\n    let mut paren_level_count_index34\
    \ = 0;\n    let mut paren_level_count_index35 = 0;\n    let mut paren_level_count_index36\
    \ = 0;\n    let mut paren_level_count_index37 = 0;\n    let mut paren_level_count_index38\
    \ = 0;\n    let mut paren_level_count_index39 = 0;\n    let mut paren_level_count_index40\
    \ = 0;\n    let mut paren_level_count_index41 = 0;\n    let mut paren_level_count_index42\
    \ = 0;\n    let mut paren_level_count_index43 = 0;\n    let mut paren_level_count_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp786h6oqu.rs:53:31\n   |\n\
    53 |     let mut paren_level_count_\n   |                               ^ help:\
    \ add `;` here\n54 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp786h6oqu.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp786h6oqu.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp786h6oqu.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp786h6oqu.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp786h6oqu.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp786h6oqu.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp786h6oqu.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpnh7xfx_r.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpnh7xfx_r.rs:42:17\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnh7xfx_r.rs:42:25\n \
    \  |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnh7xfx_r.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnh7xfx_r.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnh7xfx_r.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnh7xfx_r.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_size = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_size = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_size = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpu2m1xy81.rs:41:1\n\
    \   |\n41 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpu2m1xy81.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpu2m1xy81.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu2m1xy81.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu2m1xy81.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpu2m1xy81.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpu2m1xy81.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmpdz88q5.rs:37:59\n   |\n\
    37 |     let mut paren_levels_stack_bottom = paren_levels_stack\n   |        \
    \                                                   ^ help: add `;` here\n38 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpmpdz88q5.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmpdz88q5.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmpdz88q5.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmpdz88q5.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmpdz88q5.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmpdz88q5.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmpdz88q5.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_depth\
    \ = 0;\n    let mut paren_levels_level = 0;\n    let mut paren_levels_levels =\
    \ Vec::new();\n    let mut paren_levels_levels_depth = 0;\n    let mut paren_levels_levels_level\
    \ = 0;\n    let mut paren_levels_levels_levels = Vec::new();\n    let mut paren_levels_levels_levels_depth\
    \ = 0;\n    let mut paren_levels_levels_levels_level = 0;\n    let mut paren_levels_levels_levels_levels\
    \ = Vec::new();\n    let mut paren_levels_levels_levels_levels_depth = 0;\n  \
    \  let mut paren_levels_levels_levels_levels_level = 0;\n    let mut paren_levels_levels_levels_levels_levels\
    \ = Vec::new();\n    let mut paren_levels_levels_levels_levels_levels_depth =\
    \ 0;\n    let mut paren_levels_levels_levels_levels_levels_level = 0;\n    let\
    \ mut paren_levels_levels_levels_levels_levels_levels = Vec::new();\n    let mut\
    \ paren_levels_levels_levels_levels_levels_levels_depth = 0;\n    let mut paren_levels_levels_levels_levels_levels_levels_level\
    \ = 0;\n    let mut paren_levels_levels_levels_levels_levels_levels_levels = Vec::new();\n\
    \    let mut paren_levels_levels_levels_levels_levels_levels_levels_depth = 0;\n\
    \    let mut paren_levels_levels_levels_levels_levels_levels_levels_level = 0;\n\
    \    let mut paren_levels_levels_levels_levels_levels_levels_levels_levels = Vec::new();\n\
    \    let mut paren_levels_levels_levels_levels_levels_levels_levels_levels_depth\
    \ = 0;\n    let mut paren_levels_levels_levels_levels_levels_levels_levels_levels_level\
    \ = 0;\n    let mut paren_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = Vec::new();\n    let mut paren_levels_levels_levels_levels_levels_levels_levels_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt3uuizvz.rs:36:68\n   |\n\
    36 |     let mut paren_levels_levels_levels_levels_levels_levels_levels_\n   |\
    \                                                                    ^ help: add\
    \ `;` here\n37 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpt3uuizvz.rs:41:17\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt3uuizvz.rs:41:25\n \
    \  |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt3uuizvz.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt3uuizvz.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt3uuizvz.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt3uuizvz.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpt3uuizvz.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_levels =\
    \ vec![];\n    let mut paren_level = 0;\n    let mut paren_level_count = 0;\n\
    \    let mut paren_level_char_count = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char = 0;\n    let mut paren_level_char_pos = 0;\n  \
    \  let mut paren_level_char_len = paren_level_char.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdawipps1.rs:48:19\n   |\n\
    48 |     let mut paren_\n   |                   ^ help: add `;` here\n49 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdawipps1.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdawipps1.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdawipps1.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdawipps1.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdawipps1.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdawipps1.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0689]: can't\
    \ call method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpdawipps1.rs:15:53\n\
    \   |\n15 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n13 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpdawipps1.rs:17:53\n\
    \   |\n17 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n13 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_level_depth\
    \ = Vec::new();\n    let mut paren_level_depth_counter = Vec::new();\n    let\
    \ mut paren_level_depth_counter_index = 0;\n    let mut paren_level_depth_counter_size\
    \ = 0;\n    let mut paren_level_depth_counter_max_size = 0;\n    let mut paren_level_depth_counter_max_index\
    \ = 0;\n    let mut paren_level_depth_counter_max_value = 0;\n    let mut paren_level_depth_counter_max_count\
    \ = 0;\n    let mut paren_level_depth_counter_max_count_index = 0;\n    let mut\
    \ paren_level_depth_counter_max_count_value = 0;\n    let mut paren_level_depth_counter_max_count_count\
    \ = 0;\n    let mut paren_level_depth_counter_max_count_count_index = 0;\n   \
    \ let mut paren_level_depth_counter_max_count_count_value = 0;\n    let mut paren_level_depth_counter_max_count_count_count\
    \ = 0;\n    let mut paren_level_depth_counter_max_count_count_count_index = 0;\n\
    \    let mut paren_level_depth_counter_max_count_count_count_value = 0;\n    let\
    \ mut paren_level_depth_counter_max_count_count_count_count = 0;\n    let mut\
    \ paren_level_depth_counter_max_count_count_count_count_index = 0;\n    let mut\
    \ paren_level_depth_counter_max_count_count_count_count_value = 0;\n    let mut\
    \ paren_level_depth_counter_max_count_count_count_count_count = 0;\n    let mut\
    \ paren_level_depth_counter_max_count_count_count_count_index = 0;\n    let mut\
    \ paren_level_depth_counter_max_count_count_count_count_value = 0;\n    let mut\
    \ paren_level_depth_counter_max_count_count_count_count_count = 0;\n    let mut\
    \ paren_level_depth_counter_max_count_count_count_count_count_index = 0;\n   \
    \ let mut paren_level_depth_counter_max_count_count_count_count_count_value =\
    \ 0;\n    let mut paren_level_depth_counter_max_count_count_count_count_count_count\
    \ = 0;\n    let mut paren_level_depth_counter_max_count_count_count_count_count_index\
    \ = 0;\n    let mut paren_level_depth_counter_max_count_count_count_count_count_value\
    \ = 0;\n    let mut paren_level_depth_counter_max_count_count_count_count_count_count_count\
    \ = 0;\n    let mut paren_level_depth_counter_max_count_count_count_count_count_count_index\
    \ = 0;\n    let mut paren_level_depth_counter_max_count_count_count_count_count_count_value\
    \ = 0;\n    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5n8c47sy.rs:41:19\n   |\n\
    41 |     let mut paren_\n   |                   ^ help: add `;` here\n42 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5n8c47sy.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5n8c47sy.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5n8c47sy.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5n8c47sy.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5n8c47sy.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5n8c47sy.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp5n8c47sy.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_depth: isize = 0;\n    let mut paren_level: isize = 0;\n    let\
    \ mut paren_levels: Vec<isize> = vec![];\n    let mut paren_levels_len: isize\
    \ = 0;\n    let mut paren_levels_lens: Vec<isize> = vec![];\n    let mut paren_levels_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens: Vec<isize> = vec![];\n    let\
    \ mut paren_levels_lens_lens_len: isize = 0;\n    let mut paren_levels_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_len: isize = 0;\n\
    \    let mut paren_levels_lens_lens_lens_lens: Vec<isize> = vec![];\n    let mut\
    \ paren_levels_lens_lens_lens_lens_len: isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_len: isize\
    \ = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_len: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len:\
    \ isize = 0;\n    let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0w4d3_32.rs:26:304\n   |\n\
    26 |     let mut paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    ^ help: add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0w4d3_32.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0w4d3_32.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0w4d3_32.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0w4d3_32.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0w4d3_32.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0w4d3_32.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp0w4d3_32.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected str"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_level = 0;\n\
    \    let mut paren_level_count = paren_string.chars().filter(|c| c == '(').count();\n\
    \    let mut paren_level_count_max = paren_level_count;\n    let mut paren_level_count_min\
    \ = paren_level_count;\n    let mut paren_level_count_sum = 0;\n    let mut paren_level_count_sum2\
    \ = 0;\n    let mut paren_level_count_sum3 = 0;\n    let mut paren_level_count_sum4\
    \ = 0;\n    let mut paren_level_count_sum5 = 0;\n    let mut paren_level_count_sum6\
    \ = 0;\n    let mut paren_level_count_sum7 = 0;\n    let mut paren_level_count_sum8\
    \ = 0;\n    let mut paren_level_count_sum9 = 0;\n    let mut paren_level_count_sum10\
    \ = 0;\n    let mut paren_level_count_sum11 = 0;\n    let mut paren_level_count_sum12\
    \ = 0;\n    let mut paren_level_count_sum13 = 0;\n    let mut paren_level_count_sum14\
    \ = 0;\n    let mut paren_level_count_sum15 = 0;\n    let mut paren_level_count_sum16\
    \ = 0;\n    let mut paren_level_count_sum17 = 0;\n    let mut paren_level_count_sum18\
    \ = 0;\n    let mut paren_level_count_sum19 = 0;\n    let mut paren_level_count_sum20\
    \ = 0;\n    let mut paren_level_count_sum21 = 0;\n    let mut paren_level_count_sum22\
    \ = 0;\n    let mut paren_level_count_sum23 = 0;\n    let mut paren_level_count_sum24\
    \ = 0;\n    let mut paren_level_count_sum25 = 0;\n    let mut paren_level_count_sum26\
    \ = 0;\n    let mut paren_level_count_sum27 = 0;\n    let mut paren_level_count_sum28\
    \ = 0;\n    let mut paren_level_count_sum29 = 0;\n    let mut paren_level_count_sum30\
    \ = 0;\n    let mut paren_level_count_sum31 = 0;\n    let mut paren_level_count_sum32\
    \ = 0;\n    let mut paren_level_count_sum33 = 0;\n    let mut paren_level_count_sum34\
    \ = 0;\n    let mut paren_level_count_sum35 = 0;\n    let mut paren_level_count_sum36\
    \ = 0;\n    let mut paren_level_count_sum37 = 0;\n    let mut paren_level_count_sum38\
    \ = 0;\n    let mut paren_level_count_sum39 = 0;\n    let mut paren_level_count_sum40\
    \ = 0;\n    let mut paren_level_count_sum41 = 0;\n\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7orod_vp.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7orod_vp.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7orod_vp.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7orod_vp.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7orod_vp.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7orod_vp.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: can't compare `&char` with `char`\n --> /tmp/tmp7orod_vp.rs:9:67\n\
    \  |\n9 |     let mut paren_level_count = paren_string.chars().filter(|c| c ==\
    \ '(').count();\n  |                                                         \
    \          ^^ no implementation for `&char == char`\n  |\n  = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp7orod_vp.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_indexes: Vec<usize>\
    \ = vec![];\n    let mut paren_level_indexes_len = 0;\n    let mut paren_level_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes: Vec<usize> = vec![];\n  \
    \  let mut paren_level_indexes_len_indexes_len = 0;\n    let mut paren_level_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes: Vec<usize> =\
    \ vec![];\n    let mut paren_level_indexes_len_indexes_len_indexes_len = 0;\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len_indexes_len_indexes_len_indexes: Vec<usize> = vec![];\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len = 0;\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<usize> = vec![];\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<usize> = vec![];\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<usize> = vec![];\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<usize> = vec![];\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptyhzfaxi.rs:30:90\n   |\n\
    30 |     let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\n\
    \   |                                                                        \
    \                  ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptyhzfaxi.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptyhzfaxi.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptyhzfaxi.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptyhzfaxi.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptyhzfaxi.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptyhzfaxi.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmptyhzfaxi.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut level = 0;\n    let mut paren_levels =\
    \ vec![];\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_size\
    \ = vec![];\n    let mut paren_levels_stack_ptr = vec![];\n    let mut paren_levels_stack_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr = vec![];\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = vec![];\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = vec![];\n    let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8g1scqv3.rs:31:11\n   |\n\
    31 |     let mu\n   |           ^ help: add `;` here\n32 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8g1scqv3.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8g1scqv3.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8g1scqv3.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8g1scqv3.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8g1scqv3.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8g1scqv3.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8g1scqv3.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_stack\
    \ = Vec::new();\n    let mut paren_level_stack_pointer = 0;\n    let mut paren_level_stack_pointer_max\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index = 0;\n    let mut paren_level_stack_pointer_max_value\
    \ = -1;\n    let mut paren_level_stack_pointer_max_value_index = 0;\n    let mut\
    \ paren_level_stack_pointer_max_value_length = 0;\n    let mut paren_level_stack_pointer_max_value_length_index\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value = 0;\n  \
    \  let mut paren_level_stack_pointer_max_value_length_value_index = 0;\n    let\
    \ mut paren_level_stack_pointer_max_value_length_value_length = 0;\n    let mut\
    \ paren_level_stack_pointer_max_value_length_value_length_index = 0;\n    let\
    \ mut paren_level_stack_pointer_max_value_length_value_length_value = 0;\n   \
    \ let mut paren_level_stack_pointer_max_value_length_value_length_value_index\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_index\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_index\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_length\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    let mut paren_level_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    let mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmpcbrugp.rs:37:18\n   |\n\
    37 |     let mut paren\n   |                  ^ help: add `;` here\n38 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmpcbrugp.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmpcbrugp.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmpcbrugp.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmpcbrugp.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmpcbrugp.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmpcbrugp.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmpcbrugp.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp8krynh6m.rs:31:1\n  \
    \ |\n31 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp8krynh6m.rs:35:17\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp8krynh6m.rs:35:25\n \
    \  |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8krynh6m.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8krynh6m.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8krynh6m.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8krynh6m.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    for paren in paren_string.chars()\
    \ {\n        if paren == '(' {\n            paren_stack.push(paren_depth);\n \
    \           paren_depth += 1;\n            paren_level += 1;\n        } else if\
    \ paren == ')' {\n            paren_depth -= 1;\n            paren_level -= 1;\n\
    \            if paren_stack.is_empty() {\n                return vec![paren_level];\n\
    \            }\n        }\n    }\n    vec![paren_level]\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp81d01dil.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp81d01dil.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp81d01dil.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp81d01dil.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp81d01dil.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp81d01dil.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_stack\
    \ = Vec::new();\n    let mut paren_level_stack_pointer = 0;\n    let mut paren_level_stack_pointer_max\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index = 0;\n    let mut paren_level_stack_pointer_max_index2\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index3 = 0;\n    let mut paren_level_stack_pointer_max_index4\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index5 = 0;\n    let mut paren_level_stack_pointer_max_index6\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index7 = 0;\n    let mut paren_level_stack_pointer_max_index8\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index9 = 0;\n    let mut paren_level_stack_pointer_max_index10\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index11 = 0;\n    let mut paren_level_stack_pointer_max_index12\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index13 = 0;\n    let mut paren_level_stack_pointer_max_index14\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index15 = 0;\n    let mut paren_level_stack_pointer_max_index16\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index17 = 0;\n    let mut paren_level_stack_pointer_max_index18\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index19 = 0;\n    let mut paren_level_stack_pointer_max_index20\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index21 = 0;\n    let mut paren_level_stack_pointer_max_index22\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index23 = 0;\n    let mut paren_level_stack_pointer_max_index24\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index25 = 0;\n    let mut paren_level_stack_pointer_max_index26\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index27 = 0;\n    let mut paren_level_stack_pointer_max_index28\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index29 = 0;\n    let mut paren_level_stack_pointer_max_index30\
    \ = 0;\n    let mut paren_level_stack_pointer_max_index31 = 0;\n    let mut paren_level_stack_pointer_max_index32\
    \ = 0;\n    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_k_yzxj8.rs:45:19\n   |\n\
    45 |     let mut paren_\n   |                   ^ help: add `;` here\n46 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_k_yzxj8.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_k_yzxj8.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_k_yzxj8.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_k_yzxj8.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_k_yzxj8.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_k_yzxj8.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_k_yzxj8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcxxiw8s_.rs:29:114\n   |\n\
    29 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new\n   |                                                           \
    \                                                       ^ help: add `;` here\n\
    30 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpcxxiw8s_.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcxxiw8s_.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcxxiw8s_.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcxxiw8s_.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcxxiw8s_.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcxxiw8s_.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcxxiw8s_.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack = Vec::new();\n    let mut\
    \ paren_depth = 0;\n    let mut paren_level = 0;\n    let mut paren_nesting =\
    \ 0;\n    for paren in paren_string.chars() {\n        if paren == '(' {\n   \
    \         paren_stack.push(paren_depth);\n            paren_depth += 1;\n    \
    \        paren_level += 1;\n            paren_nesting += 1;\n        } else if\
    \ paren == ')' {\n            paren_depth -= 1;\n            paren_level -= 1;\n\
    \            paren_nesting -= 1;\n            if paren_nesting == 0 {\n      \
    \          paren_stack.push(paren_depth);\n            }\n        }\n    }\n \
    \   paren_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2g50epg5.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2g50epg5.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2g50epg5.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2g50epg5.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2g50epg5.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2g50epg5.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_stack = vec![0];\n\
    \    let mut paren_level_stack_pos = 0;\n    let mut paren_level_stack_len = paren_level_stack.len();\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7qx8b5m0.rs:43:55\n   |\n\
    43 |     let mut paren_level_stack_top = paren_level_stack_\n   |            \
    \                                           ^ help: add `;` here\n44 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `paren_level_stack_` in\
    \ this scope\n  --> /tmp/tmp7qx8b5m0.rs:43:37\n   |\n43 |     let mut paren_level_stack_top\
    \ = paren_level_stack_\n   |                                     ^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_level_stack`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7qx8b5m0.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7qx8b5m0.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7qx8b5m0.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7qx8b5m0.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7qx8b5m0.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7qx8b5m0.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7qx8b5m0.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due"
  stdout: ''
  timestamp: 1659822130
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    let mut paren_levels = vec![];\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_ptr = paren_levels.as_ptr();\n\
    \    let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_ptr\
    \ = paren_levels.as_ptr();\n    let mut paren_levels_len = paren_stack.len();\n\
    \    let mut paren_levels_ptr = paren_levels.as_ptr();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_ptr = paren_levels.as_ptr();\n\
    \    let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_ptr\
    \ = paren_levels.as_ptr();\n    let mut paren_levels_len = paren_stack.len();\n\
    \    let mut paren_levels_ptr = paren_levels.as_ptr();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_ptr = paren_levels.as_ptr();\n\
    \    let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_ptr\
    \ = paren_levels.as_ptr();\n    let mut paren_levels_len = paren_stack.len();\n\
    \    let mut paren_levels_ptr = paren_levels.as_ptr();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_ptr = paren_levels.as_ptr();\n\
    \    let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_ptr\
    \ = paren_levels.as_ptr();\n    let mut paren_levels_len = paren_stack.len();\n\
    \    let mut paren_levels_ptr = paren_levels.as_ptr();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_ptr = paren_levels.as_ptr();\n\
    \    let mut paren_levels_len = paren_stack.len();\n    let mut paren_levels_ptr\
    \ = paren_levels.as_ptr();\n    let mut paren_levels_len = paren_stack.len();\n\
    \    let mut paren_levels_ptr = paren_levels.as_ptr();\n    let mut paren_levels_len\
    \ = paren_stack.len();\n    let mut paren_levels_ptr = paren_levels.\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp_4czagge.rs:42:1\n   |\n42\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp_4czagge.rs:41:45\n\
    \   |\n41 |     let mut paren_levels_ptr = paren_levels.\n   |               \
    \                              ^ help: add `;` here\n42 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_4czagge.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_4czagge.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_4czagge.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_4czagge.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_4czagge.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_4czagge.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_4czagge.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 9 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp0pao4pys.rs:38:1\n   |\n38\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp0pao4pys.rs:37:60\n\
    \   |\n37 |     let mut paren_levels_stack_bottom = paren_levels_stack.\n   |\
    \                                                            ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp0pao4pys.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0pao4pys.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0pao4pys.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0pao4pys.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0pao4pys.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0pao4pys.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0pao4pys.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822131
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    let mut paren_level_count: isize = 0;\n\
    \    for paren in paren_string.chars() {\n        if paren == ')' {\n        \
    \    paren_level_count = paren_level_count;\n            paren_level += 1;\n \
    \           paren_stack.push(paren_level);\n        } else if paren == '(' {\n\
    \            paren_level_count = paren_level_count;\n            paren_level -=\
    \ 1;\n            paren_stack.push(paren_level);\n        } else {\n         \
    \   paren_level_count += 1;\n        }\n    }\n    paren_stack\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpquj_5ru9.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpquj_5ru9.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpquj_5ru9.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpquj_5ru9.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpquj_5ru9.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpquj_5ru9.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level = 0;\n    for paren in paren_string.chars() {\n        if\
    \ paren == '(' {\n            paren_stack.push(paren_level);\n            paren_level\
    \ += 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n   \
    \         if paren_stack.pop() == 0 {\n                return paren_stack;\n \
    \           }\n        }\n    }\n    panic!(\"Invalid paren string: {}\", paren_string);\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvxa4szwn.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvxa4szwn.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvxa4szwn.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvxa4szwn.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvxa4szwn.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvxa4szwn.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvxa4szwn.rs:15:37\n\
    \   |\n15 |             if paren_stack.pop() == 0 {\n   |                    \
    \                 ^\n   |                                     |\n   |        \
    \                             expected enum `Option`, found integer\n   |    \
    \                                 help: try using a variant of the expected enum:\
    \ `Some(0)`\n   |\n   = note: expected enum `Option<isize>`\n              found\
    \ type `{integer}`\n\nerror: aborting due to 7 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels\
    \ = Vec::new();\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.as_mut_ptr();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmp8x1hqyo9.rs:28:1\n   |\n28 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmp8x1hqyo9.rs:27:71\n   |\n6  | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n   |                                                      \
    \      - closing delimiter possibly meant for this\n...\n27 |     let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(\n   |                                     \
    \                                  ^ unclosed delimiter\n28 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8x1hqyo9.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8x1hqyo9.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8x1hqyo9.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8x1hqyo9.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8x1hqyo9.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8x1hqyo9.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nwarning: type annotations\
    \ needed\n  --> /tmp/tmp8x1hqyo9.rs:12:65\n   |\n12 |     let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n   |            \
    \                                                     ^^^^^^\n   |\n   = note:\
    \ `#[warn(tyvar_behind_raw_point"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3ekg90as.rs:38:18\n   |\n\
    38 |     let mut paren\n   |                  ^ help: add `;` here\n39 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3ekg90as.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3ekg90as.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3ekg90as.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3ekg90as.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3ekg90as.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3ekg90as.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp3ekg90as.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_8ytdta8.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp_8ytdta8.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_8ytdta8.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_8ytdta8.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_8ytdta8.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_8ytdta8.rs:6:49\n  |\n6 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748401
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_stack: Vec<isize> = vec![];\n   \
    \ let mut paren_level: isize = 0;\n    for paren in paren_string.chars() {\n \
    \       if paren == '(' {\n            paren_stack.push(paren_level);\n      \
    \      paren_level += 1;\n        } else if paren == ')' {\n            paren_level\
    \ -= 1;\n            if paren_level == 0 {\n                paren_stack.push(paren_level);\n\
    \            }\n        }\n    }\n    paren_stack\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnsp3n6pv.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnsp3n6pv.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnsp3n6pv.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnsp3n6pv.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnsp3n6pv.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnsp3n6pv.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = vec![0];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![0];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_len;\n    let mut paren_levels_stack_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_len = paren_levels_stack_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr = paren_levels_stack_ptr_len;\n    let\
    \ mut paren_levels_stack_ptr_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_ptr_len\
    \ = paren_levels_stack_ptr_ptr.len();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_len;\n    let mut paren_levels_stack_ptr_ptr_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr_len;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_len\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr.len();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_len;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpwclhsxzi.rs:33:1\n   |\n33\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpwclhsxzi.rs:32:105\n\
    \   |\n32 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.\n\
    \   |                                                                        \
    \                                 ^ help: add `;` here\n33 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpwclhsxzi.rs:32:62\n   |\n32 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_len\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.\n   |                        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwclhsxzi.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwclhsxzi.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwclhsxzi.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwclhsxzi.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwclhsxzi.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwclhsxzi.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `len` found for type `usize`\
    \ in the current scope"
  stdout: ''
  timestamp: 1659822132
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"\
    (()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut\
    \ paren_level = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_index = 0;\n    let mut paren_level_char_length\
    \ = 0;\n    let mut paren_level_char_length_index = 0;\n    let mut paren_level_char_length_char\
    \ = 0;\n    let mut paren_level_char_length_char_index = 0;\n    let mut paren_level_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_index = 0;\n    let mut\
    \ paren_level_char_length_char_length_char = 0;\n    let mut paren_level_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length = 0;\n   \
    \ let mut paren_level_char_length_char_length_char_length_index = 0;\n    let\
    \ mut paren_level_char_length_char_length_char_length_char = 0;\n    let mut paren_level_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0;\n    let mut paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n    let mut paren_level_char_length_char_length_\n}\n\nfn main() {\n \
    \   let candidate = parse_nested_parens;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5r1kr69c.rs:40:49\n   |\n\
    40 |     let mut paren_level_char_length_char_length_\n   |                  \
    \                               ^ help: add `;` here\n41 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5r1kr69c.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5r1kr69c.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5r1kr69c.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5r1kr69c.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5r1kr69c.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5r1kr69c.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5r1kr69c.rs:6:49\n\
    \  |\n6 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822132
