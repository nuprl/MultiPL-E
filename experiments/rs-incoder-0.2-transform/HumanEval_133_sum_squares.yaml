name: HumanEval_133_sum_squares
language: rs
prompt: "/// You are given a list of numbers.\n/// You need to return the sum of squared\
  \ numbers in the given list,\n/// round each element in the list to the upper int(Ceiling)\
  \ first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0, 3.0])\n/// 14\n/// >>> lst(vec![1.0,\
  \ 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4,\
  \ 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4, 1.0, 1.0])\n/// 6\nfn sum_squares(lst:\
  \ Vec<f64>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sum = 0;\n    for x in lst {\n        sum += x.powf(2);\n\
    \    }\n    sum", "    let mut sum = 0;\n    for x in lst {\n        sum += x.powf(2);\n\
    \    }\n    sum", "    let mut sum = 0;\n    for x in lst {\n        sum += x.powi(2);\n\
    \    }\n    sum", '    lst.iter().map(|x| x * x).sum::<isize>()', "    let mut\
    \ sum = 0;\n    for x in lst {\n        sum += x * x;\n    }\n    sum", "    let\
    \ mut sum = 0.0;\n    for x in lst {\n        sum += x.pow(2);\n    }\n    sum",
  "    let mut sum = 0.0;\n    for x in lst {\n        sum += x * x;\n    }\n    sum",
  '    lst.iter().map(|x| x.ceil() as f64).sum::<f64>()', "    let mut sum = 0;\n\
    \    for x in lst {\n        sum += x.powf(2);\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum", " \
    \   let mut sum = 0.0;\n    for x in lst {\n        sum += x.powf(2.0);\n    }\n\
    \    return sum;", "    let mut sum = 0;\n    for x in lst {\n        sum += x.powf(2);\n\
    \    }\n    sum", "    let mut sum = 0;\n    for x in lst {\n        sum += x.powf(2);\n\
    \    }\n    sum", "    let mut sum = 0.0;\n    for x in lst {\n        sum +=\
    \ x.powf(2.0);\n    }\n    sum", "    let mut sum = 0;\n    for x in lst {\n \
    \       sum += x.powf(2);\n    }\n    sum", '    lst.iter().map(|x| x * x).sum::<isize>()',
  "    let mut sum = 0;\n    for num in lst.iter() {\n        sum += num * num;\n\
    \    }\n    sum", "    let mut sum = 0;\n    for x in lst {\n        sum += x.powf(2);\n\
    \    }\n    sum", "    let mut sum = 0;\n    for x in lst {\n        sum += x\
    \ * x;\n    }\n    sum", '    lst.iter().map(|x| x.ceil() as f64 * x).sum::<isize>()']
stop_tokens:
- "\n}"
