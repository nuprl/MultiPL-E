name: HumanEval_29_filter_by_prefix
language: rs
prompt: "/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n\
  /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
  cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    let mut strings\
    \ = strings.into_iter();\n    loop {\n        if strings.next().unwrap().starts_with(prefix)\
    \ {\n            strings.next();\n        } else {\n            break;\n     \
    \   }\n    }\n    strings.collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    let mut prefix = prefix.to_string();\n\
    \    prefix.push_str(\"*\");\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()",
  "    strings\n        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()"]
stop_tokens:
- "\n}"
