name: HumanEval_29_filter_by_prefix
language: rs
prompt: "/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n\
  /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
  cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
completions: ["    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n    loop {\n        let next = iter.next();\n       \
    \ if next.is_none() {\n            break;\n        }\n        let next = next.unwrap();\n\
    \        if next.starts_with(prefix) {\n            iter.push(*next);\n      \
    \  }\n    }\n    iter", "    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    let mut iter = strings.iter();\n\
    \    let mut prefix = prefix.to_string();\n    loop {\n        if let Some(next)\
    \ = iter.next() {\n            if next.starts_with(prefix) {\n               \
    \ iter.next();\n                return iter;\n            }\n        }\n    }",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n    loop {\n        if let Some(next) = iter.next() {\n\
    \            if next.starts_with(prefix) {\n                iter.next();\n   \
    \         } else {\n                break;\n            }\n        } else {\n\
    \            break;\n        }\n    }\n    iter", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    let mut\
    \ prefix = prefix.to_string();\n    prefix.push('_');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    let mut iter = strings.iter();\n    let mut prefix = prefix.to_string();\n\
    \    loop {\n        if let Some(next) = iter.next() {\n            if next.starts_with(prefix)\
    \ {\n                iter.collect::<Vec<_>>()\n            } else {\n        \
    \        break;\n            }\n        } else {\n            break;\n       \
    \ }\n    }\n    iter", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    let mut filtered_strings =\
    \ Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n  \
    \          filtered_strings.push(*s);\n        }\n    }\n    filtered_strings",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n    loop {\n        let next = iter.next();\n       \
    \ if next.is_none() {\n            break;\n        }\n        if next.unwrap().starts_with(prefix)\
    \ {\n            iter.push(*next);\n        }\n    }\n    iter", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n \
    \           if s.starts_with(prefix) {\n                Some(s)\n            }\
    \ else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.starts_with(prefix) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()", "    let mut prefix = prefix.to_string();\n \
    \   strings.into_iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut prefix = prefix.to_string();\n    prefix.push_str(\"*\");\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.starts_with(prefix) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()"]
stop_tokens:
- "\n}"
