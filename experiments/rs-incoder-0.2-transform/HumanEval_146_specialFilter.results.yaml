language: rs
name: HumanEval_146_specialFilter
results:
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7xmx0n_k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 0 {\n                if num % 10 == 1 {\n               \
    \     count += 1;\n                }\n                if num % 10 == 3 {\n   \
    \                 count += 1;\n                }\n                if num % 10\
    \ == 5 || num % 10 == 7 {\n                    count += 1;\n                }\n\
    \                if num % 10 == 9 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpgyhaykfm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 1 && n % 100\
    \ != 11 && n % 100 != 7 {\n            count += 1;\n        }\n        if n %\
    \ 10 == 3 && n % 100 != 7 {\n            count += 1;\n        }\n        if n\
    \ % 10 == 5 && n % 100 != 9 {\n            count += 1;\n        }\n        if\
    \ n % 10 == 7 && n % 100 != 9 {\n            count += 1;\n        }\n        if\
    \ n % 10 == 9 && n % 100 != 11 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmpa4avqoa2.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 ==\
    \ 1 && n % 5 == 1 && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg6vhy1tw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpbb6osj4f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpbb6osj4f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10 ==\
    \ 3 && n % 10 == 7 && n % 10 == 9 {\n            cnt += 1;\n        }\n    }\n\
    \    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6ekpc8hx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 {\n      \
    \      if n % 10 == 1 && n % 10 == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 ==\
    \ 9 {\n                count += 1;\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpnq1exmgj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 {\n      \
    \      count += 1;\n        }\n        if n % 2 == 0 && n % 10 == 1 && n % 10\
    \ == 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmphr2uj4ry.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 0 {\n                if num % 10 == 1 {\n               \
    \     count += 1;\n                }\n                if num % 10 == 3 {\n   \
    \                 count += 1;\n                }\n                if num % 10\
    \ == 5 || num % 10 == 7 {\n                    count += 1;\n                }\n\
    \                if num % 10 == 9 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpgyhaykfm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            cnt += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            cnt += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            cnt += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            cnt += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpudc30evh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphfxsj426.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 {\n      \
    \      count += 1;\n        }\n        if n % 2 == 0 {\n            if n % 10\
    \ == 1 && n % 10 == 0 {\n                count += 1;\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp5_lraym9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10 ==\
    \ 3 && n % 10 == 7 && n % 10 == 9 {\n            cnt += 1;\n        }\n    }\n\
    \    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6ekpc8hx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc60rx395.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 &&\
    \ n % 3 == 1 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpld35lx0e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc60rx395.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      count += 1;\n        }\n        if num % 2 == 0 && num % 2 != 1 {\n   \
    \         count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpt68o0mbl.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphfxsj426.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n > 10 {\n            if\
    \ n % 2 == 1 {\n                cnt += 1;\n            }\n            if n % 2\
    \ == 0 {\n                cnt += 1;\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpqagoxvxf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 || num % 10 == 9 {\n                    count += 1;\n   \
    \             }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpfoeibk7q.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 0 {\n                if num % 2 == 1 {\n                \
    \    count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjg202ec1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      count += 1;\n        }\n        if num % 2 == 1 && num % 3 != 1 && num\
    \ % 5 != 1 && num % 7 != 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj2y95q7k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7xmx0n_k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 && n % 2 !=\
    \ 1 && n % 2 != 3 {\n            count += 1;\n        }\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpb92442_q.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 {\n      \
    \      count += 1;\n        }\n        if n % 2 == 0 {\n            if n % 10\
    \ == 1 {\n                count += 1;\n            }\n            if n % 10 ==\
    \ 3 {\n                count += 1;\n            }\n            if n % 10 == 5\
    \ {\n                count += 1;\n            }\n            if n % 10 == 7 {\n\
    \                count += 1;\n            }\n            if n % 10 == 9 {\n  \
    \              count += 1;\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp66_5i3iv.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      count += 1;\n        }\n        if num % 2 == 1 && num % 3 == 1 {\n   \
    \         count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg7e32zhh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 {\n      \
    \      if n % 10 == 1 && n % 100 != 11 {\n                count += 1;\n      \
    \      }\n            if n % 10 == 3 && n % 100 != 13 {\n                count\
    \ += 1;\n            }\n            if n % 10 == 5 && n % 100 != 15 {\n      \
    \          count += 1;\n            }\n            if n % 10 == 7 && n % 100 !=\
    \ 17 {\n                count += 1;\n            }\n            if n % 10 == 9\
    \ && n % 100 != 19 {\n                count += 1;\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp5srcl7lh.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 {\n      \
    \      if n % 10 == 1 && n % 100 != 11 {\n                count += 1;\n      \
    \      }\n            if n % 10 == 3 && n % 100 != 13 {\n                count\
    \ += 1;\n            }\n            if n % 10 == 5 && n % 100 != 15 {\n      \
    \          count += 1;\n            }\n            if n % 10 == 7 && n % 100 !=\
    \ 17 {\n                count += 1;\n            }\n            if n % 10 == 9\
    \ && n % 100 != 19 {\n                count += 1;\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp5srcl7lh.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 0 {\n                if num % 10 == 0 {\n               \
    \     if num % 10 == 1 {\n                        count += 1;\n              \
    \      }\n                }\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9zre2gra.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7xmx0n_k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 0 {\n                if num % 10 == 1 {\n               \
    \     count += 1;\n                }\n                if num % 10 == 3 {\n   \
    \                 count += 1;\n                }\n                if num % 10\
    \ == 5 {\n                    count += 1;\n                }\n               \
    \ if num % 10 == 7 {\n                    count += 1;\n                }\n   \
    \             if num % 10 == 9 {\n                    count += 1;\n          \
    \      }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxutn4qgk.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 {\n                    count += 1;\n                }\n \
    \               if num % 10 == 9 {\n                    count += 1;\n        \
    \        }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt6i8i3kn.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpnqavb4n_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 0 {\n                if num % 10 == 1 {\n               \
    \     count += 1;\n                }\n                if num % 10 == 3 {\n   \
    \                 count += 1;\n                }\n                if num % 10\
    \ == 5 || num % 10 == 7 {\n                    count += 1;\n                }\n\
    \                if num % 10 == 9 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpgyhaykfm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for n in nums {\n        if n % 2 == 0 {\n        \
    \    if n % 10 == 1 && n % 100 != 11 {\n                sum += 1;\n          \
    \  }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpncj5h8iv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 && n % 10\
    \ == 1 && n % 100 != 11 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpuuq2r76b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 ==\
    \ 1 && n % 5 == 1 && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg6vhy1tw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 || num % 10 == 9 {\n                    count += 1;\n   \
    \             }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpfoeibk7q.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphfxsj426.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 || num % 10 == 9 {\n                    count += 1;\n   \
    \             }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpfoeibk7q.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 2 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4iyt05gt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 {\n      \
    \      count += 1;\n        }\n        if n % 2 == 0 {\n            if n % 10\
    \ == 1 && n % 10 == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n       \
    \         count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpst59lkpz.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 0 {\n                if num % 10 == 1 {\n               \
    \     count += 1;\n                }\n                if num % 10 == 3 {\n   \
    \                 count += 1;\n                }\n                if num % 10\
    \ == 5 || num % 10 == 7 || num % 10 == 9 {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpvprbz0ki.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 {\n                    count += 1;\n                }\n \
    \               if num % 10 == 9 {\n                    count += 1;\n        \
    \        }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt6i8i3kn.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 2 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpu1qdhewf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpnqavb4n_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7xmx0n_k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      count += 1;\n            if num % 2 == 1 {\n                count += 1;\n\
    \            }\n            if num % 2 == 0 {\n                count += 1;\n \
    \           }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpvudbdcye.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc60rx395.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 2 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4iyt05gt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 && n % 3 ==\
    \ 0 && n % 5 == 0 {\n            count += 1;\n        }\n    }\n    return count;\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcgdkfb1h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 ==\
    \ 1 && n % 5 == 1 && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg6vhy1tw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 {\n      \
    \      if n % 10 == 1 && n % 100 != 11 {\n                count += 1;\n      \
    \      }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpekefo9vz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 1 && n % 100\
    \ != 11 && n % 100 != 71 && n % 100 != 91 {\n            count += 1;\n       \
    \ }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp94x88u_d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 {\n                    count += 1;\n                }\n \
    \               if num % 10 == 9 {\n                    count += 1;\n        \
    \        }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt6i8i3kn.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc60rx395.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphfxsj426.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpbb6osj4f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 2 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4iyt05gt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 {\n          \
    \  if n % 2 == 1 {\n                count += 1;\n            }\n            if\
    \ n % 2 == 0 {\n                if n % 10 == 1 {\n                    count +=\
    \ 1;\n                }\n                if n % 10 == 3 {\n                  \
    \  count += 1;\n                }\n                if n % 10 == 5 {\n        \
    \            count += 1;\n                }\n                if n % 10 == 7 {\n\
    \                    count += 1;\n                }\n                if n % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpa3_q5_zz.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 {\n      \
    \      if n % 10 == 1 {\n                if n % 100 == 0 {\n                 \
    \   count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7b_goz0b.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpnqavb4n_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 ==\
    \ 1 && n % 5 == 1 && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg6vhy1tw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc60rx395.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            cnt += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            cnt += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            cnt += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            cnt += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpudc30evh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphfxsj426.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 {\n                    count += 1;\n                }\n \
    \               if num % 10 == 9 {\n                    count += 1;\n        \
    \        }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt6i8i3kn.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for n in nums {\n        if n % 2 == 0 && n % 2 !=\
    \ 1 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2`,\n right: `0`', /tmp/tmpo1c_bud1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 2 ==\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxt0i6l3v.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            cnt += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            cnt += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            cnt += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            cnt += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpudc30evh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpnqavb4n_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 && n % 100 != 71 && n % 100 != 91 {\n            count += 1;\n       \
    \ }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpng6829iq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7xmx0n_k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7xmx0n_k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 {\n      \
    \      if n % 10 == 1 {\n                if n % 100 == 0 {\n                 \
    \   count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7b_goz0b.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      count += 1;\n        }\n        if num % 2 == 1 && num % 3 == 1 && num\
    \ % 5 == 1 && num % 7 == 1 && num % 9 == 1 {\n            count += 1;\n      \
    \  }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdof0fdqw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 {\n                    count += 1;\n                }\n \
    \               if num % 10 == 9 {\n                    count += 1;\n        \
    \        }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt6i8i3kn.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 &&\
    \ n % 3 == 1 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpld35lx0e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 ==\
    \ 1 && n % 5 == 1 && n % 7 == 1 && n % 9 == 1 {\n            cnt += 1;\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8hjln18a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 3 == 1 && num % 5 == 1 && num % 7 == 1 && num % 9 == 1 {\n   \
    \         count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkjv3d1fj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpbb6osj4f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 {\n                    count += 1;\n                }\n \
    \               if num % 10 == 9 {\n                    count += 1;\n        \
    \        }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt6i8i3kn.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 2 == 0 && n % 3 ==\
    \ 0 && n % 5 == 0 && n % 7 == 0 && n % 9 == 0 {\n            cnt += 1;\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp3h4ujr7b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphfxsj426.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      count += 1;\n        }\n        if num % 2 == 1 && num % 3 != 0 && num\
    \ % 5 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpls8gx2yl.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 &&\
    \ n % 3 == 1 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpld35lx0e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for n in nums {\n        if n % 2 == 1 {\n        \
    \    sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `0`', /tmp/tmptxjscupg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpbb6osj4f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 2 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpu1qdhewf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpnqavb4n_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 2 ==\
    \ 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpg2i5l4e_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 &&\
    \ n % 3 == 1 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpld35lx0e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 1 && n % 100\
    \ == 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ == 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ == 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ == 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ == 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpy8f_4tv8.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7xmx0n_k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            cnt += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            cnt += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            cnt += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            cnt += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpudc30evh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      count += 1;\n        }\n        if num % 2 == 1 && num % 3 == 1 {\n   \
    \         count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg7e32zhh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpbb6osj4f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc60rx395.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 2 ==\
    \ 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpg2i5l4e_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 &&\
    \ n % 2 == 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptz20p9yc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpwfilsw0t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 {\n          \
    \  if n % 2 == 1 {\n                count += 1;\n            }\n            if\
    \ n % 2 == 0 {\n                count += 1;\n            }\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpoqqj7fis.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10\
    \ == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7xmx0n_k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 0 && n % 2 !=\
    \ 1 && n % 2 != 3 {\n            count += 1;\n        }\n    }\n    return count;\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpiab_wxpz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            cnt += 1;\n        }\n        if n % 10 == 1 && n % 100\
    \ != 11 && n % 100 != 71 && n % 100 != 91 {\n            cnt += 1;\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp7d8zufhy.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp5v9bdn30.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n > 10 {\n            if\
    \ n % 2 == 1 {\n                cnt += 1;\n            }\n            if n % 2\
    \ == 0 {\n                if n % 10 == 1 {\n                    cnt += 1;\n  \
    \              }\n                if n % 10 == 3 {\n                    cnt +=\
    \ 1;\n                }\n                if n % 10 == 5 {\n                  \
    \  cnt += 1;\n                }\n                if n % 10 == 7 {\n          \
    \          cnt += 1;\n                }\n                if n % 10 == 9 {\n  \
    \                  cnt += 1;\n                }\n            }\n        }\n  \
    \  }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpixdn479n.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 0 {\n                if num % 10 == 1 {\n               \
    \     count += 1;\n                }\n                if num % 10 == 3 {\n   \
    \                 count += 1;\n                }\n                if num % 10\
    \ == 5 || num % 10 == 7 {\n                    count += 1;\n                }\n\
    \                if num % 10 == 9 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpgyhaykfm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ == 1 && num % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc60rx395.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 ==\
    \ 1 && n % 5 == 1 && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg6vhy1tw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 &&\
    \ n % 3 == 1 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpld35lx0e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 {\n          \
    \  if n % 2 == 1 {\n                count += 1;\n            }\n            if\
    \ n % 2 == 0 {\n                if nums.len() == 1 {\n                    count\
    \ += 1;\n                }\n                if nums.len() == 2 {\n           \
    \         count += 1;\n                }\n                if nums.len() == 3 {\n\
    \                    count += 1;\n                }\n                if nums.len()\
    \ == 4 {\n                    count += 1;\n                }\n               \
    \ if nums.len() == 5 {\n                    count += 1;\n                }\n \
    \               if nums.len() == 6 {\n                    count += 1;\n      \
    \          }\n                if nums.len() == 7 {\n                    count\
    \ += 1;\n                }\n                if nums.len() == 8 {\n           \
    \         count += 1;\n                }\n                if nums.len() == 9 {\n\
    \                    count += 1;\n                }\n                if nums.len()\
    \ == 10 {\n                    count += 1;\n                }\n              \
    \  if nums.len() == 11 {\n                    count += 1;\n                }\n\
    \                if nums.len() == 12 {\n                    count += 1;\n    \
    \            }\n                if nums.len() == 13 {\n                    count\
    \ += 1;\n                }\n                if nums.len() == 14 {\n          \
    \          count += 1;\n                }\n                if nums.len() == 15\
    \ {\n                    count += 1;\n                }\n                if nums.len()\
    \ == 16 {\n                    count += 1;\n                }\n              \
    \  if nums.len() == 17 {\n                    count += 1;\n                }\n\
    \                if nums.len() == 18 {\n                    count += 1;\n    \
    \            }\n                if nums.len() == 19 {\n                    count\
    \ += 1;\n                }\n                if nums.len() == 20 {\n          \
    \          count += 1;\n                }\n                if nums.len() == 21\
    \ {\n                    count += 1;\n                }\n                if nums.len()\
    \ == 22 {\n                    count += 1;\n                }\n              \
    \  if nums.len() == 23 {\n                    count += 1;\n                }\n\
    \                if nums.len() == 24 {\n                    count += 1;\n    \
    \            }\n                if nums.len() == 25 {\n                    count\
    \ += 1;\n                }\n                if nums.len() == 26 {\n          \
    \          count += 1;\n                }\n                if nums.len() == 27\
    \ {\n                    count += 1;\n                }\n                if nums.len()\
    \ == 28 {\n                    count += 1;\n                }\n              \
    \  if nums.len() == 29 {\n                    count += 1;\n                }\n\
    \                if nums.len() == 30 {\n                    count += 1;\n    \
    \            }\n                if nums.len() == 31 {\n                    count\
    \ += 1;\n                }\n                if nums.len() == 32 {\n          \
    \          count += 1;\n                }\n                if nums.len(\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpxh43oq4z.rs:125:3\n\
    \    |\n9   | fn specialFilter(nums: Vec<isize>) -> isize {\n    |           \
    \                                  - unclosed delimiter\n10  |     let mut count\
    \ = 0;\n11  |     for n in nums {\n    |                   - unclosed delimiter\n\
    12  |         if n > 10 {\n    |                   - unclosed delimiter\n...\n\
    16  |             if n % 2 == 0 {\n    |                           - this delimiter\
    \ might not be properly closed...\n...\n114 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n125 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmpxh43oq4z.rs:114:1\n    |\n113 |             \
    \    if nums.len(\n    |                 -- this `if` expression has a condition,\
    \ but no block\n114 | }\n    | ^ expected `{`\n\nerror: mismatched closing delimiter:\
    \ `}`\n   --> /tmp/tmpxh43oq4z.rs:113:28\n    |\n9   | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n    |                                             -\
    \ closing delimiter possibly meant for this\n...\n113 |                 if nums.len(\n\
    \    |                            ^ unclosed delimiter\n114 | }\n    | ^ mismatched\
    \ closing delimiter\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpxh43oq4z.rs:11:5\n\
    \    |\n9   |   fn specialFilter(nums: Vec<isize>) -> isize {\n    |         \
    \                                ----- expected `isize` because of return type\n\
    10  |       let mut count = 0;\n11  | /     for n in nums {\n12  | |         if\
    \ n > 10 {\n13  | |             if n % 2 == 1 {\n14  | |                 count\
    \ += 1;\n...   |\n124 | |     assert_eq!(candidate(Vec::<isize>::new()), 0);\n\
    125 | | }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting due to 4\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 ==\
    \ 1 && n % 5 == 1 && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg6vhy1tw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 {\n                    count += 1;\n                }\n \
    \               if num % 10 == 9 {\n                    count += 1;\n        \
    \        }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt6i8i3kn.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 || num % 10 == 7 || num % 10 == 9 {\n                    count += 1;\n   \
    \             }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpfoeibk7q.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsajvfba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 {\n            count += 1;\n        }\n        if n % 10 == 3 && n % 100\
    \ != 13 {\n            count += 1;\n        }\n        if n % 10 == 5 && n % 100\
    \ != 15 {\n            count += 1;\n        }\n        if n % 10 == 7 && n % 100\
    \ != 17 {\n            count += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6enbi_qs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 0 {\n                if num % 10 == 1 {\n                \
    \    count += 1;\n                }\n                if num % 10 == 3 {\n    \
    \                count += 1;\n                }\n                if num % 10 ==\
    \ 5 {\n                    count += 1;\n                }\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          if num % 10 == 9 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqs7ow0bu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011606
