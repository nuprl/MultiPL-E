name: HumanEval_155_even_odd_count
language: rs
prompt: "/// Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
  /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
  \ isize) {\n"
tests: "}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        }\n        else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n\
    \    let mut num_digits = num.len();\n    while num_digits > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n       \
    \ num_digits -= 1;\n    }\n    (even, odd)", "    let mut even = 0;\n    let mut\
    \ odd = 0;\n    while num > 0 {\n        let digit = num % 10;\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)", "    let mut even = 0;\n\
    \    let mut odd = 0;\n    let mut digits = num;\n    while digits > 0 {\n   \
    \     let digit = digits % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n\
    \    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n    \
    \    }\n        else {\n            odd += 1;\n        }\n        num = num /\
    \ 2;\n    }\n    (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n\
    \    while num > 0 {\n        let digit = num % 10;\n        if digit % 2 == 0\
    \ {\n            even += 1;\n        } else {\n            odd += 1;\n       \
    \ }\n        num /= 10;\n    }\n    (even, odd)", "    let mut even = 0;\n   \
    \ let mut odd = 0;\n    while num > 0 {\n        let digit = num % 10;\n     \
    \   if digit % 2 == 0 {\n            even += 1;\n        } else {\n          \
    \  odd += 1;\n        }\n        num = num / 10;\n    }\n    (even, odd)", " \
    \   let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n    while\
    \ digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n       \
    \ } else {\n            odd += 1;\n        }\n        digits /= 10;\n    }\n \
    \   (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n    let mut digit\
    \ = 0;\n    let mut num_digits = num;\n    while num_digits > 0 {\n        digit\
    \ = num_digits % 10;\n        num_digits /= 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n    while\
    \ num > 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n    \
    \        even += 1;\n        } else {\n            odd += 1;\n        }\n    \
    \    num /= 10;\n    }\n    (even, odd)", "    let mut even = 0;\n    let mut\
    \ odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even +=\
    \ 1;\n        } else {\n            odd += 1;\n        }\n        num = num /\
    \ 2;\n    }\n    (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n\
    \    while num > 0 {\n        even += num % 2 == 0;\n        odd += num % 2 !=\
    \ 0;\n        num /= 2;\n    }\n    (even, odd)", "    let mut even = 0;\n   \
    \ let mut odd = 0;\n    let mut digits = num;\n    while digits > 0 {\n      \
    \  if digits % 2 == 0 {\n            even += 1;\n        }\n        else {\n \
    \           odd += 1;\n        }\n        digits /= 10;\n    }\n    (even, odd)",
  "    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)", "    let mut even = 0;\n\
    \    let mut odd = 0;\n    while num > 0 {\n        let digit = num % 10;\n  \
    \      if digit % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num = num / 10;\n    }\n    (even, odd)",
  "    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n    while\
    \ digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n       \
    \ }\n        else {\n            odd += 1;\n        }\n        digits /= 10;\n\
    \    }\n    (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n    while\
    \ num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        }\n  \
    \      else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n \
    \   (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n        \
    \    even += 1;\n        } else {\n            odd += 1;\n        }\n        num\
    \ = num / 10;\n    }\n    (even, odd)", "    let mut even = 0;\n    let mut odd\
    \ = 0;\n    while num > 0 {\n        even += num % 2 == 0;\n        odd += num\
    \ % 2 != 0;\n        num /= 2;\n    }\n    (even, odd)", "    let mut even = 0;\n\
    \    let mut odd = 0;\n    while num > 0 {\n        let digit = num % 10;\n  \
    \      num = num / 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n    }\n    (even, odd)"]
stop_tokens:
- "\n}"
