language: rs
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c as char).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5toa133u.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5toa133u.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:86:17\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc15vukxi.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc15vukxi.rs:87:25\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc15vukxi.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc15vukxi.rs:88:25\n   |\n88 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc15vukxi.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc15vukxi.rs:89:25\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:90:17\n  \
    \ |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc15vukxi.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z', 'y', 'x', 'w', 'u', 'v',\
    \ 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'h', 'f', 'g', 'e', 'd',\
    \ 'c', 'b', 'a'];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    \n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpagjthzl5.rs:73:17\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpagjthzl5.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpagjthzl5.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpagjthzl5.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpagjthzl5.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpagjthzl5.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpagjthzl5.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpagjthzl5.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpagjthzl5.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpagjthzl5.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpagjthzl5.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A'..'Z', 'a'..'z'];\n    alphabet.rotate_left(2);\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmpl1hmz7bo.rs:66:1\n   |\n66\
    \ | }\n   | ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpl1hmz7bo.rs:65:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n65 |     alphabet.push(alphabet.\n\
    \   |                  ^ unclosed delimiter\n66 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpl1hmz7bo.rs:70:17\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl1hmz7bo.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl1hmz7bo.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl1hmz7bo.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl1hmz7bo.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl1hmz7bo.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl1hmz7bo.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl1hmz7bo.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl1hmz7bo.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this sc"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c as u32).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c as char).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg2et5b5z.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg2et5b5z.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg2et5b5z.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg2et5b5z.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg2et5b5z.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg2et5b5z.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg2et5b5z.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg2et5b5z.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg2et5b5z.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg2et5b5z.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg2et5b5z.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().for_each(|c| c.to_string().chars().collect::<Vec<_>>().push(c.to_ascii_lowercase()));\n\
    \    String::from_iter(alphabet)\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2x9r45t9.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2x9r45t9.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2x9r45t9.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2x9r45t9.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2x9r45t9.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2x9r45t9.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2x9r45t9.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2x9r45t9.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2x9r45t9.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2x9r45t9.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2x9r45t9.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c as char).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5toa133u.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5toa133u.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.sort_unstable();\n    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1uygttu6.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1uygttu6.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1uygttu6.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1uygttu6.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1uygttu6.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1uygttu6.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1uygttu6.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(\n}\n\nfn main() {\n   \
    \ let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpr35rwoub.rs:67:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n67 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n68 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr35rwoub.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:76:2"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<Vec<_>>()\n\
    \        .iter()\n        .map(|c| c.chars().collect::<Vec<_>>())\n        .flatten()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.to_ascii_lowercase().to_string())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.chars().collect::<Vec<_>>())\n\
    \        .flatten()\n        .collect::<Vec<_>>()\n        .iter()\n        .map(|c|\
    \ c.to_ascii_lowercase().to_string())\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .map(|c| c.chars().collect::<Vec<_>>())\n        .flatten()\n       \
    \ .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.to_ascii_lowercase().to_string())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.chars().collect::<Vec<_>>())\n\
    \        .flatten()\n        .collect::<Vec<_>>()\n        .iter()\n        .map(|c|\
    \ c.to_ascii_lowercase().to_string())\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .map(|c| c.chars().collect::<Vec<_>>())\n        .flatten()\n       \
    \ .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.to_ascii_lowercase().to_string())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.chars().collect::<Vec<_>>())\n\
    \        .flatten()\n        .collect::<Vec<_>>()\n        .iter()\n        .map(|c|\
    \ c.to_ascii_lowercase().to_string())\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .map(|c| c.chars().collect::<Vec<_>>())\n        .flatten()\n       \
    \ .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.to_ascii_lowercase().to_string())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.chars().collect::<Vec<_>>())\n\
    \        .flatten()\n        .collect::<Vec<_>>()\n        .iter()\n        .map(|c|\
    \ c.to_ascii_lowercase().to_string())\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpejwzbjum.rs:76:1\n   |\n76\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpejwzbjum.rs:80:17\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpejwzbjum.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpejwzbjum.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpejwzbjum.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpejwzbjum.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpejwzbjum.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpejwzbjum.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpejwzbjum.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpejwzbjum.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpejwzbjum.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpejwzbjum.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiw12_v40.rs:47:21\n   |\n\
    47 |     let mut alphabet\n   |                     ^ help: add `;` here\n48 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpiw12_v40.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiw12_v40.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiw12_v40.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiw12_v40.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiw12_v40.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiw12_v40.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `lef"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z', 'y', 'x', 'w', 'u', 't',\
    \ 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'f', 'h', 'd', 'c', 'b', 'a'];\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet[0]);\n    alphabet.push(alphabet[1]);\n\
    \    alphabet.push(alphabet[2]);\n    alphabet.push(alphabet[3]);\n    alphabet.push(alphabet[4]);\n\
    \    alphabet.push(alphabet[5]);\n    alphabet.push(alphabet[6]);\n    alphabet.push(alphabet[7]);\n\
    \    alphabet.push(alphabet[8]);\n    alphabet.push(alphabet[9]);\n    alphabet.push(alphabet[10]);\n\
    \    alphabet.push(alphabet[11]);\n    alphabet.push(alphabet[12]);\n    alphabet.push(alphabet[13]);\n\
    \    alphabet.push(alphabet[14]);\n    alphabet.push(alphabet[15]);\n    alphabet.push(alphabet[16]);\n\
    \    alphabet.push(alphabet[17]);\n    alphabet.push(alphabet[18]);\n    alphabet.push(alphabet[19]);\n\
    \    alphabet.push(alphabet[20]);\n    alphabet.push(alphabet[21]);\n    alphabet.push(alphabet[22]);\n\
    \    alphabet.push(alphabet[23]);\n    alphabet.push(alphabet[24]);\n    alphabet.push(alphabet[25]);\n\
    \    alphabet.push(alphabet[26]);\n    alphabet.push(alphabet[27]);\n    alphabet.push(alphabet[28]);\n\
    \    alphabet.push(alphabet[29]);\n    alphabet.push(alphabet[30]);\n    alphabet.push(alphabet[31]);\n\
    \    alphabet.push(alphabet[32]);\n    alphabet.push(alphabet[33]);\n    alphabet.push(alphabet[34]);\n\
    \    alphabet.push(alphabet[35]);\n    alphabet.push(alphabet[36]);\n    alphabet.push(alphabet[37]);\n\
    \    alphabet.push(alphabet[38]);\n    alphabet.push(alphabet[39]);\n    alphabet.push(alphabet[40]);\n\
    \    alphabet.push(alphabet[41]);\n    alphabet.push(alphabet[42]);\n    alphabet.push(alphabet[43]);\n\
    \    alphabet.push(alphabet[44]);\n    alphabet.push(alphabet[45]);\n    alphabet.push(alphabet[46]);\n\
    \    alphabet.push(alphabet[47]);\n    alphabet.push(alphabet[48]);\n    alphabet.push(alphabet[49]);\n\
    \    alphabet.push(alphabet[50]);\n    alphabet.push(alphabet[51]);\n    alphabet.push(alphabet[52]);\n\
    \    \n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmiwkq3ht.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmiwkq3ht.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmiwkq3ht.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmiwkq3ht.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmiwkq3ht.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmiwkq3ht.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmiwkq3ht.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmiwkq3ht.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmiwkq3ht.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmiwkq3ht.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmiwkq3ht.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n\n}\n\nfn main() {\n \
    \   let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpacml2qu_.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    let mut result = String::new();\n    for\
    \ c in s.chars() {\n        let index = alphabet.iter().position(|x| x == c).unwrap();\n\
    \        result.push_str(&alphabet[index]);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzspg7g9p.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzspg7g9p.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzspg7g9p.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzspg7g9p.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzspg7g9p.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzspg7g9p.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzspg7g9p.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzspg7g9p.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzspg7g9p.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzspg7g9p.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzspg7g9p.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z' - 1, 'a' - 1, 'b' - 1,\
    \ 'c' - 1, 'd' - 1, 'e' - 1, 'f' - 1, 'g' - 1, 'h' - 1, 'i' - 1, 'j' - 1, 'k'\
    \ - 1, 'l' - 1, 'm' - 1, 'n' - 1, 'o' - 1, 'p' - 1, 'q' - 1, 'r' - 1, 's' - 1,\
    \ 't' - 1, 'u' - 1, 'v' - 1, 'w' - 1, 'x' - 1, 'y' - 1, 'z' - 1];\n    alphabet.rotate_left(2);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n    alphabet.push(0);\n\
    \    alphabet.push(0);\n    \n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxfif9j5t.rs:91:17\n\
    \   |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxfif9j5t.rs:91:25\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxfif9j5t.rs:92:17\n   |\n92 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxfif9j5t.rs:92:25\n\
    \   |\n92 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxfif9j5t.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxfif9j5t.rs:93:25\n   |\n93 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxfif9j5t.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxfif9j5t.rs:94:25\n   |\n94 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxfif9j5t.rs:95:17\n  \
    \ |\n95 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxfif9j5t.rs:95:25\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxfif9j5t.rs:96:17\n   |\n96 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgoujjf8p.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A'..'Z', 'a'..'z'];\n    alphabet.rotate_left(2);\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\n}\n\
    \nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpupra5ira.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpupra5ira.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpupra5ira.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpupra5ira.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpupra5ira.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpupra5ira.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpupra5ira.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpupra5ira.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpupra5ira.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpupra5ira.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpupra5ira.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap\n}\n\
    \nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpekmmf_cf.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpekmmf_cf.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpekmmf_cf.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpekmmf_cf.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpekmmf_cf.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpekmmf_cf.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpekmmf_cf.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpekmmf_cf.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpekmmf_cf.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpekmmf_cf.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpekmmf_cf.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822778
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    let mut cipher = Cipher::new(alphabet);\n    cipher.encrypt(&s);\n    cipher.to_string()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmp3sac0yea.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Cipher`\n  --> /tmp/tmp3sac0yea.rs:17:22\n\
    \   |\n17 |     let mut cipher = Cipher::new(alphabet);\n   |                \
    \      ^^^^^^ use of undeclared type `Cipher`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp3sac0yea.rs:24:17\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp3sac0yea.rs:24:25\n \
    \  |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3sac0yea.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3sac0yea.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3sac0yea.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3sac0yea.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3sac0yea.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3sac0yea.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3sac0yea.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |      "
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z', 'y', 'x', 'w', 'v', 'u',\
    \ 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e',\
    \ 'd', 'c', 'b', 'a'];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet[0]);\n\
    \    alphabet.push(alphabet[1]);\n    alphabet.push(alphabet[2]);\n    alphabet.push(alphabet[3]);\n\
    \    alphabet.push(alphabet[4]);\n    alphabet.push(alphabet[5]);\n    alphabet.push(alphabet[6]);\n\
    \    alphabet.push(alphabet[7]);\n    alphabet.push(alphabet[8]);\n    alphabet.push(alphabet[9]);\n\
    \    alphabet.push(alphabet[10]);\n    alphabet.push(alphabet[11]);\n    alphabet.push(alphabet[12]);\n\
    \    alphabet.push(alphabet[13]);\n    alphabet.push(alphabet[14]);\n    alphabet.push(alphabet[15]);\n\
    \    alphabet.push(alphabet[16]);\n    alphabet.push(alphabet[17]);\n    alphabet.push(alphabet[18]);\n\
    \    alphabet.push(alphabet[19]);\n    alphabet.push(alphabet[20]);\n    alphabet.push(alphabet[21]);\n\
    \    alphabet.push(alphabet[22]);\n    alphabet.push(alphabet[23]);\n    alphabet.push(alphabet[24]);\n\
    \    alphabet.push(alphabet[25]);\n    alphabet.push(alphabet[26]);\n    alphabet.push(alphabet[27]);\n\
    \    alphabet.push(alphabet[28]);\n    alphabet.push(alphabet[29]);\n    alphabet.push(alphabet[30]);\n\
    \    alphabet.push(alphabet[31]);\n    alphabet.push(alphabet[32]);\n    alphabet.push(alphabet[33]);\n\
    \    alphabet.push(alphabet[34]);\n    alphabet.push(alphabet[35]);\n    alphabet.push(alphabet[36]);\n\
    \    alphabet.push(alphabet[37]);\n    alphabet.push(alphabet[38]);\n    alphabet.push(alphabet[39]);\n\
    \    alphabet.push(alphabet[40]);\n    alphabet.push(alphabet[41]);\n    alphabet.push(alphabet[42]);\n\
    \    alphabet.push(alphabet[43]);\n    alphabet.push(alphabet[44]);\n    alphabet.push(alphabet[45]);\n\
    \    alphabet.push(alphabet[46]);\n    alphabet.push(alphabet[47]);\n    alphabet.push(alphabet[48]);\n\
    \    alphabet.push(alphabet[49]);\n    alphabet.push(alphabet[50]);\n    alphabet.push(alphabet[51]);\n\
    \    alphabet.push(alphabet\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpzj5yib8e.rs:69:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n69 |     alphabet.push(alphabet\n\
    \   |                  ^ unclosed delimiter\n70 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzj5yib8e.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzj5yib8e.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzj5yib8e.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzj5yib8e.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzj5yib8e.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzj5yib8e.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzj5yib8e.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzj5yib8e.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzj5yib8e.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzj5yib8e"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z', 'y', 'x', 'w', 'v', 'u',\
    \ 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e',\
    \ 'd', 'c', 'b', 'a'];\n    alphabet.rotate_left(2);\n    let mut result = String::new();\n\
    \    for c in s.chars() {\n        let index = alphabet.iter().position(|&x| x\
    \ == c).unwrap();\n        result.push((alphabet.len() - index) as char);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplye80fn3.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplye80fn3.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplye80fn3.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplye80fn3.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplye80fn3.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplye80fn3.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplye80fn3.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplye80fn3.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplye80fn3.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplye80fn3.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplye80fn3.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>();\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    \n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppzuhuhsy.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:70:17\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpapwgfpw3.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpapwgfpw3.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpapwgfpw3.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpapwgfpw3.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpapwgfpw3.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpapwgfpw3.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpapwgfpw3.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.sort_unstable();\n    alphabet.rotate_left(2);\n    alphabet.iter().map(|c|\
    \ c.to_string()).collect::<String>()\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpos64s7d_.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpos64s7d_.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpos64s7d_.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpos64s7d_.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpos64s7d_.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpos64s7d_.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpos64s7d_.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpos64s7d_.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpos64s7d_.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpos64s7d_.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpos64s7d_.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A'..'Z'];\n    alphabet.rotate_left(2);\n\
    \    alphabet.push(alphabet.last().unwrap());\n    let mut cipher = String::new();\n\
    \    for c in s.chars() {\n        cipher.push((alphabet.last().unwrap() + c).chars().next().unwrap());\n\
    \    }\n    cipher\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnes9zuq1.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnes9zuq1.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnes9zuq1.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnes9zuq1.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnes9zuq1.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnes9zuq1.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnes9zuq1.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnes9zuq1.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnes9zuq1.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnes9zuq1.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnes9zuq1.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n\n}\n\nfn main() {\n \
    \   let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpacml2qu_.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpjpcqpg4m.rs:62:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n62 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n63 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjpcqpg4m.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:71:2"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z'];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphab\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpq4afhx2a.rs:67:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n67 |     alphabet.push(alphab\n\
    \   |                  ^ unclosed delimiter\n68 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `alphab` in this scope\n  --> /tmp/tmpq4afhx2a.rs:67:19\n\
    \   |\n67 |     alphabet.push(alphab\n   |                   ^^^^^^ help: a local\
    \ variable with a similar name exists: `alphabet`\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpq4afhx2a.rs:72:17\n   |\n72 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq4afhx2a.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq4afhx2a.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq4afhx2a.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq4afhx2a.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq4afhx2a.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq4afhx2a.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq4afhx2a.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in "
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().for_each(|c| {\n        alphabet.push(c);\n\
    \    });\n    alphabet.join(\"\")\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpa_2w3ya_.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa_2w3ya_.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa_2w3ya_.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa_2w3ya_.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa_2w3ya_.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa_2w3ya_.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa_2w3ya_.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa_2w3ya_.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa_2w3ya_.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa_2w3ya_.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa_2w3ya_.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c as char).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5toa133u.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5toa133u.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap_remove(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.swap\n}\n\
    \nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpekmmf_cf.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpekmmf_cf.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpekmmf_cf.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpekmmf_cf.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpekmmf_cf.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpekmmf_cf.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpekmmf_cf.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpekmmf_cf.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpekmmf_cf.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpekmmf_cf.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpekmmf_cf.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822778
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<char>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpyi8wsme6.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyi8wsme6.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyi8wsme6.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyi8wsme6.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyi8wsme6.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyi8wsme6.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyi8wsme6.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyi8wsme6.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyi8wsme6.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyi8wsme6.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyi8wsme6.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyi8wsme6.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A'..'Z', 'a'..'z'];\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone());\n\
    \    alphabet.push(alphabet.clone());\n    alphabet.push(alphabet.clone\n}\n\n\
    fn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp3ly4o5m2.rs:70:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n70 |     alphabet.push(alphabet.clone\n\
    \   |                  ^ unclosed delimiter\n71 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3ly4o5m2.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3ly4o5m2.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3ly4o5m2.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3ly4o5m2.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3ly4o5m2.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3ly4o5m2.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3ly4o5m2.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3ly4o5m2.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3ly4o5m2.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3l"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z', 'y', 'x', 'w', 'u', 't',\
    \ 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd',\
    \ 'c', 'b', 'a'];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphab\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `alphab` in this scope\n  --> /tmp/tmprejy6_g3.rs:68:5\n\
    \   |\n68 |     alphab\n   |     ^^^^^^ help: a local variable with a similar\
    \ name exists: `alphabet`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprejy6_g3.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprejy6_g3.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprejy6_g3.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprejy6_g3.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprejy6_g3.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprejy6_g3.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprejy6_g3.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprejy6_g3.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprejy6_g3.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprejy6_g3.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot f"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgoujjf8p.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<char>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzii4k1sk.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzii4k1sk.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzii4k1sk.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzii4k1sk.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzii4k1sk.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzii4k1sk.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzii4k1sk.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzii4k1sk.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzii4k1sk.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzii4k1sk.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzii4k1sk.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<Vec<_>>()\n\
    \        .iter()\n        .map(|c| c.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.iter().map(|c|\
    \ c.to_string()).collect::<Vec<_>>())\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .map(|c| c.iter().map(|c| c.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()).collect::<Vec<_>>())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.iter().map(|c|\
    \ c.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()).collect::<Vec<_>>())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.iter().map(|c|\
    \ c.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()).collect::<Vec<_>>())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.iter().map(|c|\
    \ c.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()).collect::<Vec<_>>())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.iter().map(|c|\
    \ c.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()).collect::<Vec<_>>())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.iter().map(|c|\
    \ c.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()).collect::<Vec<_>>())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.iter().map(|c|\
    \ c.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()).collect::<Vec<_>>())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.iter().map(|c|\
    \ c.chars().map(|c\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp28o7hqbw.rs:46:48\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n46 |         .map(|c|\
    \ c.iter().map(|c| c.chars().map(|c\n   |                                    \
    \            ^ unclosed delimiter\n47 | }\n   | ^ mismatched closing delimiter\n\
    \nerror: expected one of `:`, `@`, or `|`, found `)`\n  --> /tmp/tmp28o7hqbw.rs:47:1\n\
    \   |\n46 |         .map(|c| c.iter().map(|c| c.chars().map(|c\n   |         \
    \                                          - expected one of `:`, `@`, or `|`\n\
    47 | }\n   | ^ unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp28o7hqbw.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp28o7hqbw.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp28o7hqbw.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp28o7hqbw.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp28o7hqbw.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp28o7hqbw.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp28o7hqbw.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp28o7hqbw.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<char>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpf8n8zpuv.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8n8zpuv.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8n8zpuv.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf8n8zpuv.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8n8zpuv.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8n8zpuv.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8n8zpuv.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8n8zpuv.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8n8zpuv.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8n8zpuv.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8n8zpuv.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(\n}\n\nfn main()\
    \ {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp5nty7aqf.rs:65:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n65 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n66 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5nty7aqf.rs:70:17\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5nty7aqf.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5nty7aqf.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5nty7aqf.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5nty7aqf.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5nty7aqf.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5nty7aqf.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5nty7aqf.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5nty7aqf.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5nty7aqf.rs:74:2"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A'..'Z', 'a'..'z'];\n    alphabet.rotate_left(2);\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\n}\n\
    \nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpupra5ira.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpupra5ira.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpupra5ira.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpupra5ira.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpupra5ira.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpupra5ira.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpupra5ira.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpupra5ira.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpupra5ira.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpupra5ira.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpupra5ira.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:70:17\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpapwgfpw3.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpapwgfpw3.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpapwgfpw3.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpapwgfpw3.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpapwgfpw3.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpapwgfpw3.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpapwgfpw3.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().for_each(|c| c.to_ascii_lowercase());\n\
    \    String::from_iter(alphabet).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsvs4n4y_.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsvs4n4y_.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsvs4n4y_.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsvs4n4y_.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsvs4n4y_.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsvs4n4y_.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsvs4n4y_.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsvs4n4y_.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsvs4n4y_.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsvs4n4y_.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsvs4n4y_.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    let mut result = String::new();\n    for\
    \ c in s.chars() {\n        result.push_str(alphabet.iter().cloned().take(alphabet.len()\
    \ - 1).collect::<String>());\n        result.push(c);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0xqqqfrk.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0xqqqfrk.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0xqqqfrk.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0xqqqfrk.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0xqqqfrk.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0xqqqfrk.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0xqqqfrk.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0xqqqfrk.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0xqqqfrk.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0xqqqfrk.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0xqqqfrk.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c as char).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5toa133u.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5toa133u.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    let mut cipher = s.chars().collect::<Vec<_>>();\n    cipher.swap_remove(cipher.len()\
    \ - 1);\n    cipher.push(cipher.len() - 1);\n    let mut result = s.chars().collect::<Vec<_>>();\n\
    \    result.swap_remove(result.len() - 1);\n    result.push(result.len() - 1);\n\
    \    let mut i = 0;\n    while i < cipher.len() {\n        let mut j = i;\n  \
    \      while j < cipher.len() {\n            let mut k = j;\n            while\
    \ k < cipher.len() {\n                let mut l = k;\n                while l\
    \ < cipher.len() {\n                    let mut m = l;\n                    while\
    \ m < cipher.len() {\n                        let mut n = m;\n               \
    \         while n < cipher.len() {\n                            let mut o = n;\n\
    \                            while o < cipher.len() {\n                      \
    \          let mut p = o;\n                                while p < cipher.len()\
    \ {\n                                    let mut q = p;\n                    \
    \                while q < cipher.len() {\n                                  \
    \      let mut r = q;\n                                        while r < cipher.len()\
    \ {\n                                            let mut s = r;\n            \
    \                                if s < cipher.len() {\n                     \
    \                           let mut t = s;\n                                 \
    \               if t < cipher.len() {\n                                      \
    \              let mut u = t;\n                                              \
    \      while u < cipher.len() {\n                                            \
    \            let mut v = u;\n                                                \
    \        while v < cipher.len() {\n                                          \
    \                  let mut w = v;\n                                          \
    \                  while w < cipher.len() {\n                                \
    \                                let mut x = w;\n                            \
    \                                    while x < cipher.len() {\n              \
    \                                                      let mut y = x;\n      \
    \                                                              while y < cipher.len()\
    \ {\n                                                                        let\
    \ mut z = y;\n                                                               \
    \         while z < cipher.len() {\n                                         \
    \                                   let mut a = z;\n                         \
    \                                                   while a < cipher.len() {\n\
    \                                                                            \
    \    let mut b = a;\n                                                        \
    \                        while b < cipher.len() {\n                          \
    \                                                          let mut c = b;\n  \
    \                                                                            \
    \      if c < cipher.len() {\n                                               \
    \                                         let mut d = c;\n                   \
    \                                                                     if d < cipher.len()\
    \ {\n                                                                        \
    \                    let mut e = d;\n                                        \
    \                                                    if e < cipher.len() {\n \
    \                                                                            \
    \                   let mut f = e;\n                                         \
    \                                                       if f < cipher.len() {\n\
    \                                                                            \
    \                        let mut g = f;\n                                    \
    \                                                                while g < cipher.len()\
    \ {\n                                                                        \
    \                                let mut h = g;\n                            \
    \                                                                            if\
    \ h < cipher.len() {\n                                                       \
    \                                                     let mut i = h;\n       \
    \                                                                            \
    \                         if i < cipher.len() {\n}\n\nfn main() {\n    let candidate\
    \ = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpysmcgc7d.rs:90:3\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - unclosed delimiter\n...\n25 |     while i < cipher.len() {\n   |   \
    \                         - unclosed delimiter\n26 |         let mut j = i;\n\
    27 |         while j < cipher.len() {\n   |                                - unclosed\
    \ delimiter\n28 |             let mut k = j;\n29 |             while k < cipher.len()\
    \ {\n   |                                    - unclosed delimiter\n30 |      \
    \           let mut l = k;\n31 |                 while l < cipher.len() {\n  \
    \ |                                        - unclosed delimiter\n32 |        \
    \             let mut m = l;\n33 |                     while m < cipher.len()\
    \ {\n   |                                            - unclosed delimiter\n34\
    \ |                         let mut n = m;\n35 |                         while\
    \ n < cipher.len() {\n   |                                                - unclosed\
    \ delimiter\n36 |                             let mut o = n;\n37 |           \
    \                  while o < cipher.len() {\n   |                            \
    \                        - unclosed delimiter\n38 |                          \
    \       let mut p = o;\n39 |                                 while p < cipher.len()\
    \ {\n   |                                                        - unclosed delimiter\n\
    40 |                                     let mut q = p;\n41 |                \
    \                     while q < cipher.len() {\n   |                         \
    \                                   - unclosed delimiter\n42 |               \
    \                          let mut r = q;\n43 |                              \
    \           while r < cipher.len() {\n   |                                   \
    \                             - unclosed delimiter\n44 |                     \
    \                        let mut s = r;\n45 |                                \
    \             if s < cipher.len() {\n   |                                    \
    \                             - unclosed delimiter\n46 |        "
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z'];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.iter().cloned().map(|&c| c.to_string()).collect::<Vec<_>>().join(\"\
    \").to_string()\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplale4rj3.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplale4rj3.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplale4rj3.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplale4rj3.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplale4rj3.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplale4rj3.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplale4rj3.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplale4rj3.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplale4rj3.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplale4rj3.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplale4rj3.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A'..'Z', 'a'..'z'];\n    alphabet.rotate(2);\n\
    \    alphabet.iter().cloned().chain(s.chars().cloned()).cloned().collect()\n}\n\
    \nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyqq8wdbp.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyqq8wdbp.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyqq8wdbp.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyqq8wdbp.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyqq8wdbp.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyqq8wdbp.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyqq8wdbp.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyqq8wdbp.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyqq8wdbp.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyqq8wdbp.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyqq8wdbp.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n\
    \    alphabet.collect::<String>()\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxe1guuht.rs:24:17\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxe1guuht.rs:24:25\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxe1guuht.rs:25:17\n   |\n25 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxe1guuht.rs:25:25\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxe1guuht.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxe1guuht.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxe1guuht.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxe1guuht.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxe1guuht.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxe1guuht.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxe1guuht.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c as char).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5toa133u.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5toa133u.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.sort_by_key(|&c| c.to_ascii_lowercase());\n    alphabet.push(String::from(\"\
    z\"));\n    alphabet.push(String::from(\"y\"));\n    alphabet.push(String::from(\"\
    x\"));\n    alphabet.push(String::from(\"w\"));\n    alphabet.push(String::from(\"\
    v\"));\n    alphabet.push(String::from(\"u\"));\n    alphabet.push(String::from(\"\
    t\"));\n    alphabet.push(String::from(\"s\"));\n    alphabet.push(String::from(\"\
    r\"));\n    alphabet.push(String::from(\"q\"));\n    alphabet.push(String::from(\"\
    p\"));\n    alphabet.push(String::from(\"o\"));\n    alphabet.push(String::from(\"\
    n\"));\n    alphabet.push(String::from(\"m\"));\n    alphabet.push(String::from(\"\
    l\"));\n    alphabet.push(String::from(\"k\"));\n    alphabet.push(String::from(\"\
    j\"));\n    alphabet.push(String::from(\"h\"));\n    alphabet.push(String::from(\"\
    g\"));\n    alphabet.push(String::from(\"f\"));\n    alphabet.push(String::from(\"\
    e\"));\n    alphabet.push(String::from(\"d\"));\n    alphabet.push(String::from(\"\
    c\"));\n    alphabet.push(String::from(\"b\"));\n    alphabet.push(String::from(\"\
    a\"));\n    alphabet.push(String::from(\"z\"));\n    alphabet.push(String::from(\"\
    y\"));\n    alphabet.push(String::from(\"x\"));\n    alphabet.push(String::from(\"\
    w\"));\n    alphabet.push(String::from(\"v\"));\n    alphabet.push(String::from(\"\
    u\"));\n    alphabet.push(String::from(\"t\"));\n    alphabet.push(String::from(\"\
    s\"));\n    alphabet.push(String::from(\"r\"));\n    alphabet.push(String::from(\"\
    q\"));\n    alphabet.push(String::from(\"p\"));\n    alphabet.push(String::from(\"\
    o\"));\n    alphabet.push(String::from(\"n\"));\n    alphabet.push(String::from(\"\
    m\"));\n    alphabet.push(String::from(\"l\"));\n    alphabet.push(String::from(\"\
    k\"));\n    alphabet.push(String::from(\"j\"));\n    alphabet.push(String::from(\"\
    h\"));\n    alphabet.push(String::from\n}\n\nfn main() {\n    let candidate =\
    \ encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp2xwogr28.rs:60:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n60 |     alphabet.push(String::from\n\
    \   |                  ^ unclosed delimiter\n61 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2xwogr28.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2xwogr28.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2xwogr28.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2xwogr28.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2xwogr28.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2xwogr28.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2xwogr28.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2xwogr28.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2xwogr28.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2xwo"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgoujjf8p.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    let mut cipher = Cipher::new(&alphabet);\n    cipher.encrypt(&s);\n    cipher.to_string()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmp5q7z1rzi.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Cipher`\n  --> /tmp/tmp5q7z1rzi.rs:17:22\n\
    \   |\n17 |     let mut cipher = Cipher::new(&alphabet);\n   |               \
    \       ^^^^^^ use of undeclared type `Cipher`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp5q7z1rzi.rs:24:17\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp5q7z1rzi.rs:24:25\n \
    \  |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5q7z1rzi.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5q7z1rzi.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5q7z1rzi.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5q7z1rzi.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5q7z1rzi.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5q7z1rzi.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5q7z1rzi.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |     "
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z'];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:87:17\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpil2f3q49.rs:87:25\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:88:17\n   |\n88 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpil2f3q49.rs:88:25\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpil2f3q49.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpil2f3q49.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpil2f3q49.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpil2f3q49.rs:90:25\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:91:17\n  \
    \ |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpil2f3q49.rs:91:25\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:92:17\n   |\n92 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgoujjf8p.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpjpcqpg4m.rs:62:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n62 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n63 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjpcqpg4m.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:71:2"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z', 'y', 'x', 'w', 'u', 'v',\
    \ 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'f', 'e', 'd', 'c',\
    \ 'b', 'a'];\n    alphabet.rotate(2);\n    let mut result = String::new();\n \
    \   for c in s.chars() {\n        result.push(*alphabet[alphabet.index(c)]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp24lm7d2f.rs:26:17\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp24lm7d2f.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp24lm7d2f.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp24lm7d2f.rs:27:25\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp24lm7d2f.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp24lm7d2f.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp24lm7d2f.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp24lm7d2f.rs:29:25\n   |\n29 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp24lm7d2f.rs:30:17\n  \
    \ |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp24lm7d2f.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp24lm7d2f.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:86:17\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc15vukxi.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc15vukxi.rs:87:25\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc15vukxi.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc15vukxi.rs:88:25\n   |\n88 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc15vukxi.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc15vukxi.rs:89:25\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:90:17\n  \
    \ |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc15vukxi.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiw12_v40.rs:47:21\n   |\n\
    47 |     let mut alphabet\n   |                     ^ help: add `;` here\n48 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpiw12_v40.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiw12_v40.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiw12_v40.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiw12_v40.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiw12_v40.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiw12_v40.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `lef"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(\n}\n\nfn main()\
    \ {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp5nty7aqf.rs:65:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n65 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n66 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5nty7aqf.rs:70:17\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5nty7aqf.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5nty7aqf.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5nty7aqf.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5nty7aqf.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5nty7aqf.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5nty7aqf.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5nty7aqf.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5nty7aqf.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5nty7aqf.rs:74:2"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n\
    \    alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n \
    \   alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n   \
    \ alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(\n}\n\nfn main() {\n \
    \   let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpufx60572.rs:67:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n67 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n68 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpufx60572.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpufx60572.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpufx60572.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpufx60572.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpufx60572.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpufx60572.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpufx60572.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpufx60572.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpufx60572.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpufx60572.rs:76:2"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(\n}\n\nfn main() {\n   \
    \ let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpr35rwoub.rs:67:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n67 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n68 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr35rwoub.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:76:2"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z'];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n \
    \   alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n   \
    \ alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n \
    \   alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n   \
    \ alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n \
    \   alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n   \
    \ alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n \
    \   alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n   \
    \ alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n \
    \   alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n   \
    \ alphabet.push(alphabet.first());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n \
    \   alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n  \
    \  alphabet.push(alphab\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp8mhozcni.rs:67:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n67 |     alphabet.push(alphab\n\
    \   |                  ^ unclosed delimiter\n68 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `alphab` in this scope\n  --> /tmp/tmp8mhozcni.rs:67:19\n\
    \   |\n67 |     alphabet.push(alphab\n   |                   ^^^^^^ help: a local\
    \ variable with a similar name exists: `alphabet`\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmp8mhozcni.rs:72:17\n   |\n72 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8mhozcni.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8mhozcni.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8mhozcni.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8mhozcni.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8mhozcni.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8mhozcni.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8mhozcni.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in "
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgoujjf8p.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(\n}\n\nfn main() {\n   \
    \ let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpr35rwoub.rs:67:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n67 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n68 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr35rwoub.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:76:2"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n\n}\n\nfn main() {\n    let candidate\
    \ = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpw_a6s0_r.rs:70:17\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw_a6s0_r.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw_a6s0_r.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw_a6s0_r.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw_a6s0_r.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw_a6s0_r.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw_a6s0_r.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw_a6s0_r.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw_a6s0_r.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw_a6s0_r.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw_a6s0_r.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z', 'y', 'x', 'w', 'v', 'u',\
    \ 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e',\
    \ 'd', 'c', 'b', 'a'];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvhd98fqd.rs:73:17\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvhd98fqd.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvhd98fqd.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvhd98fqd.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvhd98fqd.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvhd98fqd.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvhd98fqd.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvhd98fqd.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvhd98fqd.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvhd98fqd.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvhd98fqd.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n\
    \    alphabet.collect::<String>()\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxe1guuht.rs:24:17\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxe1guuht.rs:24:25\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxe1guuht.rs:25:17\n   |\n25 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxe1guuht.rs:25:25\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxe1guuht.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxe1guuht.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxe1guuht.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxe1guuht.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxe1guuht.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxe1guuht.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxe1guuht.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate();\n\
    \    let mut cipher = Cipher::new(alphabet);\n    cipher.encrypt(&s);\n    cipher.to_string()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmp1yko_7zh.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Cipher`\n  --> /tmp/tmp1yko_7zh.rs:17:22\n\
    \   |\n17 |     let mut cipher = Cipher::new(alphabet);\n   |                \
    \      ^^^^^^ use of undeclared type `Cipher`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp1yko_7zh.rs:24:17\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp1yko_7zh.rs:24:25\n \
    \  |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1yko_7zh.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1yko_7zh.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1yko_7zh.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1yko_7zh.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1yko_7zh.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1yko_7zh.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1yko_7zh.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |      "
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.iter().cloned().chain(s.chars().cloned()).cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6jgkqumb.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6jgkqumb.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6jgkqumb.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6jgkqumb.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6jgkqumb.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6jgkqumb.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6jgkqumb.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6jgkqumb.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6jgkqumb.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6jgkqumb.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6jgkqumb.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgoujjf8p.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<char>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpyi8wsme6.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyi8wsme6.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyi8wsme6.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyi8wsme6.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyi8wsme6.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyi8wsme6.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyi8wsme6.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyi8wsme6.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyi8wsme6.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyi8wsme6.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyi8wsme6.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyi8wsme6.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.sort_unstable();\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(0);\n\
    \    alphabet.push(1);\n    alphabet.push(2);\n    alphabet.push(3);\n    alphabet.push(4);\n\
    \    alphabet.push(5);\n    alphabet.push(6);\n    alphabet.push(7);\n    alphabet.push(8);\n\
    \    alphabet.push(9);\n    alphabet.push(10);\n    alphabet.push(11);\n    alphabet.push(12);\n\
    \    alphabet.push(13);\n    alphabet.push(14);\n    alphabet.push(15);\n    alphabet.push(16);\n\
    \    alphabet.push(17);\n    alphabet.push(18);\n    alphabet.push(19);\n    alphabet.push(20);\n\
    \    alphabet.push(21);\n    alphabet.push(22);\n    alphabet.push(23);\n    alphabet.push(24);\n\
    \    alphabet.push(25);\n    alphabet.push(26);\n    alphabet.push(27);\n    alphabet.push(28);\n\
    \    alphabet.push(29);\n    alphabet.push(30);\n    alphabet.push(31);\n    alphabet.push(32);\n\
    \    alphabet.push(33);\n    alphabet.push(34);\n    alphabet.push(35);\n    alphabet.push(36);\n\
    \    alphabet.push(37);\n    alphabet.push(38);\n    alphabet.push(39);\n    alphabet.push(40);\n\
    \    alphabet.push(41);\n    alphabet.push(42);\n    alphabet.push(43);\n    alphabet.push(44);\n\
    \    alphabet.push(45);\n    alphabet.push(46);\n    alphabet.push(47);\n    alphabet.push(48);\n\
    \    alphabet.push(49);\n    alphabet.push(50);\n    alphabet.push(51);\n    alphabet.push(52);\n\
    \    alphabet.push(53);\n    alphabet.push(54);\n    alphabet.push(55);\n    alphabet.push(56);\n\
    \    alphabet.push(57);\n    alphabet.push(58);\n    alphabet.push(59);\n    alphabet.push(60);\n\
    \    alphabet.push(61);\n    alphabet.push(62);\n    alphabet.push(63);\n    alphabet.push(64);\n\
    \    alphabet.push(65);\n    alphabet.push(66);\n    alphabet.push(67);\n    alphabet.push(68);\n\
    \    alphabet.push(69);\n    alphabet.push(70);\n    \n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxtxcz88f.rs:94:17\n\
    \   |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxtxcz88f.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxtxcz88f.rs:95:17\n   |\n95 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxtxcz88f.rs:95:25\n\
    \   |\n95 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxtxcz88f.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxtxcz88f.rs:96:25\n   |\n96 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxtxcz88f.rs:97:17\n   |\n97 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxtxcz88f.rs:97:25\n   |\n97 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxtxcz88f.rs:98:17\n  \
    \ |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxtxcz88f.rs:98:25\n   |\n98 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxtxcz88f.rs:99:17\n   |\n99 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.sort_by_key(|&x| x.to_ascii_lowercase());\n    alphabet.push(String::from(\"\
    z\"));\n    alphabet.push(String::from(\"y\"));\n    alphabet.push(String::from(\"\
    x\"));\n    alphabet.push(String::from(\"w\"));\n    alphabet.push(String::from(\"\
    v\"));\n    alphabet.push(String::from(\"u\"));\n    alphabet.push(String::from(\"\
    t\"));\n    alphabet.push(String::from(\"s\"));\n    alphabet.push(String::from(\"\
    r\"));\n    alphabet.push(String::from(\"q\"));\n    alphabet.push(String::from(\"\
    p\"));\n    alphabet.push(String::from(\"o\"));\n    alphabet.push(String::from(\"\
    n\"));\n    alphabet.push(String::from(\"m\"));\n    alphabet.push(String::from(\"\
    l\"));\n    alphabet.push(String::from(\"k\"));\n    alphabet.push(String::from(\"\
    j\"));\n    alphabet.push(String::from(\"h\"));\n    alphabet.push(String::from(\"\
    g\"));\n    alphabet.push(String::from(\"f\"));\n    alphabet.push(String::from(\"\
    e\"));\n    alphabet.push(String::from(\"d\"));\n    alphabet.push(String::from(\"\
    c\"));\n    alphabet.push(String::from(\"b\"));\n    alphabet.push(String::from(\"\
    a\"));\n    alphabet.push(String::from(\"z\"));\n    alphabet.push(String::from(\"\
    y\"));\n    alphabet.push(String::from(\"x\"));\n    alphabet.push(String::from(\"\
    w\"));\n    alphabet.push(String::from(\"v\"));\n    alphabet.push(String::from(\"\
    u\"));\n    alphabet.push(String::from(\"t\"));\n    alphabet.push(String::from(\"\
    s\"));\n    alphabet.push(String::from(\"r\"));\n    alphabet.push(String::from(\"\
    q\"));\n    alphabet.push(String::from(\"p\"));\n    alphabet.push(String::from(\"\
    o\"));\n    alphabet.push(String::from(\"n\"));\n    alphabet.push(String::from(\"\
    m\"));\n    alphabet.push(String::from(\"l\"));\n    alphabet.push(String::from(\"\
    k\"));\n    alphabet.push(String::from(\"j\"));\n    alphabet.push(String::from(\"\
    h\"));\n    alphabet.push(String::from\n}\n\nfn main() {\n    let candidate =\
    \ encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpx9pcdkgg.rs:60:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n60 |     alphabet.push(String::from\n\
    \   |                  ^ unclosed delimiter\n61 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx9pcdkgg.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx9pcdkgg.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx9pcdkgg.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx9pc"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z'];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:87:17\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpil2f3q49.rs:87:25\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:88:17\n   |\n88 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpil2f3q49.rs:88:25\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpil2f3q49.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpil2f3q49.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpil2f3q49.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpil2f3q49.rs:90:25\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:91:17\n  \
    \ |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpil2f3q49.rs:91:25\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:92:17\n   |\n92 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:86:17\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc15vukxi.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc15vukxi.rs:87:25\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc15vukxi.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc15vukxi.rs:88:25\n   |\n88 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc15vukxi.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc15vukxi.rs:89:25\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:90:17\n  \
    \ |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc15vukxi.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc15vukxi.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>();\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    \n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppzuhuhsy.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate();\n\
    \    let mut cipher = Cipher::new(alphabet);\n    cipher.encrypt(&s);\n    cipher.to_string()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmp1yko_7zh.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Cipher`\n  --> /tmp/tmp1yko_7zh.rs:17:22\n\
    \   |\n17 |     let mut cipher = Cipher::new(alphabet);\n   |                \
    \      ^^^^^^ use of undeclared type `Cipher`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp1yko_7zh.rs:24:17\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp1yko_7zh.rs:24:25\n \
    \  |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1yko_7zh.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1yko_7zh.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1yko_7zh.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1yko_7zh.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1yko_7zh.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1yko_7zh.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1yko_7zh.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |      "
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<Vec<_>>()\n\
    \        .iter()\n        .map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()\n\
    \        .iter()\n        .map(|c| c.to_string()).collect::<Vec<_>>()\n      \
    \  .iter()\n        .map(|c| c.to_ascii_uppercase()).collect::<Vec<_>>()\n   \
    \     .iter()\n        .map(|c| c.to_string()).collect::<Vec<_>>()\n        .iter()\n\
    \        .map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()\n        .iter()\n\
    \        .map(|c| c.to_string()).collect::<Vec<_>>()\n        .iter()\n      \
    \  .map(|c| c.to_ascii_uppercase()).collect::<Vec<_>>()\n        .iter()\n   \
    \     .map(|c| c.to_string()).collect::<Vec<_>>()\n        .iter()\n        .map(|c|\
    \ c.to_ascii_lowercase()).collect::<Vec<_>>()\n        .iter()\n        .map(|c|\
    \ c.to_string()).collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.to_ascii_uppercase()).collect::<Vec<_>>()\n\
    \        .iter()\n        .map(|c| c.to_string()).collect::<Vec<_>>()\n      \
    \  .iter()\n        .map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()\n   \
    \     .iter()\n        .map(|c| c.to_string()).collect::<Vec<_>>()\n        .iter()\n\
    \        .map(|c| c.to_ascii_uppercase()).collect::<Vec<_>>()\n        .iter()\n\
    \        .map(|c| c.to_string()).collect::<Vec<_>>()\n        .iter()\n      \
    \  .map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()\n        .iter()\n   \
    \     .map(|c| c.to_string()).collect::<Vec<_>>()\n        .iter()\n        .map(|c|\
    \ c.to_ascii_uppercase()).collect::<Vec<_>>()\n        .iter()\n        .map(|c|\
    \ c.to_string()).collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>()\n\
    \        .iter()\n        .map(|c| c.to_string()).collect::<Vec<_>>\n}\n\nfn main()\
    \ {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: field expressions cannot have generic arguments\n  --> /tmp/tmpew9yfjg3.rs:61:42\n\
    \   |\n61 |         .map(|c| c.to_string()).collect::<Vec<_>>\n   |          \
    \                                ^^^^^^^^\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpew9yfjg3.rs:66:17\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpew9yfjg3.rs:66:25\n \
    \  |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpew9yfjg3.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpew9yfjg3.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpew9yfjg3.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpew9yfjg3.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpew9yfjg3.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpew9yfjg3.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpew9yfjg3.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpew9yfjg3.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c as u32).collect::<Vec<u32>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c as char).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4jy9f3ho.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4jy9f3ho.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4jy9f3ho.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4jy9f3ho.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4jy9f3ho.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4jy9f3ho.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4jy9f3ho.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4jy9f3ho.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4jy9f3ho.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4jy9f3ho.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4jy9f3ho.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z', 'y', 'x', 'w', 'u', 't',\
    \ 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'f', 'h', 'g', 'e', 'd', 'c',\
    \ 'b', 'a'];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet[0]);\n\
    \    alphabet.push(alphabet[1]);\n    alphabet.push(alphabet[2]);\n    alphabet.push(alphabet[3]);\n\
    \    alphabet.push(alphabet[4]);\n    alphabet.push(alphabet[5]);\n    alphabet.push(alphabet[6]);\n\
    \    alphabet.push(alphabet[7]);\n    alphabet.push(alphabet[8]);\n    alphabet.push(alphabet[9]);\n\
    \    alphabet.push(alphabet[10]);\n    alphabet.push(alphabet[11]);\n    alphabet.push(alphabet[12]);\n\
    \    alphabet.push(alphabet[13]);\n    alphabet.push(alphabet[14]);\n    alphabet.push(alphabet[15]);\n\
    \    alphabet.push(alphabet[16]);\n    alphabet.push(alphabet[17]);\n    alphabet.push(alphabet[18]);\n\
    \    alphabet.push(alphabet[19]);\n    alphabet.push(alphabet[20]);\n    alphabet.push(alphabet[21]);\n\
    \    alphabet.push(alphabet[22]);\n    alphabet.push(alphabet[23]);\n    alphabet.push(alphabet[24]);\n\
    \    alphabet.push(alphabet[25]);\n    alphabet.push(alphabet[26]);\n    alphabet.push(alphabet[27]);\n\
    \    alphabet.push(alphabet[28]);\n    alphabet.push(alphabet[29]);\n    alphabet.push(alphabet[30]);\n\
    \    alphabet.push(alphabet[31]);\n    alphabet.push(alphabet[32]);\n    alphabet.push(alphabet[33]);\n\
    \    alphabet.push(alphabet[34]);\n    alphabet.push(alphabet[35]);\n    alphabet.push(alphabet[36]);\n\
    \    alphabet.push(alphabet[37]);\n    alphabet.push(alphabet[38]);\n    alphabet.push(alphabet[39]);\n\
    \    alphabet.push(alphabet[40]);\n    alphabet.push(alphabet[41]);\n    alphabet.push(alphabet[42]);\n\
    \    alphabet.push(alphabet[43]);\n    alphabet.push(alphabet[44]);\n    alphabet.push(alphabet[45]);\n\
    \    alphabet.push(alphabet[46]);\n    alphabet.push(alphabet[47]);\n    alphabet.push(alphabet[48]);\n\
    \    alphabet.push(alphabet[49]);\n    alphabet.push(alphabet[50]);\n    alphabet.push(alphabet[51]);\n\
    \    alphabet.push(alphabet[52]);\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbt9s0mq0.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbt9s0mq0.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbt9s0mq0.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbt9s0mq0.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbt9s0mq0.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbt9s0mq0.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbt9s0mq0.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbt9s0mq0.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbt9s0mq0.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbt9s0mq0.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbt9s0mq0.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>();\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    \n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppzuhuhsy.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet = alphabet.iter().cloned().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    let mut alphabet\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiw12_v40.rs:47:21\n   |\n\
    47 |     let mut alphabet\n   |                     ^ help: add `;` here\n48 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpiw12_v40.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiw12_v40.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiw12_v40.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiw12_v40.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiw12_v40.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiw12_v40.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiw12_v40.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `lef"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<char>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.first());\n\
    \    alphabet.to_owned()\n}\n\nfn main() {\n    let candidate = encrypt;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpokpzm_ma.rs:24:17\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpokpzm_ma.rs:24:25\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpokpzm_ma.rs:25:17\n   |\n25 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpokpzm_ma.rs:25:25\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpokpzm_ma.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpokpzm_ma.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpokpzm_ma.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpokpzm_ma.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpokpzm_ma.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpokpzm_ma.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpokpzm_ma.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(\n}\n\nfn main() {\n   \
    \ let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpr35rwoub.rs:67:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n67 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n68 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr35rwoub.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr35rwoub.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr35rwoub.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr35rwoub.rs:76:2"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgoujjf8p.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z' - 'a' + 1, 'y' - 'a' +\
    \ 1, 'x' - 'a' + 1];\n    alphabet.swap_remove(alphabet.iter().position(|&x| x\
    \ >= 'a'));\n    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'z'));\n\
    \    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'y'));\n    alphabet.swap_remove(alphabet.iter().position(|&x|\
    \ x >= 'x'));\n    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'w'));\n\
    \    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'v'));\n    alphabet.swap_remove(alphabet.iter().position(|&x|\
    \ x >= 'u'));\n    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 't'));\n\
    \    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 's'));\n    alphabet.swap_remove(alphabet.iter().position(|&x|\
    \ x >= 'r'));\n    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'q'));\n\
    \    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'p'));\n    alphabet.swap_remove(alphabet.iter().position(|&x|\
    \ x >= 'o'));\n    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'n'));\n\
    \    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'm'));\n    alphabet.swap_remove(alphabet.iter().position(|&x|\
    \ x >= 'l'));\n    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'k'));\n\
    \    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'j'));\n    alphabet.swap_remove(alphabet.iter().position(|&x|\
    \ x >= 'h'));\n    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'g'));\n\
    \    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'f'));\n    alphabet.swap_remove(alphabet.iter().position(|&x|\
    \ x >= 'e'));\n    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'd'));\n\
    \    alphabet.swap_remove(alphabet.iter().position(|&x| x >= 'c'));\n    alphabet.swap_remove\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpth467qg8.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpth467qg8.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpth467qg8.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpth467qg8.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpth467qg8.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpth467qg8.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpth467qg8.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpth467qg8.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpth467qg8.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpth467qg8.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpth467qg8.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgoujjf8p.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgoujjf8p.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgoujjf8p.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgoujjf8p.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:70:17\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpapwgfpw3.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpapwgfpw3.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpapwgfpw3.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpapwgfpw3.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpapwgfpw3.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpapwgfpw3.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpapwgfpw3.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpapwgfpw3.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A'..'Z', 'a'..'z'];\n    alphabet.rotate_left(2);\n\
    \    let mut result = String::new();\n    for c in s.chars() {\n        result.push((alphabet.iter().find(|&x|\
    \ x == c).unwrap() + 2) % 26);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6e6ifwsr.rs:26:17\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6e6ifwsr.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6e6ifwsr.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6e6ifwsr.rs:27:25\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6e6ifwsr.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6e6ifwsr.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6e6ifwsr.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6e6ifwsr.rs:29:25\n   |\n29 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6e6ifwsr.rs:30:17\n  \
    \ |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6e6ifwsr.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6e6ifwsr.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.sort_unstable();\n    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1uygttu6.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1uygttu6.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1uygttu6.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1uygttu6.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1uygttu6.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1uygttu6.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1uygttu6.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c as u32).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c as char).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg2et5b5z.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg2et5b5z.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg2et5b5z.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg2et5b5z.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg2et5b5z.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg2et5b5z.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg2et5b5z.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg2et5b5z.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg2et5b5z.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg2et5b5z.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg2et5b5z.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.sort_by_key(|&x| x.to_ascii_lowercase());\n    alphabet.push(String::from(\"\
    z\"));\n    alphabet.push(String::from(\"y\"));\n    alphabet.push(String::from(\"\
    x\"));\n    alphabet.push(String::from(\"w\"));\n    alphabet.push(String::from(\"\
    v\"));\n    alphabet.push(String::from(\"u\"));\n    alphabet.push(String::from(\"\
    t\"));\n    alphabet.push(String::from(\"s\"));\n    alphabet.push(String::from(\"\
    r\"));\n    alphabet.push(String::from(\"q\"));\n    alphabet.push(String::from(\"\
    p\"));\n    alphabet.push(String::from(\"o\"));\n    alphabet.push(String::from(\"\
    n\"));\n    alphabet.push(String::from(\"m\"));\n    alphabet.push(String::from(\"\
    l\"));\n    alphabet.push(String::from(\"k\"));\n    alphabet.push(String::from(\"\
    j\"));\n    alphabet.push(String::from(\"h\"));\n    alphabet.push(String::from(\"\
    g\"));\n    alphabet.push(String::from(\"f\"));\n    alphabet.push(String::from(\"\
    e\"));\n    alphabet.push(String::from(\"d\"));\n    alphabet.push(String::from(\"\
    c\"));\n    alphabet.push(String::from(\"b\"));\n    alphabet.push(String::from(\"\
    a\"));\n    alphabet.push(String::from(\"z\"));\n    alphabet.push(String::from(\"\
    y\"));\n    alphabet.push(String::from(\"x\"));\n    alphabet.push(String::from(\"\
    w\"));\n    alphabet.push(String::from(\"v\"));\n    alphabet.push(String::from(\"\
    u\"));\n    alphabet.push(String::from(\"t\"));\n    alphabet.push(String::from(\"\
    s\"));\n    alphabet.push(String::from(\"r\"));\n    alphabet.push(String::from(\"\
    q\"));\n    alphabet.push(String::from(\"p\"));\n    alphabet.push(String::from(\"\
    o\"));\n    alphabet.push(String::from(\"n\"));\n    alphabet.push(String::from(\"\
    m\"));\n    alphabet.push(String::from(\"l\"));\n    alphabet.push(String::from(\"\
    k\"));\n    alphabet.push(String::from(\"j\"));\n    alphabet.push(String::from(\"\
    h\"));\n    alphabet.push(String::from\n}\n\nfn main() {\n    let candidate =\
    \ encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpx9pcdkgg.rs:60:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n60 |     alphabet.push(String::from\n\
    \   |                  ^ unclosed delimiter\n61 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx9pcdkgg.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx9pcdkgg.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx9pcdkgg.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx9pcdkgg.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx9pc"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c as char).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5toa133u.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5toa133u.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5toa133u.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5toa133u.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5toa133u.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpjpcqpg4m.rs:62:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n62 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n63 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjpcqpg4m.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:71:2"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.push(alphabet.len() - 1);\n    alphabet.push(\n}\n\nfn main()\
    \ {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp5nty7aqf.rs:65:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n65 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n66 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5nty7aqf.rs:70:17\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5nty7aqf.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5nty7aqf.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5nty7aqf.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5nty7aqf.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5nty7aqf.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5nty7aqf.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5nty7aqf.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5nty7aqf.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5nty7aqf.rs:74:2"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpjpcqpg4m.rs:62:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n62 |     alphabet.push(\n\
    \   |                  ^ unclosed delimiter\n63 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjpcqpg4m.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjpcqpg4m.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpcqpg4m.rs:71:2"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpao5ttsw4.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpao5ttsw4.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpao5ttsw4.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpao5ttsw4.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n\n}\n\nfn main() {\n \
    \   let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpacml2qu_.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z'];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:87:17\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpil2f3q49.rs:87:25\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:88:17\n   |\n88 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpil2f3q49.rs:88:25\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpil2f3q49.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpil2f3q49.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpil2f3q49.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpil2f3q49.rs:90:25\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:91:17\n  \
    \ |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpil2f3q49.rs:91:25\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpil2f3q49.rs:92:17\n   |\n92 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpics418ce.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpics418ce.rs:93:25\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpics418ce.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpics418ce.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpics418ce.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpics418ce.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpics418ce.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:22:17\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:22:25\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:17\n   |\n23 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:23:25\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprdhbt6v1.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:24:25\n   |\n24 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprdhbt6v1.rs:25:25\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:26:17\n  \
    \ |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprdhbt6v1.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprdhbt6v1.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n    alphabet.push(alphabet.len()\
    \ - 1);\n    alphabet.swap_remove(alphabet.len() - 1);\n\n}\n\nfn main() {\n \
    \   let candidate = encrypt;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpacml2qu_.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpacml2qu_.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpacml2qu_.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpacml2qu_.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>();\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    \n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppzuhuhsy.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppzuhuhsy.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzuhuhsy.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzuhuhsy.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822780
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['z', 'y', 'x', 'w', 'u', 'v',\
    \ 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'f', 'd', 'c', 'b',\
    \ 'a'];\n    alphabet.rotate_left(2);\n    let mut result = String::new();\n \
    \   for c in s.chars() {\n        result.push(*alphabet);\n        alphabet.push(c.to_ascii_lowercase());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4rqbkaj_.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4rqbkaj_.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4rqbkaj_.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4rqbkaj_.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4rqbkaj_.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4rqbkaj_.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4rqbkaj_.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4rqbkaj_.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4rqbkaj_.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4rqbkaj_.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4rqbkaj_.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.sort_unstable();\n    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1uygttu6.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1uygttu6.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1uygttu6.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1uygttu6.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1uygttu6.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1uygttu6.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1uygttu6.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1uygttu6.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659748280
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec!['A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z'];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.iter().cloned().collect();\n    let mut result = String::new();\n\
    \    for c in s.chars() {\n        let index = alphabet.iter().position(|&x| x\
    \ == c).unwrap();\n        result.push(c);\n        result.push(alphabet[index]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_xrhggio.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_xrhggio.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_xrhggio.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_xrhggio.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_xrhggio.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_xrhggio.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_xrhggio.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_xrhggio.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_xrhggio.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_xrhggio.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_xrhggio.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659822779
- exit_code: 1
  program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt2wmc2kr.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt2wmc2kr.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt2wmc2kr.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt2wmc2kr.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659748281
