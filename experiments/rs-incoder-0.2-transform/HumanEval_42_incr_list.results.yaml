language: rs
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for e in l {\n       \
    \ res.push(i + 1);\n        i += e;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 6]`,\n right: `[4, 3, 2]`', /tmp/tmpn32yq4r5.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for el in l {\n   \
    \     i += 1;\n        result.push(el);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[4, 3, 2]`', /tmp/tmpum52aht4.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for i in l {\n        result.push(i\
    \ + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010709
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    for i in 0..r.len() {\n        r[i] += 1;\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![];\n    for i in l {\n        r.push(i + 1);\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for e in l {\n       \
    \ res.push(i + e);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpo8nd_rj3.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for el in l {\n   \
    \     result.push(el + i);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpryxzlsna.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        res.push(i + 1);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphn_ayfu3.rs:13:5\n   |\n\
    6  | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n13 | \
    \    res\n   |     ^^^ expected `isize`, found `usize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for e in l {\n       \
    \ res.push(i + 1);\n        i += e;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 6]`,\n right: `[4, 3, 2]`', /tmp/tmpn32yq4r5.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut l = l;\n    l.iter().cloned().for_each(|x| {\n        *x += 1;\n\
    \    });\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpc0qaw34y.rs:9:9\n\
    \  |\n9 |         *x += 1;\n  |         ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for e in l {\n    \
    \    result.append(e + i);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphj9oio0f.rs:10:23\n   |\n\
    10 |         result.append(e + i);\n   |                       ^^^^^ expected\
    \ `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for e in l {\n       \
    \ res.push(i + 1);\n        i += e;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 6]`,\n right: `[4, 3, 2]`', /tmp/tmpn32yq4r5.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for e in l {\n    \
    \    result.push(e + i);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpn4s43oky.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    for i in r.iter_mut() {\n        *i += 1;\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, x)| {\n        i + x\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprbtv6gjq.rs:8:13\n  |\n8 |\
    \         i + x\n  |             ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n --> /tmp/tmprbtv6gjq.rs:8:11\n  |\n8 |     \
    \    i + x\n  |           ^ no implementation for `usize + isize`\n  |\n  = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `usize`\n    --> /tmp/tmprbtv6gjq.rs:9:8\n\
    \     |\n9    |     }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=usize>`\n     |\n     = help:\
    \ the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut i = 0;\n    for el in l {\n\
    \        result.push(el + i);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpks4j7ms3.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for el in l {\n      \
    \  res.push(i + 1);\n        i += el;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 6]`,\n right: `[4, 3, 2]`', /tmp/tmphsb9661t.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for e in l {\n       \
    \ res.push(i + 1);\n        i += e;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 6]`,\n right: `[4, 3, 2]`', /tmp/tmpn32yq4r5.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    r.into_iter().for_each(|x| {\n        *x = *x + 1;\n\
    \    });\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpvgk7o4uc.rs:9:9\n\
    \  |\n9 |         *x = *x + 1;\n  |         ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n --> /tmp/tmpvgk7o4uc.rs:9:14\n  |\n9 |         *x = *x + 1;\n\
    \  |              ^^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, x)| {\n        if i == 0 {\n \
    \           x\n        } else {\n            x + 1\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 2]`,\n right: `[4, 3, 2]`', /tmp/tmp55u4seiy.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut l = l;\n    l.iter().cloned().for_each(|x| *x += 1);\n    l\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpdhhx74ot.rs:8:36\n\
    \  |\n8 |     l.iter().cloned().for_each(|x| *x += 1);\n  |                  \
    \                  ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for i in l {\n        result.push(i\
    \ + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010709
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    for i in r.iter_mut() {\n        *i += 1;\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, v)| (i + 1, v + 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `(usize, isize)`\n    --> /tmp/tmp5ltz15zr.rs:7:64\n \
    \    |\n7    |     l.iter().cloned().enumerate().map(|(i, v)| (i + 1, v + 1)).collect()\n\
    \     |                                                                ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(usize,\
    \ isize)>`\n     |\n     = help: the trait `FromIterator<(usize, isize)>` is not\
    \ implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for el in l {\n   \
    \     result.append(el + i);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk0sgyx_t.rs:10:23\n   |\n\
    10 |         result.append(el + i);\n   |                       ^^^^^^ expected\
    \ `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for el in l {\n   \
    \     result.append(el + i);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk0sgyx_t.rs:10:23\n   |\n\
    10 |         result.append(el + i);\n   |                       ^^^^^^ expected\
    \ `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for el in l {\n      \
    \  res.push(i + 1);\n        i += el;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 6]`,\n right: `[4, 3, 2]`', /tmp/tmphsb9661t.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, x)| {\n        if i == 0 {\n \
    \           x + 1\n        } else {\n            x + l[i - 1]\n        }\n   \
    \ }).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpw1eb8ks2.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for e in l {\n    \
    \    result.append(e + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi808uvov.rs:10:23\n   |\n\
    10 |         result.append(e + 1);\n   |                       ^^^^^ expected\
    \ `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, x)| {\n        if i == 0 {\n \
    \           x + 1\n        } else {\n            x\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1]`,\n right: `[4, 3, 2]`', /tmp/tmpvl7l87o_.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l.iter() {\n        res.push(i +\
    \ 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![];\n    for i in l {\n        r.push(i + 1);\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for e in l {\n    \
    \    i += 1;\n        result.push(i);\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpdgkky732.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        res.push(i + 1);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphn_ayfu3.rs:13:5\n   |\n\
    6  | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n13 | \
    \    res\n   |     ^^^ expected `isize`, found `usize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    for i in r.iter_mut() {\n        *i += 1;\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    for i in r.iter_mut() {\n        *i += 1;\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for e in l {\n    \
    \    i += 1;\n        result.push(i);\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpdgkky732.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for el in l {\n      \
    \  res.push(i + el);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpnplpsb4o.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut l = l;\n    l.iter().cloned().for_each(|x| {\n        *x += 1;\n\
    \    });\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpc0qaw34y.rs:9:9\n\
    \  |\n9 |         *x += 1;\n  |         ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    r.into_iter().for_each(|x| {\n        *x = *x + 1;\n\
    \    });\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpvgk7o4uc.rs:9:9\n\
    \  |\n9 |         *x = *x + 1;\n  |         ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n --> /tmp/tmpvgk7o4uc.rs:9:14\n  |\n9 |         *x = *x + 1;\n\
    \  |              ^^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        res.push(l[i] + 1);\n        i += 1;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut l = l;\n    l.iter().cloned().for_each(|&x| {\n        *x +=\
    \ 1;\n    });\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdvayj20d.rs:8:33\n  |\n8 |\
    \     l.iter().cloned().for_each(|&x| {\n  |                                 ^--\n\
    \  |                                 ||\n  |                                 |expected\
    \ due to this\n  |                                 expected `isize`, found reference\n\
    \  |                                 help: did you mean `x`: `&isize`\n  |\n \
    \ = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for el in l {\n      \
    \  res.push(el + i);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpgm326azw.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    r.into_iter().for_each(|x| {\n        *x = *x + 1;\n\
    \    });\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpvgk7o4uc.rs:9:9\n\
    \  |\n9 |         *x = *x + 1;\n  |         ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n --> /tmp/tmpvgk7o4uc.rs:9:14\n  |\n9 |         *x = *x + 1;\n\
    \  |              ^^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        res.push((l[i] + 1).unwrap());\n        i += 1;\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpwmdvgrxj.rs:10:29\n   |\n10 |         res.push((l[i] +\
    \ 1).unwrap());\n   |                             ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![];\n    for e in l {\n        r.push(r.get() + 1);\n\
    \    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpjzwgg_fl.rs:9:18\n    |\n9   |         r.push(r.get() + 1);\n\
    \    |                  ^^^- supplied 0 arguments\n    |                  |\n\
    \    |                  expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0369]: cannot add `{integer}` to `Option<&_>`\n --> /tmp/tmpjzwgg_fl.rs:9:24\n\
    \  |\n9 |         r.push(r.get() + 1);\n  |                ------- ^ - {integer}\n\
    \  |                |\n  |                Option<&_>\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut l = l;\n    l.iter().cloned().for_each(|x| {\n        *x += 1;\n\
    \    });\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpc0qaw34y.rs:9:9\n\
    \  |\n9 |         *x += 1;\n  |         ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    for x in l {\n    \
    \    result.append(x + i);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpthmxp5nw.rs:10:23\n   |\n\
    10 |         result.append(x + i);\n   |                       ^^^^^ expected\
    \ `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for el in l {\n      \
    \  res.push(el + i);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpgm326azw.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![];\n    r.extend(l.iter().cloned());\n    r.into_iter().for_each(|x|\
    \ {\n        *x += 1;\n    });\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpou9g44rm.rs:10:9\n\
    \   |\n10 |         *x += 1;\n   |         ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut i = 0;\n    while i < l.len() {\n\
    \        result.push(l[i] + 1);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    let mut i = 0;\n    while i < r.len() {\n       \
    \ r[i] += 1;\n        i += 1;\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010726
