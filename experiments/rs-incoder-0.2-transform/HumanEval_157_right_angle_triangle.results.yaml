language: rs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwx4r1dkh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 || (a + b + c) == 0 {\n        return false;\n\
    \    }\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut d = (a + b + c) / 2;\n    while a > 0 && b > 0 && c > 0 {\n     \
    \   if d > a {\n            a -= d;\n        } else if d > b {\n            b\
    \ -= d;\n        } else {\n            c -= d;\n        }\n        d = (a + b\
    \ + c) / 2;\n    }\n    d > 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4i695b9v.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if a > c {\n        (a, c) = (c, a)\n    }\n    a ==\
    \ b == c || a == c || b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp0z3f3szg.rs:20:7\n\
    \   |\n20 |     a == b == c || a == c || b == c\n   |       ^^   ^^\n   |\nhelp:\
    \ split the comparison into two\n   |\n20 |     a == b && b == c || a == c ||\
    \ b == c\n   |            ++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0z3f3szg.rs:20:15\n\
    \   |\n20 |     a == b == c || a == c || b == c\n   |               ^ expected\
    \ `bool`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * c - b * b;\n    if det < 0 {\n        det = -det;\n    }\n    det\
    \ /= 2;\n    \n    if det < 0 {\n        return false;\n    }\n    \n    if a\
    \ > b {\n        if a > c {\n            return true;\n        } else {\n    \
    \        return false;\n        }\n    } else {\n        if b > c {\n        \
    \    return true;\n        } else {\n            return false;\n        }\n  \
    \  }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpurzvsark.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ d = a - b;\n    let mut e = b - c;\n    let mut f = c - a;\n    if d < 0 {\n\
    \        d = -d;\n    }\n    if e < 0 {\n        e = -e;\n    }\n    if f < 0\
    \ {\n        f = -f;\n    }\n    if d > e {\n        return false;\n    }\n  \
    \  if f > e {\n        return false;\n    }\n    if f > d {\n        return false;\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzh6rjepl.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a == b {\n        if b == c {\n           \
    \ return true;\n        }\n        return false;\n    }\n    \n    if a == c {\n\
    \        if b == c {\n            return true;\n        }\n        return false;\n\
    \    }\n    \n    if b == c {\n        return true;\n    }\n    \n    if a < b\
    \ {\n        if b < c {\n            return true;\n        }\n    }\n    \n  \
    \  if a < c {\n        if c < b {\n            return true;\n        }\n    }\n\
    \    \n    if b < c {\n        if c < a {\n            return true;\n        }\n\
    \    }\n    \n    return false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp6mnhbvr6.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    true\n            } else {\n                false\n            }\n      \
    \  } else {\n            false\n        }\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd519qnhb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    if a + b > c {\n        a = c;\n        b = a;\n\
    \    }\n    \n    if a + c > b {\n        a = b;\n        c = a;\n    }\n    \n\
    \    if b + c > a {\n        b = c;\n        c = b;\n    }\n    \n    a + b +\
    \ c == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp6kdq7ei1.rs:11:25\n   |\n11 |     let mut a = a < c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwx4r1dkh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut sum = 0;\n    while a > b {\n        sum += a;\n        a /= 2;\n\
    \    }\n    while b > c {\n        sum += b;\n        b /= 2;\n    }\n    while\
    \ c > a {\n        sum += c;\n        c /= 2;\n    }\n    sum == a || sum == b\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvesopusr.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n    if\
    \ a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n  \
    \  }\n    \n    if a + c > b {\n        a = a - c;\n        c = c - a;\n     \
    \   b = b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n        c\
    \ = c - b;\n        a = a + c;\n    }\n    \n    if a + b == c && b + c == a {\n\
    \        return true;\n    }\n    \n    if a + b == c && a + c == b {\n      \
    \  return true;\n    }\n    \n    if b + c == a && b + a == c {\n        return\
    \ true;\n    }\n    \n    if a + b == c && a + c == b {\n        return true;\n\
    \    }\n    \n    if b + c == a && b + a == c {\n        return true;\n    }\n\
    \    \n    if a + b == c && a + c == b {\n        return true;\n    }\n    \n\
    \    if b + c == a && b + a == c {\n        return true;\n    }\n    \n    if\
    \ a + b == c && a + c == b {\n        return true;\n    }\n    \n    if b + c\
    \ == a && b + a == c {\n        return true;\n    }\n    \n    if a + b == c &&\
    \ a + c == b {\n        return true;\n    }\n    \n    if b + c == a && b + a\
    \ == c {\n        return true;\n    }\n    \n    if a + b == c && a + c == b {\n\
    \        return true;\n    }\n    \n    if b + c == a && b + a == c {\n      \
    \  return true;\n    }\n    \n    if a + b == c && a + c == b {\n        return\
    \ true;\n    }\n    \n    if b + c == a && b + a == c {\n        return true;\n\
    \    }\n    \n    if a + b == c && a + c == b {\n        return true;\n    }\n\
    \    \n    if b + c == a && b + a == c {\n        return true;\n    }\n    \n\
    \    if a + b == c && a + c == b {\n        return true;\n    }\n    \n    if\
    \ b + c == a && b + a == c {\n        return true;\n    }\n    \n    if a + b\
    \ == c && a + c == b {\n        return true;\n    }\n    \n    if b + c == a &&\
    \ b + a == c {\n        return true;\n    }\n    \n    if a + b == c && a + c\
    \ == b {\n        return true;\n    }\n    \n    if b + c == a && b + a == c {\n\
    \        return true;\n    }\n    \n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpoeim4n31.rs:124:5\n\
    \    |\n10  |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    |                                                            ---- expected\
    \ `bool` because of this return type\n...\n124 | /     if b + c == a && b + a\
    \ == c {\n125 | |         return true;\n126 | |     }\n    | |_____^ expected\
    \ `bool`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate\
    \ to `()`\n    = help: consider adding an `else` block that evaluates to the expected\
    \ type\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: -1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a > b {\n            a -= b;\n        }\n\
    \        if b > c {\n            b -= c;\n        }\n        if c > a {\n    \
    \        c -= a;\n        }\n    }\n    a == 0 && b == 0 && c == 0 // all sides\
    \ are equal\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n   \
    \ assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015928
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_bck_z2o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut sum = a * b * c;\n    sum += a * c;\n    sum += b * c;\n    sum -= a * b\
    \ * c;\n    sum -= a * c;\n    sum -= b * c;\n    sum -= a * b * c;\n    sum -=\
    \ a * c;\n    sum -= b * c;\n    sum -= a * b * c;\n    sum -= a * c;\n    sum\
    \ -= b * c;\n    sum -= a * b * c;\n    sum -= a * c;\n    sum -= b * c;\n   \
    \ sum -= a * b * c;\n    sum -= a * c;\n    sum -= b * c;\n    sum -= a * b *\
    \ c;\n    sum -= a * c;\n    sum -= b * c;\n    sum -= a * b * c;\n    sum -=\
    \ a * c;\n    sum -= b * c;\n    sum -= a * b * c;\n    sum -= a * c;\n    sum\
    \ -= b * c;\n    sum -= a * b * c;\n    sum -= a * c;\n    sum -= b * c;\n   \
    \ sum -= a * b * c;\n    sum -= a * c;\n    sum -= b * c;\n    sum -= a * b *\
    \ c;\n    sum -= a * c;\n    sum -= b * c;\n    sum -= a * b * c;\n    sum -=\
    \ a * c;\n    sum -= b * c;\n    sum -= a * b * c;\n    sum -= a * c;\n    sum\
    \ -= b * c;\n    sum -= a * b * c;\n    sum -= a * c;\n    sum -= b * c;\n   \
    \ sum -= a * b * c;\n    sum -= a * c;\n    sum -= b * c;\n    sum -= a * b *\
    \ c;\n    sum -= a * c;\n    sum -= b * c;\n    sum -= a * b * c;\n    sum -=\
    \ a * c;\n    sum -= b * c;\n    sum -= a * b * c;\n    sum -= a * c;\n    sum\
    \ -= b * c;\n    sum -= a * b * c;\n    sum -= a * c;\n    sum -= b * c;\n   \
    \ sum -= a * b * c;\n    sum -= a * c;\n    sum -= b * c;\n    sum -= a * b *\
    \ c;\n    sum -= a * c;\n    sum -= b * c;\n    sum -= a * b * c;\n    sum -=\
    \ a * c;\n    \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp96cvgiwb.rs:10:58\n   |\n\
    10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |   \
    \ --------------------                                  ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || b + c > a || c + a > b {\n        return false;\n   \
    \ }\n    let mut sum = a;\n    let mut prod = b;\n    while prod != 0 {\n    \
    \    sum += prod;\n        prod /= 2;\n    }\n    sum == c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfyijrnwn.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut d = b - c;\n    let mut e = a - c;\n  \
    \  let mut f = a - b;\n    let mut g = d - c;\n    let mut h = b - a;\n    \n\
    \    if a == b {\n        return c == d;\n    }\n    \n    if a == c {\n     \
    \   return b == d;\n    }\n    \n    if a == d {\n        return c == a;\n   \
    \ }\n    \n    if a == e {\n        return b == a;\n    }\n    \n    if a == f\
    \ {\n        return c == a;\n    }\n    \n    if a == g {\n        return d ==\
    \ a;\n    }\n    \n    if a == h {\n        return d == b;\n    }\n    \n    if\
    \ b == c {\n        return d == a;\n    }\n    \n    if b == d {\n        return\
    \ c == b;\n    }\n    \n    if b == e {\n        return d == b;\n    }\n    \n\
    \    if b == f {\n        return c == b;\n    }\n    \n    if b == g {\n     \
    \   return d == c;\n    }\n    \n    if b == h {\n        return d == b;\n   \
    \ }\n    \n    if c == d {\n        return a == b;\n    }\n    \n    if c == e\
    \ {\n        return a == c;\n    }\n    \n    if c == f {\n        return a ==\
    \ c;\n    }\n    \n    if c == g {\n        return a == d;\n    }\n    \n    if\
    \ c == h {\n        return a == b;\n    }\n    \n    if d == e {\n        return\
    \ a == b;\n    }\n    \n    if d == f {\n        return a == c;\n    }\n    \n\
    \    if d == g {\n        return a == d;\n    }\n    \n    if d == h {\n     \
    \   return a == b;\n    }\n    \n    if e == f {\n        return a == b;\n   \
    \ }\n    \n    if e == g {\n        return a == c;\n    }\n    \n    if e == h\
    \ {\n        return a == d;\n    }\n    \n    if f == g {\n        return a ==\
    \ c;\n    }\n    \n    if f == h {\n        return a == b;\n    }\n    \n    if\
    \ g == h {\n        return a == b;\n    }\n    \n    false\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0573]: expected type, found local variable `a`\n  --> /tmp/tmpyzcz3a_2.rs:11:30\n\
    \   |\n11 |     let mut a = a < 0 ? -a : a;\n   |                            \
    \  ^ expecting a type here because of type ascription\n\nerror[E0573]: expected\
    \ type, found local variable `b`\n  --> /tmp/tmpyzcz3a_2.rs:12:30\n   |\n12 |\
    \     let mut b = b < 0 ? -b : b;\n   |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0573]: expected type, found\
    \ local variable `c`\n  --> /tmp/tmpyzcz3a_2.rs:13:30\n   |\n13 |     let mut\
    \ c = c < 0 ? -c : c;\n   |                              ^ expecting a type here\
    \ because of type ascription\n\nerror[E0277]: the `?` operator can only be applied\
    \ to values that implement `Try`\n  --> /tmp/tmpyzcz3a_2.rs:11:21\n   |\n11 |\
    \     let mut a = a < 0 ? -a : a;\n   |                     ^^^ the `?` operator\
    \ cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try` is not\
    \ implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only be used\
    \ in a function that returns `Result` or `Option` (or another type that implements\
    \ `FromResidual`)\n   --> /tmp/tmpyzcz3a_2.rs:11:23\n    |\n10  | / fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n11  | |     let mut a = a < 0 ? -a : a;\n\
    \    | |                       ^ cannot use the `?` operator in a function that\
    \ returns `bool`\n12  | |     let mut b = b < 0 ? -b : b;\n13  | |     let mut\
    \ c = c < 0 ? -c : c;\n...   |\n132 | |     false\n133 | | }\n    | |_- this function\
    \ should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait\
    \ `FromResidual<_>` is not implemented for `bool`\n\nerror[E0277]: the `?` operator\
    \ can only be applied to values that implement `Try`\n  --> /tmp/tmpyzcz3a_2.rs:12:21\n\
    \   |\n12 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the\
    \ `?` operator cannot be applied to type `{integer}`\n   |\n   = help: the trait\
    \ `Try` is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can\
    \ only be used in a function that returns `Result` or `Option` (or another type\
    \ that implements `From"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a > b {\n            a -= b;\n        }\n\
    \        if b > c {\n            b -= c;\n        }\n        if c > a {\n    \
    \        c -= a;\n        }\n    }\n    a == 0 && b == 0 && c == 0 || a == 0 &&\
    \ b == 0 || a == 0 && c == 0 || b == 0 && c == 0 || a == 0 && c == 0 || b == 0\
    \ && c == 0 || a == 0 && b == 0 || b == 0 && c == 0 || a == 0 && c == 0 || b ==\
    \ 0 && c == 0 || a == 0 && b == 0 || c == 0 && b == 0 || c == 0 && a == 0 || c\
    \ == 0 && b == 0 || c == 0 && a == 0 || b == 0 && a == 0 || b == 0 && c == 0 ||\
    \ c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || b == 0 && a == 0\
    \ || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a ==\
    \ 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c\
    \ == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 &&\
    \ b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0\
    \ && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b ==\
    \ 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a\
    \ == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 ||\
    \ c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0\
    \ && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c ==\
    \ 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b\
    \ == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 &&\
    \ a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0\
    \ || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a ==\
    \ 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c\
    \ == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 &&\
    \ b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0\
    \ && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b ==\
    \ 0 || c == 0 && a == 0 && b == 0 || c == 0 && a == 0 && b == 0 || c == \n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmptnvjz47k.rs:29:1\n\
    \   |\n29 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    // Check if a is greater than b\n    if a > b\
    \ {\n        swap(&mut a, &mut b);\n    }\n    \n    // Check if b is greater\
    \ than c\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n    \n    // Check\
    \ if c is greater than a\n    if c > a {\n        swap(&mut c, &mut a);\n    }\n\
    \    \n    // Check if a is greater than c\n    if a > c {\n        swap(&mut\
    \ a, &mut c);\n    }\n    \n    // Check if b is greater than a\n    if b > a\
    \ {\n        swap(&mut b, &mut a);\n    }\n    \n    // Check if c is greater\
    \ than b\n    if c > b {\n        swap(&mut c, &mut b);\n    }\n    \n    // Check\
    \ if a is greater than b\n    if a > b {\n        swap(&mut a, &mut b);\n    }\n\
    \    \n    // Check if b is greater than c\n    if b > c {\n        swap(&mut\
    \ b, &mut c);\n    }\n    \n    // Check if c is greater than a\n    if c > a\
    \ {\n        swap(&mut c, &mut a);\n    }\n    \n    // Check if a is greater\
    \ than c\n    if a > c {\n        swap(&mut a, &mut c);\n    }\n    \n    // Check\
    \ if b is greater than a\n    if b > a {\n        swap(&mut b, &mut a);\n    }\n\
    \    \n    // Check if c is greater than b\n    if c > b {\n        swap(&mut\
    \ c, &mut b);\n    }\n    \n    // Check if a is greater than c\n    if a > c\
    \ {\n        swap(&mut a, &mut c);\n    }\n    \n    // Check if b is greater\
    \ than c\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n    \n    // Check\
    \ if c is greater than a\n    if c > a {\n        swap(&mut c, &mut a);\n    }\n\
    \    \n    // Check if a is greater than b\n    if a > b {\n        swap(&mut\
    \ a, &mut b);\n    }\n    \n    // Check if b is greater than c\n    if b > c\
    \ {\n        swap(&mut b, &mut c);\n    }\n    \n    // Check if c \n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpouk0v7uz.rs:11:25\n   |\n11 |     let mut a = a < c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n  \
    \      return false;\n    }\n    if b + c > a {\n        return false;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkvjemjph.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    loop {\n        if a == b {\n            return\
    \ c == b;\n        }\n        if a == c {\n            return b == c;\n      \
    \  }\n        if b == c {\n            return a == b;\n        }\n        \n \
    \       a -= 1;\n        b -= 1;\n        c -= 1;\n    }\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpvi0ifiv_.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if b == c {\n            return true;\n        }\n \
    \       return false;\n    }\n    if a == c {\n        if b == c {\n         \
    \   return true;\n        }\n        return false;\n    }\n    if b == c {\n \
    \       return false;\n    }\n    if a < b {\n        a = a + 360;\n    }\n  \
    \  if a < c {\n        a = a + 360;\n    }\n    if b < c {\n        b = b + 360;\n\
    \    }\n    if a > b {\n        a = a - 360;\n    }\n    if a > c {\n        a\
    \ = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n    }\n    if a < b\
    \ {\n        a = a + 360;\n    }\n    if a > c {\n        a = a - 360;\n    }\n\
    \    if b > c {\n        b = b - 360;\n    }\n    if a < b {\n        a = a +\
    \ 360;\n    }\n    if a > c {\n        a = a - 360;\n    }\n    if b > c {\n \
    \       b = b - 360;\n    }\n    if a < b {\n        a = a + 360;\n    }\n   \
    \ if a > c {\n        a = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n\
    \    }\n    if a < b {\n        a = a + 360;\n    }\n    if a > c {\n        a\
    \ = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n    }\n    if a < b\
    \ {\n        a = a + 360;\n    }\n    if a > c {\n        a = a - 360;\n    }\n\
    \    if b > c {\n        b = b - 360;\n    }\n    if a < b {\n        a = a +\
    \ 360;\n    }\n    if a > c {\n        a = a - 360;\n    }\n    if b > c {\n \
    \       b = b - 360;\n    }\n    if a < b {\n        a = a + 360;\n    }\n   \
    \ if a > c {\n        a = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n\
    \    }\n    if a < b {\n        a = a + 360;\n    }\n    if a > c {\n        a\
    \ = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n    }\n    if a < b\
    \ {\n        a = a + 360;\n    }\n    if a > c {\n        a = a - 360;\n    }\n\
    \    if b > c {\n        b = b - \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjklu9iic.rs:142:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n125 |     if b > c {\n    |              - this delimiter might\
    \ not be properly closed...\n126 |         b = b - \n127 | }\n    | - ...as it\
    \ matches this but it has different indentation\n...\n142 | }\n    |   ^\n\nerror:\
    \ expected expression, found `}`\n   --> /tmp/tmpjklu9iic.rs:127:1\n    |\n127\
    \ | }\n    | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjklu9iic.rs:10:58\n\
    \   |\n10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |    --------------------                                  ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwx4r1dkh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        swap(&mut a, &mut b);\n    }\n    if b > c {\n      \
    \  swap(&mut b, &mut c);\n    }\n    if a > c {\n        swap(&mut a, &mut c);\n\
    \    }\n    a == b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpmpt7ihcj.rs:23:7\n\
    \   |\n23 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n23 |     a == b && b == c\n   |            ++++\n\nerror[E0425]:\
    \ cannot find function `swap` in this scope\n  --> /tmp/tmpmpt7ihcj.rs:15:9\n\
    \   |\n15 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpmpt7ihcj.rs:18:9\n   |\n18 |         swap(&mut\
    \ b, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmpmpt7ihcj.rs:21:9\n   |\n21 |         swap(&mut a, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmpt7ihcj.rs:23:15\n   |\n\
    23 |     a == b == c\n   |               ^ expected `bool`, found `isize`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5_mrsveu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut s = a + b + c;\n    if s == 0 {\n        return false;\n    }\n \
    \   if s == 1 {\n        return true;\n    }\n    if s == 2 {\n        return\
    \ a == b;\n    }\n    if s == 3 {\n        return a == c && b == c;\n    }\n \
    \   if s == 4 {\n        return a == b || a == c || b == c;\n    }\n    if s ==\
    \ 5 {\n        return a == b || a == c || b == c || c == b;\n    }\n    if s ==\
    \ 6 {\n        return a == b || a == c || b == c || c == b || c == a;\n    }\n\
    \    if s == 7 {\n        return a == b || a == c || b == c || c == b || c ==\
    \ a || b == a;\n    }\n    if s == 8 {\n        return a == b || a == c || b ==\
    \ c || c == b || c == a || b == a || c == a;\n    }\n    if s == 9 {\n       \
    \ return a == b || a == c || b == c || c == b || c == a || b == a || c == a ||\
    \ a == b;\n    }\n    if s == 10 {\n        return a == b || a == c || b == c\
    \ || c == b || c == a || b == a || c == a || a == b || a == c;\n    }\n    if\
    \ s == 11 {\n        return a == b || a == c || b == c || c == b || c == a ||\
    \ b == a || c == a || a == b || a == c || a == b;\n    }\n    if s == 12 {\n \
    \       return a == b || a == c || b == c || c == b || c == a || b == a || c ==\
    \ a || a == b || a == c || a == b || a == c;\n    }\n    if s == 13 {\n      \
    \  return a == b || a == c || b == c || c == b || c == a || b == a || c == a ||\
    \ a == b || a == c || a == b || a == c || a == b;\n    }\n    if s == 14 {\n \
    \       return a == b || a == c || b == c || c == b || c == a || b == a || c ==\
    \ a || a == b || a == c || a == b || a == c || a == b;\n    }\n    if s == 15\
    \ {\n        return a == b || a == c || b == c || c == b || c == a || b == a ||\
    \ c == a || a == b || a == c || a == b || a == c || a == b;\n    }\n    if s ==\
    \ 16 {\n        return a == b || a == c || b == c || c == b || c == a || b ==\
    \ a || \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp6r_61zvk.rs:80:3\n\
    \   |\n10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                                               - unclosed\
    \ delimiter\n...\n63 |     if s == 16 {\n   |                - this delimiter\
    \ might not be properly closed...\n64 |         return a == b || a == c || b ==\
    \ c || c == b || c == a || b == a || \n65 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmp6r_61zvk.rs:65:1\n   |\n65 | }\n   | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6r_61zvk.rs:10:58\n   |\n10 |\
    \ fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |    --------------------\
    \                                  ^^^^ expected `bool`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            return true;\n        }\n\
    \    }\n    else {\n        if c < a {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsf85xht5.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5_mrsveu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    return true\n            }\n        }\n    }\n    else if b < c {\n     \
    \   if c < a {\n            return true\n        }\n    }\n    else if c < a {\n\
    \        return true\n    }\n    else if b == c {\n        return true\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return false\n    }\n    else if c == a {\n   \
    \     return false\n    }\n    else if b == c {\n        return false\n    }\n\
    \    else if b == a {\n        return \n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpnoqz0j_p.rs:154:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n137 |     else if b == a {\n    |                    - this\
    \ delimiter might not be properly closed...\n138 |         return \n139 | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n154 | }\n\
    \    |   ^\n\nerror[E0069]: `return;` in a function whose return type is not `()`\n\
    \   --> /tmp/tmpnoqz0j_p.rs:138:9\n    |\n10  | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n    |                                       \
    \                   ---- expected `bool` because of this return type\n...\n138\
    \ |         return \n    |         ^^^^^^ return type is not `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnoqz0j_p.rs:10:58\n   |\n10 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |    --------------------         \
    \                         ^^^^ expected `bool`, found `()`\n   |    |\n   |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0069, E0308.\nFor more information about an error, try `rustc --explain E0069`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwx4r1dkh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * c - b * b;\n    if det < 0 {\n        det = -det;\n    }\n    det\
    \ /= 2;\n    if det < 0 {\n        return false;\n    }\n    let mut a = a / 2;\n\
    \    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut det = a * c - b *\
    \ b;\n    if det < 0 {\n        det = -det;\n    }\n    det /= 2;\n    if det\
    \ < 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmay0qd5l.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    let mut d = b - a;\n    let mut e = c - a;\n    let\
    \ mut f = d - e;\n    let mut g = e - b;\n    let mut h = f - g;\n    if h ==\
    \ 0 {\n        return true\n    }\n    if h == 1 {\n        return false\n   \
    \ }\n    if g == 0 {\n        return false\n    }\n    if g == 1 {\n        return\
    \ true\n    }\n    if f == 0 {\n        return false\n    }\n    if f == 1 {\n\
    \        return true\n    }\n    if e == 0 {\n        return false\n    }\n  \
    \  if e == 1 {\n        return true\n    }\n    if d == 0 {\n        return false\n\
    \    }\n    if d == 1 {\n        return true\n    }\n    if c == a+b+c {\n   \
    \     return true\n    }\n    if c == a+b {\n        return false\n    }\n   \
    \ if c == a+b+d {\n        return false\n    }\n    if c == a+b+e {\n        return\
    \ false\n    }\n    if c == a+b+f {\n        return false\n    }\n    if c ==\
    \ a+b+g {\n        return false\n    }\n    if c == a+b+h {\n        return false\n\
    \    }\n    if c == a+b+i {\n        return false\n    }\n    if c == a+b+j {\n\
    \        return false\n    }\n    if c == a+b+k {\n        return false\n    }\n\
    \    if c == a+b+l {\n        return false\n    }\n    if c == a+b+m {\n     \
    \   return false\n    }\n    if c == a+b+n {\n        return false\n    }\n  \
    \  if c == a+b+o {\n        return false\n    }\n    if c == a+b+p {\n       \
    \ return false\n    }\n    if c == a+b+q {\n        return false\n    }\n    if\
    \ c == a+b+r {\n        return false\n    }\n    if c == a+b+s {\n        return\
    \ false\n    }\n    if c == a+b+t {\n        return false\n    }\n    if c ==\
    \ a+b+u {\n        return false\n    }\n    if c == a+b+v {\n        return false\n\
    \    }\n    if c == a+b+w {\n        return false\n    }\n    if c == a+b+x {\n\
    \        return false\n    }\n    if c == a+b+y {\n        return false\n    }\n\
    \    if c == a+b+z {\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpybyewlly.rs:137:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n121 |     if c == a+b+z {\n    |                   - this delimiter\
    \ might not be properly closed...\n122 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n137 | }\n    |   ^\n\nerror: expected one\
    \ of `.`, `;`, `?`, `else`, or an operator, found `a`\n  --> /tmp/tmpybyewlly.rs:11:25\n\
    \   |\n11 |     let mut a = a < b ? a : b;\n   |                         ^ expected\
    \ one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    return true;\n            }\n        }\n    }\n    else if b < c {\n    \
    \    if c < a {\n            return true;\n        }\n    }\n    else if c < a\
    \ {\n        return true;\n    }\n    else if b == c {\n        if a == c {\n\
    \            return true;\n        }\n    }\n    else if b == a {\n        if\
    \ a == b {\n            return true;\n        }\n    }\n    else if c == a {\n\
    \        if a == c {\n            return true;\n        }\n    }\n    else if\
    \ c == b {\n        if a == b {\n            return true;\n        }\n    }\n\
    \    else if b == c {\n        if a == c {\n            return true;\n       \
    \ }\n    }\n    else if b == a {\n        if a == b {\n            return true;\n\
    \        }\n    }\n    else if c == a {\n        if a == c {\n            return\
    \ true;\n        }\n    }\n    else if c == b {\n        if a == b {\n       \
    \     return true;\n        }\n    }\n    else if b == c {\n        if a == c\
    \ {\n            return true;\n        }\n    }\n    else if b == a {\n      \
    \  if a == b {\n            return true;\n        }\n    }\n    else if c == a\
    \ {\n        if a == c {\n            return true;\n        }\n    }\n    else\
    \ if c == b {\n        if a == b {\n            return true;\n        }\n    }\n\
    \    else if b == c {\n        if a == c {\n            return true;\n       \
    \ }\n    }\n    else if b == a {\n        if a == b {\n            return true;\n\
    \        }\n    }\n    else if c == a {\n        if a == c {\n            return\
    \ true;\n        }\n    }\n    else if c == b {\n        if a == b {\n       \
    \     return true;\n        }\n    }\n    else if b == c {\n        if a == c\
    \ {\n            return true;\n        }\n    }\n    else if b == a {\n      \
    \  if a == b {\n            return true;\n        }\n    }\n    else if c == a\
    \ {\n        if a == c {\n            return true;\n        }\n    }\n    else\
    \ if c == b {\n        if a == b {\n            return true;\n        }\n    }\n\
    \    else if b == c {\n        if a == c {\n            return true;\n       \
    \ }\n    }\n    else if b == a {\n        if a == b {\n            return true;\n\
    \        }\n    }\n    else if c == a {\n        if a == c {\n            return\
    \ true;\n        }\n    }\n    else if c == b {\n        if a == b {\n       \
    \     return true;\n        }\n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp63mto7gb.rs:161:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n141 |     else if c == b {\n    |                    - this\
    \ delimiter might not be properly closed...\n...\n146 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n161 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp63mto7gb.rs:10:58\n   |\n10 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |    --------------------         \
    \                         ^^^^ expected `bool`, found `()`\n   |    |\n   |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    if a > b\
    \ {\n        swap(&mut a, &mut b);\n    }\n    if a > c {\n        swap(&mut a,\
    \ &mut c);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n    if\
    \ a + b > c {\n        return false;\n    }\n    if a + c > b {\n        return\
    \ false;\n    }\n    if b + c > a {\n        return false;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp9suufd23.rs:18:9\n\
    \   |\n18 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmp9suufd23.rs:21:9\n   |\n21 |         swap(&mut\
    \ a, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmp9suufd23.rs:24:9\n   |\n24 |         swap(&mut b, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    \n    if a + b > c {\n        a = -a;\n       \
    \ b = -b;\n        c = -c;\n    }\n    \n    if a + c > b {\n        a = -a;\n\
    \        c = -c;\n    }\n    \n    if b + c > a {\n        b = -b;\n        c\
    \ = -c;\n    }\n    \n    a + b + c <= 1\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0573]: expected type, found local variable `a`\n  --> /tmp/tmpjd6s0ykm.rs:11:30\n\
    \   |\n11 |     let mut a = a < 0 ? -a : a;\n   |                            \
    \  ^ expecting a type here because of type ascription\n\nerror[E0573]: expected\
    \ type, found local variable `b`\n  --> /tmp/tmpjd6s0ykm.rs:12:30\n   |\n12 |\
    \     let mut b = b < 0 ? -b : b;\n   |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0573]: expected type, found\
    \ local variable `c`\n  --> /tmp/tmpjd6s0ykm.rs:13:30\n   |\n13 |     let mut\
    \ c = c < 0 ? -c : c;\n   |                              ^ expecting a type here\
    \ because of type ascription\n\nerror[E0277]: the `?` operator can only be applied\
    \ to values that implement `Try`\n  --> /tmp/tmpjd6s0ykm.rs:11:21\n   |\n11 |\
    \     let mut a = a < 0 ? -a : a;\n   |                     ^^^ the `?` operator\
    \ cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try` is not\
    \ implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only be used\
    \ in a function that returns `Result` or `Option` (or another type that implements\
    \ `FromResidual`)\n  --> /tmp/tmpjd6s0ykm.rs:11:23\n   |\n10 | / fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n11 | |     let mut a = a < 0 ? -a : a;\n\
    \   | |                       ^ cannot use the `?` operator in a function that\
    \ returns `bool`\n12 | |     let mut b = b < 0 ? -b : b;\n13 | |     let mut c\
    \ = c < 0 ? -c : c;\n...  |\n31 | |     a + b + c <= 1\n32 | | }\n   | |_- this\
    \ function should return `Result` or `Option` to accept `?`\n   |\n   = help:\
    \ the trait `FromResidual<_>` is not implemented for `bool`\n\nerror[E0277]: the\
    \ `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpjd6s0ykm.rs:12:21\n\
    \   |\n12 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the\
    \ `?` operator cannot be applied to type `{integer}`\n   |\n   = help: the trait\
    \ `Try` is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can\
    \ only be used in a function that returns `Result` or `Option` (or another type\
    \ that implements `FromResi"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if c > a {\n        (c, a) = (a, c)\n    }\n    let\
    \ mut sum = a;\n    let mut product = 1;\n    for _ in 0..(b - a) {\n        sum\
    \ += product;\n        product *= c;\n    }\n    product /= b;\n    product /=\
    \ c;\n    product < sum\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpf31jt3cs.rs:12:10\n\
    \   |\n10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                         - help: consider making this binding mutable: `mut\
    \ a`\n11 |     if a > b {\n12 |         (a, b) = (b, a)\n   |          ^ cannot\
    \ assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument\
    \ `b`\n  --> /tmp/tmpf31jt3cs.rs:12:13\n   |\n10 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                                 \
    \  - help: consider making this binding mutable: `mut b`\n11 |     if a > b {\n\
    12 |         (a, b) = (b, a)\n   |             ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `b`\n  --> /tmp/tmpf31jt3cs.rs:15:10\n\
    \   |\n10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                   - help: consider making this binding mutable:\
    \ `mut b`\n...\n15 |         (b, c) = (c, b)\n   |          ^ cannot assign to\
    \ immutable argument\n\nerror[E0384]: cannot assign to immutable argument `c`\n\
    \  --> /tmp/tmpf31jt3cs.rs:15:13\n   |\n10 | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n   |                                        \
    \     - help: consider making this binding mutable: `mut c`\n...\n15 |       \
    \  (b, c) = (c, b)\n   |             ^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `c`\n  --> /tmp/tmpf31jt3cs.rs:18:10\n\
    \   |\n10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n18 |         (c, a) = (a, c)\n   |          ^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `a`\n  --> /tmp/tmpf31jt3cs.rs:18:13\n   |\n10 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                         - help: consider\
    \ making this binding mutable: `mut a`\n...\n18 |         (c, a) = (a, c)\n  \
    \ |             ^ cannot ass"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    let mut d = b - a;\n    let mut e = c - a;\n    let\
    \ mut f = d - e;\n    \n    if f < 0 {\n        a = b;\n        b = c;\n     \
    \   c = d;\n        d = e;\n        e = f;\n        f = a;\n    }\n    \n    if\
    \ f == 0 {\n        return true;\n    }\n    \n    if e == 0 {\n        return\
    \ false;\n    }\n    \n    if a < b {\n        if c < d {\n            if b <\
    \ e {\n                return true;\n            }\n        }\n    }\n    \n \
    \   if a > b {\n        if c < d {\n            if b > e {\n                return\
    \ true;\n            }\n        }\n    }\n    \n    if a > c {\n        if b >\
    \ d {\n            if c < e {\n                return true;\n            }\n \
    \       }\n    }\n    \n    if a < c {\n        if b > d {\n            if c >\
    \ e {\n                return true;\n            }\n        }\n    }\n    \n \
    \   if b > c {\n        if c > d {\n            if d > e {\n                return\
    \ true;\n            }\n        }\n    }\n    \n    if b > c {\n        if c >\
    \ d {\n            if d > e {\n                return true;\n            }\n \
    \       }\n    }\n    \n    if c > d {\n        if d > e {\n            return\
    \ true;\n        }\n    }\n    \n    if c > d {\n        if d > e {\n        \
    \    return true;\n        }\n    }\n    \n    if d > e {\n        return true;\n\
    \    }\n    \n    if d > e {\n        return true;\n    }\n    \n    if d > e\
    \ {\n        return true;\n    }\n    \n    if e > f {\n        return true;\n\
    \    }\n    \n    if e > f {\n        return true;\n    }\n    \n    if e > f\
    \ {\n        return true;\n    }\n    \n    if f > a {\n        return true;\n\
    \    }\n    \n    if f > a {\n        return true;\n    }\n    \n    if f > a\
    \ {\n        return true;\n    }\n    \n    if a > b {\n        return true;\n\
    \    }\n    \n    if a > b {\n        return true;\n    }\n    \n    if a > b\
    \ {\n        return true;\n    }\n    \n    if a > b {\n        return true;\n\
    \    }\n    \n    if b > c {\n        return true;\n    }\n    \n    if b > c\
    \ {\n        return true;\n    }\n    \n    if b > c {\n        return true;\n\
    \    }\n    \n    if b > c {\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp3j1nvphp.rs:175:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n159 |     if b > c {\n    |              - this delimiter might\
    \ not be properly closed...\n160 | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n175 | }\n    |   ^\n\nerror: expected one of `.`,\
    \ `;`, `?`, `else`, or an operator, found `a`\n  --> /tmp/tmp3j1nvphp.rs:11:25\n\
    \   |\n11 |     let mut a = a < b ? a : b;\n   |                         ^ expected\
    \ one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 || (a + b + c) == 0 {\n        return false;\n\
    \    }\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut det = a * c - b * b;\n    if det == 0 {\n        return false;\n\
    \    }\n    det = det / 2;\n    if det < 0 {\n        return false;\n    }\n \
    \   let mut det = det / 2;\n    if det < 0 {\n        return false;\n    }\n \
    \   let mut det = det / 2;\n    if det < 0 {\n        return false;\n    }\n \
    \   return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvml5w4j7.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || c + b > a || a + c > b || b + c > a {\n        return\
    \ false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9sxzv69_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    if a + b > c {\n        a = -a;\n        b = -b;\n\
    \    }\n    if a + c > b {\n        a = -a;\n        c = -c;\n    }\n    if b\
    \ + c > a {\n        b = -b;\n        c = -c;\n    }\n    a == b == c\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp55o8koc2.rs:26:7\n\
    \   |\n26 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n26 |     a == b && b == c\n   |            ++++\n\nerror[E0573]:\
    \ expected type, found local variable `a`\n  --> /tmp/tmp55o8koc2.rs:11:30\n \
    \  |\n11 |     let mut a = a < 0 ? -a : a;\n   |                             \
    \ ^ expecting a type here because of type ascription\n\nerror[E0573]: expected\
    \ type, found local variable `b`\n  --> /tmp/tmp55o8koc2.rs:12:30\n   |\n12 |\
    \     let mut b = b < 0 ? -b : b;\n   |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0573]: expected type, found\
    \ local variable `c`\n  --> /tmp/tmp55o8koc2.rs:13:30\n   |\n13 |     let mut\
    \ c = c < 0 ? -c : c;\n   |                              ^ expecting a type here\
    \ because of type ascription\n\nerror[E0277]: the `?` operator can only be applied\
    \ to values that implement `Try`\n  --> /tmp/tmp55o8koc2.rs:11:21\n   |\n11 |\
    \     let mut a = a < 0 ? -a : a;\n   |                     ^^^ the `?` operator\
    \ cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try` is not\
    \ implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only be used\
    \ in a function that returns `Result` or `Option` (or another type that implements\
    \ `FromResidual`)\n  --> /tmp/tmp55o8koc2.rs:11:23\n   |\n10 | / fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n11 | |     let mut a = a < 0 ? -a : a;\n\
    \   | |                       ^ cannot use the `?` operator in a function that\
    \ returns `bool`\n12 | |     let mut b = b < 0 ? -b : b;\n13 | |     let mut c\
    \ = c < 0 ? -c : c;\n...  |\n26 | |     a == b == c\n27 | | }\n   | |_- this function\
    \ should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait\
    \ `FromResidual<_>` is not implemented for `bool`\n\nerror[E0277]: the `?` operator\
    \ can only be applied to values that implement `Try`\n  --> /tmp/tmp55o8koc2.rs:12:21\n\
    \   |\n12 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the\
    \ `?` operator cannot be applied to type `{int"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    while a > b {\n        a -= b;\n        b += c;\n        c += a;\n    }\n\
    \    while b > c {\n        b -= c;\n        c += a;\n        a += b;\n    }\n\
    \    while c > a {\n        c -= a;\n        a += b;\n        b += c;\n    }\n\
    \    a == b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5onkjs1u.rs:29:7\n\
    \   |\n29 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n29 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5onkjs1u.rs:29:15\n   |\n29 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_bck_z2o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ sum = 0;\n    while a > 0 && b > 0 && c > 0 {\n        sum += a;\n        sum\
    \ += b;\n        sum += c;\n        a -= 1;\n        b -= 1;\n        c -= 1;\n\
    \    }\n    sum == a && sum == b && sum == c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpogdw77nt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ d = a * a + b * b + c * c;\n    if d < 1 {\n        return false;\n    }\n \
    \   let mut e = a * a + b * b - c * c;\n    if e < 0 {\n        return false;\n\
    \    }\n    let mut f = a * b + c * c - b * b - a * a;\n    if f < 0 {\n     \
    \   return false;\n    }\n    let mut g = a * b - c * c + b * b - a * a;\n   \
    \ if g < 0 {\n        return false;\n    }\n    let mut h = b * b - c * c - a\
    \ * a;\n    if h < 0 {\n        return false;\n    }\n    if e == 0 && f == 0\
    \ && g == 0 && h == 0 {\n        return true;\n    }\n    if e == 0 && f != 0\
    \ && g != 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f == 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f != 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f != 0\
    \ && g != 0 && h == 0 {\n        return false;\n    }\n    if e == 0 && f == 0\
    \ && g != 0 && h != 0 {\n        return false;\n    }\n    if e == 0 && f != 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f == 0\
    \ && g != 0 && h == 0 {\n        return false;\n    }\n    if e != 0 && f != 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f != 0\
    \ && g != 0 && h != 0 {\n        return false;\n    }\n    if e == 0 && f == 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e == 0 && f != 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f == 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f != 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f != 0\
    \ && g != 0 && h == 0 {\n        return false;\n    }\n    if e == 0 && f == 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e == 0 && f != 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f == 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f != 0\
    \ && g == 0 && h != 0 {\n        return false;\n    }\n    if e != 0 && f != 0\
    \ && g != 0 && h == 0 {\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp38ppzzgy.rs:110:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n94  |     if e != 0 && f != 0 && g != 0 && h == 0 {\n    | \
    \                                            - this delimiter might not be properly\
    \ closed...\n95  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n110 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp38ppzzgy.rs:10:58\n\
    \   |\n10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |    --------------------                                  ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_bck_z2o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    \n    if a + b > c {\n        a = -a;\n       \
    \ b = -b;\n    }\n    \n    if a + c > b {\n        a = -a;\n        c = -c;\n\
    \    }\n    \n    if b + c > a {\n        b = -b;\n        c = -c;\n    }\n  \
    \  \n    if a + b + c > 0 {\n        return true;\n    }\n    \n    return false;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0573]: expected type, found local variable `a`\n  --> /tmp/tmpxsjzgxos.rs:11:30\n\
    \   |\n11 |     let mut a = a < 0 ? -a : a;\n   |                            \
    \  ^ expecting a type here because of type ascription\n\nerror[E0573]: expected\
    \ type, found local variable `b`\n  --> /tmp/tmpxsjzgxos.rs:12:30\n   |\n12 |\
    \     let mut b = b < 0 ? -b : b;\n   |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0573]: expected type, found\
    \ local variable `c`\n  --> /tmp/tmpxsjzgxos.rs:13:30\n   |\n13 |     let mut\
    \ c = c < 0 ? -c : c;\n   |                              ^ expecting a type here\
    \ because of type ascription\n\nerror[E0277]: the `?` operator can only be applied\
    \ to values that implement `Try`\n  --> /tmp/tmpxsjzgxos.rs:11:21\n   |\n11 |\
    \     let mut a = a < 0 ? -a : a;\n   |                     ^^^ the `?` operator\
    \ cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try` is not\
    \ implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only be used\
    \ in a function that returns `Result` or `Option` (or another type that implements\
    \ `FromResidual`)\n  --> /tmp/tmpxsjzgxos.rs:11:23\n   |\n10 | / fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n11 | |     let mut a = a < 0 ? -a : a;\n\
    \   | |                       ^ cannot use the `?` operator in a function that\
    \ returns `bool`\n12 | |     let mut b = b < 0 ? -b : b;\n13 | |     let mut c\
    \ = c < 0 ? -c : c;\n...  |\n34 | |     return false;\n35 | | }\n   | |_- this\
    \ function should return `Result` or `Option` to accept `?`\n   |\n   = help:\
    \ the trait `FromResidual<_>` is not implemented for `bool`\n\nerror[E0277]: the\
    \ `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpxsjzgxos.rs:12:21\n\
    \   |\n12 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the\
    \ `?` operator cannot be applied to type `{integer}`\n   |\n   = help: the trait\
    \ `Try` is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can\
    \ only be used in a function that returns `Result` or `Option` (or another type\
    \ that implements `FromResid"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n    if\
    \ a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n  \
    \  }\n    \n    if a + c > b {\n        a = a - c;\n        c = c - a;\n     \
    \   b = b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n        c\
    \ = c - b;\n        a = a + c;\n    }\n    \n    if a + b > c {\n        a = a\
    \ - b;\n        b = c - a;\n        c = a + b;\n    }\n    \n    if a + c > b\
    \ {\n        a = a - c;\n        c = c - a;\n        b = b + c;\n    }\n    \n\
    \    if b + c > a {\n        b = b - c;\n        c = c - b;\n        a = a + c;\n\
    \    }\n    \n    if a + b > c {\n        a = a - b;\n        b = c - a;\n   \
    \     c = a + b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n      \
    \  c = c - a;\n        b = b + c;\n    }\n    \n    if b + c > a {\n        b\
    \ = b - c;\n        c = c - b;\n        a = a + c;\n    }\n    \n    if a + b\
    \ > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n    }\n \
    \   \n    if a + c > b {\n        a = a - c;\n        c = c - a;\n        b =\
    \ b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n        c = c -\
    \ b;\n        a = a + c;\n    }\n    \n    if a + b > c {\n        a = a - b;\n\
    \        b = c - a;\n        c = a + b;\n    }\n    \n    if a + c > b {\n   \
    \     a = a - c;\n        c = c - a;\n        b = b + c;\n    }\n    \n    if\
    \ b + c > a {\n        b = b - c;\n        c = c - b;\n        a = a + c;\n  \
    \  }\n    \n    if a + b > c {\n        a = a - b;\n        b = c - a;\n     \
    \   c = a + b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n        c\
    \ = c - a;\n        b = b + c;\n    }\n    \n    if b + c > a {\n        b = b\
    \ - c;\n        c = c - b;\n        a = a + c;\n    }\n    \n    if a + b > c\
    \ {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n    }\n    \n\
    \    if a + c > b {\n        a = a - c;\n        c = c - a;\n        b = b + c;\n\
    \    }\n    \n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n   --> /tmp/tmpnzzroq3c.rs:132:18\n   \
    \ |\n132 |       if a + c > b {\n    |  __________________^\n133 | |         a\
    \ = a - c;\n134 | |         c = c - a;\n135 | |         b = b + c;\n136 | |  \
    \   }\n    | |_____^ expected `bool`, found `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_bck_z2o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n\n   \
    \ let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\n    while\
    \ a > 0 && b > 0 && c > 0 {\n        if a + b > c {\n            a -= c;\n   \
    \         b -= c;\n            c -= c;\n        } else {\n            b -= a;\n\
    \            c -= a;\n            a -= a;\n        }\n    }\n\n    a == 0 && b\
    \ == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 ||\
    \ a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0\
    \ && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a ==\
    \ 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c\
    \ == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 &&\
    \ b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0\
    \ || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b ==\
    \ 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a\
    \ == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 &&\
    \ c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0\
    \ && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c ==\
    \ 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b\
    \ == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 ||\
    \ a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0\
    \ && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a ==\
    \ 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c\
    \ == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 &&\
    \ b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0\
    \ || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b ==\
    \ 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a\
    \ == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 &&\
    \ c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0\
    \ && b == 0 && c == 0 || a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c ==\
    \ 0 || a == 0 && \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpiwtmg27d.rs:32:1\n\
    \   |\n32 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwx4r1dkh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * b - c * b;\n    if det < 0 {\n        det *= -1;\n    }\n    det /=\
    \ 2;\n    if det < 0 {\n        return false;\n    }\n    let mut det = a * c\
    \ - b * b;\n    if det < 0 {\n        det *= -1;\n    }\n    det /= 2;\n    if\
    \ det < 0 {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0n391kda.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > b + c {\n        a /= 2;\n        b /= 2;\n        c /= 2;\n    }\n    while\
    \ b > c + a {\n        b /= 2;\n        c /= 2;\n        a /= 2;\n    }\n    while\
    \ c > a + b {\n        c /= 2;\n        a /= 2;\n        b /= 2;\n    }\n    a\
    \ == b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl8tkp9_c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a + b > c {\n        a = c;\n        b = a\
    \ - b;\n    }\n    \n    if a + c > b {\n        a = b;\n        c = a - c;\n\
    \    }\n    \n    if b + c > a {\n        b = c;\n        c = b - c;\n    }\n\
    \    \n    a + b + c == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp8usmldyd.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        return c == 0;\n    }\n    if a == c {\n        return\
    \ b == 0;\n    }\n    if b == c {\n        return a == 0;\n    }\n    if a > b\
    \ {\n        swap(&mut a, &mut b);\n    }\n    if a > c {\n        swap(&mut a,\
    \ &mut c);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n    \n\
    \    let mut sum = 0;\n    \n    if a == b {\n        sum += c;\n    }\n    if\
    \ a == c {\n        sum += b;\n    }\n    if b == c {\n        sum += a;\n   \
    \ }\n    \n    if sum == 0 {\n        return false;\n    }\n    \n    let mut\
    \ sum2 = 0;\n    \n    if a == b {\n        sum2 += c;\n    }\n    if a == c {\n\
    \        sum2 += b;\n    }\n    if b == c {\n        sum2 += a;\n    }\n    \n\
    \    if sum2 == 0 {\n        return false;\n    }\n    \n    if sum == sum2 {\n\
    \        return true;\n    }\n    \n    if sum > sum2 {\n        return true;\n\
    \    }\n    \n    if sum < sum2 {\n        return false;\n    }\n    \n    if\
    \ sum > sum2 {\n        return false;\n    }\n    \n    if sum < sum2 {\n    \
    \    return true;\n    }\n    \n    if sum == sum2 {\n        return true;\n \
    \   }\n    \n    if sum > sum2 {\n        return true;\n    }\n    \n    if sum\
    \ < sum2 {\n        return false;\n    }\n    \n    if sum == sum2 {\n       \
    \ return true;\n    }\n    \n    if sum > sum2 {\n        return true;\n    }\n\
    \    \n    if sum < sum2 {\n        return false;\n    }\n    \n    if sum ==\
    \ sum2 {\n        return true;\n    }\n    \n    if sum > sum2 {\n        return\
    \ true;\n    }\n    \n    if sum < sum2 {\n        return false;\n    }\n    \n\
    \    if sum == sum2 {\n        return true;\n    }\n    \n    if sum > sum2 {\n\
    \        return true;\n    }\n    \n    if sum < sum2 {\n        return false;\n\
    \    }\n    \n    if sum == sum2 {\n        return true;\n    }\n    \n    if\
    \ sum > sum2 {\n        return true;\n    }\n    \n    if sum < sum2 {\n     \
    \   return false;\n    }\n    \n    if sum == sum2 {\n        return true;\n \
    \   }\n    \n    if sum > sum2 {\n        return true;\n    }\n    \n    if sum\
    \ < sum2 {\n        return false;\n    }\n    \n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp9rskxrjq.rs:24:9\n\
    \   |\n24 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmp9rskxrjq.rs:27:9\n   |\n27 |         swap(&mut\
    \ a, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmp9rskxrjq.rs:30:9\n   |\n30 |         swap(&mut b, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmp9rskxrjq.rs:153:5\n\
    \    |\n10  |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    |                                                            ---- expected\
    \ `bool` because of this return type\n...\n153 | /     if sum < sum2 {\n154 |\
    \ |         return false;\n155 | |     }\n    | |_____^ expected `bool`, found\
    \ `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n\
    \    = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0317, E0425.\nFor more information about an error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    return true;\n            }\n        }\n    }\n    if b < c {\n        if\
    \ c < a {\n            return true;\n        }\n    }\n    if c < a {\n      \
    \  return false;\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmpnbyx9bif.rs:23:5\n\
    \   |\n10 |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                                            ---- expected\
    \ `bool` because of this return type\n...\n23 | /     if c < a {\n24 | |     \
    \    return false;\n25 | |     }\n   | |_____^ expected `bool`, found `()`\n \
    \  |\n   = note: `if` expressions without `else` evaluate to `()`\n   = help:\
    \ consider adding an `else` block that evaluates to the expected type\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5_mrsveu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    if a + b > c {\n        a = a - b;\n        b = b - c;\n        c =\
    \ c - a;\n    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c -\
    \ b;\n        b = b - a;\n    }\n    \n    if b + c > a {\n        b = b - c;\n\
    \        c = c - a;\n        a = a - b;\n    }\n    \n    if a + b + c > 1 {\n\
    \        a = a - b;\n        b = b - c;\n        c = c - a;\n    }\n    \n   \
    \ a == b + c && b == c + a && c == a + b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_9drdane.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwx4r1dkh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a > b {\n        a = b;\n        b = c;\n \
    \       c = a;\n    }\n    \n    if b > c {\n        b = c;\n        c = a;\n\
    \        a = b;\n    }\n    \n    if c > a {\n        c = a;\n        a = b;\n\
    \        b = c;\n    }\n    \n    a == b == c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpqmygbp5w.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    return true;\n            }\n        } else {\n            return false;\n\
    \        }\n    } else {\n        if b < c {\n            return false;\n    \
    \    }\n    }\n    \n    if a < c {\n        if b < c {\n            return false;\n\
    \        }\n    } else {\n        return true;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmphspniwm6.rs:26:9\n\
    \   |\n26 | /         if b < c {\n27 | |             return false;\n28 | |   \
    \      }\n   | |_________^ expected `()`, found `bool`\n   |\n   = note: `if`\
    \ expressions without `else` evaluate to `()`\n   = help: consider adding an `else`\
    \ block that evaluates to the expected type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwx4r1dkh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        swap(&mut a, &mut b);\n    }\n    if a > c {\n      \
    \  swap(&mut a, &mut c);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n\
    \    }\n    if a == b {\n        return false;\n    }\n    if a == c {\n     \
    \   return true;\n    }\n    if b == c {\n        return false;\n    }\n    if\
    \ a == b {\n        return true;\n    }\n    if a == c {\n        return false;\n\
    \    }\n    if b == c {\n        return true;\n    }\n    if a == b {\n      \
    \  return true;\n    }\n    if a == c {\n        return false;\n    }\n    if\
    \ b == c {\n        return true;\n    }\n    if a == b {\n        return true;\n\
    \    }\n    if a == c {\n        return false;\n    }\n    if b == c {\n     \
    \   return true;\n    }\n    if a == b {\n        return true;\n    }\n    if\
    \ a == c {\n        return false;\n    }\n    if b == c {\n        return true;\n\
    \    }\n    if a == b {\n        return true;\n    }\n    if a == c {\n      \
    \  return false;\n    }\n    if b == c {\n        return true;\n    }\n    if\
    \ a == b {\n        return true;\n    }\n    if a == c {\n        return false;\n\
    \    }\n    if b == c {\n        return true;\n    }\n    if a == b {\n      \
    \  return true;\n    }\n    if a == c {\n        return false;\n    }\n    if\
    \ b == c {\n        return true;\n    }\n    if a == b {\n        return true;\n\
    \    }\n    if a == c {\n        return false;\n    }\n    if b == c {\n     \
    \   return true;\n    }\n    if a == b {\n        return true;\n    }\n    if\
    \ a == c {\n        return false;\n    }\n    if b == c {\n        return true;\n\
    \    }\n    if a == b {\n        return true;\n    }\n    if a == c {\n      \
    \  return false;\n    }\n    if b == c {\n        return true;\n    }\n    if\
    \ a == b {\n        return true;\n    }\n    if a == c {\n        return false;\n\
    \    }\n    if b == c {\n        return true;\n    }\n    if a == b {\n      \
    \  return true;\n    }\n    if a == c {\n        return false;\n    }\n    if\
    \ b == c {\n        return true;\n    }\n    if a == b {\n        return true;\n\
    \    }\n    if a == c {\n        return false;\n    }\n    if b == c {\n     \
    \   return true;\n    }\n    if a == b {\n        return true;\n    }\n    if\
    \ a == c {\n        return false;\n    }\n    if b == c {\n        return true;\n\
    \    }\n    if a == b {\n        return true;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpb64dbxh_.rs:15:9\n\
    \   |\n15 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpb64dbxh_.rs:18:9\n   |\n18 |         swap(&mut\
    \ a, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmpb64dbxh_.rs:21:9\n   |\n21 |         swap(&mut b, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpb64dbxh_.rs:158:5\n\
    \    |\n10  |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    |                                                            ---- expected\
    \ `bool` because of this return type\n...\n158 | /     if a == b {\n159 | |  \
    \       return true;\n160 | |     }\n    | |_____^ expected `bool`, found `()`\n\
    \    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help:\
    \ consider adding an `else` block that evaluates to the expected type\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0317, E0425.\nFor more information about an error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if c > a {\n        (c, a) = (a, c)\n    }\n    \n \
    \   let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut c\
    \ = c < b ? c : b;\n    \n    while a != b {\n        if a > c {\n           \
    \ a -= c;\n        } else {\n            c -= a;\n        }\n        if b > c\
    \ {\n            b -= c;\n        } else {\n            c -= b;\n        }\n \
    \   }\n    \n    a == b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp7n05xym3.rs:21:25\n   |\n21 |     let mut a = a < c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5_mrsveu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_bck_z2o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if c > a {\n        (c, a) = (a, c)\n    }\n    a +\
    \ b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpp2wmex7x.rs:12:10\n\
    \   |\n10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                         - help: consider making this binding mutable: `mut\
    \ a`\n11 |     if a > b {\n12 |         (a, b) = (b, a)\n   |          ^ cannot\
    \ assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument\
    \ `b`\n  --> /tmp/tmpp2wmex7x.rs:12:13\n   |\n10 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                                 \
    \  - help: consider making this binding mutable: `mut b`\n11 |     if a > b {\n\
    12 |         (a, b) = (b, a)\n   |             ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `b`\n  --> /tmp/tmpp2wmex7x.rs:15:10\n\
    \   |\n10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                   - help: consider making this binding mutable:\
    \ `mut b`\n...\n15 |         (b, c) = (c, b)\n   |          ^ cannot assign to\
    \ immutable argument\n\nerror[E0384]: cannot assign to immutable argument `c`\n\
    \  --> /tmp/tmpp2wmex7x.rs:15:13\n   |\n10 | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n   |                                        \
    \     - help: consider making this binding mutable: `mut c`\n...\n15 |       \
    \  (b, c) = (c, b)\n   |             ^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `c`\n  --> /tmp/tmpp2wmex7x.rs:18:10\n\
    \   |\n10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n18 |         (c, a) = (a, c)\n   |          ^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `a`\n  --> /tmp/tmpp2wmex7x.rs:18:13\n   |\n10 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                         - help: consider\
    \ making this binding mutable: `mut a`\n...\n18 |         (c, a) = (a, c)\n  \
    \ |             ^ cannot ass"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    if a + b > c {\n        a = c;\n        b = c;\n\
    \        c = a;\n    }\n    \n    if a + c > b {\n        a = b;\n        b =\
    \ b;\n        c = b;\n    }\n    \n    if b + c > a {\n        a = c;\n      \
    \  b = c;\n        c = c;\n    }\n    \n    a + b + c == c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp_9wcndca.rs:11:25\n   |\n11 |     let mut a = a < c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    \n    if a > b + c {\n   \
    \     a = b + c;\n        b = a < b + c ? a : b + c;\n    }\n    \n    if b >\
    \ a + c {\n        b = a + c;\n        c = b < a + c ? b : a + c;\n    }\n   \
    \ \n    if c > a + b {\n        c = a + b;\n        a = c < a + b ? c : a + b;\n\
    \    }\n    \n    a == b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp9f5ne8kg.rs:11:29\n   |\n11 |     let mut a = a < b + c ? a : b\
    \ + c;\n   |                             ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwx4r1dkh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    \n    if a > b + c {\n   \
    \     a = b + c;\n        b = a < b + c ? a : b + c;\n    }\n    \n    if b >\
    \ a + c {\n        b = a + c;\n        a = b < a + c ? b : a + c;\n    }\n   \
    \ \n    if c > a + b {\n        c = a + b;\n        a = c < a + b ? c : a + b;\n\
    \    }\n    \n    a == b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpy03w620u.rs:11:29\n   |\n11 |     let mut a = a < b + c ? a : b\
    \ + c;\n   |                             ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if b == c {\n            return true;\n        }\n \
    \   }\n    if a == c {\n        if b == c {\n            return true;\n      \
    \  }\n    }\n    if b == c {\n        return false;\n    }\n    if a == b {\n\
    \        if b == c {\n            return true;\n        }\n    }\n    if a ==\
    \ c {\n        if b == c {\n            return true;\n        }\n    }\n    if\
    \ b == c {\n        return false;\n    }\n    if a == b {\n        if b == c {\n\
    \            return true;\n        }\n    }\n    if a == c {\n        if b ==\
    \ c {\n            return true;\n        }\n    }\n    if b == c {\n        return\
    \ false;\n    }\n    if a == b {\n        if b == c {\n            return true;\n\
    \        }\n    }\n    if a == c {\n        if b == c {\n            return true;\n\
    \        }\n    }\n    if b == c {\n        return false;\n    }\n    if a ==\
    \ b {\n        if b == c {\n            return true;\n        }\n    }\n    if\
    \ a == c {\n        if b == c {\n            return true;\n        }\n    }\n\
    \    if b == c {\n        return false;\n    }\n    if a == b {\n        if b\
    \ == c {\n            return true;\n        }\n    }\n    if a == c {\n      \
    \  if b == c {\n            return true;\n        }\n    }\n    if b == c {\n\
    \        return false;\n    }\n    if a == b {\n        if b == c {\n        \
    \    return true;\n        }\n    }\n    if a == c {\n        if b == c {\n  \
    \          return true;\n        }\n    }\n    if b == c {\n        return false;\n\
    \    }\n    if a == b {\n        if b == c {\n            return true;\n     \
    \   }\n    }\n    if a == c {\n        if b == c {\n            return true;\n\
    \        }\n    }\n    if b == c {\n        return false;\n    }\n    if a ==\
    \ b {\n        if b == c {\n            return true;\n        }\n    }\n    if\
    \ a == c {\n        if b == c {\n            return true;\n        }\n    }\n\
    \    if b == c {\n        return false;\n    }\n    if a == b {\n        if b\
    \ == c {\n            return true;\n        }\n    }\n    if a == c {\n      \
    \  if b == c {\n            return true;\n        }\n    }\n    if b == c {\n\
    \        return false;\n    }\n    if a == b {\n        if b == c {\n        \
    \    return true;\n        }\n    }\n    if a == c {\n        if b\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpyf75474j.rs:166:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n149 |     if a == c {\n    |               - this delimiter\
    \ might not be properly closed...\n150 |         if b\n151 | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n166 | }\n    |   ^\n\n\
    error: expected `{`, found `}`\n   --> /tmp/tmpyf75474j.rs:151:1\n    |\n150 |\
    \         if b\n    |         -- this `if` expression has a condition, but no\
    \ block\n151 | }\n    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpyf75474j.rs:10:58\n   |\n10 | fn right_angle_triangle(a: isize, b: isize,\
    \ c: isize) -> bool {\n   |    --------------------                          \
    \        ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5_mrsveu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut det = a * c - b * b;\n    if det < 0 {\n\
    \        det = -det;\n        b = -b;\n    }\n    \n    let mut is_right_angle\
    \ = false;\n    if det > 0 {\n        let mut min_ab = std::min(a, b);\n     \
    \   let mut max_ab = std::max(a, b);\n        let mut min_bc = std::min(b, c);\n\
    \        let mut max_bc = std::max(b, c);\n        let mut min_cd = std::min(c,\
    \ det);\n        let mut max_cd = std::max(c, det);\n        if min_ab == max_ab\
    \ && min_bc >= max_bc && min_cd >= max_cd {\n            is_right_angle = true;\n\
    \        }\n    }\n    \n    is_right_angle\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0573]: expected type, found local variable `a`\n  --> /tmp/tmpd98p00_s.rs:11:30\n\
    \   |\n11 |     let mut a = a < 0 ? -a : a;\n   |                            \
    \  ^ expecting a type here because of type ascription\n\nerror[E0573]: expected\
    \ type, found local variable `b`\n  --> /tmp/tmpd98p00_s.rs:12:30\n   |\n12 |\
    \     let mut b = b < 0 ? -b : b;\n   |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0573]: expected type, found\
    \ local variable `c`\n  --> /tmp/tmpd98p00_s.rs:13:30\n   |\n13 |     let mut\
    \ c = c < 0 ? -c : c;\n   |                              ^ expecting a type here\
    \ because of type ascription\n\nerror[E0425]: cannot find function `min` in crate\
    \ `std`\n  --> /tmp/tmpd98p00_s.rs:22:31\n   |\n22 |         let mut min_ab =\
    \ std::min(a, b);\n   |                               ^^^ not found in `std`\n\
    \   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\nhelp: if you import `min`, refer to it directly\n   |\n22 -         let\
    \ mut min_ab = std::min(a, b);\n22 +         let mut min_ab = min(a, b);\n   |\
    \ \n\nerror[E0425]: cannot find function `max` in crate `std`\n  --> /tmp/tmpd98p00_s.rs:23:31\n\
    \   |\n23 |         let mut max_ab = std::max(a, b);\n   |                   \
    \            ^^^ not found in `std`\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::max;\n   |\nhelp: if you import `max`, refer to it directly\n\
    \   |\n23 -         let mut max_ab = std::max(a, b);\n23 +         let mut max_ab\
    \ = max(a, b);\n   | \n\nerror[E0425]: cannot find function `min` in crate `std`\n\
    \  --> /tmp/tmpd98p00_s.rs:24:31\n   |\n24 |         let mut min_bc = std::min(b,\
    \ c);\n   |                               ^^^ not found in `std`\n   |\nhelp:\
    \ consider importing this function\n   |\n1  | use std::cmp::min;\n   |\nhelp:\
    \ if you import `min`, refer to it directly\n   |\n24 -         let mut min_bc\
    \ = std::min(b, c);\n24 +         let mut min_bc = min(b, c);\n   | \n\nerror[E0425]:\
    \ cannot find function `max` in crate `std`\n  --> /tmp/tmpd98p00_s.rs:25:31\n\
    \   |\n25 |         let mut max_bc = std::max(b, c);\n "
  stdout: ''
  timestamp: 1660015924
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if a > c {\n        (a, c) = (c, a)\n    }\n    \n \
    \   let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut c\
    \ = c < b ? c : b;\n    \n    if a + b > c {\n        (a, c) = (c, a)\n    }\n\
    \    if a + c > b {\n        (a, b) = (b, a)\n    }\n    if b + c > a {\n    \
    \    (b, c) = (c, b)\n    }\n    \n    a + b + c == c\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpdy0p4rur.rs:21:25\n   |\n21 |     let mut a = a < c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwx4r1dkh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    if a > b {\n        a = b;\n        b = c;\n \
    \       c = a;\n    }\n    \n    if b > c {\n        b = c;\n        c = a;\n\
    \        a = b;\n    }\n    \n    if c > a {\n        c = a;\n        a = b;\n\
    \        b = c;\n    }\n    \n    a == b == c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp358okwea.rs:11:25\n   |\n11 |     let mut a = a < c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b + c || b > a + c || c > a + b {\n        return false;\n   \
    \ }\n    \n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n  \
    \  let mut c = c < a ? c : a;\n    \n    while a > b + c && b > a + c && c > a\
    \ + b {\n        a = a > c ? a : c;\n        b = b > c ? b : c;\n        c = c\
    \ > a ? c : a;\n    }\n    \n    a == b + c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpx2p9c1vb.rs:15:25\n   |\n15 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > b + c {\n        a -= b;\n        c += a;\n    }\n    while b > a + c {\n\
    \        b -= c;\n        c += b;\n    }\n    while c > a + b {\n        c -=\
    \ a;\n        a += c;\n    }\n    a == b + c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpycc_xsxh.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhdygull.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        a -= 360;\n    }\n    if b > c {\n        b -= 360;\n\
    \    }\n    if c > a {\n        c -= 360;\n    }\n    a == b && (a == c || a ==\
    \ 360)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpy48ej_j0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: -1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ sum = 0;\n    while a > 0 && b > 0 && c > 0 {\n        if a > b {\n        \
    \    a -= b;\n            sum += c;\n        }\n        if b > c {\n         \
    \   b -= c;\n            sum += a;\n        }\n        if c > a {\n          \
    \  c -= a;\n            sum += b;\n        }\n    }\n    sum == a || sum == b\
    \ || sum == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n \
    \   assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015929
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bxp30u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    if a + b > c {\n        a = -a;\n        b = -b;\n\
    \    }\n    if a + c > b {\n        a = -a;\n        c = -c;\n    }\n    if b\
    \ + c > a {\n        b = -b;\n        c = -c;\n    }\n    if a + b + c > 0 {\n\
    \        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0573]: expected type, found local variable `a`\n  --> /tmp/tmpdl1yb1_e.rs:11:30\n\
    \   |\n11 |     let mut a = a < 0 ? -a : a;\n   |                            \
    \  ^ expecting a type here because of type ascription\n\nerror[E0573]: expected\
    \ type, found local variable `b`\n  --> /tmp/tmpdl1yb1_e.rs:12:30\n   |\n12 |\
    \     let mut b = b < 0 ? -b : b;\n   |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0573]: expected type, found\
    \ local variable `c`\n  --> /tmp/tmpdl1yb1_e.rs:13:30\n   |\n13 |     let mut\
    \ c = c < 0 ? -c : c;\n   |                              ^ expecting a type here\
    \ because of type ascription\n\nerror[E0277]: the `?` operator can only be applied\
    \ to values that implement `Try`\n  --> /tmp/tmpdl1yb1_e.rs:11:21\n   |\n11 |\
    \     let mut a = a < 0 ? -a : a;\n   |                     ^^^ the `?` operator\
    \ cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try` is not\
    \ implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only be used\
    \ in a function that returns `Result` or `Option` (or another type that implements\
    \ `FromResidual`)\n  --> /tmp/tmpdl1yb1_e.rs:11:23\n   |\n10 | / fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n11 | |     let mut a = a < 0 ? -a : a;\n\
    \   | |                       ^ cannot use the `?` operator in a function that\
    \ returns `bool`\n12 | |     let mut b = b < 0 ? -b : b;\n13 | |     let mut c\
    \ = c < 0 ? -c : c;\n...  |\n29 | |     return false;\n30 | | }\n   | |_- this\
    \ function should return `Result` or `Option` to accept `?`\n   |\n   = help:\
    \ the trait `FromResidual<_>` is not implemented for `bool`\n\nerror[E0277]: the\
    \ `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpdl1yb1_e.rs:12:21\n\
    \   |\n12 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the\
    \ `?` operator cannot be applied to type `{integer}`\n   |\n   = help: the trait\
    \ `Try` is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can\
    \ only be used in a function that returns `Result` or `Option` (or another type\
    \ that implements `FromResid"
  stdout: ''
  timestamp: 1660015924
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpamfc0cjl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015923
