language: rs
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_idx = 1;\n        }\n        if n == max_value {\n   \
    \         max_idx += 1;\n        }\n    }\n    let mut max_value = numbers[0];\n\
    \    let mut max_idx = 1;\n    for &n in numbers {\n        if n > max_value {\n\
    \            max_value = n;\n            max_idx = 1;\n        }\n        if n\
    \ == max_value {\n            max_idx += 1;\n        }\n    }\n    let mut max_value\
    \ = numbers[0];\n    let mut max_idx = 1;\n    for &n in numbers {\n        if\
    \ n > max_value {\n            max_value = n;\n            max_idx = 1;\n    \
    \    }\n        if n == max_value {\n            max_idx += 1;\n        }\n  \
    \  }\n    let mut max_value = numbers[0];\n    let mut max_idx = 1;\n    for &n\
    \ in numbers {\n        if n > max_value {\n            max_value = n;\n     \
    \       max_idx = 1;\n        }\n        if n == max_value {\n            max_idx\
    \ += 1;\n        }\n    }\n    let mut max_value = numbers[0];\n    let mut max_idx\
    \ = 1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_idx = 1;\n        }\n        if n == max_value {\n   \
    \         max_idx += 1;\n        }\n    }\n    let mut max_value = numbers[0];\n\
    \    let mut max_idx = 1;\n    for &n in numbers {\n        if n > max_value {\n\
    \            max_value = n;\n            max_idx = 1;\n        }\n        if n\
    \ == max_value {\n            max_idx += 1;\n        }\n    }\n    let mut max_value\
    \ = numbers[0];\n    let mut max_idx = 1;\n    for &n in numbers {\n        if\
    \ n > max_value {\n            max_value = n;\n            max_idx = 1;\n    \
    \    }\n        if n == max_value {\n            max_idx += 1;\n        }\n  \
    \  }\n    let mut max_value = numbers[0];\n    let mut max_idx = 1;\n    for &n\
    \ in numbers {\n        if n > max_value {\n            max_value = n;\n     \
    \       max_idx = 1;\n        }\n        if n == max_value {\n            max_idx\
    \ += 1;\n        }\n    }\n    let mut max_value = numbers[0];\n    let mut max_idx\
    \ = 1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_idx = 1;\n        }\n        if n == max_value {\n   \
    \         max_idx += 1;\n        }\n    }\n    let mut max_value = numbers[0];\n\
    \    let mut max_idx = 1;\n    for &n in numbers {\n        if n > max_value {\n\
    \            max_value = n;\n            max_idx = 1;\n        }\n        if n\
    \ == max_value {\n            max_\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpvzd8jhs1.rs:122:3\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \                                              - unclosed delimiter\n...\n107\
    \ |     for &n in numbers {\n    |                       - unclosed delimiter\n\
    ...\n112 |         if n == max_value {\n    |                           - this\
    \ delimiter might not be properly closed...\n113 |             max_\n114 | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n122 | }\n\
    \    |   ^\n\nerror[E0425]: cannot find value `max_` in this scope\n   --> /tmp/tmpvzd8jhs1.rs:113:13\n\
    \    |\n113 |             max_\n    |             ^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpvzd8jhs1.rs:8:9\n  |\n8 |     for\
    \ &n in numbers {\n  |         ^^    ------- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvzd8jhs1.rs:19:9\n   |\n19 |     for &n in numbers {\n   |    \
    \     ^^    ------- this expression has type `Option<isize>`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `n`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvzd8jhs1.rs:30:9\n\
    \   |\n30 |     for &n in numbers {\n   |         ^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `n`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpvzd8jhs1.rs:41:9\n   |\n41 |   \
    \  for &n in numbers {\n   |         ^^    ------- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can "
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if i == max_index\
    \ {\n            result.push(numbers[i]);\n        } else {\n            result.push(max_value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpr3nxyy2u.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = numbers.iter().rev().position(|&x| x == max_number).unwrap();\n\
    \        }\n    }\n    max_numbers.insert(0, max_number);\n    max_numbers.insert(0,\
    \ max_index);\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1m71fu2n.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1m71fu2n.rs:11:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_number = *number;\n\
    \   |                          +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmp1m71fu2n.rs:8:25\n  |\n8 |     let mut max_index\
    \ = -1;\n  |                         ^^ the trait `Neg` is not implemented for\
    \ `usize`\n  |\n  = help: the following other types implement trait `Neg`:\n \
    \           &f32\n            &f64\n            &i128\n            &i16\n    \
    \        &i32\n            &i64\n            &i8\n            &isize\n       \
    \   and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1m71fu2n.rs:16:27\n\
    \   |\n16 |     max_numbers.insert(0, max_index);\n   |                      \
    \     ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n16\
    \ |     max_numbers.insert(0, max_index.try_into().unwrap());\n   |          \
    \                          ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpu4qixkpv.rs:9:26\n\
    \  |\n9 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpu4qixkpv.rs:10:27\n\
    \   |\n10 |             max_element = numbers[index];\n   |                  \
    \         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu4qixkpv.rs:11:25\n   |\n7  |\
    \     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = index;\n   |           \
    \              ^^^^^ expected `usize`, found `&isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp52t4uivm.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp52t4uivm.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp52t4uivm.rs:17:17\n   |\n17 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_numbers.push(max_number);\n            max_number = number;\n\
    \        } else {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpc19bxqe4.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpg2752uvo.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_pos =\
    \ 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos] > max_value {\n\
    \            max_value = numbers[pos];\n            max_pos = pos;\n        }\n\
    \    }\n    vec![max_value; max_pos + 1]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpwe923z4e.rs:6:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_idx = 1;\n        }\n        if n == max_value {\n   \
    \         max_idx += 1;\n        }\n    }\n    vec![max_value; max_idx]\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf1r76h2d.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_iter\
    \ = numbers.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8hu3pgl1.rs:27:19\n   |\n\
    27 |     let mut max_so\n   |                   ^ help: add `;` here\n28 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8hu3pgl1.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp81tv503p.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp81tv503p.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp81tv503p.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for n in numbers {\n        if n > max_number\
    \ {\n            max_number = n;\n            max_numbers.push(n);\n        }\
    \ else {\n            max_numbers.push(n);\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp8_11m3np.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz0ks50g.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxz0ks50g.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxz0ks50g.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxz0ks50g.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for index in numbers.iter().rev() {\n        if max_value < numbers[index]\
    \ {\n            max_value = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_index, max_value]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmp8c3ia1_n.rs:9:24\n\
    \  |\n9 |         if max_value < numbers[index] {\n  |                       \
    \ ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n\
    \  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp8c3ia1_n.rs:10:25\n\
    \   |\n10 |             max_value = numbers[index];\n   |                    \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8c3ia1_n.rs:11:25\n   |\n7  |\
    \     let mut max_index = -1;\n   |                         -- expected due to\
    \ this value\n...\n11 |             max_index = index;\n   |                 \
    \        ^^^^^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n11 |             max_index = *index;\n   |               \
    \          +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers\
    \ = Vec::new();\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_numbers.clear();\n        }\n\
    \        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers.get(0) {\n            \
    \    max_numbers.push(number);\n            }\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsmnm972w.rs:16:25\n   |\n\
    16 |             if number > max_numbers.get(0) {\n   |                      \
    \   ^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] >\
    \ max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![numbers[max_index]]\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmppc0h9gr6.rs:14:10

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = vec![];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n        if max_numbers == vec![]\
    \ {\n            max_numbers.push(max_number);\n        } else {\n           \
    \ if max_number > max_numbers[0] {\n                max_numbers.push(max_number);\n\
    \            } else {\n                max_numbers = max_numbers;\n          \
    \  }\n        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp0n4hjtrx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far = numbers[0];\n    for n in numbers {\n       \
    \ if n > max_so_far {\n            max_so_far = n;\n            max_so_far_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_index = 0;\n    let mut max_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n       \
    \     max_so_far = n;\n            max_so_far_index = n;\n        }\n    }\n \
    \   let mut max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far = n;\n \
    \           max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far = numbers[0];\n    for n in numbers {\n       \
    \ if n > max_so_far {\n            max_so_far = n;\n            max_so_far_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_index = 0;\n    let mut max_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n       \
    \     max_so_far = n;\n            max_so_far_index = n;\n        }\n    }\n \
    \   let mut max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far = n;\n \
    \           max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far = numbers[0];\n    for n in numbers {\n       \
    \ if n > max_so_far {\n            max_so_far = n;\n            max_so_far_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_index = 0;\n    let mut max_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n       \
    \     max_so_far = n;\n            max_so_far_index = n;\n        }\n    }\n \
    \   let mut max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far = n;\n \
    \           max_so_f\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdzv62eoc.rs:92:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n80 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n81 | \
    \        if n > max_so_far {\n   |                           - this delimiter\
    \ might not be properly closed...\n...\n84 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n92 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `max_so_f` in this scope\n  --> /tmp/tmpdzv62eoc.rs:83:13\n   |\n\
    83 |             max_so_f\n   |             ^^^^^^^^ help: a local variable with\
    \ a similar name exists: `max_so_far`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdzv62eoc.rs:80:5\n   |\n5  |   fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n80 | /     for n in numbers {\n81\
    \ | |         if n > max_so_far {\n82 | |             max_so_far = n;\n83 | |\
    \             max_so_f\n...  |\n91 | |     assert_eq!(candidate(vec![3, 2, 3,\
    \ 100, 3]), vec![3, 3, 3, 100, 100]);\n92 | | }\n   | |__^ expected struct `Vec`,\
    \ found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_element = number;\n            max_number = number;\n\
    \        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx23i0bh5.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx23i0bh5.rs:10:27\n   |\n6  |     let mut max_element\
    \ = numbers[0];\n   |                           ---------- expected due to this\
    \ value\n...\n10 |             max_element = number;\n   |                   \
    \        ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_element = *number;\n   |            \
    \               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx23i0bh5.rs:11:26\n\
    \   |\n7  |     let mut max_number = numbers[0];\n   |                       \
    \   ---------- expected due to this value\n...\n11 |             max_number =\
    \ number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             max_number\
    \ = *number;\n   |                          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling\
    \ = 0;\n    let mut max_so_far_rolling_index = 0;\n    for n in numbers {\n  \
    \      if n > max_so_far_rolling {\n            max_so_far_rolling = n;\n    \
    \        max_so_far_rolling_index = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling\
    \ = 0;\n    let mut max_so_far_rolling_rolling_index = 0;\n    for n in numbers\
    \ {\n        if n > max_so_far_rolling_rolling {\n            max_so_far_rolling_rolling\
    \ = n;\n            max_so_far_rolling_rolling_index = n;\n        }\n    }\n\
    \    let mut max_so_far_rolling_rolling_rolling = 0;\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far_rolling_rolling_rolling\
    \ {\n            max_so_far_rolling_rolling_rolling = n;\n            max_so_far_rolling_rolling_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_index = 0;\n  \
    \  for n in numbers {\n        if n > max_so_far_rolling_rolling_rolling {\n \
    \           max_so_far_rolling_rolling_rolling_rolling = n;\n            max_so_far_rolling_rolling_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far_rolling_rolling_rolling_rolling\
    \ {\n            max_so_far_rolling_rolling_rolling_rolling = n;\n           \
    \ max_so_far_rolling_rolling_rolling_index = n;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_rolling_rolling_rolling_index = 0;\n    for n in numbers\
    \ {\n        if n > max_so_far_rolling_rolling_rolling_rolling {\n           \
    \ max_so_far_rolling_rolling_rolling_rolling = n;\n            max_so_far_rolling_rolling_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_f\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpln0v2qll.rs:71:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n61 |  \
    \   for n in numbers {\n   |                      - this delimiter might not be\
    \ properly closed...\n62 |         if n > max_so_f\n63 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n71 | }\n   |   ^\n\nerror: expected\
    \ `{`, found `}`\n  --> /tmp/tmpln0v2qll.rs:63:1\n   |\n62 |         if n > max_so_f\n\
    \   |         -- this `if` expression has a condition, but no block\n63 | }\n\
    \   | ^ expected `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpln0v2qll.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for n in numbers {\n    \
    \    if n > max_so_far {\n            max_so_far = n;\n            max_so_far_index\
    \ = n;\n            max_so_far_rolling_max = n;\n        }\n        if n == max_so_far\
    \ {\n            max_so_far_rolling_max += max_so_far_index;\n        }\n    }\n\
    \    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ocw_2nq.rs:19:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n19 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_element =\
    \ numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n        if\
    \ n > max_element {\n            max_element = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_element);\n  \
    \  result.extend_from_slice(&numbers[max_index..]);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpohpiuxvz.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpohpiuxvz.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n       \
    \     max_so_far = n;\n        }\n        if n > max_so_far_so_far {\n       \
    \     max_so_far_so_far = n;\n        }\n    }\n    vec![max_so_far, max_so_far_so_far]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpwubp29u1.rs:6:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp81tv503p.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp81tv503p.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp81tv503p.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            result.push(max_number);\n\
    \            max_number = number;\n        } else {\n            max_number =\
    \ number;\n        }\n    }\n    result.push(max_number);\n    result\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpx1epbp9h.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = numbers.iter().position(|&x| x ==\
    \ n).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpwrznm6l7.rs:14:68\n     |\n\
    14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_pos\
    \ = 0;\n    let mut max_so_far_neg = 0;\n    for n in numbers {\n        if n\
    \ > max_so_far {\n            max_so_far = n;\n            max_so_far_pos = max_so_far_pos\
    \ + 1;\n        } else {\n            max_so_far_neg = max_so_far_neg + 1;\n \
    \       }\n    }\n    if max_so_far_neg > max_so_far_pos {\n        max_so_far_neg\n\
    \    } else {\n        max_so_far_pos\n    }\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu8jp9wa2.rs:18:9\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n18 |         max_so_far_neg\n   |         ^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu8jp9wa2.rs:20:9\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n20 |         max_so_far_pos\n   |         ^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `{integer}`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n    let mut max_element\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_element {\n            max_element = number;\n        }\n        result.push(max_element);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8jd3qjy5.rs:9:21\n  |\n9 |\
    \         if number > max_element {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_element`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8jd3qjy5.rs:10:27\n   |\n7  |     let mut max_element\
    \ = numbers[0];\n   |                           ---------- expected due to this\
    \ value\n...\n10 |             max_element = number;\n   |                   \
    \        ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_element = *number;\n   |            \
    \               +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_pos =\
    \ 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos] > max_value {\n\
    \            max_value = numbers[pos];\n            max_pos = pos;\n        }\n\
    \    }\n    vec![max_value; max_pos + 1]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpwe923z4e.rs:6:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far_so_far {\n\
    \            max_so_far_so_far = max_so_far;\n            max_so_far = n;\n  \
    \      }\n        max_so_far_so_far = max_so_far_so_far.max(&n);\n    }\n    max_so_far_so_far.clone_from_slice(&numbers[..]);\n\
    \    max_so_far_so_far\n}\n\nfn main() {\n    let candidate = rolling_max;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp71olqi1w.rs:13:51\n   |\n\
    13 |         max_so_far_so_far = max_so_far_so_far.max(&n);\n   |            \
    \                                       ^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider removing the borrow\n   |\n13 -         max_so_far_so_far\
    \ = max_so_far_so_far.max(&n);\n13 +         max_so_far_so_far = max_so_far_so_far.max(n);\n\
    \   | \n\nerror[E0599]: no method named `clone_from_slice` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp71olqi1w.rs:15:23\n   |\n15 |     max_so_far_so_far.clone_from_slice(&numbers[..]);\n\
    \   |                       ^^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp71olqi1w.rs:16:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     max_so_far_so_far\n\
    \   |     ^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n == max_so_far {\n            max_so_far_rolling_index += 1;\n            max_so_far_rolling\
    \ += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_index = 0;\n\
    \    let mut max_so_far_rolling_rolling = 0;\n    for n in numbers {\n       \
    \ if n == max_so_far {\n            max_so_far_rolling_rolling_index += 1;\n \
    \           max_so_far_rolling_rolling += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling = 0;\n    for n in numbers\
    \ {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling += n;\n        }\n   \
    \ }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index = 0;\n    let\
    \ mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for n in numbers {\n\
    \        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling += n;\n      \
    \  }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling_rolling += n;\n\
    \        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling_roll\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8vhucx78.rs:68:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n56 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n57 | \
    \        if n == max_so_far {\n   |                            - this delimiter\
    \ might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n68 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index`\
    \ in this scope\n  --> /tmp/tmp8vhucx78.rs:58:13\n   |\n58 |             max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_rolling_rolling_rolling_rolling_index`\n\
    \nerror[E0425]: cannot find value `max_so_far_rolling_rolling_rolling_rolling_roll`\
    \ in this scope\n  --> /tmp/tmp8vhucx78.rs:59:13\n   |\n59 |             max_so_far_rolling_rolling_rolling_rolling_roll\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `max_so_far_rolling_rolling_rolling_rolling_rolling`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8vhucx78.rs:56:5\n   |\n5  | \
    \  fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                 \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n56 | /     for n in numbers {\n57 | |         if n == max_so_far {\n58 |\
    \ |             max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n59 | |             max_so_far_rolling_rolling_rolling_rolling_roll\n\
    ...  |\n67 | |     assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3,\
    \ 100, 100]);\n68 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed e"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpbu4cqejq.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut i = 0;\n    while i < numbers.len()\
    \ {\n        if numbers[i] > max_value {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n        i += 1;\n    }\n    for i in 0..numbers.len()\
    \ {\n        if i == max_index {\n            result.push(numbers[i]);\n     \
    \   } else {\n            result.push(max_value);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpaev79b8u.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = numbers[0];\n    for &n in numbers {\n        if n > max_value {\n       \
    \     max_value = n;\n            max_index = n;\n        }\n    }\n    vec![max_index;\
    \ numbers.len()]\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjwvke5eq.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in numbers.iter().rev() {\n        if i > max_number\
    \ {\n            max_number = i;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa_n_xl8k.rs:9:16\n  |\n9 |\
    \         if i > max_number {\n  |                ^^^^^^^^^^\n  |            \
    \    |\n  |                expected `&isize`, found `isize`\n  |             \
    \   help: consider borrowing here: `&max_number`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpa_n_xl8k.rs:10:26\n   |\n7  |     let mut max_number = numbers[0];\n\
    \   |                          ---------- expected due to this value\n...\n10\
    \ |             max_number = i;\n   |                          ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \           max_number = *i;\n   |                          +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpl2vdvsbm.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &num in numbers {\n        if num > max_value\
    \ {\n            max_value = num;\n            max_index = result.len();\n   \
    \     }\n        result.push(num);\n    }\n    result[max_index..].to_owned()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbwl9rscm.rs:9:9\n  |\n9 |\
    \     for &num in numbers {\n  |         ^^^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `num`\n  |\n \
    \ = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbwl9rscm.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index =\
    \ 0;\n    for number in numbers {\n        if number > max_number {\n        \
    \    max_number = number;\n            max_index = numbers.iter().position(|x|\
    \ x == max_number).unwrap();\n        }\n    }\n    numbers.iter().take(max_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp56zbs49k.rs:11:55\n\
    \   |\n11 |             max_index = numbers.iter().position(|x| x == max_number).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp56zbs49k.rs:14:36\n\
    \     |\n14   |     numbers.iter().take(max_index).collect()\n     |         \
    \                           ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n        if max_numbers == Vec::new()\
    \ {\n            max_numbers.push(number);\n        } else {\n            if number\
    \ > max_numbers[0] {\n                max_numbers.push(number);\n            }\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpacsztg89.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n == max_so_far {\n            max_so_far_rolling_index += 1;\n            max_so_far_rolling\
    \ += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_index = 0;\n\
    \    let mut max_so_far_rolling_rolling = 0;\n    for n in numbers {\n       \
    \ if n == max_so_far {\n            max_so_far_rolling_rolling_index += 1;\n \
    \           max_so_far_rolling_rolling += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling = 0;\n    for n in numbers\
    \ {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling += n;\n        }\n   \
    \ }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index = 0;\n    let\
    \ mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for n in numbers {\n\
    \        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling += n;\n      \
    \  }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling_rolling += n;\n\
    \        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling_roll\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8vhucx78.rs:68:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n56 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n57 | \
    \        if n == max_so_far {\n   |                            - this delimiter\
    \ might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n68 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index`\
    \ in this scope\n  --> /tmp/tmp8vhucx78.rs:58:13\n   |\n58 |             max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_rolling_rolling_rolling_rolling_index`\n\
    \nerror[E0425]: cannot find value `max_so_far_rolling_rolling_rolling_rolling_roll`\
    \ in this scope\n  --> /tmp/tmp8vhucx78.rs:59:13\n   |\n59 |             max_so_far_rolling_rolling_rolling_rolling_roll\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `max_so_far_rolling_rolling_rolling_rolling_rolling`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8vhucx78.rs:56:5\n   |\n5  | \
    \  fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                 \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n56 | /     for n in numbers {\n57 | |         if n == max_so_far {\n58 |\
    \ |             max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n59 | |             max_so_far_rolling_rolling_rolling_rolling_roll\n\
    ...  |\n67 | |     assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3,\
    \ 100, 100]);\n68 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed e"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n > max_value {\n            max_value = n;\n\
    \        }\n    }\n    for n in numbers {\n        if n == max_value {\n     \
    \       result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpp2mh0esh.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result.push(n);\n    }\n    result[max_index] = max_value;\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpata93rx6.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpata93rx6.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp81tv503p.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp81tv503p.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp81tv503p.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for idx in 1..numbers.len() {\n        if numbers[idx] > max_value {\n\
    \            max_value = numbers[idx];\n            max_idx = idx;\n        }\n\
    \    }\n    vec![max_value, max_idx]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfo35dzti.rs:14:21\n   |\n\
    14 |     vec![max_value, max_idx]\n   |                     ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     vec![max_value, max_idx.try_into().unwrap()]\n\
    \   |                            ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for \n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp1m0i9jxf.rs:79:1\n  \
    \ |\n79 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1m0i9jxf.rs:9:21\n\
    \  |\n9 |         if number > max_so_far {\n  |                     ^^^^^^^^^^\n\
    \  |                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:16:21\n\
    \   |\n16 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:17:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n17 |             max_so_far = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n17 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:23:21\n\
    \   |\n23 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:24:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n24 |             max_so_far = number;\n   |\
    \           "
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = 0;\n        }\n   \
    \     if number == max_number {\n            max_index += 1;\n        }\n    }\n\
    \    let mut max_numbers = Vec::new();\n    for i in 0..max_index {\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers.reverse();\n    max_numbers\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpte3acwzv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_index = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling = max_so_far;\n    for\
    \ number in numbers.iter().rev() {\n        if number > max_so_far {\n       \
    \     max_so_far_rolling = number;\n        }\n    }\n    let mut max_so_far_rolling_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_rolling_index += 1;\n        }\n    }\n  \
    \  let mut max_so_far_rolling_rolling = max_so_far_rolling;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_rolling\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_rolling_rolling_index += 1;\n        }\n \
    \   }\n    let mut max_so_far_rolling_rolling_rolling = max_so_far_rolling_rolling;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far_rolling_rolling_rolling = number;\n        }\n    }\n\
    \    let mut max_so_far_rolling_rolling_rolling_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_rolling_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling = max_so_far_rolling_rolling_rolling;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far_rolling_rolling_rolling = number;\n        }\n    }\n\
    \    let mut max_so_far_rolling_rolling_rolling_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_rolling_rolling\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpgv6dth0k.rs:74:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n63 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n64 |         if number > max_so_far {\n   |  \
    \                              - this delimiter might not be properly closed...\n\
    65 |             max_so_far_rolling_rolling_rolling\n66 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpgv6dth0k.rs:9:21\n  |\n9 |         if number\
    \ > max_so_far {\n  |                     ^^^^^^^^^^\n  |                    \
    \ |\n  |                     expected `&isize`, found `isize`\n  |           \
    \          help: consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgv6dth0k.rs:10:26\n   |\n6  |     let mut max_so_far =\
    \ numbers[0];\n   |                          ---------- expected due to this value\n\
    ...\n10 |             max_so_far = number;\n   |                          ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             max_so_far = *number;\n   |                          +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgv6dth0k.rs:16:21\n   |\n16 |\
    \         if number > max_so_far {\n   |                     ^^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgv6dth0k.rs:22:21\n   |\n22 |         if number\
    \ > max_so_far {\n   |                     ^^^^^^^^^^\n   |                  \
    \   |\n   |                     expected `&isize`, found `isize`\n   |       \
    \              help: consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgv6dth0k.rs:23:34\n   |\n20 |     let mut max_so_far_rolling\
    \ = max_so_far;\n   |                               "
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = vec![];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpoqr_59st.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    let mut max_index = 0;\n    for number in numbers {\n        if number >\
    \ max_number {\n            max_number = number;\n            max_index = result.len();\n\
    \        }\n        result.push(number);\n    }\n    result.push(max_number);\n\
    \    result.insert(max_index, max_number);\n    result\n}\n\nfn main() {\n   \
    \ let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp9abrl2ag.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = vec![];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n        max_numbers.push(number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp4g3j1d2n.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result.push(n);\n    }\n    result[max_index] = max_value;\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpata93rx6.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpata93rx6.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp6a09vlrv.rs:68:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n57 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n58 | \
    \        if n > max_so_far {\n   |                           - this delimiter\
    \ might not be properly closed...\n59 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling\n\
    60 | }\n   | - ...as it matches this but it has different indentation\n...\n68\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\
    \ in this scope\n  --> /tmp/tmp6a09vlrv.rs:47:13\n   |\n47 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\n\
    \nerror[E0425]: cannot find value `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\
    \ in this scope\n  --> /tmp/tmp6a09vlrv.rs:53:13\n   |\n53 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\n\
    \nerror[E0425]: cannot find value `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling`\
    \ in this scope\n  --> /tmp/tmp6a09vlrv.rs:59:13\n   |\n59 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_ind"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpu4qixkpv.rs:9:26\n\
    \  |\n9 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpu4qixkpv.rs:10:27\n\
    \   |\n10 |             max_element = numbers[index];\n   |                  \
    \         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu4qixkpv.rs:11:25\n   |\n7  |\
    \     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = index;\n   |           \
    \              ^^^^^ expected `usize`, found `&isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for n in numbers {\n        if n > max {\n            max = n;\n         \
    \   max_idx = 1;\n        }\n        if n == max {\n            max_idx += 1;\n\
    \        }\n    }\n    vec![max; max_idx]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpcndlmzo4.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpendoowqf.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_index_so_far = 0;\n    for n in numbers\
    \ {\n        if n == max_so_far {\n            max_so_far_rolling_index += 1;\n\
    \            max_so_far_rolling_index_so_far += 1;\n        }\n    }\n    let\
    \ mut max_so_far_rolling_index_so_far_rolling_index = 0;\n    for n in numbers\
    \ {\n        if n == max_so_far {\n            max_so_far_rolling_index_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_so_far_rolling_index_so_far\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_so_far_rolling_index_so_far\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index_so_far\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index_so_far\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index_so_far\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index_so_far_rolling_index_so_far\
    \ += 1;\n        }\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_j0mp159.rs:65:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n53 |  \
    \   for n in numbers {\n   |                      - this delimiter might not be\
    \ properly closed...\n...\n57 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n65 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_j0mp159.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut i = 0;\n    while i < numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n        i += 1;\n    }\n    for i in 0..numbers.len()\
    \ {\n        if i == max_index {\n            result.push(max_number);\n     \
    \   } else {\n            result.push(numbers[i]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpanfgvfw9.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_index, max_element]\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpfbozdwyr.rs:9:26\n\
    \  |\n9 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpfbozdwyr.rs:10:27\n\
    \   |\n10 |             max_element = numbers[index];\n   |                  \
    \         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfbozdwyr.rs:11:25\n   |\n7  |\
    \     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = index;\n   |           \
    \              ^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfbozdwyr.rs:14:10\n   |\n14 |     vec![max_index, max_element]\n\
    \   |          ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n14 |     vec![max_index.try_into().unwrap(), max_element]\n   |       \
    \            ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_index = -1;\n        }\n        if n == max {\n            max_index\
    \ += 1;\n        }\n    }\n    vec![max; max_index + 1]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpv5yhocc2.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpv5yhocc2.rs:11:25\n   |\n11 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_element = numbers[0];\n\
    \    for n in numbers {\n        if n > max_element {\n            max_element\
    \ = n;\n        }\n    }\n    for n in numbers {\n        if n == max_element\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpuqokmwwx.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_element {\n         \
    \   max_element = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ max_element = max_element;\n    let mut max_index = max_index;\n    let mut\
    \ max_elements = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = \n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmptnp87y7v.rs:119:3\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \                                              - unclosed delimiter\n...\n107\
    \ |     for i in 0..numbers.len() {\n    |                               - unclosed\
    \ delimiter\n108 |         if numbers[i] > max_element {\n    |              \
    \                       - this delimiter might not be properly closed...\n...\n\
    111 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    119 | }\n    |   ^\n\nerror: expected expression, found `}`\n   --> /tmp/tmptnp87y7v.rs:111:1\n\
    \    |\n111 | }\n    | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptnp87y7v.rs:11:25\n   |\n7  |     let mut max_index: usize = 0;\n\
    \   |                        ----- expected due to this type\n...\n11 |      \
    \       max_index = n;\n   |                         ^ expected `usize`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmptnp87y7v.rs:107:5\n\
    \    |\n5   |   fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                       ---------- expected `Vec<isize>` because\
    \ of return type\n...\n107 | /     for i in 0..numbers.len() {\n108 | |      \
    \   if numbers[i] > max_element {\n109 | |             max_element = numbers[i];\n\
    110 | |             max_index = \n...   |\n118 | |     assert_eq!(candidate(vec![3,\
    \ 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n119 | | }\n    | |__^ expected struct\
    \ `Vec`, found `()`\n    |\n    = note: expected struct `Vec<isize>`\n       \
    \     found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for n in numbers {\n        if n > max {\n            max = n;\n         \
    \   max_idx = 1;\n        } else {\n            max_idx += 1;\n        }\n   \
    \ }\n    let mut result = vec![max];\n    for i in 1..max_idx {\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpn8c3v57d.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_index = 0;\n        }\n        if n == max {\n            max_index +=\
    \ 1;\n        }\n    }\n    let mut result = vec![max];\n    for i in 0..max_index\
    \ {\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpmnueuxey.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_value {\n \
    \           max_value = number;\n        }\n        result.push(max_value);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspxawvj4.rs:9:21\n  |\n9 |\
    \         if number > max_value {\n  |                     ^^^^^^^^^\n  |    \
    \                 |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpspxawvj4.rs:10:25\n   |\n7  |     let mut max_value\
    \ = numbers[0];\n   |                         ---------- expected due to this\
    \ value\n...\n10 |             max_value = number;\n   |                     \
    \    ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_value = *number;\n   |              \
    \           +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.is_empty() {\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpd7fxp4fh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_iter\
    \ = numbers.iter().cloned().collect::<Vec<_>>();\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_so_far {\n            max_so_far = numbers[i];\n\
    \        }\n        if max_so_far_iter[i] > max_so_far {\n            max_so_far_iter\
    \ = max_so_far_iter.iter_mut().skip(i).collect();\n        }\n    }\n    max_so_far_iter\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&mut isize`\n    --> /tmp/tmpdiy3sf2n.rs:13:66\n    \
    \ |\n13   |             max_so_far_iter = max_so_far_iter.iter_mut().skip(i).collect();\n\
    \     |                                                                  ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&mut\
    \ isize>`\n     |\n     = help: the trait `FromIterator<&mut isize>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp81tv503p.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp81tv503p.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp81tv503p.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = 0;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_index = 1;\n        }\n        else {\n            max_index += 1;\n\
    \        }\n    }\n    let mut result = vec![max];\n    for i in 1..max_index\
    \ {\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpawrsclf3.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n \
    \   max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbz8avha_.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpbz8avha_.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for idx in 1..numbers.len() {\n        if numbers[idx] > max_value {\n\
    \            max_value = numbers[idx];\n            max_idx = idx;\n        }\n\
    \    }\n    vec![max_value; max_idx + 1]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp0e0c_vg8.rs:6:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_element {\n         \
    \   max_element = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ max_elements: Vec<isize> = vec![max_element];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_element {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n        max_elements.push(max_element);\n\
    \    }\n    max_elements.extend_from_slice(&numbers[max_index..]);\n    max_elements\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp81c0gszv.rs:11:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = n;\n   |               \
    \          ^ expected `usize`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = n;\n        }\n    }\n    numbers.windows(2).filter(|&x|\
    \ x == max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptk7qwx7r.rs:11:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = n;\n   |               \
    \          ^ expected `usize`, found `isize`\n\nerror[E0277]: can't compare `&[isize]`\
    \ with `usize`\n  --> /tmp/tmptk7qwx7r.rs:14:38\n   |\n14 |     numbers.windows(2).filter(|&x|\
    \ x == max_index).collect()\n   |                                      ^^ no implementation\
    \ for `&[isize] == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not\
    \ implemented for `&[isize]`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&[B] as PartialEq<[A; N]>>\n             <&[T]\
    \ as PartialEq<Vec<U, A>>>\n             <&mut [B] as PartialEq<[A; N]>>\n   \
    \          <&mut [T] as PartialEq<Vec<U, A>>>\n             <[A; N] as PartialEq<&[B]>>\n\
    \             <[A; N] as PartialEq<&mut [B]>>\n             <[A; N] as PartialEq<[B;\
    \ N]>>\n             <[A; N] as PartialEq<[B]>>\n           and 3 others\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&[isize]`\n    --> /tmp/tmptk7qwx7r.rs:14:52\n     |\n14   |     numbers.windows(2).filter(|&x|\
    \ x == max_index).collect()\n     |                                          \
    \          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&[isize]>`\n\
    \     |\n     = help: the trait `FromIterator<&[isize]>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n == max_so_far {\n            max_so_far_rolling_index += 1;\n            max_so_far_rolling\
    \ += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_index = 0;\n\
    \    let mut max_so_far_rolling_rolling = 0;\n    for n in numbers {\n       \
    \ if n == max_so_far {\n            max_so_far_rolling_rolling_index += 1;\n \
    \           max_so_far_rolling_rolling += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling = 0;\n    for n in numbers\
    \ {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling += n;\n        }\n   \
    \ }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index = 0;\n    let\
    \ mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for n in numbers {\n\
    \        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling += n;\n      \
    \  }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling_rolling += n;\n\
    \        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling_roll\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8vhucx78.rs:68:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n56 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n57 | \
    \        if n == max_so_far {\n   |                            - this delimiter\
    \ might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n68 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index`\
    \ in this scope\n  --> /tmp/tmp8vhucx78.rs:58:13\n   |\n58 |             max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_rolling_rolling_rolling_rolling_index`\n\
    \nerror[E0425]: cannot find value `max_so_far_rolling_rolling_rolling_rolling_roll`\
    \ in this scope\n  --> /tmp/tmp8vhucx78.rs:59:13\n   |\n59 |             max_so_far_rolling_rolling_rolling_rolling_roll\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `max_so_far_rolling_rolling_rolling_rolling_rolling`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8vhucx78.rs:56:5\n   |\n5  | \
    \  fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                 \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n56 | /     for n in numbers {\n57 | |         if n == max_so_far {\n58 |\
    \ |             max_so_far_rolling_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n59 | |             max_so_far_rolling_rolling_rolling_rolling_roll\n\
    ...  |\n67 | |     assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3,\
    \ 100, 100]);\n68 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed e"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpendoowqf.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp81tv503p.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp81tv503p.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp81tv503p.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   let mut max_value = numbers[0];\n    for &n in numbers {\n        if n > max\
    \ {\n            max = n;\n            max_idx = 1;\n        }\n        if n ==\
    \ max {\n            max_idx += 1;\n        }\n        if max_idx > numbers.len()\
    \ {\n            break;\n        }\n        max_value = max;\n        max = n;\n\
    \        max_idx = 1;\n    }\n    vec![max_value; max_idx]\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxphj40b1.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for index in 1..numbers.len() {\n        if numbers[index] > max_value\
    \ {\n            max_value = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_value, max_index]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpud6ad1oy.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpud6ad1oy.rs:14:21\n   |\n14 |     vec![max_value, max_index]\n   | \
    \                    ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     vec![max_value, max_index.try_into().unwrap()]\n   |   \
    \                           ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \            max_so_far_rolling_max = number;\n        }\n    }\n    numbers.iter_mut().enumerate().for_each(|(i,\
    \ number)| {\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n        }\n    });\n    vec![max_so_far_rolling_max, max_so_far,\
    \ max_so_far_index]\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb11u5nnk.rs:17:21\n   |\n\
    17 |         if number > max_so_far_rolling_max {\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&mut isize`, found\
    \ `isize`\n   |                     help: consider mutably borrowing here: `&mut\
    \ max_so_far_rolling_max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb11u5nnk.rs:18:38\n\
    \   |\n8  |     let mut max_so_far_rolling_max = 0;\n   |                    \
    \                  - expected due to this value\n...\n18 |             max_so_far_rolling_max\
    \ = number;\n   |                                      ^^^^^^ expected `isize`,\
    \ found `&mut isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18\
    \ |             max_so_far_rolling_max = *number;\n   |                      \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb11u5nnk.rs:21:46\n\
    \   |\n21 |     vec![max_so_far_rolling_max, max_so_far, max_so_far_index]\n \
    \  |                                              ^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n21 |     vec![max_so_far_rolling_max,\
    \ max_so_far, max_so_far_index.try_into().unwrap()]\n   |                    \
    \                                          ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &i in numbers {\n        if i > max_element {\n            max_element\
    \ = i;\n            max_index = i;\n        }\n    }\n    let mut max_elements\
    \ = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i] != max_element\
    \ {\n            max_elements.push(max_element);\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_elements.push(max_element);\n\
    \    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsc0gaxrh.rs:8:9\n  |\n8 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsc0gaxrh.rs:19:25\n   |\n7  |     let mut max_index\
    \ = -1;\n   |                         -- expected due to this value\n...\n19 |\
    \             max_index = i;\n   |                         ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result.push(n);\n    }\n    result[max_index] = max_value;\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpata93rx6.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpata93rx6.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ max_numbers = vec![];\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n        max_numbers.push(numbers[i]);\n    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpccvj3ftk.rs:11:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = n;\n   |               \
    \          ^ expected `usize`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling\
    \ = [max_so_far];\n    for i in 1..numbers.len() {\n        let mut max_so_far_rolling_copy\
    \ = [max_so_far];\n        for n in max_so_far_rolling {\n            max_so_far_rolling_copy.push(n);\n\
    \        }\n        max_so_far_rolling = max_so_far_rolling_copy;\n    }\n   \
    \ max_so_far_rolling\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmp1szeb0he.rs:18:37\n   |\n18 |             max_so_far_rolling_copy.push(n);\n\
    \   |                                     ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1szeb0he.rs:22:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n22 |     max_so_far_rolling\n   |     ^^^^^^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |     |\n   |     expected struct `Vec`,\
    \ found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \             found array `[isize; 1]`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_numbers.push(max_number);\n            max_number = number;\n\
    \        } else {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpc19bxqe4.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &i in numbers {\n        if i > max_value {\n            max_value\
    \ = i;\n            max_index = i;\n        }\n    }\n    let mut max_value =\
    \ max_index;\n    let mut max_index = -1;\n    for i in numbers {\n        if\
    \ i > max_value {\n            max_value = i;\n            max_index = i;\n  \
    \      }\n    }\n    let mut max_value = max_index;\n    let mut max_index = -1;\n\
    \    for i in numbers {\n        if i > max_value {\n            max_value = i;\n\
    \            max_index = i;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = -1;\n    for i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    let mut max_value = max_index;\n    let mut max_index = -1;\n    for i in\
    \ numbers {\n        if i > max_value {\n            max_value = i;\n        \
    \    max_index = i;\n        }\n    }\n    let mut max_value = max_index;\n  \
    \  let mut max_index = -1;\n    for i in numbers {\n        if i > max_value {\n\
    \            max_value = i;\n            max_index = i;\n        }\n    }\n  \
    \  let mut max_value = max_index;\n    let mut max_index = -1;\n    for i in numbers\
    \ {\n        if i > max_value {\n            max_value = i;\n            max_index\
    \ = i;\n        }\n    }\n    let mut max_value = max_index;\n    let mut max_index\
    \ = -1;\n    for i in numbers {\n        if i > max_value {\n            max_value\
    \ = i;\n            max_index = i;\n        }\n    }\n    let mut max_value =\
    \ max_index;\n    let mut max_index = -1;\n    for i in numbers {\n        if\
    \ i > max_value {\n            max_value = i;\n            max_index = i;\n  \
    \      }\n    }\n    let mut max_value = max_index;\n    let mut max_index = -1;\n\
    \    for i in numbers {\n        if i > max_value {\n            max_value = i;\n\
    \            max_index = i;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = -1;\n    for i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    let mut max_value = max_index;\n    let mut max_index = -1;\n    for i in\
    \ numbers {\n        if i > max_value {\n            max_value = i;\n        \
    \    max_index = i;\n        }\n    }\n    let mut max_value = max_index;\n  \
    \  let mut max_index = -1;\n    for i in numbers {\n        if i > max_value {\n\
    \            max_value = i;\n            max_index = i;\n        }\n    }\n  \
    \  let mut max_value = max_index;\n    let mut max_index = -1;\n    for i in numbers\
    \ {\n        if i > max_value {\n            max_value = i;\n\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpawzarr5a.rs:124:3\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \                                              - unclosed delimiter\n...\n112\
    \ |     for i in numbers {\n    |                      - unclosed delimiter\n\
    113 |         if i > max_value {\n    |                          - this delimiter\
    \ might not be properly closed...\n...\n116 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n124 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpawzarr5a.rs:8:9\n  |\n8 |     for &i in numbers {\n  | \
    \        ^^    ------- this expression has type `Option<isize>`\n  |         |\n\
    \  |         expected `isize`, found reference\n  |         help: you can probably\
    \ remove the explicit borrow: `i`\n  |\n  = note:   expected type `isize`\n  \
    \        found reference `&_`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpawzarr5a.rs:112:5\n\
    \    |\n5   |   fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                       ---------- expected `Vec<isize>` because\
    \ of return type\n...\n112 | /     for i in numbers {\n113 | |         if i >\
    \ max_value {\n114 | |             max_value = i;\n115 | |\n...   |\n123 | | \
    \    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n\
    124 | | }\n    | |__^ expected struct `Vec`, found `()`\n    |\n    = note: expected\
    \ struct `Vec<isize>`\n            found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &i in numbers {\n        if i > max_value {\n            max_value\
    \ = i;\n            max_index = i;\n        }\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        if i == max_index {\n            result.push(max_value);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprqnp_qj1.rs:8:9\n  |\n8 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprqnp_qj1.rs:16:17\n   |\n16 |         if i ==\
    \ max_index {\n   |                 ^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         if i == max_index.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprqnp_qj1.rs:19:25\n   |\n19 |             result.push(i);\n\
    \   |                         ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |             result.push(i.try_into().unwrap());\n   |      \
    \                    ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result[max_index] = n;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoa8cwiz9.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            result.push(max_number);\n\
    \            max_number = number;\n        } else {\n            max_number =\
    \ number;\n        }\n    }\n    result.push(max_number);\n    result\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpx1epbp9h.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = vec![];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n        if max_numbers == vec![]\
    \ {\n            max_numbers.push(max_number);\n        } else {\n           \
    \ max_numbers.push(max_number);\n            if max_number > max_numbers[0] {\n\
    \                max_numbers = vec![max_number];\n            } else {\n     \
    \           max_numbers.push(max_numbers[0]);\n            }\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmphr81vgah.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max_value {\n      \
    \      result.push(max_index);\n            max_value = numbers[i];\n        \
    \    max_index = i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6l5vhkai.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6l5vhkai.rs:19:25\n   |\n8  |     let mut max_index\
    \ = -1;\n   |                         -- expected due to this value\n...\n19 |\
    \             max_index = i;\n   |                         ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n        }\n        if number\
    \ > max_so_far_so_far {\n            max_so_far_so_far = number;\n        }\n\
    \    }\n    max_so_far_so_far.iter().rev().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc3ms1b2f.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc3ms1b2f.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc3ms1b2f.rs:12:21\n\
    \   |\n12 |         if number > max_so_far_so_far {\n   |                    \
    \ ^^^^^^^^^^^^^^^^^\n   |                     |\n   |                     expected\
    \ `&isize`, found `isize`\n   |                     help: consider borrowing here:\
    \ `&max_so_far_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc3ms1b2f.rs:13:33\n\
    \   |\n7  |     let mut max_so_far_so_far = numbers[0];\n   |                \
    \                 ---------- expected due to this value\n...\n13 |           \
    \  max_so_far_so_far = number;\n   |                                 ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |             max_so_far_so_far = *number;\n   |                          \
    \       +\n\nerror[E0599]: no method named `iter` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpc3ms1b2f.rs:16:23\n   |\n16 |     max_so_far_so_far.iter().rev().cloned().collect()\n\
    \   |                       ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n \
    \   max_numbers.extend_from_slice(&max_index..);\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzb44d7qp.rs:19:35\n   |\n\
    19 |     max_numbers.extend_from_slice(&max_index..);\n   |                  \
    \                 ^^^^^^^^^^^^ expected `&[isize]`, found struct `RangeFrom`\n\
    \   |\n   = note: expected reference `&[isize]`\n                 found struct\
    \ `RangeFrom<&{integer}>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    for i in numbers.iter().rev() {\n        if i > max_value {\n           \
    \ result.push(max_index);\n            max_value = i;\n            max_index =\
    \ i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqlqza_gp.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqlqza_gp.rs:16:16\n   |\n16 |         if i >\
    \ max_value {\n   |                ^^^^^^^^^\n   |                |\n   |    \
    \            expected `&isize`, found `isize`\n   |                help: consider\
    \ borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqlqza_gp.rs:18:25\n\
    \   |\n7  |     let mut max_value = numbers[0];\n   |                        \
    \ ---------- expected due to this value\n...\n18 |             max_value = i;\n\
    \   |                         ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n18 |             max_value = *i;\n\
    \   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqlqza_gp.rs:19:25\n\
    \   |\n8  |     let mut max_index = -1;\n   |                         -- expected\
    \ due to this value\n...\n19 |             max_index = i;\n   |              \
    \           ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n19 |             max_index = *i;\n   |                   \
    \      +\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(max_value);\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmppap0wybo.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy8wifg_e.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpy8wifg_e.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpy8wifg_e.rs:17:17\n   |\n17 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for value in numbers {\n        if value > max_value {\n            max_value\
    \ = value;\n        }\n    }\n    for value in numbers {\n        if value ==\
    \ max_value {\n            result.push(value);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpcmbmg2gv.rs:13:18\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for value in numbers {\n\
    \    |                  ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for value in numbers {\n    |                  ^^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n8   |   \
    \  for value in &numbers {\n    |                  +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for index in 1..numbers.len() {\n        if\
    \ numbers[index] > max_value {\n            max_value = numbers[index];\n    \
    \        max_index = index;\n        }\n    }\n    result.push(max_value);\n \
    \   result.push(max_index);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpnxv25ysm.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnxv25ysm.rs:16:17\n   |\n16 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers\
    \ = Vec::new();\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_numbers.clear();\n        }\n\
    \        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpnoogoqbf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers[max_index..].iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpspg5cbhi.rs:11:25\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n11  |             max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n    |                         ^^^^^^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\n    = note: borrow occurs due to deref coercion\
    \ to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n8   |     for number in &numbers\
    \ {\n    |                   +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(max_value);\n            result.push(max_index);\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp_775gnhb.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_775gnhb.rs:18:25\n   |\n18 |             result.push(max_index);\n\
    \   |                         ^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n18 |             result.push(max_index.try_into().unwrap());\n\
    \   |                                  ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n \
    \   max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbz8avha_.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpbz8avha_.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &i in numbers {\n        if i > max_value {\n            max_value\
    \ = i;\n            max_index = i;\n        }\n    }\n    vec![max_index..]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6c5tands.rs:8:9\n  |\n8 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6c5tands.rs:14:10\n   |\n14 |     vec![max_index..]\n\
    \   |          ^^^^^^^^^^^ expected `isize`, found struct `RangeFrom`\n   |\n\
    \   = note: expected type `isize`\n            found struct `RangeFrom<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpl2vdvsbm.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_numbers.push(max_number);\n            max_number = numbers[i];\n\
    \        } else {\n            max_number = numbers[i];\n        }\n    }\n  \
    \  max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp146o1jvi.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_iter\
    \ = numbers.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.windows(2).collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.flatten().collect::<Vec<_>>();\n    max_so_far_iter.sort_unstable();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n\
    \    max_so_far_iter.dedup();\n    max_so_far_iter.dedup();\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<&[isize]>` is not an iterator\n   --> /tmp/tmpppab1fd2.rs:9:47\n\
    \    |\n9   |       let mut max_so_far_iter = max_so_far_iter.flatten().collect::<Vec<_>>();\n\
    \    |                                                 ^^^^^^^ `Vec<&[isize]>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<&[isize]>: Iterator`\n            which is required by `&mut\
    \ Vec<&[isize]>: Iterator`\n            `[&[isize]]: Iterator`\n            which\
    \ is required by `&mut [&[isize]]: Iterator`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpppab1fd2.rs:5:40\n  |\n5 | fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  |    -----------                         ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpbu4cqejq.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for n in numbers {\n    \
    \    if n > max_so_far {\n            max_so_far = n;\n            max_so_far_index\
    \ = n;\n            max_so_far_rolling_max = n;\n        }\n        if n == max_so_far\
    \ {\n            max_so_far_rolling_max += max_so_far;\n            max_so_far\
    \ = max_so_far_rolling_max;\n            max_so_far_index += 1;\n            max_so_far_rolling_max\
    \ = 0;\n        }\n    }\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far_index;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_roll\n}\n\nfn main() {\n   \
    \ let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `max_so_far_roll` in this scope\n  -->\
    \ /tmp/tmp_nse6gkj.rs:59:5\n   |\n59 |     max_so_far_roll\n   |     ^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            max_value\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_value {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpe0wg2h9a.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..max_index {\n        max_numbers.push(numbers[i]);\n    }\n \
    \   max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpd9qqqz3o.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling = max_so_far;\n    for\
    \ n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_index = 0;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_rolling = max_so_far_rolling;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling = max_so_far_rolling_rolling;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling\
    \ = max_so_far_rolling_rolling_rolling;\n    for n in numbers {\n        if n\
    \ == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling = n;\n\
    \        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling\
    \ = max_so_far_rolling_rolling_rolling_rolling\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgpam18o8.rs:68:108\n   |\n\
    68 |     let mut max_so_far_rolling_rolling_rolling_rolling_rolling = max_so_far_rolling_rolling_rolling_rolling\n\
    \   |                                                                        \
    \                                    ^ help: add `;` here\n69 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgpam18o8.rs:5:40\n  |\n\
    5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------  \
    \                       ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for idx in 1..numbers.len() {\n        if numbers[idx] > max {\n         \
    \   max = numbers[idx];\n            max_idx = idx;\n        }\n    }\n    vec![max;\
    \ max_idx + 1]\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpb8b37t85.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n == max_so_far_index {\n            max_so_far_rolling_index += 1;\n      \
    \      max_so_far_rolling += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling = 0;\n    for n in numbers {\n\
    \        if n == max_so_far_rolling_index {\n            max_so_far_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling += n;\n        }\n    }\n    let\
    \ mut max_so_far_rolling_rolling_rolling_index = 0;\n    let mut max_so_far_rolling_rolling_rolling\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far_rolling_rolling_index\
    \ {\n            max_so_far_rolling_rolling_rolling_index += 1;\n            max_so_far_rolling_rolling_rolling\
    \ += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for n\
    \ in numbers {\n        if n == max_so_far_rolling_rolling_rolling_index {\n \
    \           max_so_far_rolling_rolling_rolling_rolling_index += 1;\n         \
    \   max_so_far_rolling_rolling_rolling_rolling += n;\n        }\n    }\n    let\
    \ mut max_so_far_rolling_rolling_rolling_rolling_rolling_index = 0;\n    let mut\
    \ max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n    for n in numbers\
    \ {\n        if n == max_so_far_rolling_rolling_rolling_rolling_index {\n    \
    \        max_so_far_rolling_rolling_rolling_rolling_rolling_index += 1;\n    \
    \        max_so_far_rolling_rolling_rolling_rolling_rolling += n;\n        }\n\
    \    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index =\
    \ 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_rolling =\
    \ 0;\n    for n in numbers {\n        if n == max_so_far_rolling_rolling_rolling_rolling_\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpbnoedoms.rs:66:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n56 |  \
    \   for n in numbers {\n   |                      - this delimiter might not be\
    \ properly closed...\n57 |         if n == max_so_far_rolling_rolling_rolling_rolling_\n\
    58 | }\n   | - ...as it matches this but it has different indentation\n...\n66\
    \ | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpbnoedoms.rs:58:1\n\
    \   |\n57 |         if n == max_so_far_rolling_rolling_rolling_rolling_\n   |\
    \         -- this `if` expression has a condition, but no block\n58 | }\n   |\
    \ ^ expected `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbnoedoms.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpbu4cqejq.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpjoiix99d.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpu4qixkpv.rs:9:26\n\
    \  |\n9 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpu4qixkpv.rs:10:27\n\
    \   |\n10 |             max_element = numbers[index];\n   |                  \
    \         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu4qixkpv.rs:11:25\n   |\n7  |\
    \     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = index;\n   |           \
    \              ^^^^^ expected `usize`, found `&isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n       \
    \     max_so_far = n;\n            max_so_far_so_far = max_so_far;\n        }\n\
    \        if n > max_so_far_so_far {\n            max_so_far_so_far = n;\n    \
    \    }\n    }\n    max_so_far_so_far.iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpcqmd6ucq.rs:17:23\n   |\n17 |     max_so_far_so_far.iter().cloned().collect()\n\
    \   |                       ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_iter\
    \ = numbers.iter().cloned().skip(1).max_by_key(|&x| x);\n    let mut max_so_far_iter\
    \ = max_so_far_iter.map(|x| x - 1);\n    let mut max_so_far_iter = max_so_far_iter.take_while(|&x|\
    \ x < max_so_far);\n    let mut max_so_far_iter = max_so_far_iter.collect();\n\
    \    max_so_far_iter.iter().cloned().collect::<Vec<_>>()\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<isize>` is not an iterator\n   --> /tmp/tmp_wviz44z.rs:9:47\n\
    \    |\n9   |       let mut max_so_far_iter = max_so_far_iter.take_while(|&x|\
    \ x < max_so_far);\n    |                                                 ^^^^^^^^^^\
    \ `Option<isize>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<isize>: Iterator`\n            which\
    \ is required by `&mut Option<isize>: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    let mut max_index = 0;\n    for n in numbers {\n        if n > max_number\
    \ {\n            max_number = n;\n            max_index = result.len();\n    \
    \    }\n        result[max_index] = n;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp9x72n1kc.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    for number in numbers.iter().rev() {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n        result.push(max_number);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp43iu2x19.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp43iu2x19.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpendoowqf.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n        if\
    \ n > max_number {\n            max_number = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_number);\n   \
    \ result.push(max_index);\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpas3zaqav.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpas3zaqav.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpas3zaqav.rs:17:17\n   |\n17 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max: Vec<isize> = vec![max_so_far];\n\
    \    for i in 1..max_so_far_index {\n        max_so_far_rolling_max.push(numbers[i\
    \ - 1]);\n    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpotrl7hdk.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpotrl7hdk.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_numbers.push(max_number);\n            max_number = number;\n\
    \        } else {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpc19bxqe4.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_pos =\
    \ 0;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_pos = 0;\n        }\n        if n == max_value {\n   \
    \         max_pos++;\n        }\n    }\n    let mut result = Vec::new();\n   \
    \ for i in 0..max_pos {\n        result.push(max_value);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp0hzduqhg.rs:14:20\n\
    \   |\n14 |             max_pos++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n14 |             { let tmp =\
    \ max_pos; max_pos += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    14 -             max_pos++;\n14 +             max_pos += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp0hzduqhg.rs:8:9\n  |\n8 |     for &n in numbers\
    \ {\n  |         ^^    ------- this expression has type `Option<isize>`\n  | \
    \        |\n  |         expected `isize`, found reference\n  |         help: you\
    \ can probably remove the explicit borrow: `n`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if i == max_index\
    \ {\n            result.push(max_value);\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpzonz6ijs.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for value in numbers {\n        if value > max_value {\n            max_value\
    \ = value;\n        }\n    }\n    for value in numbers {\n        if value ==\
    \ max_value {\n            result.push(value);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpcmbmg2gv.rs:13:18\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for value in numbers {\n\
    \    |                  ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for value in numbers {\n    |                  ^^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n8   |   \
    \  for value in &numbers {\n    |                  +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = numbers.iter().position(|&x| x ==\
    \ max_number).unwrap();\n        }\n    }\n    numbers.iter().take(max_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmppmbukacb.rs:14:36\n     |\n\
    14   |     numbers.iter().take(max_index).collect()\n     |                  \
    \                  ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpendoowqf.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for \n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp1m0i9jxf.rs:79:1\n  \
    \ |\n79 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1m0i9jxf.rs:9:21\n\
    \  |\n9 |         if number > max_so_far {\n  |                     ^^^^^^^^^^\n\
    \  |                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:16:21\n\
    \   |\n16 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:17:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n17 |             max_so_far = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n17 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:23:21\n\
    \   |\n23 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1m0i9jxf.rs:24:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n24 |             max_so_far = number;\n   |\
    \           "
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpu4qixkpv.rs:9:26\n\
    \  |\n9 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpu4qixkpv.rs:10:27\n\
    \   |\n10 |             max_element = numbers[index];\n   |                  \
    \         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu4qixkpv.rs:11:25\n   |\n7  |\
    \     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = index;\n   |           \
    \              ^^^^^ expected `usize`, found `&isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result.push(max_number);\n    result[max_index..]\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm2en66s0.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm2en66s0.rs:11:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_number = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2en66s0.rs:16:17\n\
    \   |\n16 |     result.push(max_number);\n   |                 ^^^^^^^^^^\n  \
    \ |                 |\n   |                 expected `&isize`, found `isize`\n\
    \   |                 help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm2en66s0.rs:17:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n17 |     result[max_index..]\n\
    \   |     ^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found slice `[&isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n               found slice `[&isize]`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpendoowqf.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz0ks50g.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxz0ks50g.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxz0ks50g.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxz0ks50g.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = i;\n        }\n        i += 1;\n    }\n\
    \    vec![max_so_far, max_so_far_index]\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpk_lzbh2h.rs:11:32\n\
    \   |\n11 |             max_so_far_index = i;\n   |                          \
    \      ^ help: a local variable with a similar name exists: `n`\n\nerror[E0425]:\
    \ cannot find value `i` in this scope\n  --> /tmp/tmpk_lzbh2h.rs:13:9\n   |\n\
    13 |         i += 1;\n   |         ^ help: a local variable with a similar name\
    \ exists: `n`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for num in numbers {\n        if num > max_so_far {\n            max_so_far\
    \ = num;\n            max_so_far_index = num;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = max_so_far_index;\n    for num in numbers {\n        if num > max_so_far {\n\
    \            max_so_far_rolling_max_index = num;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_max = max_so_far;\n    for num in numbers {\n        if num\
    \ > max_so_far {\n            max_so_far_rolling_max = num;\n        }\n    }\n\
    \    let mut max_so_far_rolling_max_rolling_max_index = max_so_far_rolling_max_index;\n\
    \    for num in numbers {\n        if num > max_so_far {\n            max_so_far_rolling_max_rolling_max_index\
    \ = num;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max = max_so_far_rolling_max;\n\
    \    for num in numbers {\n        if num > max_so_far {\n            max_so_far_rolling_max_rolling_max\
    \ = num;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_index;\n    for num in numbers {\n    \
    \    if num > max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = num;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max;\n    for num in numbers {\n        if\
    \ num > max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = num;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_rolling_max_index;\n    for num in numbers\
    \ {\n        if num > max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = num;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max_rolling_max;\n    for num in numbers {\n\
    \        if num > max_so_far {\n            max_so\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_mor9wr5.rs:68:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n57 |  \
    \   for num in numbers {\n   |                        - unclosed delimiter\n58\
    \ |         if num > max_so_far {\n   |                             - this delimiter\
    \ might not be properly closed...\n59 |             max_so\n60 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n68 | }\n   |   ^\n\n\
    error[E0425]: cannot find value `max_so` in this scope\n  --> /tmp/tmp_mor9wr5.rs:59:13\n\
    \   |\n59 |             max_so\n   |             ^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_mor9wr5.rs:57:5\n   |\n5  | \
    \  fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                 \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n57 | /     for num in numbers {\n58 | |         if num > max_so_far {\n59\
    \ | |             max_so\n60 | | }\n...  |\n67 | |     assert_eq!(candidate(vec![3,\
    \ 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n68 | | }\n   | |__^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpbu4cqejq.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for value in numbers {\n        if value > max_value {\n            max_value\
    \ = value;\n        }\n        result.push(max_value);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp75ucxuk1.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_index, max_element]\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpfbozdwyr.rs:9:26\n\
    \  |\n9 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpfbozdwyr.rs:10:27\n\
    \   |\n10 |             max_element = numbers[index];\n   |                  \
    \         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfbozdwyr.rs:11:25\n   |\n7  |\
    \     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = index;\n   |           \
    \              ^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfbozdwyr.rs:14:10\n   |\n14 |     vec![max_index, max_element]\n\
    \   |          ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n14 |     vec![max_index.try_into().unwrap(), max_element]\n   |       \
    \            ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpl2vdvsbm.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling = max_so_far;\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index = 0;\n    for n\
    \ in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling = max_so_far;\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index = 0;\n    for n\
    \ in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling = max_so_far;\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index = 0;\n    for n\
    \ in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling = max_so_far;\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index = 0;\n    for n\
    \ in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling = max_so_far;\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index = 0;\n    for n\
    \ in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling = max_so_far;\n    for\
    \ n in numbers {\n        if n > max_so_far \n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpufgduot7.rs:91:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n81 |  \
    \   for n in numbers {\n   |                      - this delimiter might not be\
    \ properly closed...\n82 |         if n > max_so_far \n83 | }\n   | - ...as it\
    \ matches this but it has different indentation\n...\n91 | }\n   |   ^\n\nerror:\
    \ expected `{`, found `}`\n  --> /tmp/tmpufgduot7.rs:83:1\n   |\n82 |        \
    \ if n > max_so_far \n   |         -- this `if` expression has a condition, but\
    \ no block\n83 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpufgduot7.rs:5:40\n  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n  |    -----------                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_so_far = numbers[0];\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far =\
    \ n;\n        }\n    }\n    for n in numbers {\n        if n == max_so_far {\n\
    \            result.push(max_so_far);\n        }\n        max_so_far = n;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpwo5ipxs0.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_rolling_index = n;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_index_rolling_index = 0;\n    for n in numbers {\n      \
    \  if n > max_so_far {\n            max_so_far = n;\n            max_so_far_rolling_index\
    \ = n;\n            max_so_far_rolling_index_rolling_index = n;\n        }\n \
    \   }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index = 0;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far =\
    \ n;\n            max_so_far_rolling_index = n;\n            max_so_far_rolling_index_rolling_index\
    \ = n;\n            max_so_far_rolling_index_rolling_index_rolling_index = n;\n\
    \        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_rolling_index = n;\n            max_so_far_rolling_index_rolling_index\
    \ = n;\n            max_so_far_rolling_index_rolling_index_rolling_index = n;\n\
    \            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_rolling_index = n;\n            max_so_far_rolling_index_rolling_index\
    \ = n;\n            max_so_far_rolling_index_rolling_index_rolling_index = n;\n\
    \            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = n;\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_rolling_index = n;\n            max_so\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp6s1d7h8d.rs:73:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n60 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n61 | \
    \        if n > max_so_far {\n   |                           - this delimiter\
    \ might not be properly closed...\n...\n65 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n73 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `max_so` in this scope\n  --> /tmp/tmp6s1d7h8d.rs:64:13\n   |\n64\
    \ |             max_so\n   |             ^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6s1d7h8d.rs:60:5\n   |\n5  |   fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n60 | /     for n in numbers\
    \ {\n61 | |         if n > max_so_far {\n62 | |             max_so_far = n;\n\
    63 | |             max_so_far_rolling_index = n;\n...  |\n72 | |     assert_eq!(candidate(vec![3,\
    \ 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n73 | | }\n   | |__^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &num in numbers {\n        if num > max_value\
    \ {\n            max_value = num;\n            max_index = result.len();\n   \
    \     }\n        result.push(num);\n    }\n    result[max_index..].to_owned()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbwl9rscm.rs:9:9\n  |\n9 |\
    \     for &num in numbers {\n  |         ^^^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `num`\n  |\n \
    \ = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbwl9rscm.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            result.push(max_number);\n\
    \            max_number = number;\n        } else {\n            max_number =\
    \ number;\n        }\n    }\n    result.push(max_number);\n    result\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpx1epbp9h.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(max_value);\n            result.push(max_index);\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp29_hl9ra.rs:18:25\n   |\n\
    18 |             result.push(max_index);\n   |                         ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |           \
    \  result.push(max_index.try_into().unwrap());\n   |                         \
    \         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    for i in numbers {\n        if i == max_value {\n            result.push(max_index);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4hr5qk0o.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_index = 0;\n    let mut\
    \ max_so_far_rolling = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far_rolling_index = numbers.len()\
    \ - 1;\n            max_so_far_rolling = number;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_rolling_index = 0;\n    let mut max_so_far_rolling_rolling\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_rolling_index = numbers.len() - 1;\n     \
    \       max_so_far_rolling_rolling = number;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_rolling_rolling_index\
    \ = numbers.len() - 1;\n            max_so_far_rolling_rolling_rolling = number;\n\
    \        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_index\
    \ = numbers.len() - 1;\n            max_so_far_rolling_rolling_rolling_rolling\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_index\
    \ = numbers.len() - 1;\n            max_so_far_rolling_rolling_rolling_rolling\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwlbvrdf4.rs:67:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n56 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n57 |         if number > max_so_far {\n   |  \
    \                              - this delimiter might not be properly closed...\n\
    58 |             max_so\n59 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n67 | }\n   |   ^\n\nerror[E0425]: cannot find value `max_so`\
    \ in this scope\n  --> /tmp/tmpwlbvrdf4.rs:58:13\n   |\n58 |             max_so\n\
    \   |             ^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpwlbvrdf4.rs:9:21\n  |\n9 |         if number > max_so_far {\n  |\
    \                     ^^^^^^^^^^\n  |                     |\n  |             \
    \        expected `&isize`, found `isize`\n  |                     help: consider\
    \ borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwlbvrdf4.rs:10:26\n\
    \   |\n6  |     let mut max_so_far = numbers[0];\n   |                       \
    \   ---------- expected due to this value\n...\n10 |             max_so_far =\
    \ number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwlbvrdf4.rs:17:21\n   |\n17 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpwlbvrdf4.rs:19:34\n   |\n15 |     let mut max_so_far_rolling = 0;\n\
    \   |                                  - expected due to this value\n...\n19 |\
    \             max_so_far_rolling = number;\n   |                             \
    \     ^^^^^^ expected integer, found `&isize`\n   |\nhelp:"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \            max_so_far_rolling_max = number;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = numbers.iter().position(|&x| x == max_so_far_rolling_max).unwrap();\n    for\
    \ number in numbers {\n        if number > max_so_far_rolling_max {\n        \
    \    max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.iter().position(|&x| x == number).unwrap();\n        }\n    }\n  \
    \  let mut max_so_far_rolling_max_rolling_max = numbers[max_so_far_rolling_max_index];\n\
    \    for number in numbers {\n        if number > max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max = number;\n        }\n   \
    \ }\n    vec![max_so_far_rolling_max, max_so_far_rolling_max_rolling_max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable `max_so_far_index` is assigned to, but never used\n -->\
    \ /tmp/tmp1b8xnnsd.rs:7:13\n  |\n7 |     let mut max_so_far_index = 0;\n  |  \
    \           ^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_variables)]` on by\
    \ default\n  = note: consider using `_max_so_far_index` instead\n\nwarning: value\
    \ assigned to `max_so_far_index` is never read\n  --> /tmp/tmp1b8xnnsd.rs:12:13\n\
    \   |\n12 |             max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \   |             ^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ borrow of moved value: `numbers`\n   --> /tmp/tmp1b8xnnsd.rs:12:32\n    |\n\
    5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |             \
    \   ------- move occurs because `numbers` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n9   |     for number in numbers {\n    |  \
    \                 ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n12  |             max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \    |                                ^^^^^^^^^^^^^^ value borrowed here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `numbers`\n    = note: borrow occurs due to deref coercion to `[isize]`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n9   |     for number in &numbers {\n    |      \
    \             +\n\nerror[E0382]: borrow of moved value: `numbers`\n  --> /tmp/tmp1b8xnnsd.rs:20:44\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \        ------- move occurs because `numbers` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n...\n17 |     for number in numbers {\n   |\
    \                   ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n20 |             max_so_far_rolling_max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n   |                                    "
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for n in numbers {\n        if n > max {\n            max = n;\n         \
    \   max_idx = 1;\n        }\n        if n == max {\n            max_idx += 1;\n\
    \        }\n    }\n    let mut result = vec![max];\n    for i in 1..max_idx {\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpylr1ab_i.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_idx = 1;\n        }\n        if n == max_value {\n   \
    \         max_idx += 1;\n        }\n    }\n    let mut result = vec![max_value];\n\
    \    for i in 1..max_idx {\n        result.push(max_value);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo0z_i2az.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpbu4cqejq.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmptbkjqu3k.rs:14:68\n     |\n\
    14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = numbers.iter().position(|&x| x ==\
    \ n).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpwrznm6l7.rs:14:68\n     |\n\
    14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n\
    \        if i == max_index {\n            result.push(max_number);\n        }\
    \ else {\n            result.push(numbers[i]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpe3mt9u49.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    for index in numbers.iter().rev()\
    \ {\n        if index > max_index {\n            max_value = index;\n        \
    \    max_index = index;\n        }\n    }\n    result.push(max_value);\n    max_index\
    \ += 1;\n    for index in numbers.iter().rev() {\n        if index > max_index\
    \ {\n            result.push(index);\n            max_index = index;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpojcrqzmn.rs:11:20\n   |\n\
    11 |         if index > max_index {\n   |                    ^^^^^^^^^\n   | \
    \                   |\n   |                    expected `&isize`, found integer\n\
    \   |                    help: consider borrowing here: `&max_index`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpojcrqzmn.rs:12:25\n   |\n7  |     let mut max_value\
    \ = numbers[0];\n   |                         ---------- expected due to this\
    \ value\n...\n12 |             max_value = index;\n   |                      \
    \   ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n12 |             max_value = *index;\n   |               \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpojcrqzmn.rs:13:25\n\
    \   |\n9  |     let mut max_index = -1;\n   |                         -- expected\
    \ due to this value\n...\n13 |             max_index = index;\n   |          \
    \               ^^^^^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |             max_index = *index;\n   |               \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpojcrqzmn.rs:19:20\n\
    \   |\n19 |         if index > max_index {\n   |                    ^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found integer\n\
    \   |                    help: consider borrowing here: `&max_index`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpojcrqzmn.rs:20:25\n   |\n20 |             result.push(index);\n\
    \   |                         ^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n20 |             result.push(*index);\n\
    \   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpojcrqzmn.rs:21:25\n\
    \   |\n9  |     let mut max_index = -1;\n   |                         -- expected\
    \ due to this value\n...\n21 |             max_index = index;\n   |          \
    \               ^^^^^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n21 |             max_index = *index;\n   |               \
    \          +"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpendoowqf.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_element {\n         \
    \   max_element = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ max_element = max_element;\n    let mut max_index = max_index;\n    for n in\
    \ numbers {\n        if n > max_element {\n            max_element = n;\n    \
    \        max_index = n;\n        }\n    }\n    let mut max_element = max_element;\n\
    \    let mut max_index = max_index;\n    for n in numbers {\n        if n > max_element\
    \ {\n            max_element = n;\n            max_index = n;\n        }\n   \
    \ }\n    let mut max_element = max_element;\n    let mut max_index = max_index;\n\
    \    for n in numbers {\n        if n > max_element {\n            max_element\
    \ = n;\n            max_index = n;\n        }\n    }\n    let mut max_element\
    \ = max_element;\n    let mut max_index = max_index;\n    for n in numbers {\n\
    \        if n > max_element {\n            max_element = n;\n            max_index\
    \ = n;\n        }\n    }\n    let mut max_element = max_element;\n    let mut\
    \ max_index = max_index;\n    for n in numbers {\n        if n > max_element {\n\
    \            max_element = n;\n            max_index = n;\n        }\n    }\n\
    \    let mut max_element = max_element;\n    let mut max_index = max_index;\n\
    \    for n in numbers {\n        if n > max_element {\n            max_element\
    \ = n;\n            max_index = n;\n        }\n    }\n    let mut max_element\
    \ = max_element;\n    let mut max_index = max_index;\n    for n in numbers {\n\
    \        if n > max_element {\n            max_element = n;\n            max_index\
    \ = n;\n        }\n    }\n    let mut max_element = max_element;\n    let mut\
    \ max_index = max_index;\n    for n in numbers {\n        if n > max_element {\n\
    \            max_element = n;\n            max_index = n;\n        }\n    }\n\
    \    let mut max_element = max_element;\n    let mut max_index = max_index;\n\
    \    for n in numbers {\n        if n > max_element {\n            max_element\
    \ = n;\n            max_index = n;\n        }\n    }\n    let mut max_element\
    \ = max_element;\n    let mut max_index = max_index;\n    for n in numbers {\n\
    \        if n > max_element {\n            max_element = n;\n            max_index\
    \ = n;\n        }\n    }\n    let mut max_element = max_element;\n    let mut\
    \ max_index = max_index;\n    for n in numbers {\n        if n > max_element {\n\
    \            max_element = n;\n            max_index = n;\n        }\n    }\n\
    \    let mut max_element = max_element;\n    let mut max_index = max_index;\n\
    \    for n in numbers {\n        if n > max_element {\n            max_element\
    \ = \n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp9_82i1wt.rs:115:3\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \                                              - unclosed delimiter\n...\n104\
    \ |     for n in numbers {\n    |                      - unclosed delimiter\n\
    105 |         if n > max_element {\n    |                            - this delimiter\
    \ might not be properly closed...\n106 |             max_element = \n107 | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n115 | }\n\
    \    |   ^\n\nerror: expected expression, found `}`\n   --> /tmp/tmp9_82i1wt.rs:107:1\n\
    \    |\n107 | }\n    | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9_82i1wt.rs:11:25\n   |\n7  |     let mut max_index: usize = 0;\n\
    \   |                        ----- expected due to this type\n...\n11 |      \
    \       max_index = n;\n   |                         ^ expected `usize`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9_82i1wt.rs:19:25\n\
    \   |\n15 |     let mut max_index = max_index;\n   |                         ---------\
    \ expected due to this value\n...\n19 |             max_index = n;\n   |     \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9_82i1wt.rs:27:25\n   |\n23 |     let mut max_index = max_index;\n\
    \   |                         --------- expected due to this value\n...\n27 |\
    \             max_index = n;\n   |                         ^ expected `usize`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9_82i1wt.rs:35:25\n\
    \   |\n31 |     let mut max_index = max_index;\n   |                         ---------\
    \ expected due to this value\n...\n35 |             max_index = n;\n   |     \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9_82i1wt.rs:43:25\n   |\n39 |     let mut max_index = max_index;\n\
    \   |                         --------- expected due to this value\n...\n43 |\
    \             max_index = n;\n   |                         ^ expected `usize`,\
    \ found `isize`\n\nerror[E0308]: mismatched"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_element {\n         \
    \   max_element = n;\n            max_index = numbers.iter().position(|x| x ==\
    \ max_element).unwrap();\n        }\n    }\n    numbers.iter().take(max_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpmyh6yeqm.rs:11:55\n\
    \   |\n11 |             max_index = numbers.iter().position(|x| x == max_element).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpmyh6yeqm.rs:14:36\n\
    \     |\n14   |     numbers.iter().take(max_index).collect()\n     |         \
    \                           ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n \
    \   max_numbers.extend_from_slice(&max_index..);\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzb44d7qp.rs:19:35\n   |\n\
    19 |     max_numbers.extend_from_slice(&max_index..);\n   |                  \
    \                 ^^^^^^^^^^^^ expected `&[isize]`, found struct `RangeFrom`\n\
    \   |\n   = note: expected reference `&[isize]`\n                 found struct\
    \ `RangeFrom<&{integer}>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    let mut index = 0;\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_number = number;\n\
    \            max_index = index;\n        }\n        index += 1;\n    }\n    result.push(max_number);\n\
    \    result.push(max_index);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmphf0d70gg.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for index in 1..numbers.len() {\n        if\
    \ numbers[index] > max_value {\n            max_value = numbers[index];\n    \
    \        max_index = index;\n        }\n    }\n    result.push(max_value);\n \
    \   result.push(max_index);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbv7p3krd.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbv7p3krd.rs:16:17\n   |\n16 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpbu4cqejq.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_element {\n\
    \            max_element = number;\n            max_index = numbers.iter().position(|&number|\
    \ number == max_element).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpp4us4ya0.rs:14:36\n     |\n\
    14   |     numbers.iter().skip(max_index).collect()\n     |                  \
    \                  ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_pos = 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos]\
    \ > max_value {\n            max_value = numbers[pos];\n            max_pos =\
    \ pos;\n        }\n    }\n    for i in 1..max_pos {\n        result.push(numbers[i]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp7rnloctu.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &num in numbers {\n        if num > max_value\
    \ {\n            max_value = num;\n            max_index = result.len();\n   \
    \     }\n        result.push(num);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdh5u6d2o.rs:9:9\n  |\n9 |\
    \     for &num in numbers {\n  |         ^^^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `num`\n  |\n \
    \ = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpdh5u6d2o.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdh5u6d2o.rs:17:17\n   |\n17 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n == max_so_far {\n            max_so_far_rolling_index += 1;\n            max_so_far_rolling\
    \ += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_index = 0;\n\
    \    let mut max_so_far_rolling_rolling = 0;\n    for n in numbers {\n       \
    \ if n == max_so_far_rolling_index {\n            max_so_far_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling += n;\n        }\n    }\n    let\
    \ mut max_so_far_rolling_rolling_rolling_index = 0;\n    let mut max_so_far_rolling_rolling_rolling\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far_rolling_rolling_index\
    \ {\n            max_so_far_rolling_rolling_rolling_index += 1;\n            max_so_far_rolling_rolling_rolling\
    \ += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for n\
    \ in numbers {\n        if n == max_so_far_rolling_rolling_rolling_index {\n \
    \           max_so_far_rolling_rolling_rolling_rolling_index += 1;\n         \
    \   max_so_far_rolling_rolling_rolling_rolling += n;\n        }\n    }\n    let\
    \ mut max_so_far_rolling_rolling_rolling_rolling_rolling_index = 0;\n    let mut\
    \ max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n    for n in numbers\
    \ {\n        if n == max_so_far_rolling_rolling_rolling_rolling_index {\n    \
    \        max_so_far_rolling_rolling_rolling_rolling_rolling_index += 1;\n    \
    \        max_so_far_rolling_rolling_rolling_rolling_rolling += n;\n        }\n\
    \    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index =\
    \ 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_rolling =\
    \ 0;\n    for n in numbers {\n        if n == max_so_far_rolling_rolling_rolling_rolling_roll\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3r_rppmn.rs:66:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n56 |  \
    \   for n in numbers {\n   |                      - this delimiter might not be\
    \ properly closed...\n57 |         if n == max_so_far_rolling_rolling_rolling_rolling_roll\n\
    58 | }\n   | - ...as it matches this but it has different indentation\n...\n66\
    \ | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp3r_rppmn.rs:58:1\n\
    \   |\n57 |         if n == max_so_far_rolling_rolling_rolling_rolling_roll\n\
    \   |         -- this `if` expression has a condition, but no block\n58 | }\n\
    \   | ^ expected `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3r_rppmn.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99eic08s.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpjoiix99d.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ic23dq0.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2ic23dq0.rs:16:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n16 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_pos =\
    \ 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos] > max_value {\n\
    \            max_value = numbers[pos];\n            max_pos = pos;\n        }\n\
    \    }\n    numbers[max_pos..].iter().cloned().collect()\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpwlp4cf7m.rs:6:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpl2vdvsbm.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n    for n in numbers\
    \ {\n        if n > result.last_mut().unwrap() {\n            result.last_mut().unwrap()\
    \ = n;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaf58hd79.rs:8:16\n  |\n8 |\
    \         if n > result.last_mut().unwrap() {\n  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&mut isize`\n  |\nhelp: consider dereferencing the\
    \ borrow\n  |\n8 |         if n > *result.last_mut().unwrap() {\n  |         \
    \       +\n\nerror[E0070]: invalid left-hand side of assignment\n --> /tmp/tmpaf58hd79.rs:9:40\n\
    \  |\n9 |             result.last_mut().unwrap() = n;\n  |             --------------------------\
    \ ^\n  |             |\n  |             cannot assign to this expression\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0070, E0308.\nFor more information about an error, try `rustc --explain E0070`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpendoowqf.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \        }\n    }\n    max_numbers.insert(0, max_number);\n    max_numbers.insert(0,\
    \ max_index);\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwhzqilag.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwhzqilag.rs:11:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_number = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwhzqilag.rs:12:65\n\
    \   |\n12 |             max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \   |                                                                 ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             max_index = numbers.iter().rev().position(|&x| x == *number).unwrap();\n\
    \   |                                                                 +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpwhzqilag.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpwhzqilag.rs:16:27\n   |\n16 |     max_numbers.insert(0, max_index);\n\
    \   |                           ^^^^^^^^^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     max_numbers.insert(0, max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 5 "
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_element = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_element {\n\
    \            max_element = number;\n        }\n    }\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_element {\n            result.push(number);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6cplfxqe.rs:9:21\n  |\n9 |\
    \         if number > max_element {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_element`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6cplfxqe.rs:10:27\n   |\n7  |     let mut max_element\
    \ = numbers[0];\n   |                           ---------- expected due to this\
    \ value\n...\n10 |             max_element = number;\n   |                   \
    \        ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_element = *number;\n   |            \
    \               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6cplfxqe.rs:14:21\n\
    \   |\n14 |         if number > max_element {\n   |                     ^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_element`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6cplfxqe.rs:18:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n18 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = vec![];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result[max_index] = n;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp26v_lnc.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpp26v_lnc.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpu4qixkpv.rs:9:26\n\
    \  |\n9 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpu4qixkpv.rs:10:27\n\
    \   |\n10 |             max_element = numbers[index];\n   |                  \
    \         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu4qixkpv.rs:11:25\n   |\n7  |\
    \     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = index;\n   |           \
    \              ^^^^^ expected `usize`, found `&isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_7ja1d5b.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for n in numbers {\n        if n > max_number\
    \ {\n            max_number = n;\n            max_numbers.push(n);\n        }\
    \ else {\n            max_numbers.push(n);\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp8_11m3np.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
