name: HumanEval_7_filter_by_substring
language: rs
prompt: "/// Filter an input list of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n\
  /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"),\
  \ String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings:\
  \ Vec<String>, substring: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.contains(substring) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.contains(substring) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()"]
stop_tokens:
- "\n}"
