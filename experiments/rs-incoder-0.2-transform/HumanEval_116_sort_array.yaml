name: HumanEval_116_sort_array
language: rs
prompt: "/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
  /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
  \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut res = vec![];\n    let mut counts = vec![];\n    for i\
    \ in arr {\n        if i & 1 == 1 {\n            counts.push(1);\n        } else\
    \ {\n            counts.push(0);\n        }\n    }\n    for i in counts {\n  \
    \      res.push(i);\n    }\n    res", "    let mut sorted_arr = arr.clone();\n\
    \    sorted_arr.sort_by(|a, b| {\n        if a > b {\n            -1\n       \
    \ } else {\n            1\n        }\n    });\n    sorted_arr", "    let mut res\
    \ = vec![];\n    for i in arr {\n        if i & 1 == 1 {\n            res.push(i);\n\
    \        }\n    }\n    res.sort_by_key(|x| x.to_dec());\n    res", "    let mut\
    \ res = vec![];\n    let mut ones = 0;\n    for x in arr {\n        if x % 2 ==\
    \ 1 {\n            ones += 1;\n        }\n        res.push(x);\n    }\n    if\
    \ ones == 0 {\n        res.sort();\n    } else {\n        res.sort_by(|a, b| {\n\
    \            let mut a = a % 10;\n            let mut b = b % 10;\n          \
    \  if a > b {\n                (a, b)\n            } else {\n                (b,\
    \ a)\n            }\n        });\n    }\n    res", "    let mut result = vec![];\n\
    \    let mut ones = vec![];\n    for i in arr {\n        if i & 1 != 0 {\n   \
    \         ones.push(i);\n        } else {\n            result.push(i);\n     \
    \   }\n    }\n    ones = sort_array(ones);\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in result {\n        result.push(i);\n    }\n    result", " \
    \   let mut result = vec![];\n    let mut counter = vec![];\n    for x in arr\
    \ {\n        if x != 0 {\n            counter.push(x);\n        } else {\n   \
    \         result.push(*counter.clone());\n            counter.clear();\n     \
    \   }\n    }\n    result.push(*counter.clone());\n    result", "    let mut result\
    \ = vec![];\n    let mut ones = 0;\n    let mut dec = 0;\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1;\n        } else {\n            dec\
    \ += x;\n        }\n    }\n    if ones == 0 {\n        result = arr;\n    } else\
    \ {\n        let mut i = 0;\n        while i < arr.len() {\n            if arr[i]\
    \ == 1 {\n                result.push(dec);\n                dec += 1;\n     \
    \           i += 1;\n            } else {\n                result.push(arr[i]);\n\
    \                i += 1;\n            }\n        }\n    }\n    result", "    let\
    \ mut result = vec![];\n    let mut ones = vec![];\n    for i in arr {\n     \
    \   if i & 1 == 1 {\n            ones.push(i);\n        } else {\n           \
    \ result.push(i);\n        }\n    }\n    let mut i = 0;\n    while i < ones.size()\
    \ {\n        let mut j = 0;\n        while j < result.size() && result[j] >= ones[i]\
    \ {\n            j += 1\n        }\n        result.swap(i, j);\n        i += 1;\n\
    \    }\n    result", "    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by_key(|x|\
    \ {\n        let mut res = 0;\n        for &b in x.to_binary() {\n           \
    \ res += (b == '1');\n        }\n        res\n    });\n    sorted_arr", "    let\
    \ mut sorted_arr = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        if\
    \ x == 1 {\n            0\n        } else {\n            1\n        }\n    });\n\
    \    sorted_arr", "    let mut result = vec![];\n    let mut ones = 0;\n    let\
    \ mut decimal = 0;\n    for x in arr {\n        if x == 1 {\n            ones\
    \ += 1;\n        } else {\n            decimal += x;\n        }\n    }\n    if\
    \ ones > 0 {\n        result.push(decimal);\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1;\n        } else {\n            decimal\
    \ -= x;\n        }\n    }\n    if ones > 0 {\n        result.push(decimal);\n\
    \    }\n    result", "    let mut result = vec![];\n    let mut ones = vec![];\n\
    \    for i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n    \
    \    } else {\n            result.push(i);\n        }\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    result.sort_by_key(|&i| i as isize);\n\
    \    result", "    arr.sort_by(|a, b| {\n        if a > b {\n            1\n \
    \       } else {\n            -1\n        }\n    });\n    arr", "    let mut arr\
    \ = arr.to_owned();\n    let mut len = arr.len();\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = 0;\n    let mut cnt = 0;\n    while i < len {\n\
    \        if arr[i] == 1 {\n            cnt += 1;\n            i += 1;\n      \
    \  } else {\n            if cnt > j {\n                k = j;\n              \
    \  j = cnt;\n                cnt = k;\n            }\n            cnt -= 1;\n\
    \            i += 1;\n        }\n    }\n    arr.swap(i, j);\n    arr", "    let\
    \ mut sorted_arr = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        let\
    \ mut count = 0;\n        for &i in &mut sorted_arr {\n            if i == 1 {\n\
    \                count += 1;\n            }\n        }\n        count\n    });\n\
    \    sorted_arr", "    let mut result = vec![];\n    let mut ones = vec![];\n\
    \    for i in arr {\n        if i & 1 != 0 {\n            ones.push(i);\n    \
    \    } else {\n            result.push(i);\n        }\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    result.sort_by_key(|x| x.to_dec());\n\
    \    result", "    let mut res = vec![];\n    let mut ones = vec![];\n    for\
    \ i in arr {\n        if i & 1 != 0 {\n            ones.push(i);\n        } else\
    \ {\n            res.push(i);\n        }\n    }\n    for i in ones {\n       \
    \ res.insert(res.iter().position(|&x| x == i).unwrap(), i);\n    }\n    res",
  "    let mut res = vec![];\n    let mut cnt = 0;\n    for i in arr.iter() {\n  \
    \      if cnt > 0 {\n            cnt += i as isize;\n            res.push(i);\n\
    \        }\n        if cnt == 0 {\n            cnt += i as isize;\n          \
    \  res.push(i);\n        }\n    }\n    res", "    let mut sorted_arr = arr.clone();\n\
    \    sorted_arr.sort();\n    sorted_arr", "    let mut arr = arr.to_owned();\n\
    \    arr.sort_by(|a, b| {\n        match a.checked_mul(2).is_zero() {\n      \
    \      true => a.checked_add(b).unwrap(),\n            false => b.checked_add(a).unwrap(),\n\
    \        }\n    });\n    arr", "    let mut arr = arr.to_owned();\n    arr.sort_by_key(|&x|\
    \ {\n        let mut bin = String::new();\n        for &i in x.to_binary() {\n\
    \            bin += &i;\n        }\n        bin.len()\n    });\n    arr", "  \
    \  let mut result = vec![];\n    let mut ones = vec![];\n    let mut decimals\
    \ = vec![];\n    let mut max_decimal = 0;\n    for &i in arr {\n        if i &\
    \ 1 == 1 {\n            ones.push(i);\n        } else {\n            decimals.push(i);\n\
    \        }\n        if i > max_decimal {\n            max_decimal = i;\n     \
    \   }\n    }\n    let mut i = 0;\n    while i < ones.size() {\n        let mut\
    \ j = i;\n        while j < ones.size() && ones[j] & 1 == 0 {\n            j +=\
    \ 1\n        }\n        let mut k = i;\n        while k < ones.size() && ones[k]\
    \ & 1 == 1 {\n            k += 1\n        }\n        if k > j {\n            result.push(ones[j]);\n\
    \            i = j;\n        } else {\n            result.push(decimals[k]);\n\
    \            i = k;\n        }\n    }\n    result", "    let mut res = vec![];\n\
    \    for i in arr.iter() {\n        if i & 1 == 1 {\n            res.push(i);\n\
    \        }\n    }\n    res.sort_by_key(|x| x.to_dec());\n    res", "    let mut\
    \ res = vec![];\n    let mut ones = vec![];\n    for i in arr.iter() {\n     \
    \   if i & 1 != 0 {\n            ones.push(i);\n        } else {\n           \
    \ res.push(i);\n        }\n    }\n    let mut sorted_ones = vec![];\n    for i\
    \ in ones.iter() {\n        sorted_ones.push(i);\n    }\n    for i in sorted_ones.iter()\
    \ {\n        res.push(i);\n    }\n    for i in res.iter() {\n        res.push(i);\n\
    \    }\n    res", "    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n\
    \    sorted_arr", "    let mut res = vec![];\n    let mut cnt = 0;\n    for x\
    \ in arr {\n        if x == 1 {\n            cnt += 1;\n        } else {\n   \
    \         cnt -= 1;\n        }\n        res.push(x);\n    }\n    if cnt > 0 {\n\
    \        res.sort();\n    } else {\n        res.reverse();\n    }\n    res", " \
    \   let mut result = vec![];\n    let mut ones = vec![];\n    for i in arr {\n\
    \        if i & 1 == 1 {\n            ones.push(i);\n        } else {\n      \
    \      result.push(i);\n        }\n    }\n    result.sort_by_key(|i| ones[i as\
    \ usize]);\n    result", "    arr.iter().cloned().sort_by_key(|&x| {\n       \
    \ let mut ones = 0;\n        let mut dec = 0;\n        for x in &x {\n       \
    \     if *x == 1 {\n                ones += 1;\n            } else {\n       \
    \         dec += *x;\n            }\n        }\n        (ones, dec)\n    }).collect()",
  "    arr.sort_by_key(|x| {\n        x.iter().map(|y| {\n            y as isize\n\
    \        }).filter(|&x| x == 1).count()\n    })", "    let mut result = vec![];\n\
    \    let mut ones = vec![];\n    let mut decimal = vec![];\n    for i in arr {\n\
    \        if i & 1 == 1 {\n            ones.push(i);\n        } else {\n      \
    \      decimal.push(i);\n        }\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in decimal {\n        result.push(i);\n    }\n    result", " \
    \   let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable_by_key(|x|\
    \ {\n        let mut bin = String::new();\n        for i in x.to_binary() {\n\
    \            bin.push_str(&i.to_string());\n        }\n        bin.len()\n   \
    \ });\n    sorted_arr", "    let mut result = vec![];\n    let mut ones = vec![];\n\
    \    let mut zeros = vec![];\n    for i in arr.iter() {\n        if i & 1 != 0\
    \ {\n            zeros.push(i);\n        } else {\n            ones.push(i);\n\
    \        }\n    }\n    for i in zeros.iter() {\n        result.push(i);\n    }\n\
    \    for i in ones.iter() {\n        result.push(i);\n    }\n    for i in result.iter()\
    \ {\n        result.push(i);\n    }\n    result", "    let mut sorted_arr = arr.clone();\n\
    \    sorted_arr.sort_by_key(|x| {\n        if x == 1 {\n            0\n      \
    \  } else {\n            1\n        }\n    });\n    sorted_arr", "    let mut\
    \ result = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if\
    \ i & 1 != 0 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    if ones.len() > result.len() {\n        result.extend(ones);\n\
    \    } else {\n        result.extend(&ones[..]);\n    }\n    result.sort_unstable();\n\
    \    result", "    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n\
    \    sorted_arr.sort_by(|a, b| {\n        let mut a_ones = a;\n        let mut\
    \ b_ones = b;\n        while a_ones > b_ones {\n            a_ones -= 1;\n   \
    \     }\n        while b_ones > a_ones {\n            b_ones -= 1;\n        }\n\
    \        a_ones - b_ones\n    });\n    sorted_arr", "    let mut res = vec![];\n\
    \    let mut ones = 0;\n    for el in arr {\n        if el == 1 {\n          \
    \  ones += 1;\n        } else {\n            ones = 0;\n        }\n        res.push(el);\n\
    \    }\n    if ones == 0 {\n        res.sort();\n    } else {\n        res.sort_by(|a,\
    \ b| {\n            let mut cmp = a.cmp(b);\n            if cmp == 0 {\n     \
    \           cmp = a.cmp(&ones);\n            }\n            cmp\n        });\n\
    \    }\n    res", "    arr.sort_by(|a, b| {\n        if a > b {\n            1\n\
    \        } else {\n            -1\n        }\n    })", "    let mut arr = arr.to_owned();\n\
    \    arr.sort_by_key(|&x| {\n        match x {\n            0 => 1,\n        \
    \    1 => 1,\n            2 => 2,\n            3 => 3,\n            4 => 4,\n\
    \            _ => 0,\n        }\n    });\n    arr", "    let mut arr = arr.to_owned();\n\
    \    arr.sort_by_key(|x| {\n        let mut bits = x.to_bits();\n        let mut\
    \ count = 0;\n        while !bits.is_zero() {\n            count += 1;\n     \
    \       bits = bits.next_bits();\n        }\n        count as isize\n    });\n\
    \    arr", "    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by_key(|x|\
    \ {\n        let mut bin = String::new();\n        for x in &mut bin {\n     \
    \       *x = *x + '0';\n        }\n        let mut ones = bin.len();\n       \
    \ let mut dec = 0;\n        for x in &mut bin {\n            if *x != '0' {\n\
    \                dec += 1;\n            }\n            *x = *x + '1';\n      \
    \  }\n        ones - dec\n    });\n    sorted_arr", "    let mut counter = vec![0;\
    \ arr.len()];\n    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n  \
    \  for &i in arr {\n        counter[i] += 1;\n    }\n    arr.sort_by_key(|&i|\
    \ counter[i]);\n    arr", "    let mut arr = arr.to_owned();\n    arr.sort_by_key(|x|\
    \ {\n        let mut bin = String::new();\n        bin.push_str(&format!(\"{:b}\"\
    , x));\n        bin.chars().filter(|c| c == '1').count()\n    });\n    arr", " \
    \   let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i;\n        while j < arr.len() && arr[j] == 1 {\n      \
    \      j += 1\n        }\n        result.push(arr[i]);\n        result.push(arr[j]);\n\
    \        i = j;\n    }\n    result", "    let mut res = vec![];\n    let mut ones\
    \ = vec![];\n    for i in arr {\n        if i & 1 != 0 {\n            ones.push(i);\n\
    \        } else {\n            res.push(i);\n        }\n    }\n    let mut i =\
    \ 0;\n    while i < ones.len() {\n        let mut j = i;\n        while j < ones.len()\
    \ && ones[j] == ones[j + 1] {\n            j += 1\n        }\n        res.swap(i,\
    \ j);\n        i = j;\n    }\n    res", "    let mut res = vec![];\n    let mut\
    \ ones = vec![];\n    for i in arr {\n        if i & 1 != 0 {\n            ones.push(i);\n\
    \        } else {\n            res.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    for i in ones {\n        res.push(i);\n    }\n    res", "    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr", "    let mut res =\
    \ vec![];\n    let mut cnt = 0;\n    for &i in arr {\n        if cnt > 0 {\n \
    \           cnt += 1;\n            res.push(i);\n        } else {\n          \
    \  cnt += 1;\n            res.push(i);\n        }\n    }\n    res", "    let mut\
    \ counter = HashMap::new();\n    for &i in arr {\n        if let Some(count) =\
    \ counter.entry(i).or_insert(0) {\n            *count += 1;\n        }\n    }\n\
    \    let mut sorted_arr = Vec::new();\n    for &i in arr {\n        if let Some(count)\
    \ = counter.entry(i).or_insert(0) {\n            sorted_arr.push(i);\n       \
    \     *count -= 1;\n        }\n    }\n    sorted_arr"]
stop_tokens:
- "\n}"
