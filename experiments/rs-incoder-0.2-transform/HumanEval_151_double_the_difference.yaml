name: HumanEval_151_double_the_difference
language: rs
prompt: "/// Given a list of numbers, return the sum of squares of the numbers\n///\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
  \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n\
  /// 0\n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
  \ Vec<f64>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x.is_odd() {\n            sum += x;\n \
    \       }\n    }\n    sum", "    if lst.is_empty() {\n        return 0;\n    }\n\
    \n    let mut sum = 0;\n    let mut i = 0;\n    while i < lst.len() {\n      \
    \  if lst[i] % 2 == 1 {\n            sum += lst[i];\n            i += 1;\n   \
    \     } else {\n            i += 1;\n        }\n    }\n\n    sum", "    let mut\
    \ sum = 0;\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n\
    \        }\n    }\n    sum", "    if lst.is_empty() {\n        return 0;\n   \
    \ }\n    let mut sum = 0;\n    for x in lst {\n        if x.is_integer() {\n \
    \           sum += x;\n        } else {\n            sum += x * x;\n        }\n\
    \    }\n    sum", "    if lst.is_empty() {\n        return 0;\n    }\n    let\
    \ mut sum = 0;\n    let mut i = 0;\n    while i < lst.len() {\n        if lst[i]\
    \ % 2 == 1 {\n            sum += lst[i];\n        }\n        i += 1;\n    }\n\
    \    sum", '    lst.iter().filter(|x| x.is_odd()).fold(0, |acc, x| acc + x * x)',
  "    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum = 0;\n    let\
    \ mut odd_sum = 0;\n    for n in lst {\n        if n % 2 == 1 {\n            sum\
    \ += n;\n            odd_sum += n;\n        }\n    }\n    if sum == 0 {\n    \
    \    return 0;\n    }\n    sum * sum - odd_sum", "    let mut sum = 0;\n    for\
    \ num in lst {\n        if num > 0 {\n            sum += num * num;\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num;\n        }\n    }\n    sum", "    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum", "    let mut sum = 0;\n    for num\
    \ in lst {\n        if num < 0 {\n            continue;\n        }\n        if\
    \ num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum", "    if\
    \ lst.is_empty() {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let\
    \ mut even = 0;\n\n    for n in lst {\n        if n % 2 == 0 {\n            sum\
    \ += n;\n            even += 1;\n        }\n    }\n\n    if even == 0 {\n    \
    \    return 0;\n    }\n\n    sum * sum", "    let mut sum = 0;\n    for num in\
    \ lst {\n        if num > 0.0 {\n            sum += num * num;\n        }\n  \
    \  }\n    sum", "    let mut sum = 0;\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x;\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_integer() {\n            sum += x;\n    \
    \    } else {\n            sum += x * x;\n        }\n    }\n    sum", "    if\
    \ lst.is_empty() {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for\
    \ num in lst {\n        if num < 0 {\n            continue;\n        }\n\n   \
    \     if num % 2 == 1 {\n            sum += num;\n        }\n    }\n\n    sum",
  "    let mut sum = 0;\n    for num in lst {\n        if num > 0 {\n            sum\
    \ += num * num;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for num\
    \ in lst {\n        if num > 0 {\n            sum += num * num;\n        }\n \
    \   }\n    sum", "    if lst.is_empty() {\n        return 0;\n    }\n\n    let\
    \ mut sum = 0;\n    let mut i = 0;\n    while i < lst.len() {\n        if lst[i]\
    \ % 2 == 1 {\n            sum += lst[i];\n        }\n        i += 1;\n    }\n\
    \    sum", "    let mut sum = 0;\n    for num in lst {\n        if num < 0 {\n\
    \            continue;\n        }\n        if num % 2 == 1 {\n            sum\
    \ += num;\n        }\n    }\n    sum"]
stop_tokens:
- "\n}"
