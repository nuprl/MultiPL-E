name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a list of all words from string s that contain exactly\
  \ \n/// n consonants, in order these words appear in the string s.\n/// If the string\
  \ s is empty then the function should return an empty list.\n/// Note: you may assume\
  \ the input string contains only letters and spaces.\n/// Examples:\n/// >>> select_words(String::from(\"\
  Mary had a little lamb\"), 4)\n/// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"\
  Mary had a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"\
  lamb\")]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
  /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
  world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
  Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut words = Vec::new();\n    let mut i = 0;\n    while i <\
    \ s.len() {\n        if s.chars().any(|c| c.is_consonant() && c != ' ') {\n  \
    \          i += 1;\n        } else {\n            words.push(s.split_whitespace()[i]);\n\
    \            i += 1;\n        }\n        if i == s.len() {\n            break;\n\
    \        }\n    }\n    words", "    let mut words = vec![];\n    let mut s = String::from(s);\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().all(|c| c.is_consonant()\
    \ && c != ' ') {\n            words.push(s.subslice(i, i + n));\n            i\
    \ += n;\n        }\n    }\n    words", "    let mut result = Vec::new();\n   \
    \ let mut s = s;\n    while s.len() > 0 {\n        let mut word = String::new();\n\
    \        let mut i = 0;\n        while i < s.len() {\n            let c = s.chars().nth(i).unwrap();\n\
    \            if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \               i += 1;\n                continue;\n            }\n          \
    \  if c == 'n' {\n                i += 1;\n                continue;\n       \
    \     }\n            if c == 't' || c == 's' || c == 'h' {\n                i\
    \ += 1;\n                continue;\n            }\n            if c == 'd' ||\
    \ c == 'l' || c == 'm' || c == 'y' {\n                i += 1;\n              \
    \  continue;\n            }\n            if c == 'p' || c == 'r' || c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                i += 1;\n  \
    \              continue;\n            }\n            if c == 'n' {\n         \
    \       i += 1;\n                continue;\n            }\n            if c ==\
    \ 't' || c == 's' || c == 'h' {\n                i += 1;\n                continue;\n\
    \            }\n            if c == 'd' || c == 'l' || c == 'm' || c == 'y' {\n\
    \                i += 1;\n                continue;\n            }\n         \
    \   if c == 'p' || c == 'r' || c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' {\n                i += 1;\n                continue;\n           \
    \ }\n            if c == 'n' {\n                i += 1;\n                continue;\n\
    \            }\n            if c == 't' || c == 's' || c == 'h' {\n          \
    \      i += 1;\n                continue;\n            }\n            if c ==\
    \ 'd' || c == 'l' || c == 'm' || c == 'y' {\n                i += 1;\n       \
    \         continue;\n            }\n            if c == 'p' || c == 'r' || c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                i +=\
    \ 1;\n                continue;\n            }\n            if c == 'n' {\n  \
    \              i += 1;\n                continue;\n            }\n           \
    \ if c == 't' || c == 's' || c == 'h' {\n                i += 1;\n           \
    \     continue;\n            }\n            if c == 'd' || c == 'l' || c == 'm'\
    \ || c == 'y' {\n                i += 1;\n                continue;\n        \
    \    }\n            if c == 'p' || c == 'r' || c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n                i += 1;\n                continue",
  "    let mut list = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n \
    \       let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == s.chars().nth(j))\
    \ {\n            j += 1\n        }\n        if j - i == n {\n            list.push(s.chars().nth(i).unwrap());\n\
    \            i += n;\n        }\n        else {\n            i += j;\n       \
    \ }\n    }\n    list", "    let mut words = vec![];\n    let mut s = String::from(s);\n\
    \    while s.len() > 0 {\n        let mut i = 0;\n        while i < s.len() &&\
    \ s.chars().any(|c| c != s.chars().nth(i)) {\n            i += 1;\n        }\n\
    \        if i == s.len() {\n            words.push(s);\n            break;\n \
    \       }\n        let mut j = i;\n        while j < s.len() && s.chars().any(|c|\
    \ c != s.chars().nth(j)) {\n            j += 1;\n        }\n        if j == s.len()\
    \ {\n            words.push(s);\n            break;\n        }\n        let mut\
    \ k = j;\n        while k < s.len() && s.chars().any(|c| c != s.chars().nth(k))\
    \ {\n            k += 1;\n        }\n        if k == s.len() {\n            words.push(s);\n\
    \            break;\n        }\n        let mut l = k;\n        while l < s.len()\
    \ && s.chars().any(|c| c != s.chars().nth(l)) {\n            l += 1;\n       \
    \ }\n        if l == s.len() {\n            words.push(s);\n            break;\n\
    \        }\n        let mut m = l;\n        while m < s.len() && s.chars().any(|c|\
    \ c != s.chars().nth(m)) {\n            m += 1;\n        }\n        if m == s.len()\
    \ {\n            words.push(s);\n            break;\n        }\n        let mut\
    \ n = m;\n        while n < s.len() && s.chars().any(|c| c != s.chars().nth(n))\
    \ {\n            n += 1;\n        }\n        if n == s.len() {\n            words.push(s);\n\
    \            break;\n        }\n        let mut o = n;\n        while o < s.len()\
    \ && s.chars().any(|c| c != s.chars().nth(o)) {\n            o += 1;\n       \
    \ }\n        if o == s.len() {\n            words.push(s);\n            break;\n\
    \        }\n        let mut p = o;\n        while p < s.len() && s.chars().any(|c|\
    \ c != s.chars().nth(p)) {\n            p += 1;\n        }\n        if p == s.len()\
    \ {\n            words.push(s);\n            break;\n        }\n        let mut\
    \ q = p;\n        while q < s.len() && s.chars().any(|c| c != s.chars().nth(q))\
    \ {\n            q += 1;\n        }\n        if q == s.len() {\n            words.push(s);\n\
    \            break;\n        }\n        let mut r = q;\n        while r < s.len()\
    \ && s.chars().any(|c| c != s.chars().nth(r)) {\n            r += 1;\n       \
    \ }\n        if r == s.", "    let mut words = Vec::new();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.chars().any(|c| c.is_consonant() && c !=\
    \ ' ') {\n            i += 1;\n        } else {\n            words.push_back(s.subslice(i,\
    \ i + n));\n            i += n;\n        }\n    }\n    words", "    let mut list\
    \ = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        let mut\
    \ j = i;\n        while j < s.len() && s[j] == ' ' {\n            j += 1\n   \
    \     }\n        if j - i > n {\n            list.push(s.split_whitespace()[i]);\n\
    \            i += j - i;\n        } else {\n            i += 1;\n        }\n \
    \   }\n    list", "    let mut words = Vec::new();\n    let mut consonants = Vec::new();\n\
    \    let mut vowels = Vec::new();\n    let mut vowel_counter = 0;\n    let mut\
    \ vowel_counter2 = 0;\n    let mut vowel_counter3 = 0;\n    let mut vowel_counter4\
    \ = 0;\n    let mut vowel_counter5 = 0;\n    let mut vowel_counter6 = 0;\n   \
    \ let mut vowel_counter7 = 0;\n    let mut vowel_counter8 = 0;\n    let mut vowel_counter9\
    \ = 0;\n    let mut vowel_counter10 = 0;\n    let mut vowel_counter11 = 0;\n \
    \   let mut vowel_counter12 = 0;\n    let mut vowel_counter13 = 0;\n    let mut\
    \ vowel_counter14 = 0;\n    let mut vowel_counter15 = 0;\n    let mut vowel_counter16\
    \ = 0;\n    let mut vowel_counter17 = 0;\n    let mut vowel_counter18 = 0;\n \
    \   let mut vowel_counter19 = 0;\n    let mut vowel_counter20 = 0;\n    let mut\
    \ vowel_counter21 = 0;\n    let mut vowel_counter22 = 0;\n    let mut vowel_counter23\
    \ = 0;\n    let mut vowel_counter24 = 0;\n    let mut vowel_counter25 = 0;\n \
    \   let mut vowel_counter26 = 0;\n    let mut vowel_counter27 = 0;\n    let mut\
    \ vowel_counter28 = 0;\n    let mut vowel_counter29 = 0;\n    let mut vowel_counter30\
    \ = 0;\n    let mut vowel_counter31 = 0;\n    let mut vowel_counter32 = 0;\n \
    \   let mut vowel_counter33 = 0;\n    let mut vowel_counter34 = 0;\n    let mut\
    \ vowel_counter35 = 0;\n    let mut vowel_counter36 = 0;\n    let mut vowel_counter37\
    \ = 0;\n    let mut vowel_counter38 = 0;\n    let mut vowel_counter39 = 0;\n \
    \   let mut vowel_counter40 = 0;\n    let mut vowel_counter41 = 0;\n    let mut\
    \ vowel_counter42 = 0;\n    let mut vowel_counter43 = 0;\n    let mut vowel_counter44\
    \ = 0;\n    let mut vowel_counter45 = 0;\n    let mut vowel_counter46 = 0;\n \
    \   let mut vowel_counter47 = 0;\n    let mut vowel_counter48 = 0;\n    let mut\
    \ vowel_counter49 = 0;\n    let mut vowel_counter50 = 0;\n    let mut vowel_counter51\
    \ = 0;\n    let mut vowel_counter52 = 0;\n    let mut vowel_counter53 = 0;\n \
    \   let mut vowel_counter54 = 0;\n", "    let mut result = Vec::new();\n    let\
    \ mut s = String::from(s);\n    let mut n = n as usize;\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut j = i;\n        while j < s.len() &&\
    \ s[j] == ' ' {\n            j += 1\n        }\n        if j == i {\n        \
    \    result.push(s.clone());\n            i += 1;\n        } else {\n        \
    \    let mut k = j;\n            while k < s.len() && s[k] != ' ' {\n        \
    \        k += 1\n            }\n            if k == j {\n                result.push(s.clone());\n\
    \                i += 1;\n            } else {\n                let mut k = j;\n\
    \                while k < s.len() && s[k] == ' ' {\n                    k +=\
    \ 1\n                }\n                if k == j {\n                    result.push(s.clone());\n\
    \                    i += 1;\n                } else {\n                    let\
    \ mut k = j;\n                    while k < s.len() && s[k] != ' ' {\n       \
    \                 k += 1\n                    }\n                    if k == j\
    \ {\n                        result.push(s.clone());\n                       \
    \ i += 1;\n                    } else {\n                        let mut k = j;\n\
    \                        while k < s.len() && s[k] == ' ' {\n                \
    \            k += 1\n                        }\n                        if k ==\
    \ j {\n                            result.push(s.clone());\n                 \
    \           i += 1;\n                        } else {\n                      \
    \      let mut k = j;\n                            while k < s.len() && s[k] !=\
    \ ' ' {\n                                k += 1\n                            }\n\
    \                            if k == j {\n                                result.push(s.clone());\n\
    \                                i += 1;\n                            } else {\n\
    \                                let mut k = j;\n                            \
    \    while k < s.len() && s[k] == ' ' {\n                                    k\
    \ += 1\n                                }\n                                if\
    \ k == j {\n                                    result.push(s.clone());\n    \
    \                                i += 1;\n                                } else\
    \ {\n                                    let mut k = j;\n                    \
    \                while k < s.len() && s[k] != ' ' {\n                        \
    \                k += 1\n                                    }\n             \
    \                       if k == j {\n                                        result.push(s.clone());\n\
    \                                        i += 1;\n                           \
    \         } else {\n                                        let mut k = j;\n \
    \                                       while k < s.len() && s[k] == ' ' {\n \
    \                                           k += 1\n                         \
    \               }\n                                        if k == j {\n     \
    \                                       result.push(s.clone());\n            \
    \                                i += 1;\n                                   \
    \     } else {\n                                            let mut k = j;\n \
    \                                           while k < s.len() && s[k] != ' ' {\n\
    \                                                k += 1\n                    \
    \                        }\n                                            if k ==\
    \ j {\n                                                result.push(s.clone());\n\
    \                                                i += 1;\n                   \
    \                         } else {\n                                         \
    \       let mut k = j;\n                                                while\
    \ k < s.len() && s[k] == ' ' ", "    let mut list = Vec::new();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_consonant()\
    \ && c != ' ') {\n            list.push(s.subslice(i, i + n));\n            i\
    \ += n;\n        }\n    }\n    list", "    let mut list = Vec::new();\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c|\
    \ c == ' ') {\n            i += 1;\n            continue;\n        }\n       \
    \ if s.chars().any(|c| c.is_uppercase() && c != ' ') {\n            i += 1;\n\
    \            continue;\n        }\n        if s.chars().any(|c| c.is_lowercase()\
    \ && c != ' ') {\n            i += 1;\n            continue;\n        }\n    \
    \    if s.chars().any(|c| c.is_lowercase() && c.is_uppercase() && c != ' ') {\n\
    \            i += 1;\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c.is_uppercase() && c.is_lowercase() && c != ' ') {\n            i += 1;\n \
    \           continue;\n        }\n        if s.chars().any(|c| c.is_lowercase()\
    \ && c.is_uppercase() && c.is_lowercase() && c != ' ') {\n            i += 1;\n\
    \            continue;\n        }\n        if s.chars().any(|c| c.is_lowercase()\
    \ && c.is_uppercase() && c.is_lowercase() && c.is_lowercase() && c != ' ') {\n\
    \            i += 1;\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c.is_lowercase() && c.is_uppercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c != ' ') {\n            i += 1;\n            continue;\n\
    \        }\n        if s.chars().any(|c| c.is_lowercase() && c.is_uppercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c != ' ') {\n            i += 1;\n            continue;\n        }\n    \
    \    if s.chars().any(|c| c.is_lowercase() && c.is_uppercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c != ' ') {\n            i += 1;\n            continue;\n        }\n    \
    \    if s.chars().any(|c| c.is_lowercase() && c.is_uppercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c != ' ') {\n            i += 1;\n            continue;\n\
    \        }\n        if s.chars().any(|c| c.is_lowercase() && c.is_uppercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c.is_lowercase() && c.is_lowercase() && c != ' ') {\n\
    \            i += 1;\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c.is_lowercase() && c.is_uppercase() && c.is_lowercase() && c.is_lowercase()\
    \ && c.is_lowercase() && c.is_lowercase() && ", "    let mut list = Vec::new();\n\
    \    let mut s = String::from(s);\n    let mut n = n as usize;\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c != ' ') {\n  \
    \          list.push(s.subslice(i, i + n));\n            i += n;\n        }\n\
    \    }\n    list", "    let mut words = Vec::new();\n    let mut index = 0;\n\
    \    while index < s.len() {\n        let mut word = String::new();\n        let\
    \ mut is_consonant = false;\n        let mut is_space = false;\n        let mut\
    \ is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut is_letter = false;\n        let mut is_digit = false;\n\
    \        let mut is_space = false;\n        let mut is_letter = false;\n     \
    \   let mut is_digit = false;\n        let mut is_space = false;\n        let\
    \ mut is_letter = false;\n        let mut is_digit = false;\n        let mut is_space\
    \ = false;\n        let mut ", "    let mut result = Vec::new();\n    let mut\
    \ s = String::from(s);\n    let mut n = n as usize;\n    while n > 0 {\n     \
    \   let mut index = s.find('a' as char);\n        if index == s.len() {\n    \
    \        break;\n        }\n        let mut index = s.find('e' as char);\n   \
    \     if index == s.len() {\n            break;\n        }\n        let mut index\
    \ = s.find('i' as char);\n        if index == s.len() {\n            break;\n\
    \        }\n        let mut index = s.find('o' as char);\n        if index ==\
    \ s.len() {\n            break;\n        }\n        let mut index = s.find('u'\
    \ as char);\n        if index == s.len() {\n            break;\n        }\n  \
    \      let mut index = s.find('A' as char);\n        if index == s.len() {\n \
    \           break;\n        }\n        let mut index = s.find('E' as char);\n\
    \        if index == s.len() {\n            break;\n        }\n        let mut\
    \ index = s.find('I' as char);\n        if index == s.len() {\n            break;\n\
    \        }\n        let mut index = s.find('O' as char);\n        if index ==\
    \ s.len() {\n            break;\n        }\n        let mut index = s.find('U'\
    \ as char);\n        if index == s.len() {\n            break;\n        }\n  \
    \      let mut index = s.find('n' as char);\n        if index == s.len() {\n \
    \           break;\n        }\n        let mut index = s.find('a' as char);\n\
    \        if index == s.len() {\n            break;\n        }\n        let mut\
    \ index = s.find('e' as char);\n        if index == s.len() {\n            break;\n\
    \        }\n        let mut index = s.find('i' as char);\n        if index ==\
    \ s.len() {\n            break;\n        }\n        let mut index = s.find('o'\
    \ as char);\n        if index == s.len() {\n            break;\n        }\n  \
    \      let mut index = s.find('u' as char);\n        if index == s.len() {\n \
    \           break;\n        }\n        let mut index = s.find('A' as char);\n\
    \        if index == s.len() {\n            break;\n        }\n        let mut\
    \ index = s.find('E' as char);\n        if index == s.len() {\n            break;\n\
    \        }\n        let mut index = s.find('I' as char);\n        if index ==\
    \ s.len() {\n            break;\n        }\n        let mut index = s.find('O'\
    \ as char);\n        if index == s.len() {\n            break;\n        }\n  \
    \      let mut index = s.find('U' as char);\n        if index == s.len() {\n \
    \           break;\n        }\n        let mut index = s.find('n' as char);\n\
    \        if index == s.len() {\n            break;\n", "    let mut words = Vec::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_consonant()\
    \ && c != ' ') {\n            i += 1;\n        } else {\n            words.push(s.split_whitespace()[i]);\n\
    \            i += 1;\n        }\n        if i == n {\n            break;\n   \
    \     }\n    }\n    words", "    let mut list = Vec::new();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut j = i;\n        while j < s.len() &&\
    \ s[j] != ' ' {\n            j += 1\n        }\n        if j == i {\n        \
    \    list.push(s.to_string());\n            i += 1;\n        } else {\n      \
    \      let mut k = i;\n            while k < j {\n                if s[k] == '\
    \ ' {\n                    list.push(s.to_string());\n                    i +=\
    \ 1;\n                    break;\n                }\n                k += 1\n\
    \            }\n        }\n    }\n    list", "    let mut words = vec![];\n  \
    \  let mut s = String::from(s);\n    while s.len() > 0 {\n        let mut i =\
    \ 0;\n        let mut c = s.chars();\n        while i < c.len() {\n          \
    \  if c[i] == 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' || c[i] == 'u'\
    \ {\n                i += 1;\n            } else {\n                break;\n \
    \           }\n        }\n        if i == c.len() {\n            words.push(s.clone());\n\
    \        }\n        s = s.to_string();\n    }\n    words.sort_unstable();\n  \
    \  let mut count = 0;\n    for word in words {\n        if count == n {\n    \
    \        break;\n        }\n        count += 1;\n    }\n    words.iter().take(count).collect()",
  "    let mut words = Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let mut j = i;\n        while j < s.len() && s[j].is_ascii_letter() {\n\
    \            j = j + 1;\n        }\n        if j - i == n {\n            words.push(s.split_whitespace()[i]);\n\
    \            i = j;\n        }\n    }\n    words", "    let mut result = vec![];\n\
    \    let mut s = s;\n    let mut n = n;\n    while n > 0 {\n        let mut i\
    \ = 0;\n        while i < s.len() {\n            if s[i] == ' ' {\n          \
    \      i += 1;\n                continue;\n            }\n            if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \           i += 1;\n                continue;\n            }\n            if\
    \ s[i] == 'y' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' {\n                i += 1;\n                continue;\n            }\n\
    \            if s[i] == 'y' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' {\n                i += 1;\n                continue;\n\
    \            }\n            if s[i] == 'y' || s[i] == 'o' || s[i] == 'u' || s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' {\n                i +=\
    \ 1;\n                continue;\n            }\n            if s[i] == 'y' ||\
    \ s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' {\n                i += 1;\n                continue;\n            }\n\
    \            if s[i] == 'y' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n                i +=\
    \ 1;\n                continue;\n            }\n            if s[i] == 'y' ||\
    \ s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' || s[i] == 'a' {\n                i += 1;\n                continue;\n\
    \            }\n            if s[i] == 'y' || s[i] == 'o' || s[i] == 'u' || s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'a' {\n                i += 1;\n                continue;\n            }\n \
    \           if s[i] == 'y' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' {\n     \
    \           i += 1;\n                continue;\n            }\n            if\
    \ s[i] == 'y' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' {\n     \
    \           i += 1;\n                continue;\n            }\n            if\
    \ s[i] == 'y' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ", "    let\
    \ mut words = vec![];\n    let mut consonants = vec![];\n    let mut vowels =\
    \ vec![];\n    let mut vowels_count = vec![];\n    let mut vowels_count_index\
    \ = vec![];\n    let mut vowels_count_index2 = vec![];\n    let mut vowels_count_index3\
    \ = vec![];\n    let mut vowels_count_index4 = vec![];\n    let mut vowels_count_index5\
    \ = vec![];\n    let mut vowels_count_index6 = vec![];\n    let mut vowels_count_index7\
    \ = vec![];\n    let mut vowels_count_index8 = vec![];\n    let mut vowels_count_index9\
    \ = vec![];\n    let mut vowels_count_index10 = vec![];\n    let mut vowels_count_index11\
    \ = vec![];\n    let mut vowels_count_index12 = vec![];\n    let mut vowels_count_index13\
    \ = vec![];\n    let mut vowels_count_index14 = vec![];\n    let mut vowels_count_index15\
    \ = vec![];\n    let mut vowels_count_index16 = vec![];\n    let mut vowels_count_index17\
    \ = vec![];\n    let mut vowels_count_index18 = vec![];\n    let mut vowels_count_index19\
    \ = vec![];\n    let mut vowels_count_index20 = vec![];\n    let mut vowels_count_index21\
    \ = vec![];\n    let mut vowels_count_index22 = vec![];\n    let mut vowels_count_index23\
    \ = vec![];\n    let mut vowels_count_index24 = vec![];\n    let mut vowels_count_index25\
    \ = vec![];\n    let mut vowels_count_index26 = vec![];\n    let mut vowels_count_index27\
    \ = vec![];\n    let mut vowels_count_index28 = vec![];\n    let mut vowels_count_index29\
    \ = vec![];\n    let mut vowels_count_index30 = vec![];\n    let mut vowels_count_index31\
    \ = vec![];\n    let mut vowels_count_index32 = vec![];\n    let mut vowels_count_index33\
    \ = vec![];\n    let mut vowels_count_index34 = vec![];\n    let mut vowels_count_index35\
    \ = vec![];\n    let mut vowels_count_index36 = vec![];\n    let mut vowels_count_index37\
    \ = vec![];\n    let mut vowels_count_"]
stop_tokens:
- "\n}"
