name: HumanEval_94_skjkasdkd
language: rs
prompt: "/// You are given a list of integers.\n/// You need to find the largest prime\
  \ value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n/// 10\n\
  /// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\
  /// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323,\
  \ 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32, 71, 99, 32, 6, 0,\
  \ 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81, 12, 3, 1, 21])\n///\
  \ 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn skjkasdkd(lst: Vec<isize>)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ["    let mut primes = vec![];\n    let mut largest = vec![];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if primes.contains(&x) {\n       \
    \     sum += x;\n        } else {\n            primes.push(x);\n            if\
    \ x > largest {\n                largest = x;\n            }\n        }\n    }\n\
    \    largest", "    let mut primes = vec![true; lst.len() + 1];\n    let mut sum\
    \ = 0;\n    for i in lst {\n        if primes[i] {\n            sum += i;\n  \
    \      }\n        for j in 2..i {\n            if !primes[j] {\n             \
    \   primes[j] = false;\n                break;\n            }\n        }\n   \
    \ }\n    sum", "    let mut primes = vec![true; lst.len()];\n    let mut largest\
    \ = -1;\n    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n  \
    \          sum += i;\n            if largest < i {\n                largest =\
    \ i;\n            }\n        }\n        for j in 2..i {\n            if primes[j]\
    \ {\n                primes[j] = false;\n            }\n        }\n    }\n   \
    \ largest", "    let mut primes = vec![true; lst.len() + 1];\n    let mut prime_sum\
    \ = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index = 0;\n    let\
    \ mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n    let mut prime_max_value2\
    \ = -1;\n    let mut prime_max_index3 = 0;\n    let mut prime_max_value3 = -1;\n\
    \    let mut prime_max_index4 = 0;\n    let mut prime_max_value4 = -1;\n    let\
    \ mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n    let mut prime_max_index6\
    \ = 0;\n    let mut prime_max_value6 = -1;\n    let mut prime_max_index7 = 0;\n\
    \    let mut prime_max_value7 = -1;\n    let mut prime_max_index8 = 0;\n    let\
    \ mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n    let mut prime_max_value9\
    \ = -1;\n    let mut prime_max_index10 = 0;\n    let mut prime_max_value10 = -1;\n\
    \    let mut prime_max_index11 = 0;\n    let mut prime_max_value11 = -1;\n   \
    \ let mut prime_max_index12 = 0;\n    let mut prime_max_value12 = -1;\n    let\
    \ mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n    let mut\
    \ prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n    let mut prime_max_index15\
    \ = 0;\n    let mut prime_max_value15 = -1;\n    let mut prime_max_index16 = 0;\n\
    \    let mut prime_max_value16 = -1;\n    let mut prime_max_index17 = 0;\n   \
    \ let mut prime_max_value17 = -1;\n    let mut prime_max_index18 = 0;\n    let\
    \ mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n    let mut\
    \ prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n    let mut prime_max_value20\
    \ = -1;\n    let mut prime_max_index21 = 0;\n    let mut prime_max_value21 = -1;\n\
    \    let mut prime_max_index22 = 0;\n    let mut prime_max_value22 = -1;\n   \
    \ let mut prime_max_index23 = 0;\n    let mut prime_max_value23 = -1;\n    let\
    \ mut prime_max_index24 = 0;\n    let mut prime_max_", "    let mut primes = vec![true;\
    \ lst.len() + 1];\n    let mut sum = 0;\n    for i in lst {\n        if primes[i]\
    \ {\n            sum += i;\n        }\n        for j in 2..i {\n            if\
    \ i % j == 0 {\n                primes[j] = false;\n                break;\n \
    \           }\n        }\n    }\n    sum", "    let mut prime = vec![0; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if prime[i as usize] == 0 {\n\
    \            prime[i as usize] = 1;\n            sum += i;\n        }\n    }\n\
    \    sum", "    let mut primes = vec![];\n    let mut sum = 0;\n    let mut prime_found\
    \ = false;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut i = 2;\n        while i * i <= n {\n            if\
    \ n % i == 0 {\n                break;\n            }\n            i += 1;\n \
    \       }\n        if i == n {\n            primes.push(n as isize);\n       \
    \     sum += n as isize;\n            prime_found = true;\n        }\n    }\n\
    \    if !prime_found {\n        primes.push(0);\n    }\n    sum", "    let mut\
    \ primes = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n \
    \   for num in lst {\n        if prime_found {\n            if num % primes.len()\
    \ == 0 {\n                sum += num;\n            }\n        } else {\n     \
    \       if num == 2 {\n                primes.push(2);\n                prime_found\
    \ = true;\n            } else {\n                let mut i = 2;\n            \
    \    while i * i <= num {\n                    if num % i == 0 {\n           \
    \             primes.push(i);\n                        break;\n              \
    \      }\n                    i += 1;\n                }\n                if primes.len()\
    \ == 0 {\n                    primes.push(num);\n                    prime_found\
    \ = true;\n                }\n            }\n        }\n    }\n    if primes.len()\
    \ == 0 {\n        sum += 0;\n    }\n    sum", "    let mut max_prime: isize =\
    \ 0;\n    let mut prime_sum: isize = 0;\n    for &n in lst {\n        if n % 2\
    \ == 0 {\n            continue;\n        }\n        let mut prime: isize = 2;\n\
    \        while prime < n {\n            if n % prime == 0 {\n                break;\n\
    \            }\n            prime += 2;\n        }\n        if prime > max_prime\
    \ {\n            max_prime = prime;\n        }\n        prime_sum += n % prime\
    \ as isize;\n    }\n    max_prime += 1;\n    prime_sum", "    let mut prime =\
    \ vec![true; lst.len() + 1];\n    prime[0] = false;\n    for i in 1..lst.len()\
    \ {\n        if prime[i] {\n            for j in 2..lst.len() {\n            \
    \    if j + i == lst.len() {\n                    prime[j + i] = false;\n    \
    \            } else {\n                    prime[j + i] = true;\n            \
    \    }\n            }\n        }\n    }\n    let mut sum = 0;\n    for i in 1..lst.len()\
    \ {\n        if prime[i] {\n            sum += lst[i];\n        }\n    }\n   \
    \ sum", "    let mut primes = vec![true; Prime::PRIME_COUNT];\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if primes[n] {\n            sum += n;\n  \
    \      }\n        for d in 2..n {\n            if n % d == 0 {\n             \
    \   primes[n] = false;\n                break;\n            }\n        }\n   \
    \ }\n    sum", "    let mut primes = vec![];\n    let mut sum = 0;\n    for n\
    \ in lst {\n        if n % 2 == 0 {\n            sum += n;\n        }\n      \
    \  for &p in primes {\n            if n % p == 0 {\n                sum += p as\
    \ isize;\n                break;\n            }\n        }\n    }\n    sum", " \
    \   let mut prime = vec![true; lst.len()];\n    let mut sum = 0;\n    let mut\
    \ max_prime = 0;\n    let mut max_prime_digit = 0;\n    let mut max_prime_digit_index\
    \ = 0;\n    let mut max_prime_digit_count = 0;\n    let mut max_prime_digit_count_index\
    \ = 0;\n    let mut max_prime_digit_count_index2 = 0;\n    let mut max_prime_digit_count_index3\
    \ = 0;\n    let mut max_prime_digit_count_index4 = 0;\n    let mut max_prime_digit_count_index5\
    \ = 0;\n    let mut max_prime_digit_count_index6 = 0;\n    let mut max_prime_digit_count_index7\
    \ = 0;\n    let mut max_prime_digit_count_index8 = 0;\n    let mut max_prime_digit_count_index9\
    \ = 0;\n    let mut max_prime_digit_count_index10 = 0;\n    let mut max_prime_digit_count_index11\
    \ = 0;\n    let mut max_prime_digit_count_index12 = 0;\n    let mut max_prime_digit_count_index13\
    \ = 0;\n    let mut max_prime_digit_count_index14 = 0;\n    let mut max_prime_digit_count_index15\
    \ = 0;\n    let mut max_prime_digit_count_index16 = 0;\n    let mut max_prime_digit_count_index17\
    \ = 0;\n    let mut max_prime_digit_count_index18 = 0;\n    let mut max_prime_digit_count_index19\
    \ = 0;\n    let mut max_prime_digit_count_index20 = 0;\n    let mut max_prime_digit_count_index21\
    \ = 0;\n    let mut max_prime_digit_count_index22 = 0;\n    let mut max_prime_digit_count_index23\
    \ = 0;\n    let mut max_prime_digit_count_index24 = 0;\n    let mut max_prime_digit_count_index25\
    \ = 0;\n    let mut max_prime_digit_count_index26 = 0;\n    let mut max_prime_digit_count_index27\
    \ = 0;\n    let mut max_prime_digit_count_index28 = 0;\n    let mut max_prime_digit_count_index29\
    \ = 0;\n    let mut max_prime_digit_count_index30 = 0;\n    let mut max_prime_digit_count_index31\
    \ = 0;\n    let mut max_prime_digit_count_index32 = 0;\n    let mut max_prime_digit_count_index33\
    \ = 0;\n    let mut max_prime_digit_count_index34 = 0;\n    let mut max_prime_digit_count_index35\
    \ = 0;\n    let mut max_prime_digit_count_index36 = 0;\n    let mut max_prime_digit_count_index37\
    \ = 0;\n    let mut max_prime_digit_count_index38 = 0;\n    let mut max_prime_",
  "    let mut primes = vec![];\n    let mut largest = vec![];\n    let mut sum =\
    \ 0;\n    for n in lst {\n        if n % 2 == 0 {\n            primes.push(2);\n\
    \        }\n        for &p in primes {\n            if n % p == 0 {\n        \
    \        primes.push(p);\n                break;\n            }\n        }\n \
    \   }\n    for &p in primes {\n        if largest == vec![] {\n            largest\
    \ = vec![p.clone()];\n        } else {\n            if largest == vec![p.clone()]\
    \ {\n                sum += p.clone() as isize;\n            }\n        }\n  \
    \  }\n    if largest == vec![] {\n        return sum;\n    }\n    for &p in primes\
    \ {\n        if largest == vec![p.clone()] {\n            sum += p.clone() as\
    \ isize;\n        }\n    }\n    return sum;", "    let mut prime = vec![true;\
    \ lst.len() + 1];\n    prime[0] = false;\n    for i in 1..lst.len() {\n      \
    \  if prime[i] {\n            for j in 2..lst.len() {\n                if i !=\
    \ j && lst[j] % i == 0 {\n                    prime[j] = false;\n            \
    \        break;\n                }\n            }\n        }\n    }\n    let mut\
    \ sum = 0;\n    for i in 1..lst.len() {\n        if prime[i] {\n            sum\
    \ += lst[i];\n        }\n    }\n    sum", "    let mut max_prime: isize = 0;\n\
    \    let mut prime_sum: isize = 0;\n    let mut prime_found = false;\n    let\
    \ mut prime_prime: isize = 0;\n    let mut prime_prime_found = false;\n    let\
    \ mut prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_found = false;\n\
    \    let mut prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_found = false;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime", "    let mut prime_numbers\
    \ = vec![];\n    let mut sum_of_digits = 0;\n    let mut max_prime = 0;\n    let\
    \ mut max_prime_digit = 0;\n    let mut max_prime_digit_index = 0;\n    let mut\
    \ max_prime_digit_sum = 0;\n    let mut max_prime_digit_sum_index = 0;\n    let\
    \ mut max_prime_digit_sum_digit = 0;\n    let mut max_prime_digit_sum_digit_index\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum = 0;\n    let mut max_prime_digit_sum_digit_sum_index\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_digit = 0;\n    let mut max_prime_digit_sum_digit_sum_index\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum = 0;\n    let mut\
    \ max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_sum_digit_sum_index = 0;\n    let mut max_prime_digit_sum_digit_sum_digit_sum\
    \ = 0;\n    let mut max_prime_digit_", "    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = -1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = -1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = -1;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = -1;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = -1;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = -1;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = -1;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = -1;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n   \
    \ let mut prime_max_index15 = 0;\n    let mut prime_max_value15 = -1;\n    let\
    \ mut prime_max_index16 = 0;\n    let mut prime_max_value16 = -1;\n    let mut\
    \ prime_max_index17 = 0;\n    let mut prime_max_value17 = -1;\n    let mut prime_max_index18\
    \ = 0;\n    let mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n\
    \    let mut prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n   \
    \ let mut prime_max_value20 = -1;\n    let mut prime_max_index21 = 0;\n    let\
    \ mut prime_max_value21 = -1;\n    let mut prime_max_index22 = 0;\n    let mut\
    \ prime_max_value22 = -1;\n    let mut prime_max_index23 = 0;\n    let mut prime_max_value23\
    \ = -1;\n    let mut prime_max_index24 = 0;\n    let mut prime_max_value", " \
    \   let mut primes = vec![];\n    let mut prime_sum = 0;\n    let mut prime_max\
    \ = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_digit = 0;\n \
    \   let mut prime_max_digit_index = 0;\n    let mut prime_max_digit_sum = 0;\n\
    \    let mut prime_max_digit_sum_index = 0;\n    let mut prime_max_digit_sum_index2\
    \ = 0;\n    let mut prime_max_digit_sum_index3 = 0;\n    let mut prime_max_digit_sum_index4\
    \ = 0;\n    let mut prime_max_digit_sum_index5 = 0;\n    let mut prime_max_digit_sum_index6\
    \ = 0;\n    let mut prime_max_digit_sum_index7 = 0;\n    let mut prime_max_digit_sum_index8\
    \ = 0;\n    let mut prime_max_digit_sum_index9 = 0;\n    let mut prime_max_digit_sum_index10\
    \ = 0;\n    let mut prime_max_digit_sum_index11 = 0;\n    let mut prime_max_digit_sum_index12\
    \ = 0;\n    let mut prime_max_digit_sum_index13 = 0;\n    let mut prime_max_digit_sum_index14\
    \ = 0;\n    let mut prime_max_digit_sum_index15 = 0;\n    let mut prime_max_digit_sum_index16\
    \ = 0;\n    let mut prime_max_digit_sum_index17 = 0;\n    let mut prime_max_digit_sum_index18\
    \ = 0;\n    let mut prime_max_digit_sum_index19 = 0;\n    let mut prime_max_digit_sum_index20\
    \ = 0;\n    let mut prime_max_digit_sum_index21 = 0;\n    let mut prime_max_digit_sum_index22\
    \ = 0;\n    let mut prime_max_digit_sum_index23 = 0;\n    let mut prime_max_digit_sum_index24\
    \ = 0;\n    let mut prime_max_digit_sum_index25 = 0;\n    let mut prime_max_digit_sum_index26\
    \ = 0;\n    let mut prime_max_digit_sum_index27 = 0;\n    let mut prime_max_digit_sum_index28\
    \ = 0;\n    let mut prime_max_digit_sum_index29 = 0;\n    let mut prime_max_digit_sum_index30\
    \ = 0;\n    let mut prime_max_digit_sum_index31 = 0;\n    let mut prime_max_digit_sum_index32\
    \ = 0;\n    let mut prime_max_digit_sum_index33 = 0;\n    let mut prime_max_digit_sum_index34\
    \ = 0;\n    let mut prime_max_digit_sum_index35 = 0;\n    let mut prime_max_digit_sum_index36\
    \ = 0;\n    let mut prime_max_digit_sum_index37 = 0;\n    let mut prime_max_digit_sum_index38",
  "    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max2\
    \ = 1;\n    let mut prime_max3 = 1;\n    let mut prime_max4 = 1;\n    let mut\
    \ prime_max5 = 1;\n    let mut prime_max6 = 1;\n    let mut prime_max7 = 1;\n\
    \    let mut prime_max8 = 1;\n    let mut prime_max9 = 1;\n    let mut prime_max10\
    \ = 1;\n    let mut prime_max11 = 1;\n    let mut prime_max12 = 1;\n    let mut\
    \ prime_max13 = 1;\n    let mut prime_max14 = 1;\n    let mut prime_max15 = 1;\n\
    \    let mut prime_max16 = 1;\n    let mut prime_max17 = 1;\n    let mut prime_max18\
    \ = 1;\n    let mut prime_max19 = 1;\n    let mut prime_max20 = 1;\n    let mut\
    \ prime_max21 = 1;\n    let mut prime_max22 = 1;\n    let mut prime_max23 = 1;\n\
    \    let mut prime_max24 = 1;\n    let mut prime_max25 = 1;\n    let mut prime_max26\
    \ = 1;\n    let mut prime_max27 = 1;\n    let mut prime_max28 = 1;\n    let mut\
    \ prime_max29 = 1;\n    let mut prime_max30 = 1;\n    let mut prime_max31 = 1;\n\
    \    let mut prime_max32 = 1;\n    let mut prime_max33 = 1;\n    let mut prime_max34\
    \ = 1;\n    let mut prime_max35 = 1;\n    let mut prime_max36 = 1;\n    let mut\
    \ prime_max37 = 1;\n    let mut prime_max38 = 1;\n    let mut prime_max39 = 1;\n\
    \    let mut prime_max40 = 1;\n    let mut prime_max41 = 1;\n    let mut prime_max42\
    \ = 1;\n    let mut prime_max43 = 1;\n    let mut prime_max44 = 1;\n    let mut\
    \ prime_max45 = 1;\n    let mut prime_max46 = 1;\n    let mut prime_max47 = 1;\n\
    \    let mut prime_max48 = 1;\n    let mut prime_max49 = 1;\n    let mut prime_max50\
    \ = 1;\n    let mut prime_max51 = 1;\n    let mut prime_max52 = 1;\n    let mut\
    \ prime_max53 = 1;\n    let mut prime_max54 = 1;\n    let mut prime_max55 = 1;\n\
    \    let mut prime_max56 = ", "    let mut max_prime: isize = 0;\n    let mut\
    \ prime_sum: isize = 0;\n    let mut prime_counter: isize = 0;\n    let mut prime_found\
    \ = false;\n    let mut prime_prime: isize = 0;\n    let mut prime_prime_found\
    \ = false;\n    let mut prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime: isize = 0;\n    let mut\
    \ prime_prime_prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime: isize = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_found = false;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_found = false;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_found = false;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_found",
  "    let mut primes = vec![];\n    let mut sum = 0;\n    for i in lst {\n      \
    \  if primes.contains(&i) {\n            continue;\n        }\n        let mut\
    \ prime: isize = 0;\n        let mut prime_found = false;\n        for j in primes.iter()\
    \ {\n            if j % i == 0 {\n                prime = j;\n               \
    \ prime_found = true;\n                break;\n            }\n        }\n    \
    \    if prime_found {\n            continue;\n        }\n        primes.push(i);\n\
    \        sum += i;\n    }\n    sum", "    let mut primes = vec![true; lst.len()];\n\
    \    let mut primes_set = HashSet::new();\n    let mut primes_sum = 0;\n    let\
    \ mut primes_index = 0;\n    let mut primes_sum_index = 0;\n    let mut primes_sum_index2\
    \ = 0;\n    let mut primes_sum_index3 = 0;\n    let mut primes_sum_index4 = 0;\n\
    \    let mut primes_sum_index5 = 0;\n    let mut primes_sum_index6 = 0;\n    let\
    \ mut primes_sum_index7 = 0;\n    let mut primes_sum_index8 = 0;\n    let mut\
    \ primes_sum_index9 = 0;\n    let mut primes_sum_index10 = 0;\n    let mut primes_sum_index11\
    \ = 0;\n    let mut primes_sum_index12 = 0;\n    let mut primes_sum_index13 =\
    \ 0;\n    let mut primes_sum_index14 = 0;\n    let mut primes_sum_index15 = 0;\n\
    \    let mut primes_sum_index16 = 0;\n    let mut primes_sum_index17 = 0;\n  \
    \  let mut primes_sum_index18 = 0;\n    let mut primes_sum_index19 = 0;\n    let\
    \ mut primes_sum_index20 = 0;\n    let mut primes_sum_index21 = 0;\n    let mut\
    \ primes_sum_index22 = 0;\n    let mut primes_sum_index23 = 0;\n    let mut primes_sum_index24\
    \ = 0;\n    let mut primes_sum_index25 = 0;\n    let mut primes_sum_index26 =\
    \ 0;\n    let mut primes_sum_index27 = 0;\n    let mut primes_sum_index28 = 0;\n\
    \    let mut primes_sum_index29 = 0;\n    let mut primes_sum_index30 = 0;\n  \
    \  let mut primes_sum_index31 = 0;\n    let mut primes_sum_index32 = 0;\n    let\
    \ mut primes_sum_index33 = 0;\n    let mut primes_sum_index34 = 0;\n    let mut\
    \ primes_sum_index35 = 0;\n    let mut primes_sum_index36 = 0;\n    let mut primes_sum_index37\
    \ = 0;\n    let mut primes_sum_index38 = 0;\n    let mut primes_sum_index39 =\
    \ 0;\n    let mut primes_sum_index40 = 0;\n    let mut primes_sum_index41 = 0;\n\
    \    let mut primes_sum_index42 = 0;\n    let mut primes_sum_index43 = 0;\n  \
    \  let mut primes_sum_index44 = 0;\n    let mut primes_sum_index45 = 0;\n    let\
    \ mut primes_sum_index46 = 0;\n    let mut primes_sum_index47 = 0;\n    let mut\
    \ primes_", "    let mut primes = vec![];\n    let mut sum = 0;\n    let mut prime_found\
    \ = false;\n    for x in lst {\n        if prime_found {\n            sum += x;\n\
    \        } else {\n            if primes.contains(&x) {\n                prime_found\
    \ = true;\n            } else {\n                primes.push(x);\n           \
    \ }\n        }\n    }\n    if prime_found {\n        sum\n    } else {\n     \
    \   0\n    }", "    let mut primes = vec![true; lst.len()];\n    primes[0] = false;\n\
    \    primes[1] = false;\n    for i in 2..lst.len() {\n        if primes[i] {\n\
    \            for j in 2..lst.len() {\n                if i != j && lst[j] % i\
    \ == 0 {\n                    primes[j] = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    if lst.len() == 1 {\n\
    \        return lst[0];\n    }\n    let mut sum = 0;\n    for i in 2..lst.len()\
    \ {\n        if primes[i] {\n            sum += i;\n        }\n    }\n    sum",
  "    let mut max_prime: isize = 0;\n    let mut max_prime_digit: isize = 0;\n  \
    \  let mut prime_digit: isize = 0;\n    let mut prime_digits: Vec<isize> = vec![];\n\
    \    let mut prime_found = false;\n    let mut prime_found2 = false;\n    let\
    \ mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let mut prime_found5\
    \ = false;\n    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n\
    \    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let\
    \ mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let mut\
    \ prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut prime_found14\
    \ = false;\n    let mut prime_found15 = false;\n    let mut prime_found16 = false;\n\
    \    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n    let\
    \ mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let mut\
    \ prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut prime_found23\
    \ = false;\n    let mut prime_found24 = false;\n    let mut prime_found25 = false;\n\
    \    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n    let\
    \ mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let mut\
    \ prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut prime_found32\
    \ = false;\n    let mut prime_found33 = false;\n    let mut prime_found34 = false;\n\
    \    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n    let\
    \ mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let mut\
    \ prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut prime_found41\
    \ = false;\n    let mut prime_found42 = false;\n    let mut prime_found43 = false;\n\
    \    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n    let\
    \ mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let mut\
    \ prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut prime_found50\
    \ = false;\n    let mut prime_found5", "    let mut primes = vec![true; lst.len()];\n\
    \    let mut max_prime = 0;\n    let mut max_prime_sum = 0;\n    let mut prime_sum\
    \ = 0;\n    let mut prime_sum2 = 0;\n    let mut prime_sum3 = 0;\n    let mut\
    \ prime_sum4 = 0;\n    let mut prime_sum5 = 0;\n    let mut prime_sum6 = 0;\n\
    \    let mut prime_sum7 = 0;\n    let mut prime_sum8 = 0;\n    let mut prime_sum9\
    \ = 0;\n    let mut prime_sum10 = 0;\n    let mut prime_sum11 = 0;\n    let mut\
    \ prime_sum12 = 0;\n    let mut prime_sum13 = 0;\n    let mut prime_sum14 = 0;\n\
    \    let mut prime_sum15 = 0;\n    let mut prime_sum16 = 0;\n    let mut prime_sum17\
    \ = 0;\n    let mut prime_sum18 = 0;\n    let mut prime_sum19 = 0;\n    let mut\
    \ prime_sum20 = 0;\n    let mut prime_sum21 = 0;\n    let mut prime_sum22 = 0;\n\
    \    let mut prime_sum23 = 0;\n    let mut prime_sum24 = 0;\n    let mut prime_sum25\
    \ = 0;\n    let mut prime_sum26 = 0;\n    let mut prime_sum27 = 0;\n    let mut\
    \ prime_sum28 = 0;\n    let mut prime_sum29 = 0;\n    let mut prime_sum30 = 0;\n\
    \    let mut prime_sum31 = 0;\n    let mut prime_sum32 = 0;\n    let mut prime_sum33\
    \ = 0;\n    let mut prime_sum34 = 0;\n    let mut prime_sum35 = 0;\n    let mut\
    \ prime_sum36 = 0;\n    let mut prime_sum37 = 0;\n    let mut prime_sum38 = 0;\n\
    \    let mut prime_sum39 = 0;\n    let mut prime_sum40 = 0;\n    let mut prime_sum41\
    \ = 0;\n    let mut prime_sum42 = 0;\n    let mut prime_sum43 = 0;\n    let mut\
    \ prime_sum44 = 0;\n    let mut prime_sum45 = 0;\n    let mut prime_sum46 = 0;\n\
    \    let mut prime_sum47 = 0;\n    let mut prime_sum48 = 0;\n    let mut prime_sum49\
    \ = 0;\n    let mut prime_sum50 = 0;\n    let mut prime_sum51 = 0;\n    let mut\
    \ prime_sum52 = 0;\n    let mut prime_sum53 = 0;\n    let mut prime_sum54 = 0;\n\
    \    let ", "    let mut primes = vec![true; lst.len()];\n    let mut prime_sum\
    \ = 0;\n    for &x in lst {\n        if primes[x] {\n            prime_sum +=\
    \ x;\n        }\n        for &y in &primes {\n            if y {\n           \
    \     prime_sum += x;\n            }\n        }\n    }\n    prime_sum", "    let\
    \ mut primes = vec![];\n    let mut largest = vec![];\n    let mut sum = 0;\n\
    \    for &x in lst {\n        if primes.contains(&x) {\n            largest.push(x);\n\
    \        } else {\n            primes.push(x);\n        }\n    }\n    for &x in\
    \ primes {\n        if largest == vec![] {\n            sum += x;\n        } else\
    \ {\n            if largest == vec![largest[0]] {\n                sum += x;\n\
    \            } else {\n                let mut i = 1;\n                while i\
    \ < largest.len() {\n                    if largest == vec![largest[i]] {\n  \
    \                      sum += x;\n                        i += 1;\n          \
    \          } else {\n                        i += 1;\n                    }\n\
    \                }\n            }\n        }\n    }\n    sum", "    let mut primes\
    \ = vec![];\n    let mut largest = vec![];\n    let mut sum = 0;\n    let mut\
    \ prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n    let mu", "    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = -1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = -1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = -1;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = -1;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = -1;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = -1;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = -1;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = -1;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n   \
    \ let mut prime_max_index15 = 0;\n    let mut prime_max_value15 = -1;\n    let\
    \ mut prime_max_index16 = 0;\n    let mut prime_max_value16 = -1;\n    let mut\
    \ prime_max_index17 = 0;\n    let mut prime_max_value17 = -1;\n    let mut prime_max_index18\
    \ = 0;\n    let mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n\
    \    let mut prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n   \
    \ let mut prime_max_value20 = -1;\n    let mut prime_max_index21 = 0;\n    let\
    \ mut prime_max_value21 = -1;\n    let mut prime_max_index22 = 0;\n    let mut\
    \ prime_max_value22 = -1;\n    let mut prime_max_index23 = 0;\n    let mut prime_max_value23\
    \ = -1;\n    let mut prime_max_index24 = 0;\n    let mut prime_max_value", " \
    \   let mut primes = vec![];\n    let mut max_prime: isize = 0;\n    let mut sum\
    \ = 0;\n    for &i in lst {\n        if primes.contains(&i) {\n            continue;\n\
    \        }\n        let mut j: isize = 1;\n        while j < i {\n           \
    \ if i % j == 0 {\n                break;\n            }\n            j += 1;\n\
    \        }\n        if j == i {\n            primes.push(i);\n        }\n    \
    \    if j > max_prime {\n            max_prime = j;\n        }\n    }\n    for\
    \ &i in primes {\n        sum += i;\n    }\n    sum", "    let mut prime_sum =\
    \ 0;\n    let mut prime_max = 0;\n    let mut prime_max2 = 1;\n    let mut prime_max3\
    \ = 1;\n    let mut prime_max4 = 1;\n    let mut prime_max5 = 1;\n    let mut\
    \ prime_max6 = 1;\n    let mut prime_max7 = 1;\n    let mut prime_max8 = 1;\n\
    \    let mut prime_max9 = 1;\n    let mut prime_max10 = 1;\n    let mut prime_max11\
    \ = 1;\n    let mut prime_max12 = 1;\n    let mut prime_max13 = 1;\n    let mut\
    \ prime_max14 = 1;\n    let mut prime_max15 = 1;\n    let mut prime_max16 = 1;\n\
    \    let mut prime_max17 = 1;\n    let mut prime_max18 = 1;\n    let mut prime_max19\
    \ = 1;\n    let mut prime_max20 = 1;\n    let mut prime_max21 = 1;\n    let mut\
    \ prime_max22 = 1;\n    let mut prime_max23 = 1;\n    let mut prime_max24 = 1;\n\
    \    let mut prime_max25 = 1;\n    let mut prime_max26 = 1;\n    let mut prime_max27\
    \ = 1;\n    let mut prime_max28 = 1;\n    let mut prime_max29 = 1;\n    let mut\
    \ prime_max30 = 1;\n    let mut prime_max31 = 1;\n    let mut prime_max32 = 1;\n\
    \    let mut prime_max33 = 1;\n    let mut prime_max34 = 1;\n    let mut prime_max35\
    \ = 1;\n    let mut prime_max36 = 1;\n    let mut prime_max37 = 1;\n    let mut\
    \ prime_max38 = 1;\n    let mut prime_max39 = 1;\n    let mut prime_max40 = 1;\n\
    \    let mut prime_max41 = 1;\n    let mut prime_max42 = 1;\n    let mut prime_max43\
    \ = 1;\n    let mut prime_max44 = 1;\n    let mut prime_max45 = 1;\n    let mut\
    \ prime_max46 = 1;\n    let mut prime_max47 = 1;\n    let mut prime_max48 = 1;\n\
    \    let mut prime_max49 = 1;\n    let mut prime_max50 = 1;\n    let mut prime_max51\
    \ = 1;\n    let mut prime_max52 = 1;\n    let mut prime_max53 = 1;\n    let mut\
    \ prime_max54 = 1;\n    let mut prime_max55 = 1;\n    let mut prime_max56 = ",
  "    let mut primes = vec![];\n    let mut prime_sum = 0;\n    let mut prime_max\
    \ = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_value = 0;\n \
    \   let mut prime_max_value_sum = 0;\n    let mut prime_max_value_max = 0;\n \
    \   let mut prime_max_value_max_index = 0;\n    let mut prime_max_value_max_value\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_max_value_index\
    \ = 0;\n    let mut prime_max_value_max_value_index = 0;\n    let mut prime_max_value_",
  "    let mut primes = vec![];\n    let mut sum = 0;\n    for i in lst {\n      \
    \  if primes.contains(&i) {\n            continue;\n        }\n        let mut\
    \ prime = true;\n        for j in 2..i {\n            if i % j == 0 {\n      \
    \          prime = false;\n                break;\n            }\n        }\n\
    \        if prime {\n            primes.push(i);\n            sum += i;\n    \
    \    }\n    }\n    sum", "    let mut primes = vec![];\n    let mut sum = 0;\n\
    \    let mut prime_found = false;\n    for n in lst {\n        if n % 2 == 0 {\n\
    \            primes.push(2);\n            sum += 2;\n            prime_found =\
    \ true;\n        } else {\n            for p in primes.iter_mut() {\n        \
    \        if n % p == 0 {\n                    *p = *p + n;\n                 \
    \   sum += *p;\n                    prime_found = true;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    if prime_found {\n  \
    \      sum\n    } else {\n        0\n    }", "    let mut prime_numbers = vec![];\n\
    \    let mut max_prime = 0;\n    let mut sum = 0;\n    for n in lst {\n      \
    \  if n % 2 == 0 {\n            continue;\n        }\n        let mut i = 2;\n\
    \        while i * i <= n {\n            if n % i == 0 {\n                break;\n\
    \            }\n            i += 1;\n        }\n        if i == n {\n        \
    \    prime_numbers.push(n);\n        }\n        if n > max_prime {\n         \
    \   max_prime = n;\n        }\n    }\n    for n in prime_numbers {\n        sum\
    \ += n % 10;\n    }\n    sum", "    let mut max_prime: isize = 0;\n    let mut\
    \ prime_sum: isize = 0;\n    let mut prime_found = false;\n    for &x in lst {\n\
    \        if prime_found {\n            if x == 0 {\n                prime_found\
    \ = false;\n                continue;\n            }\n            if x % 2 ==\
    \ 0 {\n                prime_sum += x;\n                continue;\n          \
    \  }\n            if x % 3 == 0 {\n                prime_sum += x;\n         \
    \       continue;\n            }\n            if x % 5 == 0 {\n              \
    \  prime_sum += x;\n                continue;\n            }\n            if x\
    \ % 7 == 0 {\n                prime_sum += x;\n                continue;\n   \
    \         }\n            if x % 11 == 0 {\n                prime_sum += x;\n \
    \               continue;\n            }\n            if x % 13 == 0 {\n     \
    \           prime_sum += x;\n                continue;\n            }\n      \
    \      if x % 17 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 19 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 23 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 29 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 31 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 37 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 41 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 43 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 47 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 53 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 59 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 61 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 67 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 71 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 73 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 79 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 83 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 89 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 97 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 101 == 0 {\n", "    let mut max_prime: isize\
    \ = 0;\n    let mut prime_sum: isize = 0;\n    let mut prime_found = false;\n\
    \    for x in lst {\n        if prime_found {\n            if x == max_prime {\n\
    \                prime_found = false;\n            } else {\n                prime_sum\
    \ += x;\n            }\n        } else {\n            if x == 1 {\n          \
    \      prime_found = true;\n            } else {\n                let mut prime_found\
    \ = false;\n                let mut prime_sum: isize = 0;\n                for\
    \ y in lst {\n                    if y == x {\n                        prime_found\
    \ = true;\n                        break;\n                    }\n           \
    \         if y == 1 {\n                        prime_sum += y;\n             \
    \       }\n                }\n                if prime_found {\n             \
    \       if prime_sum > max_prime {\n                        max_prime = prime_sum;\n\
    \                    }\n                } else {\n                    prime_sum\
    \ += x;\n                    if prime_sum > max_prime {\n                    \
    \    max_prime = prime_sum;\n                    }\n                }\n      \
    \      }\n        }\n    }\n    max_prime", "    let mut max_prime: isize = 0;\n\
    \    let mut prime_sum: isize = 0;\n    let mut prime_number: isize = 0;\n   \
    \ let mut prime_number_counter: isize = 0;\n    let mut prime_number_counter2:\
    \ isize = 0;\n    let mut prime_number_counter3: isize = 0;\n    let mut prime_number_counter4:\
    \ isize = 0;\n    let mut prime_number_counter5: isize = 0;\n    let mut prime_number_counter6:\
    \ isize = 0;\n    let mut prime_number_counter7: isize = 0;\n    let mut prime_number_counter8:\
    \ isize = 0;\n    let mut prime_number_counter9: isize = 0;\n    let mut prime_number_counter10:\
    \ isize = 0;\n    let mut prime_number_counter11: isize = 0;\n    let mut prime_number_counter12:\
    \ isize = 0;\n    let mut prime_number_counter13: isize = 0;\n    let mut prime_number_counter14:\
    \ isize = 0;\n    let mut prime_number_counter15: isize = 0;\n    let mut prime_number_counter16:\
    \ isize = 0;\n    let mut prime_number_counter17: isize = 0;\n    let mut prime_number_counter18:\
    \ isize = 0;\n    let mut prime_number_counter19: isize = 0;\n    let mut prime_number_counter20:\
    \ isize = 0;\n    let mut prime_number_counter21: isize = 0;\n    let mut prime_number_counter22:\
    \ isize = 0;\n    let mut prime_number_counter23: isize = 0;\n    let mut prime_number_counter24:\
    \ isize = 0;\n    let mut prime_number_counter25: isize = 0;\n    let mut prime_number_counter26:\
    \ isize = 0;\n    let mut prime_number_counter27: isize = 0;\n    let mut prime_number_counter28:\
    \ isize = 0;\n    let mut prime_number_counter29: isize = 0;\n    let mut prime_number_counter30:\
    \ isize = 0;\n    let mut prime_number_counter31: isize = 0;\n    let mut prime_number_counter32:\
    \ isize = 0;\n    let mut prime_number_counter33: isize = 0;\n    let mut prime_number_counter34:\
    \ isize = 0;\n    let mut prime_number_counter35: isize = 0;\n    let mut prime_number_counter36:\
    \ isize = 0;\n    let mut prime_number_counter37: isize = 0;\n    let mut prime",
  "    let mut primes = vec![];\n    let mut prime_sum = 0;\n    let mut prime_max\
    \ = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_digit = 0;\n \
    \   let mut prime_max_digit_index = 0;\n    let mut prime_max_digit_sum = 0;\n\
    \    let mut prime_max_digit_sum_index = 0;\n    let mut prime_max_digit_sum_index2\
    \ = 0;\n    let mut prime_max_digit_sum_index3 = 0;\n    let mut prime_max_digit_sum_index4\
    \ = 0;\n    let mut prime_max_digit_sum_index5 = 0;\n    let mut prime_max_digit_sum_index6\
    \ = 0;\n    let mut prime_max_digit_sum_index7 = 0;\n    let mut prime_max_digit_sum_index8\
    \ = 0;\n    let mut prime_max_digit_sum_index9 = 0;\n    let mut prime_max_digit_sum_index10\
    \ = 0;\n    let mut prime_max_digit_sum_index11 = 0;\n    let mut prime_max_digit_sum_index12\
    \ = 0;\n    let mut prime_max_digit_sum_index13 = 0;\n    let mut prime_max_digit_sum_index14\
    \ = 0;\n    let mut prime_max_digit_sum_index15 = 0;\n    let mut prime_max_digit_sum_index16\
    \ = 0;\n    let mut prime_max_digit_sum_index17 = 0;\n    let mut prime_max_digit_sum_index18\
    \ = 0;\n    let mut prime_max_digit_sum_index19 = 0;\n    let mut prime_max_digit_sum_index20\
    \ = 0;\n    let mut prime_max_digit_sum_index21 = 0;\n    let mut prime_max_digit_sum_index22\
    \ = 0;\n    let mut prime_max_digit_sum_index23 = 0;\n    let mut prime_max_digit_sum_index24\
    \ = 0;\n    let mut prime_max_digit_sum_index25 = 0;\n    let mut prime_max_digit_sum_index26\
    \ = 0;\n    let mut prime_max_digit_sum_index27 = 0;\n    let mut prime_max_digit_sum_index28\
    \ = 0;\n    let mut prime_max_digit_sum_index29 = 0;\n    let mut prime_max_digit_sum_index30\
    \ = 0;\n    let mut prime_max_digit_sum_index31 = 0;\n    let mut prime_max_digit_sum_index32\
    \ = 0;\n    let mut prime_max_digit_sum_index33 = 0;\n    let mut prime_max_digit_sum_index34\
    \ = 0;\n    let mut prime_max_digit_sum_index35 = 0;\n    let mut prime_max_digit_sum_index36\
    \ = 0;\n    let mut prime_max_digit_sum_index37 = 0;\n    let mut prime_max_digit_sum_index38",
  "    let mut primes = vec![true; Prime::MAX_PRIME_SIZE];\n    let mut max_prime\
    \ = 0;\n    let mut sum = 0;\n    for &i in lst {\n        if primes[i as usize]\
    \ {\n            sum += i;\n        }\n        for &j in &primes {\n         \
    \   if j {\n                primes[i as usize] = false;\n            }\n     \
    \   }\n    }\n    if sum > max_prime {\n        max_prime = sum;\n    }\n    max_prime",
  "    let mut max_prime = vec![0; lst.len()];\n    let mut prime_sum = 0;\n    for\
    \ i in 0..lst.len() {\n        let mut prime = true;\n        for j in 0..lst.len()\
    \ {\n            if i == j {\n                continue;\n            }\n     \
    \       if lst[j] % i == 0 {\n                prime = false;\n               \
    \ break;\n            }\n        }\n        if prime {\n            max_prime[i]\
    \ = i;\n            prime_sum += i;\n        }\n    }\n    max_prime.iter().max().unwrap()",
  "    let mut max_prime: isize = 0;\n    let mut sum: isize = 0;\n    for i in lst\
    \ {\n        let mut prime: isize = 1;\n        let mut prime_found = false;\n\
    \        for j in 2..i {\n            if i % j == 0 {\n                prime =\
    \ j;\n                prime_found = true;\n                break;\n          \
    \  }\n        }\n        if prime_found {\n            sum += prime;\n       \
    \     if prime > max_prime {\n                max_prime = prime;\n           \
    \ }\n        }\n    }\n    return sum;", "    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_digit = 0;\n\
    \    let mut prime_max_digit_index = 0;\n    let mut prime_max_digit_value = -1;\n\
    \    let mut prime_max_digit_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = -1;\n    let mut prime_max_digit_count_count\
    \ = 0;\n    let mut prime_max_digit_count_index = 0;\n    let mut prime_max_digit_count_value\
    \ = -1;\n    let mut prime_max_digit_count_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = -1;\n    let mut prime_max_digit_count_count\
    \ = 0;\n    let mut prime_max_digit_count_index = 0;\n    let mut prime_max_digit_count_value\
    \ = -1;\n    let mut prime_max_digit_count_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = -1;\n    let mut prime_max_digit_count_count\
    \ = 0;\n    let mut prime_max_digit_count_index = 0;\n    let mut prime_max_digit_count_value\
    \ = -1;\n    let mut prime_max_digit_count_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = -1;\n    let mut prime_max_digit_count_count\
    \ = 0;\n    let mut prime_max_digit_count_index = 0;\n    let mut prime_max_digit_count_value\
    \ = -1;\n    let mut prime_max_digit_count_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = -1;\n    let mut prime_max_digit_count_count\
    \ = 0;\n    let mut prime_max_digit_count_index = 0;\n    let mut prime_max_digit_count_value\
    \ = -1;\n    let mut prime_max_digit_count_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = -1;\n    let mut prime_max_digit_count_count\
    \ = 0;\n    let mut prime_max_digit_count_index = 0;\n    let mut prime_max_digit_count_value\
    \ = -1;\n    let mut prime_max_digit_count_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = -1;\n    let mut prime_max_digit_count_count\
    \ = 0;\n    let mut prime_max_digit_count_index = 0;\n    let mut prime", "  \
    \  let mut primes = vec![];\n    let mut prime_sum = 0;\n    let mut prime_max\
    \ = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_value = -1;\n\
    \    let mut prime_max_index2 = 0;\n    let mut prime_max_value2 = -1;\n    let\
    \ mut prime_max_index3 = 0;\n    let mut prime_max_value3 = -1;\n    let mut prime_max_index4\
    \ = 0;\n    let mut prime_max_value4 = -1;\n    let mut prime_max_index5 = 0;\n\
    \    let mut prime_max_value5 = -1;\n    let mut prime_max_index6 = 0;\n    let\
    \ mut prime_max_value6 = -1;\n    let mut prime_max_index7 = 0;\n    let mut prime_max_value7\
    \ = -1;\n    let mut prime_max_index8 = 0;\n    let mut prime_max_value8 = -1;\n\
    \    let mut prime_max_index9 = 0;\n    let mut prime_max_value9 = -1;\n    let\
    \ mut prime_max_index10 = 0;\n    let mut prime_max_value10 = -1;\n    let mut\
    \ prime_max_index11 = 0;\n    let mut prime_max_value11 = -1;\n    let mut prime_max_index12\
    \ = 0;\n    let mut prime_max_value12 = -1;\n    let mut prime_max_index13 = 0;\n\
    \    let mut prime_max_value13 = -1;\n    let mut prime_max_index14 = 0;\n   \
    \ let mut prime_max_value14 = -1;\n    let mut prime_max_index15 = 0;\n    let\
    \ mut prime_max_value15 = -1;\n    let mut prime_max_index16 = 0;\n    let mut\
    \ prime_max_value16 = -1;\n    let mut prime_max_index17 = 0;\n    let mut prime_max_value17\
    \ = -1;\n    let mut prime_max_index18 = 0;\n    let mut prime_max_value18 = -1;\n\
    \    let mut prime_max_index19 = 0;\n    let mut prime_max_value19 = -1;\n   \
    \ let mut prime_max_index20 = 0;\n    let mut prime_max_value20 = -1;\n    let\
    \ mut prime_max_index21 = 0;\n    let mut prime_max_value21 = -1;\n    let mut\
    \ prime_max_index22 = 0;\n    let mut prime_max_value22 = -1;\n    let mut prime_max_index23\
    \ = 0;\n    let mut prime_max_value23 = -1;\n    let mut prime_max_index24 = 0;\n\
    \    let mut prime_max_value24 = -1;\n    let ", "    let mut primes = vec![true;\
    \ lst.len()];\n    primes[0] = false;\n    primes[1] = false;\n    for i in 2..lst.len()\
    \ {\n        if primes[i] {\n            for j in 2..lst.len() {\n           \
    \     if i != j && primes[j] {\n                    primes[j] = false;\n     \
    \           }\n            }\n        }\n    }\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if primes[i] {\n            sum += i;\n        }\n    }\n\
    \    sum", "    let mut primes = vec![true; lst.len()];\n    let mut sum = 0;\n\
    \    for i in lst {\n        if primes[i] {\n            sum += i;\n        }\n\
    \    }\n    sum", "    let mut primes = vec![];\n    let mut largest = vec![];\n\
    \    for i in lst {\n        if primes.contains(&i) {\n            largest.push(i);\n\
    \        } else {\n            primes.push(i);\n        }\n    }\n    let mut\
    \ sum = 0;\n    for i in largest {\n        sum += i;\n    }\n    sum", "    let\
    \ mut primes = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    for &x in lst {\n        if prime_found {\n            sum += x;\n      \
    \  } else {\n            if primes.iter().any(|&x| x == x) {\n               \
    \ prime_found = true;\n                primes.push(x);\n            } else {\n\
    \                prime_found = false;\n            }\n        }\n    }\n    if\
    \ primes.len() == 0 {\n        sum\n    } else {\n        skjkasdkd(primes)\n\
    \    }", "    let mut primes = vec![];\n    let mut max_prime = 0;\n    let mut\
    \ sum = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut prime: isize = 2;\n        while prime <= n {\n  \
    \          if n % prime == 0 {\n                break;\n            }\n      \
    \      prime += 2;\n        }\n        if prime > max_prime {\n            max_prime\
    \ = prime;\n        }\n        sum += n % prime as isize;\n        primes.push(prime);\n\
    \    }\n    if primes.len() == 0 {\n        return sum;\n    }\n    let mut prime\
    \ = primes[0];\n    for p in primes.iter().rev() {\n        if prime != p {\n\
    \            prime = p;\n        }\n    }\n    sum -= prime as isize;\n    sum",
  "    let mut prime = vec![];\n    let mut sum = 0;\n    for i in lst {\n       \
    \ if i % 2 == 0 {\n            prime = vec![];\n            sum += i;\n      \
    \  } else {\n            if !prime.contains(&i) {\n                prime.push(i);\n\
    \                sum += i;\n            }\n        }\n    }\n    sum", "    let\
    \ mut primes = vec![true; lst.len()];\n    let mut sum = 0;\n    for i in lst\
    \ {\n        if primes[i] {\n            sum += i;\n        }\n    }\n    sum",
  "    let mut max_prime: isize = 0;\n    let mut prime_sum: isize = 0;\n    for x\
    \ in lst {\n        if x % 2 == 0 {\n            continue;\n        }\n      \
    \  let mut prime: isize = 2;\n        while prime < x {\n            if x % prime\
    \ == 0 {\n                break;\n            }\n            prime += 2;\n   \
    \     }\n        if prime > max_prime {\n            max_prime = prime;\n    \
    \    }\n        prime_sum += x;\n    }\n    max_prime + prime_sum", "    let mut\
    \ primes = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n \
    \   for &x in lst {\n        if prime_found {\n            if x == 1 {\n     \
    \           sum += x;\n                prime_found = false;\n            } else\
    \ {\n                sum += x;\n            }\n        } else {\n            if\
    \ primes.len() == 0 {\n                primes.push(x);\n            } else {\n\
    \                let mut prime = primes.iter().find(|&x| x == x);\n          \
    \      if prime == primes.len() {\n                    primes.push(x);\n     \
    \           } else {\n                    prime_found = true;\n              \
    \  }\n            }\n        }\n    }\n    if prime_found {\n        sum -= primes.iter().find(|&x|\
    \ x == 1).unwrap();\n    }\n    sum", "    let mut primes = vec![];\n    let mut\
    \ largest = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    for n in lst {\n        if n % 2 == 0 {\n            primes.push(2);\n  \
    \          sum += 2;\n        } else {\n            let mut i = 2;\n         \
    \   while i * i <= n {\n                if n % i == 0 {\n                    primes.push(i);\n\
    \                    sum += i;\n                    break;\n                }\n\
    \                i += 1;\n            }\n        }\n        if prime_found {\n\
    \            break;\n        }\n        if primes.len() == lst.len() {\n     \
    \       prime_found = true;\n        }\n    }\n    if prime_found {\n        for\
    \ p in primes {\n            largest.push(p);\n        }\n    }\n    if sum ==\
    \ 0 {\n        sum = 1;\n    }\n    sum", "    let mut primes = vec![];\n    let\
    \ mut largest = -1;\n    for &x in lst {\n        if x % 2 == 0 {\n          \
    \  primes.push(x);\n        }\n        if x % 3 == 0 {\n            primes.push(x);\n\
    \        }\n        if x % 5 == 0 {\n            primes.push(x);\n        }\n\
    \        if x % 7 == 0 {\n            primes.push(x);\n        }\n        if x\
    \ % 11 == 0 {\n            primes.push(x);\n        }\n        if x % 13 == 0\
    \ {\n            primes.push(x);\n        }\n        if x % 17 == 0 {\n      \
    \      primes.push(x);\n        }\n        if x % 19 == 0 {\n            primes.push(x);\n\
    \        }\n        if x % 23 == 0 {\n            primes.push(x);\n        }\n\
    \        if x % 29 == 0 {\n            primes.push(x);\n        }\n        if\
    \ x % 31 == 0 {\n            primes.push(x);\n        }\n        if x % 37 ==\
    \ 0 {\n            primes.push(x);\n        }\n        if x % 41 == 0 {\n    \
    \        primes.push(x);\n        }\n        if x % 43 == 0 {\n            primes.push(x);\n\
    \        }\n        if x % 47 == 0 {\n            primes.push(x);\n        }\n\
    \        if x % 53 == 0 {\n            primes.push(x);\n        }\n        if\
    \ x % 59 == 0 {\n            primes.push(x);\n        }\n        if x % 61 ==\
    \ 0 {\n            primes.push(x);\n        }\n        if x % 67 == 0 {\n    \
    \        primes.push(x);\n        }\n        if x % 71 == 0 {\n            primes.push(x);\n\
    \        }\n        if x % 73 == 0 {\n            primes.push(x);\n        }\n\
    \        if x % 79 == 0 {\n            primes.push(x);\n        }\n        if\
    \ x % 83 == 0 {\n            primes.push(x);\n        }\n        if x % 89 ==\
    \ 0 {\n            primes.push(x);\n        }\n        if x % 97 == 0 {\n    \
    \        primes.push(x);\n        }\n        if x % 101 == 0 {\n            primes.push(x);\n\
    \        }\n        if x % 103 == 0 {\n            primes.push(x);\n        }\n\
    \        if x % 107 == 0 {\n            primes.push(x);\n        }\n        if\
    \ x % 109 == 0 {\n            primes.push(x);\n        }\n        if x % 113 ==\
    \ 0 {\n            primes.push(x);\n        }\n        if x % 117 == 0 {\n   \
    \         primes.push(x);\n        }\n        if x % 121 == 0 {\n            primes.push(x);\n\
    \        }\n        if x % 123 == 0 {\n            primes.push(x);\n        }\n\
    \        if x % 127 == 0 {\n            primes.push(x);\n        }\n        if\
    \ x % 131 == 0 {\n            primes.push(x);\n        }\n", "    let mut primes\
    \ = vec![];\n    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut\
    \ prime_max_index = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_index2\
    \ = 0;\n    let mut prime_max_value2 = -1;\n    let mut prime_max_index3 = 0;\n\
    \    let mut prime_max_value3 = -1;\n    let mut prime_max_index4 = 0;\n    let\
    \ mut prime_max_value4 = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5\
    \ = -1;\n    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = -1;\n\
    \    let mut prime_max_index7 = 0;\n    let mut prime_max_value7 = -1;\n    let\
    \ mut prime_max_index8 = 0;\n    let mut prime_max_value8 = -1;\n    let mut prime_max_index9\
    \ = 0;\n    let mut prime_max_value9 = -1;\n    let mut prime_max_index10 = 0;\n\
    \    let mut prime_max_value10 = -1;\n    let mut prime_max_index11 = 0;\n   \
    \ let mut prime_max_value11 = -1;\n    let mut prime_max_index12 = 0;\n    let\
    \ mut prime_max_value12 = -1;\n    let mut prime_max_index13 = 0;\n    let mut\
    \ prime_max_value13 = -1;\n    let mut prime_max_index14 = 0;\n    let mut prime_max_value14\
    \ = -1;\n    let mut prime_max_index15 = 0;\n    let mut prime_max_value15 = -1;\n\
    \    let mut prime_max_index16 = 0;\n    let mut prime_max_value16 = -1;\n   \
    \ let mut prime_max_index17 = 0;\n    let mut prime_max_value17 = -1;\n    let\
    \ mut prime_max_index18 = 0;\n    let mut prime_max_value18 = -1;\n    let mut\
    \ prime_max_index19 = 0;\n    let mut prime_max_value19 = -1;\n    let mut prime_max_index20\
    \ = 0;\n    let mut prime_max_value20 = -1;\n    let mut prime_max_index21 = 0;\n\
    \    let mut prime_max_value21 = -1;\n    let mut prime_max_index22 = 0;\n   \
    \ let mut prime_max_value22 = -1;\n    let mut prime_max_index23 = 0;\n    let\
    \ mut prime_max_value23 = -1;\n    let mut prime_max_index24 = 0;\n    let mut\
    \ prime_max_value24 = -1;\n    let ", "    let mut max_prime: isize = 0;\n   \
    \ let mut prime_sum: isize = 0;\n    let mut prime_found = false;\n    let mut\
    \ prime_prime: isize = 0;\n    let mut prime_prime_found = false;\n    let mut\
    \ prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_found = false;\n\
    \    let mut prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_found = false;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime", "    let mut primes =\
    \ vec![true; lst.len()];\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ primes[i as usize] {\n            sum += i;\n        }\n        for &j in &primes[i\
    \ as usize..] {\n            primes[j] = false;\n        }\n    }\n    sum", " \
    \   let mut primes = vec![true; lst.len()];\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if primes[i] {\n            sum += i;\n        }\n        for\
    \ j in 2..i {\n            if !primes[j] {\n                primes[j] = false;\n\
    \            }\n        }\n    }\n    sum", "    let mut primes = vec![];\n  \
    \  let mut sum = 0;\n    for &n in lst {\n        if n % 2 == 0 {\n          \
    \  sum += n;\n        }\n        for &p in primes {\n            if n % p == 0\
    \ {\n                break;\n            }\n        }\n        if p == 0 {\n \
    \           primes.push(n);\n        }\n    }\n    sum", "    let mut primes =\
    \ vec![];\n    let mut largest = vec![];\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if primes.contains(&i) {\n            sum += i;\n        } else\
    \ {\n            primes.push(i);\n            if largest == vec![] {\n       \
    \         largest = vec![i as isize];\n            } else {\n                largest\
    \ = vec![i.max(&largest)];\n            }\n        }\n    }\n    if largest ==\
    \ vec![] {\n        return sum;\n    }\n    for i in largest {\n        if primes.contains(&i)\
    \ {\n            sum += i;\n        }\n    }\n    return sum;", "    let mut primes\
    \ = vec![true; Prime::PRIME_COUNT];\n    let mut prime_sum = 0;\n    for &x in\
    \ lst {\n        if primes[x] {\n            prime_sum += x;\n        }\n    \
    \    for &y in &primes {\n            *y = false;\n        }\n    }\n    prime_sum",
  "    let mut primes = vec![];\n    let mut largest = vec![];\n    let mut sum =\
    \ 0;\n    let mut prime_found = false;\n    for x in lst {\n        if prime_found\
    \ {\n            if x == largest[0] {\n                sum += x;\n           \
    \ } else {\n                prime_found = false;\n            }\n        } else\
    \ {\n            if primes.len() == 0 {\n                primes.push(x);\n   \
    \             largest.push(x);\n            } else {\n                for p in\
    \ primes.iter() {\n                    if p == x {\n                        prime_found\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n            }\n        }\n    }\n    sum", "    let mut primes = vec![];\n\
    \    let mut largest = vec![];\n    let mut sum = 0;\n    for n in lst {\n   \
    \     if n % 2 == 0 {\n            sum += n;\n        }\n        if n % 3 == 0\
    \ {\n            sum += n;\n        }\n        if n % 5 == 0 {\n            sum\
    \ += n;\n        }\n        if n % 7 == 0 {\n            sum += n;\n        }\n\
    \        if n % 11 == 0 {\n            sum += n;\n        }\n        if n % 13\
    \ == 0 {\n            sum += n;\n        }\n        if n % 17 == 0 {\n       \
    \     sum += n;\n        }\n        if n % 19 == 0 {\n            sum += n;\n\
    \        }\n        if n % 23 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 29 == 0 {\n            sum += n;\n        }\n        if n % 31 == 0\
    \ {\n            sum += n;\n        }\n        if n % 37 == 0 {\n            sum\
    \ += n;\n        }\n        if n % 41 == 0 {\n            sum += n;\n        }\n\
    \        if n % 43 == 0 {\n            sum += n;\n        }\n        if n % 47\
    \ == 0 {\n            sum += n;\n        }\n        if n % 53 == 0 {\n       \
    \     sum += n;\n        }\n        if n % 59 == 0 {\n            sum += n;\n\
    \        }\n        if n % 61 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 67 == 0 {\n            sum += n;\n        }\n        if n % 71 == 0\
    \ {\n            sum += n;\n        }\n        if n % 73 == 0 {\n            sum\
    \ += n;\n        }\n        if n % 79 == 0 {\n            sum += n;\n        }\n\
    \        if n % 83 == 0 {\n            sum += n;\n        }\n        if n % 89\
    \ == 0 {\n            sum += n;\n        }\n        if n % 97 == 0 {\n       \
    \     sum += n;\n        }\n        if n % 103 == 0 {\n            sum += n;\n\
    \        }\n        if n % 109 == 0 {\n            sum += n;\n        }\n    \
    \    if n % 113 == 0 {\n            sum += n;\n        }\n        if n % 127 ==\
    \ 0 {\n            sum += n;\n        }\n        if n % 131 == 0 {\n         \
    \   sum += n;\n        }\n        if n % 137 == 0 {\n            sum += n;\n \
    \       }\n        if n % 143 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 149 == 0 {\n            sum += n;\n        }\n        if n % 153 ==\
    \ 0 {\n            sum += n;\n        }\n        if n % 157 == 0 {\n         \
    \   sum += n;\n        }\n        if n % 161 == 0 {\n            sum += n;\n \
    \       }\n        if n % 167 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 173 == 0 {\n            sum += n;\n        }\n        if n % 179 ==\
    \ 0 {\n            sum += n;\n        }\n        if n % 183 == 0 {\n         \
    \   sum += n;\n        }\n        if n % 189", "    let mut prime = vec![true;\
    \ lst.len()];\n    let mut sum = 0;\n    for i in lst {\n        if prime[i] {\n\
    \            let mut j = i;\n            while j > 1 {\n                if prime[j\
    \ / 2] {\n                    prime[j] = false;\n                    break;\n\
    \                }\n                j -= 2;\n            }\n            sum +=\
    \ i;\n        }\n    }\n    sum", "    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_value_pos = 0;\n\
    \    let mut prime_max_value_neg = 0;\n    let mut prime_max_value_neg_index =\
    \ 0;\n    let mut prime_max_value_neg_index2 = 0;\n    let mut prime_max_value_neg_index3\
    \ = 0;\n    let mut prime_max_value_neg_index4 = 0;\n    let mut prime_max_value_neg_index5\
    \ = 0;\n    let mut prime_max_value_neg_index6 = 0;\n    let mut prime_max_value_neg_index7\
    \ = 0;\n    let mut prime_max_value_neg_index8 = 0;\n    let mut prime_max_value_neg_index9\
    \ = 0;\n    let mut prime_max_value_neg_index10 = 0;\n    let mut prime_max_value_neg_index11\
    \ = 0;\n    let mut prime_max_value_neg_index12 = 0;\n    let mut prime_max_value_neg_index13\
    \ = 0;\n    let mut prime_max_value_neg_index14 = 0;\n    let mut prime_max_value_neg_index15\
    \ = 0;\n    let mut prime_max_value_neg_index16 = 0;\n    let mut prime_max_value_neg_index17\
    \ = 0;\n    let mut prime_max_value_neg_index18 = 0;\n    let mut prime_max_value_neg_index19\
    \ = 0;\n    let mut prime_max_value_neg_index20 = 0;\n    let mut prime_max_value_neg_index21\
    \ = 0;\n    let mut prime_max_value_neg_index22 = 0;\n    let mut prime_max_value_neg_index23\
    \ = 0;\n    let mut prime_max_value_neg_index24 = 0;\n    let mut prime_max_value_neg_index25\
    \ = 0;\n    let mut prime_max_value_neg_index26 = 0;\n    let mut prime_max_value_neg_index27\
    \ = 0;\n    let mut prime_max_value_neg_index28 = 0;\n    let mut prime_max_value_neg_index29\
    \ = 0;\n    let mut prime_max_value_neg_index30 = 0;\n    let mut prime_max_value_neg_index31\
    \ = 0;\n    let mut prime_max_value_neg_index32 = 0;\n    let mut prime_max_value_neg_index33\
    \ = 0;\n    let mut prime_max_value_neg_index34 = 0;\n    let mut prime_max_value_neg_index35\
    \ = 0;\n    let mut prime_max_value_neg_index36 = 0;\n    let mut prime_max_value_neg_index37\
    \ = 0;\n    let mut prime_", "    let mut prime_sum = 0;\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime", "    let mut primes = vec![];\n    let mut prime_sum\
    \ = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index = 0;\n    let\
    \ mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n    let mut prime_max_value2\
    \ = -1;\n    let mut prime_max_index3 = 0;\n    let mut prime_max_value3 = -1;\n\
    \    let mut prime_max_index4 = 0;\n    let mut prime_max_value4 = -1;\n    let\
    \ mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n    let mut prime_max_index6\
    \ = 0;\n    let mut prime_max_value6 = -1;\n    let mut prime_max_index7 = 0;\n\
    \    let mut prime_max_value7 = -1;\n    let mut prime_max_index8 = 0;\n    let\
    \ mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n    let mut prime_max_value9\
    \ = -1;\n    let mut prime_max_index10 = 0;\n    let mut prime_max_value10 = -1;\n\
    \    let mut prime_max_index11 = 0;\n    let mut prime_max_value11 = -1;\n   \
    \ let mut prime_max_index12 = 0;\n    let mut prime_max_value12 = -1;\n    let\
    \ mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n    let mut\
    \ prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n    let mut prime_max_index15\
    \ = 0;\n    let mut prime_max_value15 = -1;\n    let mut prime_max_index16 = 0;\n\
    \    let mut prime_max_value16 = -1;\n    let mut prime_max_index17 = 0;\n   \
    \ let mut prime_max_value17 = -1;\n    let mut prime_max_index18 = 0;\n    let\
    \ mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n    let mut\
    \ prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n    let mut prime_max_value20\
    \ = -1;\n    let mut prime_max_index21 = 0;\n    let mut prime_max_value21 = -1;\n\
    \    let mut prime_max_index22 = 0;\n    let mut prime_max_value22 = -1;\n   \
    \ let mut prime_max_index23 = 0;\n    let mut prime_max_value23 = -1;\n    let\
    \ mut prime_max_index24 = 0;\n    let mut prime_max_value24 = -1;\n    let ",
  "    let mut primes = vec![true; Prime::PRIME_COUNT];\n    let mut sum = 0;\n  \
    \  for &x in lst {\n        if primes[x as usize] {\n            sum += x;\n \
    \       }\n        primes[x as usize] = false;\n    }\n    sum", "    let mut\
    \ primes = vec![];\n    let mut largest = vec![];\n    for i in lst {\n      \
    \  if primes.contains(&i) {\n            largest.push(i);\n        } else {\n\
    \            primes.push(i);\n        }\n    }\n    for i in primes {\n      \
    \  if largest == vec![] {\n            return i;\n        }\n    }\n    for i\
    \ in largest {\n        let mut sum = 0;\n        for j in largest {\n       \
    \     if j == i {\n                continue;\n            }\n            if i\
    \ % j == 0 {\n                sum += j;\n            }\n        }\n        if\
    \ sum > i {\n            return i;\n        }\n    }\n    return -1;", "    let\
    \ mut primes = vec![true; lst.len()];\n    let mut prime_sum = 0;\n    let mut\
    \ prime_max = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_digit\
    \ = 0;\n    let mut prime_max_digit_index = 0;\n    let mut prime_max_digit_sum\
    \ = 0;\n    let mut prime_max_digit_sum_index = 0;\n    let mut prime_max_digit_sum_index2\
    \ = 0;\n    let mut prime_max_digit_sum_index3 = 0;\n    let mut prime_max_digit_sum_index4\
    \ = 0;\n    let mut prime_max_digit_sum_index5 = 0;\n    let mut prime_max_digit_sum_index6\
    \ = 0;\n    let mut prime_max_digit_sum_index7 = 0;\n    let mut prime_max_digit_sum_index8\
    \ = 0;\n    let mut prime_max_digit_sum_index9 = 0;\n    let mut prime_max_digit_sum_index10\
    \ = 0;\n    let mut prime_max_digit_sum_index11 = 0;\n    let mut prime_max_digit_sum_index12\
    \ = 0;\n    let mut prime_max_digit_sum_index13 = 0;\n    let mut prime_max_digit_sum_index14\
    \ = 0;\n    let mut prime_max_digit_sum_index15 = 0;\n    let mut prime_max_digit_sum_index16\
    \ = 0;\n    let mut prime_max_digit_sum_index17 = 0;\n    let mut prime_max_digit_sum_index18\
    \ = 0;\n    let mut prime_max_digit_sum_index19 = 0;\n    let mut prime_max_digit_sum_index20\
    \ = 0;\n    let mut prime_max_digit_sum_index21 = 0;\n    let mut prime_max_digit_sum_index22\
    \ = 0;\n    let mut prime_max_digit_sum_index23 = 0;\n    let mut prime_max_digit_sum_index24\
    \ = 0;\n    let mut prime_max_digit_sum_index25 = 0;\n    let mut prime_max_digit_sum_index26\
    \ = 0;\n    let mut prime_max_digit_sum_index27 = 0;\n    let mut prime_max_digit_sum_index28\
    \ = 0;\n    let mut prime_max_digit_sum_index29 = 0;\n    let mut prime_max_digit_sum_index30\
    \ = 0;\n    let mut prime_max_digit_sum_index31 = 0;\n    let mut prime_max_digit_sum_index32\
    \ = 0;\n    let mut prime_max_digit_sum_index33 = 0;\n    let mut prime_max_digit_sum_index34\
    \ = 0;\n    let mut prime_max_digit_sum_index35 = 0;\n    let mut prime_max_digit_sum_index36\
    \ = 0;\n    let mut prime_max_digit_sum_index37 = 0;\n    let mut prime_", " \
    \   let mut primes = vec![];\n    let mut largest = vec![];\n    let mut sum =\
    \ 0;\n    for i in lst {\n        if primes.contains(&i) {\n            sum +=\
    \ i;\n        } else {\n            primes.push(i);\n            if largest ==\
    \ vec![] {\n                largest = vec![sum];\n            } else {\n     \
    \           largest.push(sum);\n            }\n            sum = 0;\n        }\n\
    \    }\n    if largest != vec![] {\n        largest.push(sum);\n    }\n    largest.iter().max().unwrap()",
  "    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = 1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = 1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = 1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = 1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = 0;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = 0;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = 0;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = 0;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = 0;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = 0;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = 0;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = 0;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = 0;\n    let\
    \ mut prime_max_index15 = 0;\n    let mut prime_max_value15 = 0;\n    let mut\
    \ prime_max_index16 = 0;\n    let mut prime_max_value16 = 0;\n    let mut prime_max_index17\
    \ = 0;\n    let mut prime_max_value17 = 0;\n    let mut prime_max_index18 = 0;\n\
    \    let mut prime_max_value18 = 0;\n    let mut prime_max_index19 = 0;\n    let\
    \ mut prime_max_value19 = 0;\n    let mut prime_max_index20 = 0;\n    let mut\
    \ prime_max_value20 = 0;\n    let mut prime_max_index21 = 0;\n    let mut prime_max_value21\
    \ = 0;\n    let mut prime_max_index22 = 0;\n    let mut prime_max_value22 = 0;\n\
    \    let mut prime_max_index23 = 0;\n    let mut prime_max_value23 = 0;\n    let\
    \ mut prime_max_index24 = 0;\n    let mut prime_max_value24 = 0;\n    let mut\
    \ prime_max_index25 = 0;\n    let mut prime_max_value25 = 0;\n    let mut ", " \
    \   let mut primes = vec![];\n    let mut sum = 0;\n    let mut prime_found =\
    \ false;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n\
    \        } else {\n            if prime_found {\n                sum += n;\n \
    \           } else {\n                primes.push(n as isize);\n             \
    \   prime_found = true;\n            }\n        }\n    }\n    if prime_found {\n\
    \        sum -= primes.last().unwrap();\n    }\n    sum", "    let mut prime_sum\
    \ = 0;\n    let mut prime_max = std::i32::MAX;\n    let mut prime_max_index =\
    \ 0;\n    let mut prime_max_value = std::i32::MAX;\n    let mut prime_max_value_pos\
    \ = 0;\n    let mut prime_max_value_neg = 0;\n    let mut prime_max_value_neg_index\
    \ = 0;\n    let mut prime_max_value_neg_value = 0;\n    let mut prime_max_value_neg_index_pos\
    \ = 0;\n    let mut prime_max_value_neg_index_neg = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value_value = 0;\n    let mut\
    \ prime_max_value_neg_index_neg_value_value_value = 0;\n    let mut prime_max_value_neg_index_neg_value_value_value_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_neg_index_neg_value_value_value_value_value = 0;\n\
    \    let mut prime_max_value_", "    let mut prime_sum = 0;\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n  \
    \  let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n  \
    \  let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n  \
    \  let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];", " \
    \   let mut primes = vec![true; lst.len()];\n    let mut prime_sum = 0;\n    for\
    \ i in lst {\n        if primes[i] {\n            prime_sum += i;\n        }\n\
    \    }\n    prime_sum", "    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum", "    let mut primes = vec![];\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if primes.contains(&x) {\n            continue;\n\
    \        }\n        let mut prime = true;\n        for y in primes.iter().rev()\
    \ {\n            if x == y {\n                prime = false;\n               \
    \ break;\n            }\n        }\n        if prime {\n            primes.push(x);\n\
    \            sum += x;\n        }\n    }\n    sum", "    let mut primes = vec![true;\
    \ lst.len()];\n    let mut sum = 0;\n    for i in lst {\n        if primes[i]\
    \ {\n            sum += i;\n        }\n        for j in 2..i {\n            if\
    \ !primes[j] {\n                primes[j] = false;\n                break;\n \
    \           }\n        }\n    }\n    sum", "    let mut primes = vec![];\n   \
    \ let mut largest = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut prime_found52 = false;\n    let mut prime_found53 = false;\n\
    \    let mu", "    let mut primes = vec![];\n    let mut sum = 0;\n    let mut\
    \ prime_found = false;\n    for &x in lst {\n        if prime_found {\n      \
    \      sum += x;\n        } else {\n            if x == 1 {\n                prime_found\
    \ = true;\n            } else {\n                let mut prime: isize = 2;\n \
    \               while prime < x {\n                    if x % prime == 0 {\n \
    \                       prime = prime + 1;\n                    } else {\n   \
    \                     prime = prime + 2;\n                    }\n            \
    \    }\n                primes.push(prime);\n                if prime == x {\n\
    \                    prime_found = true;\n                }\n            }\n \
    \       }\n    }\n    if primes.len() == 0 {\n        0\n    } else {\n      \
    \  primes.iter().max().unwrap_or(0)\n    }", "    let mut primes = vec![];\n \
    \   let mut sum = 0;\n    for i in lst {\n        if primes.contains(&i) {\n \
    \           continue;\n        }\n        let mut j = 2;\n        while j < i\
    \ {\n            if i % j == 0 {\n                break;\n            }\n    \
    \        j += 1\n        }\n        if j == i {\n            primes.push(i);\n\
    \            sum += i;\n        }\n    }\n    sum", "    let mut prime = vec![true;\
    \ lst.len()];\n    let mut sum = 0;\n    for i in lst {\n        if prime[i] {\n\
    \            sum += i;\n        }\n        for j in 2..i {\n            if prime[j]\
    \ {\n                prime[j] = false;\n            }\n        }\n    }\n    sum",
  "    let mut prime_sum = 0;\n    let mut prime_num = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n  \
    \  let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n  \
    \  let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n  \
    \  let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];", "    let mut primes = vec![true; lst.len()\
    \ + 1];\n    primes[0] = false;\n    for i in 1..lst.len() {\n        for j in\
    \ 2..lst.len() {\n            if lst[i] % j == 0 {\n                primes[j]\
    \ = false;\n            }\n        }\n    }\n    let mut sum = 0;\n    for i in\
    \ 1..lst.len() {\n        if primes[i] {\n            sum += i;\n        }\n \
    \   }\n    sum", "    let mut primes = vec![true; lst.len()];\n    let mut largest\
    \ = -1;\n    let mut sum = 0;\n    for &x in lst {\n        if primes[x] {\n \
    \           sum += x;\n        }\n        if sum > largest {\n            largest\
    \ = sum;\n        }\n        for &y in &primes {\n            *y = false;\n  \
    \      }\n    }\n    largest", "    let mut max_prime: isize = 0;\n    let mut\
    \ prime_sum: isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2\
    \ = false;\n    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n\
    \    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let\
    \ mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let mut prime_found9\
    \ = false;\n    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n\
    \    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let\
    \ mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut\
    \ prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut prime_found18\
    \ = false;\n    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n\
    \    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let\
    \ mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut\
    \ prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut prime_found27\
    \ = false;\n    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n\
    \    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let\
    \ mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut\
    \ prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut prime_found36\
    \ = false;\n    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n\
    \    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let\
    \ mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut\
    \ prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut prime_found45\
    \ = false;\n    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n\
    \    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let\
    \ mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut\
    \ prime_found52 = false;\n    let mut prime_found53 = false;\n    let mut prime_found",
  "    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = vec![];\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            prime_sum += i;\n            if prime_sum > prime_max\
    \ {\n                prime_max = prime_sum;\n                prime_max_index =\
    \ i;\n            }\n        }\n    }\n    for i in lst {\n        if i % 2 ==\
    \ 0 {\n            if prime_sum == prime_max {\n                prime_max_value\
    \ = vec![prime_max_index, i];\n            }\n        }\n    }\n    prime_sum",
  "    let mut primes = vec![];\n    let mut largest = vec![];\n    let mut sum =\
    \ 0;\n    for n in lst {\n        if n % 2 == 0 {\n            primes.push(2);\n\
    \        }\n        for p in primes.iter().rev() {\n            if n % p == 0\
    \ {\n                primes.push(p);\n                break;\n            }\n\
    \        }\n        if primes.len() == 0 {\n            largest.push(n);\n   \
    \     }\n    }\n    for n in largest {\n        sum += n % 10;\n    }\n    sum",
  "    let mut primes = vec![true; lst.len()];\n    let mut max_prime = 0;\n    let\
    \ mut sum = 0;\n    for &x in lst {\n        if primes[x] {\n            sum +=\
    \ x;\n        } else {\n            primes[x] = false;\n        }\n    }\n   \
    \ if sum > max_prime {\n        max_prime = sum;\n    }\n    max_prime", "   \
    \ let mut primes = vec![];\n    let mut max_prime = 0;\n    let mut sum = 0;\n\
    \    for x in lst {\n        if primes.contains(&x) {\n            continue;\n\
    \        }\n        let mut prime = true;\n        for y in primes.iter() {\n\
    \            if x == y {\n                prime = false;\n                break;\n\
    \            }\n        }\n        if prime {\n            primes.push(x);\n \
    \           if x > max_prime {\n                max_prime = x;\n            }\n\
    \        }\n    }\n    for x in primes.iter() {\n        sum += x;\n    }\n  \
    \  sum", "    let mut primes = vec![];\n    let mut largest = vec![];\n    let\
    \ mut sum = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            primes.push(2);\n\
    \        }\n        for p in primes.iter_mut() {\n            if n % p == 0 {\n\
    \                *p = *p * 3;\n            }\n        }\n        if primes.iter().any(|&p|\
    \ p > n) {\n            largest.push(n);\n        }\n    }\n    for n in largest\
    \ {\n        sum += n.to_digits().sum();\n    }\n    sum", "    let mut primes\
    \ = vec![];\n    let mut largest = vec![];\n    let mut sum = 0;\n    let mut\
    \ prime_found = false;\n    for x in lst {\n        if prime_found {\n       \
    \     if x == 1 {\n                sum += x;\n            } else {\n         \
    \       sum += x;\n            }\n        } else {\n            if x == 1 {\n\
    \                sum += x;\n                primes.push(x);\n                largest.push(x);\n\
    \            } else {\n                prime_found = true;\n                let\
    \ mut prime_found = false;\n                for y in primes {\n              \
    \      if y == x {\n                        prime_found = true;\n            \
    \            break;\n                    }\n                }\n              \
    \  if prime_found {\n                    sum += x;\n                    largest.push(x);\n\
    \                }\n            }\n        }\n    }\n    if prime_found {\n  \
    \      largest.iter().for_each(|x| {\n            if x == 1 {\n              \
    \  sum += x;\n            }\n        });\n    }\n    sum", "    let mut primes\
    \ = vec![];\n    let mut sum = 0;\n    for x in lst {\n        if primes.contains(&x)\
    \ {\n            continue;\n        }\n        let mut prime = true;\n       \
    \ for y in primes.iter().rev() {\n            if x == y {\n                prime\
    \ = false;\n                break;\n            }\n        }\n        if prime\
    \ {\n            primes.push(x);\n            sum += x;\n        }\n    }\n  \
    \  sum", "    let mut primes = vec![true; lst.len()];\n    let mut sum = 0;\n\
    \    for i in lst {\n        if primes[i] {\n            sum += i;\n        }\n\
    \        for j in 2..i {\n            if primes[j] {\n                primes[j]\
    \ = false;\n            }\n        }\n    }\n    sum", "    let mut prime = vec![];\n\
    \    let mut sum = 0;\n    for x in lst {\n        if !prime.contains(&x) {\n\
    \            prime.push(x);\n            if !is_prime(x) {\n                sum\
    \ += x;\n            }\n        }\n    }\n    sum", "    let mut prime_sum = 0;\n\
    \    let mut prime_prime_sum = 0;\n    let mut prime_prime_prime_sum = 0;\n  \
    \  let mut prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut\
    \ prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime", "    let mut max_prime:\
    \ isize = 0;\n    let mut prime_sum: isize = 0;\n    for num in lst {\n      \
    \  if num > max_prime {\n            max_prime = num;\n        }\n    }\n    for\
    \ num in lst {\n        if num == max_prime {\n            prime_sum += num;\n\
    \        }\n    }\n    return prime_sum;", "    let mut primes = vec![];\n   \
    \ let mut largest = vec![];\n    let mut sum = 0;\n    let mut prime_sum = 0;\n\
    \    let mut prime_largest = 0;\n    let mut prime_prime_sum = 0;\n    let mut\
    \ prime_prime_largest = 0;\n    let mut prime_prime_prime_sum = 0;\n    let mut\
    \ prime_prime_prime_largest = 0;\n    let mut prime_prime_prime_prime_sum = 0;\n\
    \    let mut prime_prime_prime_prime_largest = 0;\n    let mut prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_largest = 0;\n    let mut prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_largest = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_largest\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_largest = 0;\n  \
    \  let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n  \
    \  let mut prime_prime_prime_prime_prime_prime_prime_prime_largest = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_prime_prime_largest = 0;\n   \
    \ let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_largest\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_largest\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let ", "    let mut primes = vec![];\n    let mut prime_sum = 0;\n\
    \    let mut prime_max = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_value\
    \ = -1;\n    let mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n\
    \    let mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n    let\
    \ mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n    let mut prime_max_index\
    \ = -1;\n    let mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n\
    \    let mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n    let\
    \ mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n    let mut prime_max_value\
    \ = -1;\n    let mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n\
    \    let mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n    let\
    \ mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n    let mut prime_max_index\
    \ = -1;\n    let mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n\
    \    let mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n    let\
    \ mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n    let mut prime_max_value\
    \ = -1;\n    let mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n\
    \    let mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n    let\
    \ mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n    let mut prime_max_index\
    \ = -1;\n    let mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n\
    \    let mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n    let\
    \ mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n    let mut prime_max_value\
    \ = -1;\n    let mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n\
    \    let mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n    let\
    \ mut prime_max_index = -1;\n    let mut prime_max_value = -1;\n    let mut prime_max_index\
    \ = -1;\n    let mut prime_max_value = -1;\n    let mut prime_max_index = -1;\n\
    \    let mut prime_max_value = -1;\n    let ", "    let mut max_prime: isize =\
    \ 0;\n    let mut prime_sum: isize = 0;\n    for &x in lst {\n        if x > max_prime\
    \ {\n            max_prime = x;\n        }\n        if x % 2 == 0 {\n        \
    \    prime_sum += x;\n        }\n    }\n    if prime_sum > max_prime {\n     \
    \   max_prime = prime_sum;\n    }\n    return max_prime;", "    let mut primes\
    \ = vec![true; lst.len()];\n    let mut primes_len = lst.len();\n    let mut primes_sum\
    \ = 0;\n    let mut primes_index = 0;\n    let mut primes_sum_index = 0;\n   \
    \ let mut primes_sum_index2 = 0;\n    let mut primes_sum_index3 = 0;\n    let\
    \ mut primes_sum_index4 = 0;\n    let mut primes_sum_index5 = 0;\n    let mut\
    \ primes_sum_index6 = 0;\n    let mut primes_sum_index7 = 0;\n    let mut primes_sum_index8\
    \ = 0;\n    let mut primes_sum_index9 = 0;\n    let mut primes_sum_index10 = 0;\n\
    \    let mut primes_sum_index11 = 0;\n    let mut primes_sum_index12 = 0;\n  \
    \  let mut primes_sum_index13 = 0;\n    let mut primes_sum_index14 = 0;\n    let\
    \ mut primes_sum_index15 = 0;\n    let mut primes_sum_index16 = 0;\n    let mut\
    \ primes_sum_index17 = 0;\n    let mut primes_sum_index18 = 0;\n    let mut primes_sum_index19\
    \ = 0;\n    let mut primes_sum_index20 = 0;\n    let mut primes_sum_index21 =\
    \ 0;\n    let mut primes_sum_index22 = 0;\n    let mut primes_sum_index23 = 0;\n\
    \    let mut primes_sum_index24 = 0;\n    let mut primes_sum_index25 = 0;\n  \
    \  let mut primes_sum_index26 = 0;\n    let mut primes_sum_index27 = 0;\n    let\
    \ mut primes_sum_index28 = 0;\n    let mut primes_sum_index29 = 0;\n    let mut\
    \ primes_sum_index30 = 0;\n    let mut primes_sum_index31 = 0;\n    let mut primes_sum_index32\
    \ = 0;\n    let mut primes_sum_index33 = 0;\n    let mut primes_sum_index34 =\
    \ 0;\n    let mut primes_sum_index35 = 0;\n    let mut primes_sum_index36 = 0;\n\
    \    let mut primes_sum_index37 = 0;\n    let mut primes_sum_index38 = 0;\n  \
    \  let mut primes_sum_index39 = 0;\n    let mut primes_sum_index40 = 0;\n    let\
    \ mut primes_sum_index41 = 0;\n    let mut primes_sum_index42 = 0;\n    let mut\
    \ primes_sum_index43 = 0;\n    let mut primes_sum_index44 = 0;\n    let mut primes_sum_index45\
    \ = 0;\n    let mut primes_sum_index46 = 0;\n    let mut primes_sum_index47 =\
    \ 0;\n    let mut primes_sum", "    let mut max_prime: isize = 0;\n    let mut\
    \ prime_sum: isize = 0;\n    for i in lst {\n        if i % 2 == 0 {\n       \
    \     continue;\n        }\n        let mut j: isize = 2;\n        while j * j\
    \ <= i {\n            if i % j == 0 {\n                break;\n            }\n\
    \            j += 1;\n        }\n        if j > max_prime {\n            max_prime\
    \ = j;\n        }\n        prime_sum += i as isize;\n    }\n    max_prime + prime_sum",
  "    let mut primes = vec![true; lst.len()];\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if primes[i] {\n            sum += i;\n        }\n        for\
    \ j in 2..i {\n            if !primes[j] {\n                primes[j] = false;\n\
    \                break;\n            }\n        }\n    }\n    sum", "    let mut\
    \ primes = vec![true; lst.len()];\n    let mut primes_idx = vec![0; lst.len()];\n\
    \    let mut max_prime = 0;\n    let mut max_prime_idx = 0;\n    let mut sum =\
    \ 0;\n    for &x in lst {\n        if primes[*primes_idx] {\n            primes[*primes_idx]\
    \ = false;\n            primes_idx[*primes_idx] = 0;\n            sum += x;\n\
    \        }\n        if *primes_idx >= lst.len() {\n            break;\n      \
    \  }\n        if primes[*primes_idx] {\n            primes_idx[*primes_idx] +=\
    \ 1;\n        }\n        if *primes_idx == lst.len() {\n            if *primes_idx\
    \ > max_prime {\n                max_prime = *primes_idx;\n                max_prime_idx\
    \ = *primes_idx;\n            }\n            *primes_idx = 0;\n        }\n   \
    \ }\n    sum", "    let mut primes = vec![];\n    let mut sum = 0;\n    for x\
    \ in lst {\n        if primes.contains(&x) {\n            continue;\n        }\n\
    \        let mut prime = true;\n        for y in primes.iter().rev() {\n     \
    \       if x == y {\n                prime = false;\n                break;\n\
    \            }\n        }\n        if prime {\n            primes.push(x);\n \
    \           sum += x;\n        }\n    }\n    sum", "    let mut primes = vec![true;\
    \ lst.len()];\n    let mut largest = vec![];\n    for i in lst {\n        if primes[i]\
    \ {\n            largest.push(i);\n        }\n        for j in 2..i {\n      \
    \      if !primes[j] {\n                primes[j] = false;\n            }\n  \
    \      }\n    }\n    if largest.len() == 1 {\n        return largest[0];\n   \
    \ }\n    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n      \
    \      sum += i;\n        }\n    }\n    return sum;", "    let mut primes = vec![];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = -1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = -1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = -1;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = -1;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = -1;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = -1;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = -1;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = -1;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n   \
    \ let mut prime_max_index15 = 0;\n    let mut prime_max_value15 = -1;\n    let\
    \ mut prime_max_index16 = 0;\n    let mut prime_max_value16 = -1;\n    let mut\
    \ prime_max_index17 = 0;\n    let mut prime_max_value17 = -1;\n    let mut prime_max_index18\
    \ = 0;\n    let mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n\
    \    let mut prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n   \
    \ let mut prime_max_value20 = -1;\n    let mut prime_max_index21 = 0;\n    let\
    \ mut prime_max_value21 = -1;\n    let mut prime_max_index22 = 0;\n    let mut\
    \ prime_max_value22 = -1;\n    let mut prime_max_index23 = 0;\n    let mut prime_max_value23\
    \ = -1;\n    let mut prime_max_index24 = 0;\n    let mut prime_max_value24 = -1;\n\
    \    let ", "    let mut primes = vec![true; lst.len()];\n    let mut sum = 0;\n\
    \    for i in lst {\n        if primes[i] {\n            sum += i;\n        }\n\
    \        for j in 2..i {\n            if !primes[j] {\n                primes[j]\
    \ = false;\n            }\n        }\n    }\n    sum", "    let mut primes = vec![];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = vec![];\n    let mut prime_max_value_sum\
    \ = 0;\n    let mut prime_max_value_max = 0;\n    let mut prime_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value = vec![];\n    let mut prime_max_value_max_value_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max = 0;\n    let mut prime_max_value_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value_max_value = vec![];\n    let mut\
    \ prime_max_value_max_value_max_value_sum = 0;\n    let mut prime_max_value_max_value_max_value_max\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_index = 0;\n    let\
    \ mut prime_max_value_max_value_max_value_max_value = vec![];\n    let mut prime_max_value_max_value_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_max = 0;\n    let\
    \ mut prime_max_value_max_value_max_value_max_max_index = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max\
    \ = vec![];\n    let mut prime_max_value_max_value_max_value_max_value_sum = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max = 0;\n    let mut\
    \ prime_max_value_max_value_max_value_max_value_max_index = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value\
    \ = vec![];\n    let mut prime_max_value_max_value_max_value_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_max = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_max_index = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_max = vec![];\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_sum = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_max = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = vec![];\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_", "    let mut primes\
    \ = vec![];\n    let mut largest = vec![];\n    let mut sum = 0;\n    let mut\
    \ prime_found = false;\n    let mut prime_sum = 0;\n    let mut prime_digits =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut prime_digits_found = false;\n    let mut prime_digits_sum =\
    \ 0;\n    let mut ", "    let mut prime_sum = 0;\n    let mut prime_num = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime", "    let mut prime_sum = 0;\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num\
    \ = vec![];\n    let mut prime_num = vec![];\n    let mut prime_num = vec![];\n\
    \    let mut prime", "    let mut primes = vec![];\n    let mut largest = vec![];\n\
    \    let mut sum = 0;\n    let mut prime_found = false;\n    for n in lst {\n\
    \        if n % 2 == 0 {\n            primes.push(2);\n        }\n        for\
    \ p in primes.iter().rev() {\n            if n % p == 0 {\n                prime_found\
    \ = true;\n                break;\n            }\n        }\n        if prime_found\
    \ {\n            sum += n % 10;\n            primes.remove(primes.iter().rev().next().unwrap());\n\
    \            largest.push(n % 10);\n        }\n    }\n    if primes.len() > 0\
    \ {\n        sum += primes.iter().rev().next().unwrap();\n    }\n    if largest.len()\
    \ > 0 {\n        sum += largest.iter().rev().next().unwrap();\n    }\n    sum",
  "    let mut primes = vec![];\n    let mut largest = vec![];\n    for i in lst {\n\
    \        if primes.contains(&i) {\n            largest.push(i);\n        } else\
    \ {\n            primes.push(i);\n        }\n    }\n    let mut sum = 0;\n   \
    \ for i in largest {\n        sum += i;\n    }\n    sum", "    let mut primes\
    \ = vec![true; lst.len() + 1];\n    primes[0] = false;\n    for i in 1..lst.len()\
    \ {\n        if primes[i] {\n            for j in 2..i {\n                if lst[j]\
    \ % i == 0 {\n                    primes[j] = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    let mut sum = 0;\n  \
    \  for i in 2..lst.len() {\n        if primes[i] {\n            sum += i;\n  \
    \      }\n    }\n    sum", "    let mut primes = vec![true; lst.len()];\n    primes[0]\
    \ = false;\n    primes[1] = false;\n    for i in 2..lst.len() {\n        if primes[i]\
    \ {\n            for j in 2..lst.len() {\n                if i != j && primes[j]\
    \ && lst[i] % j == 0 {\n                    primes[j] = false;\n             \
    \       break;\n                }\n            }\n        }\n    }\n    let mut\
    \ sum = 0;\n    for i in 2..lst.len() {\n        if primes[i] {\n            sum\
    \ += lst[i];\n        }\n    }\n    sum", "    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    let mut prime_found = false;\n    for num in lst {\n     \
    \   if prime_found {\n            sum += num;\n        } else {\n            if\
    \ num > 1 {\n                primes.push(num);\n                prime_found =\
    \ true;\n            }\n        }\n    }\n    if primes.len() == 0 {\n       \
    \ return sum;\n    }\n    let mut prime_found = false;\n    for num in primes\
    \ {\n        if prime_found {\n            sum += num;\n        } else {\n   \
    \         if num > 1 {\n                primes.push(num);\n                prime_found\
    \ = true;\n            }\n        }\n    }\n    if primes.len() == 0 {\n     \
    \   return sum;\n    }\n    for num in primes {\n        if num > 1 {\n      \
    \      primes.push(num);\n            prime_found = true;\n        }\n    }\n\
    \    for num in primes {\n        if num > 1 {\n            primes.push(num);\n\
    \            prime_found = true;\n        }\n    }\n    for num in primes {\n\
    \        if num > 1 {\n            primes.push(num);\n            prime_found\
    \ = true;\n        }\n    }\n    for num in primes {\n        if num > 1 {\n \
    \           primes.push(num);\n            prime_found = true;\n        }\n  \
    \  }\n    for num in primes {\n        if num > 1 {\n            primes.push(num);\n\
    \            prime_found = true;\n        }\n    }\n    for num in primes {\n\
    \        if num > 1 {\n            primes.push(num);\n            prime_found\
    \ = true;\n        }\n    }\n    for num in primes {\n        if num > 1 {\n \
    \           primes.push(num);\n            prime_found = true;\n        }\n  \
    \  }\n    for num in primes {\n        if num > 1 {\n            primes.push(num);\n\
    \            prime_found = true;\n        }\n    }\n    for num in primes {\n\
    \        if num > 1 {\n            primes.push(num);\n            prime_found\
    \ = true;\n        }\n    }\n    for num in primes {\n        if num > 1 {\n \
    \           primes.push(num);\n            prime_found = true;\n        }\n  \
    \  }\n    for num in primes {\n        if num > 1 {\n            primes.push(num);\n\
    \            prime_found = true;\n        }\n    }\n    for num in primes {\n\
    \        if num > 1 {\n            primes.push(num);\n            prime_found\
    \ = true;\n        }\n    }\n    for num in primes {\n        if num > 1 {\n \
    \           primes.push(num);\n            prime_found = true;\n        }\n  \
    \  }\n    for num in primes {\n        if num > 1 {\n            primes.push(num);\n\
    \            prime", "    let mut primes = vec![true; lst.len()];\n    let mut\
    \ primes_index = 0;\n    let mut sum = 0;\n    for &x in lst {\n        if primes[primes_index]\
    \ {\n            primes[primes_index] = false;\n            sum += x;\n      \
    \  }\n        if primes_index == primes.len() - 1 {\n            primes_index\
    \ = 0;\n        }\n        primes_index += 1;\n    }\n    sum", "    let mut primes\
    \ = vec![true; lst.len() + 1];\n    primes[0] = false;\n    for i in 1..lst.len()\
    \ {\n        if primes[i] {\n            for j in 2..i {\n                if lst[j]\
    \ % i == 0 {\n                    primes[j] = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    let mut sum = 0;\n  \
    \  for i in 0..lst.len() {\n        if primes[i] {\n            sum += lst[i];\n\
    \        }\n    }\n    sum", "    let mut primes = vec![];\n    let mut sum =\
    \ 0;\n    let mut prime_found = false;\n    for x in lst {\n        if prime_found\
    \ {\n            sum += x;\n        } else {\n            if primes.contains(&x)\
    \ {\n                prime_found = true;\n            } else {\n             \
    \   primes.push(x);\n            }\n        }\n    }\n    if prime_found {\n \
    \       sum\n    } else {\n        0\n    }", "    let mut max_prime = vec![0;\
    \ 10];\n    let mut sum_of_digits = vec![0; 10];\n    let mut prime_found = false;\n\
    \    for num in lst {\n        if num == 0 {\n            continue;\n        }\n\
    \        let mut prime_found = false;\n        for j in 0..10 {\n            if\
    \ num % j == 0 {\n                prime_found = true;\n                break;\n\
    \            }\n        }\n        if prime_found {\n            for i in 0..10\
    \ {\n                if num % i == 0 {\n                    max_prime[i] = max(max_prime[i],\
    \ i);\n                    sum_of_digits[i] += num / i;\n                    break;\n\
    \                }\n            }\n        } else {\n            for i in 0..10\
    \ {\n                if num % i == 0 {\n                    max_prime[i] = max(max_prime[i],\
    \ i);\n                    sum_of_digits[i] += num / i;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    if sum_of_digits.iter().all(|&x|\
    \ x == 0) {\n        return 0;\n    }\n    let mut max_prime_digit = vec![0; 10];\n\
    \    for i in 0..10 {\n        if max_prime[i] > max_prime_digit[i] {\n      \
    \      max_prime_digit[i] = max_prime[i];\n        }\n    }\n    for i in 0..10\
    \ {\n        max_prime_digit[i] = max(max_prime_digit[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], max_prime_digit[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_prime[i], sum_of_digits[i]);\n\
    \    }\n    for i in 0..10 {\n        max_prime[i] = max(max_", "    let mut primes\
    \ = vec![];\n    let mut sum = 0;\n    let mut max_prime = 0;\n    let mut max_prime_digit\
    \ = 0;\n    let mut max_prime_digit_count = 0;\n    for x in lst {\n        if\
    \ primes.contains(&x) {\n            sum += x;\n        } else {\n           \
    \ primes.push(x);\n        }\n    }\n    for x in primes {\n        if x == 1\
    \ {\n            max_prime = x;\n            max_prime_digit = x;\n          \
    \  max_prime_digit_count = 1;\n        } else {\n            let mut is_prime\
    \ = true;\n            for y in primes {\n                if x == y {\n      \
    \              is_prime = false;\n                    break;\n               \
    \ }\n            }\n            if is_prime {\n                max_prime = x;\n\
    \                max_prime_digit = x;\n                max_prime_digit_count =\
    \ 1;\n            }\n        }\n    }\n    sum", "    let mut primes = vec![true;\
    \ Prime::PRIME_COUNT];\n    let mut sum = 0;\n    for x in lst {\n        if primes[x]\
    \ {\n            sum += x;\n        }\n    }\n    sum", "    let mut primes =\
    \ vec![];\n    let mut largest = vec![];\n    let mut sum = 0;\n    let mut prime_found\
    \ = false;\n    for x in lst {\n        if prime_found {\n            sum += x;\n\
    \        } else {\n            if primes.contains(&x) {\n                prime_found\
    \ = true;\n                primes.push(x);\n                largest.push(x);\n\
    \            } else {\n                primes.push(x);\n                largest.push(x);\n\
    \            }\n        }\n    }\n    if primes.len() == 0 {\n        return sum;\n\
    \    }\n    for x in primes {\n        if largest == vec![] {\n            return\
    \ sum;\n        }\n        for y in largest {\n            if x == y {\n     \
    \           largest.push(x + 1);\n                break;\n            }\n    \
    \    }\n    }\n    for x in largest {\n        if primes.contains(&x) {\n    \
    \        primes.push(x);\n            sum += x;\n        } else {\n          \
    \  primes.push(x);\n            sum += x;\n        }\n    }\n    return sum;",
  "    let mut primes = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    for num in lst {\n        if prime_found {\n            sum += num;\n   \
    \     } else {\n            if num == 0 {\n                primes.push(0);\n \
    \               sum += num;\n                prime_found = true;\n           \
    \ } else {\n                let mut i = 2;\n                while i * i <= num\
    \ {\n                    if num % i == 0 {\n                        primes.push(i);\n\
    \                        sum += num / i;\n                        break;\n   \
    \                 }\n                    i += 1;\n                }\n        \
    \    }\n        }\n    }\n    primes.iter().cloned().max().unwrap()", "    let\
    \ mut primes = vec![true; lst.len() + 1];\n    primes[0] = false;\n    for i in\
    \ 1..lst.len() {\n        if primes[i] {\n            for j in 2..lst.len() {\n\
    \                if j > i {\n                    if lst[j] % i == 0 {\n      \
    \                  primes[j] = false;\n                    }\n               \
    \ }\n            }\n        }\n    }\n    let mut sum = 0;\n    for i in 1..lst.len()\
    \ {\n        if primes[i] {\n            sum += lst[i];\n        }\n    }\n  \
    \  sum", "    let mut primes = vec![true; lst.len()];\n    let mut sum = 0;\n\
    \    for i in lst {\n        if primes[i] {\n            sum += i;\n        }\n\
    \        for j in 2..i {\n            if !primes[j] {\n                primes[j]\
    \ = false;\n            }\n        }\n    }\n    sum", "    let mut primes = vec![true;\
    \ lst.len()];\n    primes[0] = false;\n    primes[1] = false;\n    primes[2] =\
    \ false;\n    primes[3] = false;\n    primes[4] = false;\n    primes[5] = false;\n\
    \    primes[6] = false;\n    primes[7] = false;\n    primes[8] = false;\n    primes[9]\
    \ = false;\n    primes[10] = false;\n    primes[11] = false;\n    primes[12] =\
    \ false;\n    primes[13] = false;\n    primes[14] = false;\n    primes[15] = false;\n\
    \    primes[16] = false;\n    primes[17] = false;\n    primes[18] = false;\n \
    \   primes[19] = false;\n    primes[20] = false;\n    primes[21] = false;\n  \
    \  primes[22] = false;\n    primes[23] = false;\n    primes[24] = false;\n   \
    \ primes[25] = false;\n    primes[26] = false;\n    primes[27] = false;\n    primes[28]\
    \ = false;\n    primes[29] = false;\n    primes[30] = false;\n    primes[31] =\
    \ false;\n    primes[32] = false;\n    primes[33] = false;\n    primes[34] = false;\n\
    \    primes[35] = false;\n    primes[36] = false;\n    primes[37] = false;\n \
    \   primes[38] = false;\n    primes[39] = false;\n    primes[40] = false;\n  \
    \  primes[41] = false;\n    primes[42] = false;\n    primes[43] = false;\n   \
    \ primes[44] = false;\n    primes[45] = false;\n    primes[46] = false;\n    primes[47]\
    \ = false;\n    primes[48] = false;\n    primes[49] = false;\n    primes[50] =\
    \ false;\n    primes[51] = false;\n    primes[52] = false;\n    primes[53] = false;\n\
    \    primes[54] = false;\n    primes[55] = false;\n    primes[56] = false;\n \
    \   primes[57] = false;\n    primes[58] = false;\n    primes[59] = false;\n  \
    \  primes[60] = false;\n    primes[61] = false;\n    primes[62] = false;\n   \
    \ primes[63] = false;\n    primes[64] = false;\n    primes[65] = false;\n    primes[66]\
    \ = false;\n    primes[67] = false;\n    primes[68] = false;\n    primes[69] =\
    \ false;\n    primes[70] = false;\n    primes[71] = false;\n    prime", "    let\
    \ mut max_prime: isize = 0;\n    let mut prime_sum: isize = 0;\n    for n in lst\
    \ {\n        if n % 2 == 0 {\n            continue;\n        }\n        let mut\
    \ prime: isize = 2;\n        while prime < n {\n            if n % prime == 0\
    \ {\n                break;\n            }\n            prime += 2;\n        }\n\
    \        if prime > max_prime {\n            max_prime = prime;\n        }\n \
    \       prime_sum += n % prime;\n    }\n    max_prime", "    let mut primes =\
    \ vec![true; lst.len()];\n    let mut prime_sum = 0;\n    let mut prime_max =\
    \ 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_value = 1;\n   \
    \ let mut prime_max_index2 = 0;\n    let mut prime_max_value2 = 1;\n    let mut\
    \ prime_max_index3 = 0;\n    let mut prime_max_value3 = 1;\n    let mut prime_max_index4\
    \ = 0;\n    let mut prime_max_value4 = 1;\n    let mut prime_max_index5 = 0;\n\
    \    let mut prime_max_value5 = 1;\n    let mut prime_max_index6 = 0;\n    let\
    \ mut prime_max_value6 = 0;\n    let mut prime_max_index7 = 0;\n    let mut prime_max_value7\
    \ = 0;\n    let mut prime_max_index8 = 0;\n    let mut prime_max_value8 = 0;\n\
    \    let mut prime_max_index9 = 0;\n    let mut prime_max_value9 = 0;\n    let\
    \ mut prime_max_index10 = 0;\n    let mut prime_max_value10 = 0;\n    let mut\
    \ prime_max_index11 = 0;\n    let mut prime_max_value11 = 0;\n    let mut prime_max_index12\
    \ = 0;\n    let mut prime_max_value12 = 0;\n    let mut prime_max_index13 = 0;\n\
    \    let mut prime_max_value13 = 0;\n    let mut prime_max_index14 = 0;\n    let\
    \ mut prime_max_value14 = 0;\n    let mut prime_max_index15 = 0;\n    let mut\
    \ prime_max_value15 = 0;\n    let mut prime_max_index16 = 0;\n    let mut prime_max_value16\
    \ = 0;\n    let mut prime_max_index17 = 0;\n    let mut prime_max_value17 = 0;\n\
    \    let mut prime_max_index18 = 0;\n    let mut prime_max_value18 = 0;\n    let\
    \ mut prime_max_index19 = 0;\n    let mut prime_max_value19 = 0;\n    let mut\
    \ prime_max_index20 = 0;\n    let mut prime_max_value20 = 0;\n    let mut prime_max_index21\
    \ = 0;\n    let mut prime_max_value21 = 0;\n    let mut prime_max_index22 = 0;\n\
    \    let mut prime_max_value22 = 0;\n    let mut prime_max_index23 = 0;\n    let\
    \ mut prime_max_value23 = 0;\n    let mut prime_max_index24 = 0;\n    let mut\
    \ prime_max_value24 = 0;\n    let mut prime_max_index25 = 0;", "    let mut max_prime:\
    \ isize = 0;\n    let mut prime_sum: isize = 0;\n    let mut prime_found = false;\n\
    \    for &x in lst {\n        if x == 0 {\n            continue;\n        }\n\
    \        if prime_found {\n            if x == max_prime {\n                prime_found\
    \ = false;\n            }\n            continue;\n        }\n        if x <= 1\
    \ {\n            continue;\n        }\n        let mut prime_found = true;\n \
    \       let mut prime_sum = 0;\n        let mut prime_prime: isize = 0;\n    \
    \    let mut prime_prime_prime: isize = 0;\n        let mut prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime: isize = 0;\n    \
    \    let mut prime_prime_prime_prime_prime_prime: isize = 0;\n        let mut\
    \ prime_prime_prime_prime_prime_prime_prime: isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n        let mut prime_prime_prime_prime_prime_", "    let mut primes\
    \ = vec![];\n    let mut largest = vec![];\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if primes.contains(&i) {\n            sum += i;\n        } else\
    \ {\n            primes.push(i);\n            if i > largest.len() {\n       \
    \         largest.push(i);\n            }\n        }\n    }\n    if largest.len()\
    \ == 0 {\n        return sum;\n    }\n    let mut largest = largest.iter().max().unwrap();\n\
    \    for &i in &primes {\n        if i == largest {\n            sum += i;\n \
    \       }\n    }\n    sum", "    let mut primes = vec![true; lst.len()];\n   \
    \ let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = vec![0];\n    let mut prime_max_value_sum\
    \ = 0;\n    let mut prime_max_value_max = 0;\n    let mut prime_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value = vec![0];\n    let mut prime_max_value_max_value_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max = 0;\n    let mut prime_max_value_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value_max_value = vec![0];\n    let mut\
    \ prime_max_value_max_value_max_value_sum = 0;\n    let mut prime_max_value_max_value_max_value_max\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_index = 0;\n    let\
    \ mut prime_max_value_max_value_max_value_max_value = vec![0];\n    let mut prime_max_value_max_value_max_value_max_value_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max = 0;\n \
    \   let mut prime_max_value_max_value_max_value_max_value_max_index = 0;\n   \
    \ let mut prime_max_value_max_value_max_value_max_value_max_value = vec![0];\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_sum = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_max = 0;\n    let\
    \ mut prime_max_value_max_value_max_value_max_value_max_value_max = 0;\n    let\
    \ mut prime_max_value_max_value_max_value_max_value_max_value_max_index = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = vec![0];\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_max\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = vec![0];\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_max\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_", "    let mut primes\
    \ = vec![];\n    let mut largest = vec![];\n    let mut sum = 0;\n    for &x in\
    \ lst {\n        if primes.contains(&x) {\n            sum += x;\n        } else\
    \ {\n            primes.push(x);\n            if primes.len() > largest.len()\
    \ {\n                largest = primes;\n            }\n        }\n    }\n    largest.iter().for_each(|x|\
    \ {\n        sum += x;\n    });\n    sum", "    let mut max_prime: isize = 0;\n\
    \    let mut prime_sum: isize = 0;\n    let mut prime_counter: usize = 0;\n  \
    \  for x in lst {\n        if x == 0 {\n            continue;\n        }\n   \
    \     if prime_counter == 0 {\n            max_prime = x;\n            prime_sum\
    \ += x;\n            prime_counter = 1;\n        } else {\n            if x %\
    \ prime_sum == 0 {\n                prime_sum += x;\n                prime_counter\
    \ += 1;\n            } else {\n                if prime_sum > max_prime {\n  \
    \                  max_prime = prime_sum;\n                }\n               \
    \ prime_sum = 0;\n                prime_counter = 1;\n            }\n        }\n\
    \    }\n    if prime_counter > 0 {\n        max_prime = prime_sum;\n    }\n  \
    \  max_prime", "    let mut primes = vec![];\n    let mut largest = vec![];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes.contains(&i) {\n\
    \            sum += i;\n        } else {\n            primes.push(i);\n      \
    \      if largest == vec![] {\n                largest = vec![i as usize];\n \
    \           } else {\n                largest.push(i);\n            }\n      \
    \  }\n    }\n    if largest == vec![] {\n        largest = vec![0];\n    }\n \
    \   largest.iter().cloned().for_each(|x| {\n        if primes.contains(&x) {\n\
    \            primes.remove(x);\n        }\n    });\n    sum", "    let mut max_prime:\
    \ isize = 0;\n    let mut sum_of_digits: isize = 0;\n    for &i in lst {\n   \
    \     let mut prime: isize = 1;\n        while prime < i {\n            if i %\
    \ prime == 0 {\n                break;\n            }\n            prime += 1;\n\
    \        }\n        if prime > max_prime {\n            max_prime = prime;\n \
    \       }\n        sum_of_digits += i;\n    }\n    max_prime * sum_of_digits",
  "    let mut max_prime: isize = 0;\n    let mut prime_sum: isize = 0;\n    let mut\
    \ prime_found = false;\n    for x in lst {\n        if prime_found {\n       \
    \     if x == max_prime {\n                prime_found = false;\n            }\
    \ else {\n                prime_sum += x;\n            }\n        } else {\n \
    \           if x == 1 {\n                prime_found = true;\n            } else\
    \ {\n                let mut prime: isize = 1;\n                let mut prime_found\
    \ = false;\n                while prime <= x {\n                    if prime_found\
    \ {\n                        if x == prime {\n                            prime_found\
    \ = false;\n                        } else {\n                            prime_sum\
    \ += x;\n                        }\n                    } else {\n           \
    \             if x == prime + 1 {\n                            prime_found = true;\n\
    \                        } else {\n                            prime += 2;\n \
    \                       }\n                    }\n                }\n        \
    \        max_prime = x;\n                prime_sum = x;\n            }\n     \
    \   }\n    }\n    prime_sum", "    let mut max_prime = vec![0; lst.len()];\n \
    \   let mut prime_sum = 0;\n    let mut prime_pos = 0;\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len", "    let mut prime = vec![true; lst.len()];\n    let mut\
    \ sum = 0;\n    for i in lst {\n        if prime[i] {\n            sum += i;\n\
    \        }\n        for j in 2..i {\n            if !prime[j] {\n            \
    \    prime[j] = false;\n                break;\n            }\n        }\n   \
    \ }\n    sum", "    let mut max_prime: isize = 0;\n    let mut prime_sum: isize\
    \ = 0;\n    let mut prime_counter: isize = 0;\n    for x in lst {\n        if\
    \ x == 0 {\n            continue;\n        }\n        if prime_counter > max_prime\
    \ {\n            max_prime = prime_counter;\n        }\n        if prime_counter\
    \ == max_prime {\n            prime_sum += x;\n        }\n        prime_counter\
    \ += 1;\n    }\n    max_prime", "    let mut primes = vec![];\n    let mut sum\
    \ = 0;\n    let mut prime_found = false;\n    for n in lst {\n        if n % 2\
    \ == 0 {\n            sum += n;\n        } else {\n            if prime_found\
    \ {\n                break;\n            }\n            primes.push(n as isize);\n\
    \            prime_found = true;\n        }\n    }\n    if prime_found {\n   \
    \     for p in primes {\n            if p > sum {\n                sum = p as\
    \ isize;\n            }\n        }\n    }\n    sum", "    let mut primes = vec![];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_digit = 0;\n    let mut prime_max_digit_index =\
    \ 0;\n    let mut prime_max_digit_sum = 0;\n    let mut prime_max_digit_sum_index\
    \ = 0;\n    let mut prime_max_digit_sum_index2 = 0;\n    let mut prime_max_digit_sum_index3\
    \ = 0;\n    let mut prime_max_digit_sum_index4 = 0;\n    let mut prime_max_digit_sum_index5\
    \ = 0;\n    let mut prime_max_digit_sum_index6 = 0;\n    let mut prime_max_digit_sum_index7\
    \ = 0;\n    let mut prime_max_digit_sum_index8 = 0;\n    let mut prime_max_digit_sum_index9\
    \ = 0;\n    let mut prime_max_digit_sum_index10 = 0;\n    let mut prime_max_digit_sum_index11\
    \ = 0;\n    let mut prime_max_digit_sum_index12 = 0;\n    let mut prime_max_digit_sum_index13\
    \ = 0;\n    let mut prime_max_digit_sum_index14 = 0;\n    let mut prime_max_digit_sum_index15\
    \ = 0;\n    let mut prime_max_digit_sum_index16 = 0;\n    let mut prime_max_digit_sum_index17\
    \ = 0;\n    let mut prime_max_digit_sum_index18 = 0;\n    let mut prime_max_digit_sum_index19\
    \ = 0;\n    let mut prime_max_digit_sum_index20 = 0;\n    let mut prime_max_digit_sum_index21\
    \ = 0;\n    let mut prime_max_digit_sum_index22 = 0;\n    let mut prime_max_digit_sum_index23\
    \ = 0;\n    let mut prime_max_digit_sum_index24 = 0;\n    let mut prime_max_digit_sum_index25\
    \ = 0;\n    let mut prime_max_digit_sum_index26 = 0;\n    let mut prime_max_digit_sum_index27\
    \ = 0;\n    let mut prime_max_digit_sum_index28 = 0;\n    let mut prime_max_digit_sum_index29\
    \ = 0;\n    let mut prime_max_digit_sum_index30 = 0;\n    let mut prime_max_digit_sum_index31\
    \ = 0;\n    let mut prime_max_digit_sum_index32 = 0;\n    let mut prime_max_digit_sum_index33\
    \ = 0;\n    let mut prime_max_digit_sum_index34 = 0;\n    let mut prime_max_digit_sum_index35\
    \ = 0;\n    let mut prime_max_digit_sum_index36 = 0;\n    let mut prime_max_digit_sum_index37\
    \ = 0;\n    let mut prime_max_digit_sum_index38", "    let mut primes = vec![];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes.contains(&i) {\n\
    \            continue;\n        }\n        let mut prime: isize = 0;\n       \
    \ let mut prime_found = false;\n        for j in primes.iter().rev() {\n     \
    \       if j % i == 0 {\n                prime = j;\n                prime_found\
    \ = true;\n                break;\n            }\n        }\n        if prime_found\
    \ {\n            continue;\n        }\n        primes.push(i);\n        sum +=\
    \ i;\n    }\n    sum", "    let mut primes = vec![];\n    let mut primes_len =\
    \ primes.len();\n    let mut primes_sum = 0;\n    let mut primes_len = primes.len();\n\
    \    let mut primes_sum = 0;\n    let mut primes_len = primes.len();\n    let\
    \ mut primes_sum = 0;\n    let mut primes_len = primes.len();\n    let mut primes_sum\
    \ = 0;\n    let mut primes_len = primes.len();\n    let mut primes_sum = 0;\n\
    \    let mut primes_len = primes.len();\n    let mut primes_sum = 0;\n    let\
    \ mut primes_len = primes.len();\n    let mut primes_sum = 0;\n    let mut primes_len\
    \ = primes.len();\n    let mut primes_sum = 0;\n    let mut primes_len = primes.len();\n\
    \    let mut primes_sum = 0;\n    let mut primes_len = primes.len();\n    let\
    \ mut primes_sum = 0;\n    let mut primes_len = primes.len();\n    let mut primes_sum\
    \ = 0;\n    let mut primes_len = primes.len();\n    let mut primes_sum = 0;\n\
    \    let mut primes_len = primes.len();\n    let mut primes_sum = 0;\n    let\
    \ mut primes_len = primes.len();\n    let mut primes_sum = 0;\n    let mut primes_len\
    \ = primes.len();\n    let mut primes_sum = 0;\n    let mut primes_len = primes.len();\n\
    \    let mut primes_sum = 0;\n    let mut primes_len = primes.len();\n    let\
    \ mut primes_sum = 0;\n    let mut primes_len = primes.len();\n    let mut primes_sum\
    \ = 0;\n    let mut primes_len = primes.len();\n    let mut primes_sum = 0;\n\
    \    let mut primes_len = primes.len();\n    let mut primes_sum = 0;\n    let\
    \ mut primes_len = primes.len();\n    let mut primes_sum = 0;\n    let mut primes_len\
    \ = primes.len();\n    let mut primes_sum = 0;\n    let mut primes_len = primes.len();\n\
    \    let mut primes_sum = 0;\n    let mut primes_len = primes.len();\n    let\
    \ mut primes_sum = 0;\n    let mut primes_len = primes.len();\n    let mut primes_sum\
    \ = 0;\n    let mut primes_len = primes.len();\n    let mut primes_sum = 0;\n\
    \    let mut primes_len = primes.len", "    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    for x in lst {\n        if prime_found {\n            sum += x;\n       \
    \ } else {\n            if primes.len() == 0 {\n                primes.push(x);\n\
    \                largest.push(x);\n            } else {\n                let mut\
    \ found = false;\n                for p in primes.iter() {\n                 \
    \   if p == x {\n                        found = true;\n                     \
    \   break;\n                    }\n                }\n                if !found\
    \ {\n                    primes.push(x);\n                    largest.push(x);\n\
    \                }\n            }\n        }\n        if primes.len() == primes.len()\
    \ - 1 {\n            prime_found = true;\n        }\n    }\n    if primes.len()\
    \ == 0 {\n        return sum;\n    }\n    let mut prime_found = false;\n    for\
    \ p in primes.iter() {\n        if prime_found {\n            sum += p;\n    \
    \    } else {\n            if largest == vec![] {\n                largest.push(p);\n\
    \            } else {\n                let mut found = false;\n              \
    \  for l in largest.iter() {\n                    if l == p {\n              \
    \          found = true;\n                        break;\n                   \
    \ }\n                }\n                if !found {\n                    largest.push(p);\n\
    \                }\n            }\n        }\n        if largest == vec![] {\n\
    \            prime_found = true;\n        }\n    }\n    if prime_found {\n   \
    \     return sum;\n    }\n    largest.iter().cloned().collect()", "    let mut\
    \ primes = vec![];\n    let mut sum = 0;\n    for &i in lst {\n        if primes.iter().any(|&p|\
    \ p > i) {\n            primes.push(i as isize);\n        }\n    }\n    for &i\
    \ in primes {\n        sum += i;\n    }\n    sum", "    let mut prime_sum = 0;\n\
    \    let mut prime_num = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n  \
    \  let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n  \
    \  let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len =\
    \ vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n\
    \    let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n  \
    \  let mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let\
    \ mut prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut\
    \ prime_num_len = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = vec![];", "    let mut max_prime: isize = 0;\n    let mut prime_sum: isize\
    \ = 0;\n    let mut prime_counter: usize = 0;\n    for num in lst {\n        if\
    \ num > max_prime {\n            max_prime = num;\n        }\n        if num ==\
    \ 1 {\n            prime_sum += num;\n            prime_counter += 1;\n      \
    \  }\n        if num > 1 {\n            if prime_counter > 2 {\n             \
    \   prime_sum += num;\n                prime_counter += 1;\n            }\n  \
    \      }\n    }\n    if prime_counter > 2 {\n        prime_sum += max_prime;\n\
    \    }\n    prime_sum", "    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum", "    let mut max_prime: isize = 0;\n    let\
    \ mut prime_sum: isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n   \
    \         continue;\n        }\n        let mut prime: isize = 2;\n        while\
    \ prime < n {\n            if n % prime == 0 {\n                break;\n     \
    \       }\n            prime += 2;\n        }\n        if prime > max_prime {\n\
    \            max_prime = prime;\n        }\n        prime_sum += n % prime as\
    \ isize;\n    }\n    if max_prime == 0 {\n        return 0;\n    }\n    prime_sum",
  "    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = vec![0];\n    let mut prime_max_value_len\
    \ = vec![0];\n    let mut prime_max_value_sum = 0;\n    let mut prime_max_value_sum_len\
    \ = 0;\n    let mut prime_max_value_is_prime = true;\n    let mut prime_max_value_is_prime_len\
    \ = vec![0];\n    let mut prime_max_value_is_prime_sum = 0;\n    let mut prime_max_value_is_prime_sum_len\
    \ = 0;\n    let mut prime_max_value_is_prime_max = true;\n    let mut prime_max_value_is_prime_max_len\
    \ = vec![0];\n    let mut prime_max_value_is_prime_max_sum = 0;\n    let mut prime_max_value_is_prime_max_sum_len\
    \ = 0;\n    let mut prime_max_value_is_prime_max_index = 0;\n    let mut prime_max_value_is_prime_max_value\
    \ = vec![0];\n    let mut prime_max_value_is_prime_max_value_len = vec![0];\n\
    \    let mut prime_max_value_is_prime_max_value_sum = 0;\n    let mut prime_max_value_is_prime_max_value_sum_len\
    \ = 0;\n    let mut prime_max_value_is_prime_max_value_max = true;\n    let mut\
    \ prime_max_value_is_prime_max_value_max_len = vec![0];\n    let mut prime_max_value_is_prime_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_is_prime_max_value_max_sum_len = 0;\n    let\
    \ mut prime_max_value_is_prime_max_value_max_index = 0;\n    let mut prime_max_value_is_prime_max_value_max_value\
    \ = vec![0];\n    let mut prime_max_value_is_prime_max_value_max_value_len = vec![0];\n\
    \    let mut prime_max_value_is_prime_max_value_max_value_sum = 0;\n    let mut\
    \ prime_max_value_is_prime_max_value_max_value_sum_len = 0;\n    let mut prime_max_value_is_prime_max_value_max_value_max\
    \ = true;\n    let mut prime_max_value_is_prime_max_value_max_value_max_len =\
    \ vec![0];\n    let mut prime_max_value_is_prime_max_value_max_value_max_sum =\
    \ 0;\n    let mut prime_max_value_is_prime_max_value_max_value_max_sum_len = 0;\n\
    \    let mut prime_max_value_is_prime_max_value_max_value_max_index = 0;\n   \
    \ let mut prime_max_value_is_", "    let mut primes = vec![];\n    let mut largest\
    \ = vec![];\n    let mut sum = 0;\n    for n in lst {\n        let mut is_prime\
    \ = true;\n        for &prime in primes {\n            if n % prime == 0 {\n \
    \               is_prime = false;\n                break;\n            }\n   \
    \     }\n        if is_prime {\n            primes.push(n);\n        } else {\n\
    \            largest.push(n);\n        }\n    }\n    for &prime in primes {\n\
    \        sum += prime;\n    }\n    for &n in largest {\n        sum += n;\n  \
    \  }\n    sum", "    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    let mut prime_found = false;\n    for n in lst {\n        if\
    \ n % 2 == 0 {\n            continue;\n        }\n        let mut prime_digit\
    \ = 0;\n        for d in &[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29,\
    \ 31, 33, 35, 37, 39, 41, 43, 45] {\n            if n % d == 0 {\n           \
    \     prime_digit += 1;\n            }\n        }\n        if prime_digit > max_prime_digit\
    \ {\n            max_prime = n;\n            max_prime_digit = prime_digit;\n\
    \            prime_found = true;\n        }\n    }\n    if prime_found {\n   \
    \     max_prime += max_prime_digit;\n    }\n    return max_prime;", "    let mut\
    \ max_prime = vec![0; lst.len()];\n    let mut max_prime_len = vec![0; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_sum_len = 0;\n    let mut prime_len\
    \ = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n    let\
    \ mut prime_len = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n\
    \    let mut prime_len = vec![0; lst.len()];\n    let mut prime_len = vec![0;\
    \ lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n    let mut prime_len\
    \ = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n    let\
    \ mut prime_len = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n\
    \    let mut prime_len = vec![0; lst.len()];\n    let mut prime_len = vec![0;\
    \ lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n    let mut prime_len\
    \ = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n    let\
    \ mut prime_len = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n\
    \    let mut prime_len = vec![0; lst.len()];\n    let mut prime_len = vec![0;\
    \ lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n    let mut prime_len\
    \ = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n    let\
    \ mut prime_len = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n\
    \    let mut prime_len = vec![0; lst.len()];\n    let mut prime_len = vec![0;\
    \ lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n    let mut prime_len\
    \ = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n    let\
    \ mut prime_len = vec![0; lst.len()];\n    let mut prime_len = vec![0; lst.len()];\n\
    \    let mut prime_len = vec![0; lst.len()];\n    let mut prime", "    let mut\
    \ primes = vec![];\n    let mut primes_size = vec![];\n    let mut primes_sum\
    \ = vec![];\n    let mut primes_sum_len = vec![];\n    let mut primes_sum_len2\
    \ = vec![];\n    let mut primes_sum_len3 = vec![];\n    let mut primes_sum_len4\
    \ = vec![];\n    let mut primes_sum_len5 = vec![];\n    let mut primes_sum_len6\
    \ = vec![];\n    let mut primes_sum_len7 = vec![];\n    let mut primes_sum_len8\
    \ = vec![];\n    let mut primes_sum_len9 = vec![];\n    let mut primes_sum_len10\
    \ = vec![];\n    let mut primes_sum_len11 = vec![];\n    let mut primes_sum_len12\
    \ = vec![];\n    let mut primes_sum_len13 = vec![];\n    let mut primes_sum_len14\
    \ = vec![];\n    let mut primes_sum_len15 = vec![];\n    let mut primes_sum_len16\
    \ = vec![];\n    let mut primes_sum_len17 = vec![];\n    let mut primes_sum_len18\
    \ = vec![];\n    let mut primes_sum_len19 = vec![];\n    let mut primes_sum_len20\
    \ = vec![];\n    let mut primes_sum_len21 = vec![];\n    let mut primes_sum_len22\
    \ = vec![];\n    let mut primes_sum_len23 = vec![];\n    let mut primes_sum_len24\
    \ = vec![];\n    let mut primes_sum_len25 = vec![];\n    let mut primes_sum_len26\
    \ = vec![];\n    let mut primes_sum_len27 = vec![];\n    let mut primes_sum_len28\
    \ = vec![];\n    let mut primes_sum_len29 = vec![];\n    let mut primes_sum_len30\
    \ = vec![];\n    let mut primes_sum_len31 = vec![];\n    let mut primes_sum_len32\
    \ = vec![];\n    let mut primes_sum_len33 = vec![];\n    let mut primes_sum_len34\
    \ = vec![];\n    let mut primes_sum_len35 = vec![];\n    let mut primes_sum_len36\
    \ = vec![];\n    let mut primes_sum_len37 = vec![];\n    let mut primes_sum_len38\
    \ = vec![];\n    let mu", "    let mut primes = vec![true; lst.len()];\n    let\
    \ mut max_prime = 0;\n    let mut sum = 0;\n    for i in lst {\n        if primes[i]\
    \ {\n            sum += i;\n        } else {\n            primes[i] = false;\n\
    \        }\n        if sum > max_prime {\n            max_prime = sum;\n     \
    \   }\n    }\n    max_prime", "    let mut primes = vec![];\n    let mut largest\
    \ = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n    for x\
    \ in lst {\n        if prime_found {\n            if x == 1 {\n              \
    \  primes.push(1);\n                largest.push(1);\n                sum += 1;\n\
    \            } else {\n                let mut prime = primes.iter().find(|&x|\
    \ x == x).unwrap();\n                let mut largest = largest.iter().find(|&x|\
    \ x == x).unwrap();\n                let mut sum = 0;\n                while prime\
    \ != None {\n                    if largest == None {\n                      \
    \  primes.push(prime);\n                        largest = prime;\n           \
    \             sum += prime;\n                    } else {\n                  \
    \      if prime > largest {\n                            primes.push(prime);\n\
    \                            largest = prime;\n                            sum\
    \ += prime;\n                        } else {\n                            prime\
    \ = primes.iter().find(|&x| x == x).unwrap();\n                            largest\
    \ = largest.iter().find(|&x| x == x).unwrap();\n                            sum\
    \ += prime;\n                        }\n                    }\n              \
    \  }\n            }\n        } else {\n            if x == 1 {\n             \
    \   primes.push(1);\n                largest.push(1);\n                sum +=\
    \ 1;\n            } else {\n                let mut prime = primes.iter().find(|&x|\
    \ x == x).unwrap();\n                let mut largest = largest.iter().find(|&x|\
    \ x == x).unwrap();\n                let mut sum = 0;\n                while prime\
    \ != None {\n                    if largest == None {\n                      \
    \  primes.push(prime);\n                        largest = prime;\n           \
    \             sum += prime;\n                    } else {\n                  \
    \      if prime > largest {\n                            primes.push(prime);\n\
    \                            largest = prime;\n                            sum\
    \ += prime;\n                        } else {\n                            prime\
    \ = primes.iter().find(|&x| x == x).unwrap();\n                            largest\
    \ = largest.iter().find(|&x| x == x).unwrap();\n                            sum\
    \ += prime;\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        prime_found = true;\n    }\n    sum",
  "    let mut max_prime: isize = 0;\n    let mut prime_sum: isize = 0;\n    let mut\
    \ prime_counter: isize = 0;\n    let mut prime_counter2: isize = 0;\n    let mut\
    \ prime_counter3: isize = 0;\n    let mut prime_counter4: isize = 0;\n    let\
    \ mut prime_counter5: isize = 0;\n    let mut prime_counter6: isize = 0;\n   \
    \ let mut prime_counter7: isize = 0;\n    let mut prime_counter8: isize = 0;\n\
    \    let mut prime_counter9: isize = 0;\n    let mut prime_counter10: isize =\
    \ 0;\n    let mut prime_counter11: isize = 0;\n    let mut prime_counter12: isize\
    \ = 0;\n    let mut prime_counter13: isize = 0;\n    let mut prime_counter14:\
    \ isize = 0;\n    let mut prime_counter15: isize = 0;\n    let mut prime_counter16:\
    \ isize = 0;\n    let mut prime_counter17: isize = 0;\n    let mut prime_counter18:\
    \ isize = 0;\n    let mut prime_counter19: isize = 0;\n    let mut prime_counter20:\
    \ isize = 0;\n    let mut prime_counter21: isize = 0;\n    let mut prime_counter22:\
    \ isize = 0;\n    let mut prime_counter23: isize = 0;\n    let mut prime_counter24:\
    \ isize = 0;\n    let mut prime_counter25: isize = 0;\n    let mut prime_counter26:\
    \ isize = 0;\n    let mut prime_counter27: isize = 0;\n    let mut prime_counter28:\
    \ isize = 0;\n    let mut prime_counter29: isize = 0;\n    let mut prime_counter30:\
    \ isize = 0;\n    let mut prime_counter31: isize = 0;\n    let mut prime_counter32:\
    \ isize = 0;\n    let mut prime_counter33: isize = 0;\n    let mut prime_counter34:\
    \ isize = 0;\n    let mut prime_counter35: isize = 0;\n    let mut prime_counter36:\
    \ isize = 0;\n    let mut prime_counter37: isize = 0;\n    let mut prime_counter38:\
    \ isize = 0;\n    let mut prime_counter39: isize = 0;\n    let mut prime_counter40:\
    \ isize = 0;\n    let mut prime_counter41: isize = 0;\n    let mut prime", " \
    \   let mut max_prime: isize = 0;\n    let mut prime_sum: isize = 0;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n    let mut prime_found", "    let mut primes = vec![];\n\
    \    let mut largest = vec![];\n    for i in lst {\n        if primes.contains(&i)\
    \ {\n            largest.push(i);\n        } else {\n            primes.push(i);\n\
    \        }\n    }\n    let mut sum = 0;\n    for i in largest {\n        sum +=\
    \ i;\n    }\n    sum", "    let mut primes = vec![];\n    let mut largest = vec![];\n\
    \    for i in lst {\n        if primes.contains(&i) {\n            largest.push(i);\n\
    \        } else {\n            primes.push(i);\n        }\n    }\n    let mut\
    \ sum = 0;\n    for i in largest {\n        sum += i;\n    }\n    sum", "    let\
    \ mut primes = vec![true; lst.len() + 1];\n    primes[0] = false;\n    for i in\
    \ 1..lst.len() {\n        for j in 2..lst.len() {\n            if primes[j] &&\
    \ (lst[j] % i == 0) {\n                primes[j] = false;\n            }\n   \
    \     }\n    }\n    let mut sum = 0;\n    for i in 2..lst.len() {\n        if\
    \ primes[i] {\n            sum += i;\n        }\n    }\n    sum", "    let mut\
    \ primes = vec![true; lst.len()];\n    primes[0] = false;\n    primes[1] = false;\n\
    \    primes[2] = false;\n    primes[3] = false;\n    primes[4] = false;\n    primes[5]\
    \ = false;\n    primes[6] = false;\n    primes[7] = false;\n    primes[8] = false;\n\
    \    primes[9] = false;\n    primes[10] = false;\n    primes[11] = false;\n  \
    \  primes[12] = false;\n    primes[13] = false;\n    primes[14] = false;\n   \
    \ primes[15] = false;\n    primes[16] = false;\n    primes[17] = false;\n    primes[18]\
    \ = false;\n    primes[19] = false;\n    primes[20] = false;\n    primes[21] =\
    \ false;\n    primes[22] = false;\n    primes[23] = false;\n    primes[24] = false;\n\
    \    primes[25] = false;\n    primes[26] = false;\n    primes[27] = false;\n \
    \   primes[28] = false;\n    primes[29] = false;\n    primes[30] = false;\n  \
    \  primes[31] = false;\n    primes[32] = false;\n    primes[33] = false;\n   \
    \ primes[34] = false;\n    primes[35] = false;\n    primes[36] = false;\n    primes[37]\
    \ = false;\n    primes[38] = false;\n    primes[39] = false;\n    primes[40] =\
    \ false;\n    primes[41] = false;\n    primes[42] = false;\n    primes[43] = false;\n\
    \    primes[44] = false;\n    primes[45] = false;\n    primes[46] = false;\n \
    \   primes[47] = false;\n    primes[48] = false;\n    primes[49] = false;\n  \
    \  primes[50] = false;\n    primes[51] = false;\n    primes[52] = false;\n   \
    \ primes[53] = false;\n    primes[54] = false;\n    primes[55] = false;\n    primes[56]\
    \ = false;\n    primes[57] = false;\n    primes[58] = false;\n    primes[59] =\
    \ false;\n    primes[60] = false;\n    primes[61] = false;\n    primes[62] = false;\n\
    \    primes[63] = false;\n    primes[64] = false;\n    primes[65] = false;\n \
    \   primes[66] = false;\n    primes[67] = false;\n    primes[68] = false;\n  \
    \  primes[69] = false;\n    primes[70] = false;\n    primes[71] = false;\n   \
    \ prime", "    let mut primes = vec![];\n    let mut sum = 0;\n    let mut prime_found\
    \ = false;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n\
    \        }\n        for &p in primes {\n            if n % p == 0 {\n        \
    \        prime_found = true;\n                break;\n            }\n        }\n\
    \        if prime_found {\n            break;\n        }\n        primes.push(n);\n\
    \    }\n    if primes.len() == 0 {\n        sum += 0;\n    }\n    sum", "    let\
    \ mut max_prime: isize = 0;\n    let mut sum: isize = 0;\n    for &i in lst {\n\
    \        let mut prime: isize = 0;\n        for &j in lst {\n            if i\
    \ == j {\n                continue;\n            }\n            if j % i == 0\
    \ {\n                prime = i;\n                break;\n            }\n     \
    \   }\n        if prime > max_prime {\n            max_prime = prime;\n      \
    \  }\n        sum += i;\n    }\n    sum", "    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    for &i in lst {\n        if primes[i] {\n   \
    \         prime_sum += i;\n        }\n        for &j in &primes {\n          \
    \  if j && i % j == 0 {\n                primes[j] = false;\n            }\n \
    \       }\n    }\n    prime_sum", "    let mut primes = vec![true; Prime::MAX];\n\
    \    let mut sum = 0;\n    for &x in lst {\n        if primes[x as usize] {\n\
    \            sum += x;\n        }\n        primes[x as usize] = false;\n    }\n\
    \    sum", "    let mut primes = vec![];\n    let mut largest = vec![];\n    let\
    \ mut sum = 0;\n    let mut prime_found = false;\n    for x in lst {\n       \
    \ if prime_found {\n            sum += x;\n        } else {\n            if primes.len()\
    \ == 0 || primes[primes.len() - 1] == x {\n                primes.push(x);\n \
    \               prime_found = true;\n            } else {\n                let\
    \ mut i = primes.len() - 1;\n                while i >= 0 && primes[i] < x {\n\
    \                    i -= 1;\n                }\n                if i == -1 {\n\
    \                    largest.push(x);\n                } else {\n            \
    \        largest.push(primes[i]);\n                }\n            }\n        }\n\
    \    }\n    if prime_found {\n        largest.push(sum);\n    }\n    largest.sort_unstable();\n\
    \    let mut sum = 0;\n    for x in largest {\n        sum += x;\n    }\n    sum",
  "    let mut primes = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    for n in lst {\n        if n % 2 == 0 {\n            primes.push(2);\n  \
    \      }\n        for &p in primes {\n            if n % p == 0 {\n          \
    \      prime_found = true;\n                break;\n            }\n        }\n\
    \        if prime_found {\n            sum += n;\n            prime_found = false;\n\
    \        }\n    }\n    sum", "    let mut primes = vec![true; lst.len() + 1];\n\
    \    primes[0] = false;\n    for i in 1..lst.len() {\n        if primes[i] {\n\
    \            for j in 2..lst.len() {\n                if j % i == 0 {\n      \
    \              primes[j] = false;\n                    break;\n              \
    \  }\n            }\n        }\n    }\n    let mut sum = 0;\n    for i in 1..lst.len()\
    \ {\n        if primes[i] {\n            sum += lst[i];\n        }\n    }\n  \
    \  sum", "    let mut primes = vec![];\n    let mut sum = 0;\n    let mut max_prime\
    \ = 0;\n    let mut max_prime_digit = 0;\n    let mut max_prime_digit_count =\
    \ 0;\n    for &i in lst {\n        if primes.contains(&i) {\n            continue;\n\
    \        }\n        let mut prime = true;\n        let mut digit_count = 0;\n\
    \        for i in 2..i {\n            if i % i == 0 {\n                prime =\
    \ false;\n                break;\n            }\n            digit_count += 1;\n\
    \        }\n        if prime {\n            primes.push(i as isize);\n       \
    \     if digit_count > max_prime_digit_count {\n                max_prime = i\
    \ as isize;\n                max_prime_digit_count = digit_count;\n          \
    \  }\n        }\n    }\n    if max_prime_digit_count > 0 {\n        sum += max_prime_digit_count;\n\
    \    }\n    sum", "    let mut prime_numbers = vec![];\n    let mut max_prime\
    \ = 0;\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 0 {\n  \
    \          continue;\n        }\n        let mut i = 2;\n        while i * i <=\
    \ n {\n            if n % i == 0 {\n                break;\n            }\n  \
    \          i += 1;\n        }\n        if i == n {\n            prime_numbers.push(n);\n\
    \        }\n    }\n    for n in prime_numbers {\n        if n > max_prime {\n\
    \            max_prime = n;\n        }\n    }\n    for n in prime_numbers {\n\
    \        sum += n.to_digits().unwrap();\n    }\n    sum", "    let mut max_prime:\
    \ isize = 0;\n    let mut prime_sum: isize = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            max_prime = i;\n        }\n        if i % 3 ==\
    \ 0 {\n            max_prime = i;\n        }\n        if i % 5 == 0 {\n      \
    \      max_prime = i;\n        }\n        if i % 7 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 11 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 13 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 17 == 0 {\n            max_prime = i;\n        }\n        if i % 19\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 23 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 29 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 31 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 37 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 41 == 0 {\n            max_prime = i;\n        }\n        if i % 43\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 47 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 53 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 59 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 61 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 67 == 0 {\n            max_prime = i;\n        }\n        if i % 71\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 73 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 79 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 83 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 89 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 97 == 0 {\n            max_prime = i;\n        }\n        if i % 101\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 103 == 0 {\n \
    \           max_prime = i;\n        }\n        if i % 107 == 0 {\n           \
    \ max_prime = i;\n        }\n        if i % 109 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 113 == 0 {\n            max_prime = i;\n   \
    \     }\n        if i % 121 == 0 {\n            max_prime = i;\n        }\n  \
    \      if i % 127 == 0 {\n            max_prime = i;\n        }\n        if i\
    \ % 131 == 0 {\n            max_prime = i;\n        }\n        if i % 137 == 0\
    \ {\n            max_prime = i;\n        }\n        if i % 141 == 0 {\n      \
    \      max_prime = i;\n        }\n        if i % 147 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 151 == 0 {\n            max_prime = i;\n   \
    \     }\n        if i % 157 == 0 {", "    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n    }\n    sum", "    let mut max_prime = vec![0; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_pos = 0;\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len", "    let mut primes = vec![];\n    let mut largest = vec![];\n\
    \    let mut sum = 0;\n    for &i in lst {\n        if primes.contains(&i) {\n\
    \            sum += i;\n        } else {\n            primes.push(i as isize);\n\
    \        }\n        if sum > isize {\n            largest.push(sum);\n       \
    \     sum = 0;\n        }\n    }\n    if sum > 0 {\n        largest.push(sum);\n\
    \    }\n    largest.iter().max().unwrap()", "    let mut prime = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for &i in lst {\n        if prime[i] {\n          \
    \  sum += i;\n        }\n        for &j in &prime[..i] {\n            prime[j]\
    \ = false;\n        }\n    }\n    sum", "    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[i] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum", "    let mut primes = vec![];\n    let mut sum = 0;\n\
    \    for x in lst {\n        if primes.contains(&x) {\n            continue;\n\
    \        }\n        let mut prime = true;\n        for y in primes.iter() {\n\
    \            if x == y {\n                prime = false;\n                break;\n\
    \            }\n        }\n        if prime {\n            primes.push(x);\n \
    \           sum += x;\n        }\n    }\n    sum", "    let mut primes = vec![true;\
    \ lst.len() + 1];\n    primes[0] = false;\n    primes[1] = false;\n    for i in\
    \ 2..lst.len() {\n        if primes[i] {\n            for j in 2..i {\n      \
    \          if primes[j] {\n                    primes[j] = false;\n          \
    \          break;\n                }\n            }\n        }\n    }\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum", "    let mut primes = vec![];\n    let mut max_prime:\
    \ isize = 0;\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 0\
    \ {\n            continue;\n        }\n        let mut prime: isize = 2;\n   \
    \     while prime < n {\n            if n % prime == 0 {\n                break;\n\
    \            }\n            prime += 2;\n        }\n        if prime > max_prime\
    \ {\n            max_prime = prime;\n        }\n        sum += n % prime as isize;\n\
    \        primes.push(prime);\n    }\n    if max_prime == 1 {\n        return sum;\n\
    \    }\n    let mut primes_iter = primes.iter();\n    let mut prime = primes_iter.next();\n\
    \    let mut prime_sum = 0;\n    while let Some(prime) = prime {\n        if prime\
    \ > max_prime {\n            break;\n        }\n        prime_sum += prime as\
    \ isize;\n        prime = primes_iter.next();\n    }\n    prime_sum += max_prime\
    \ as isize;\n    prime_sum", "    let mut prime_sum = 0;\n    let mut prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime",
  "    let mut max_prime = vec![0; lst.len()];\n    let mut max_prime_len = vec![0;\
    \ lst.len()];\n    let mut max_prime_sum = 0;\n    let mut prime_sum = 0;\n  \
    \  let mut prime_len = vec![0; lst.len()];\n    let mut prime_sum_len = 0;\n \
    \   let mut prime_sum2 = 0;\n    let mut prime_len2 = vec![0; lst.len()];\n  \
    \  let mut prime_sum2len = 0;\n    let mut prime_len3 = vec![0; lst.len()];\n\
    \    let mut prime_sum3len = 0;\n    let mut prime_len4 = vec![0; lst.len()];\n\
    \    let mut prime_sum4len = 0;\n    let mut prime_len5 = vec![0; lst.len()];\n\
    \    let mut prime_sum5len = 0;\n    let mut prime_len6 = vec![0; lst.len()];\n\
    \    let mut prime_sum6len = 0;\n    let mut prime_len7 = vec![0; lst.len()];\n\
    \    let mut prime_sum7len = 0;\n    let mut prime_len8 = vec![0; lst.len()];\n\
    \    let mut prime_sum8len = 0;\n    let mut prime_len9 = vec![0; lst.len()];\n\
    \    let mut prime_sum9len = 0;\n    let mut prime_len10 = vec![0; lst.len()];\n\
    \    let mut prime_sum10len = 0;\n    let mut prime_len11 = vec![0; lst.len()];\n\
    \    let mut prime_sum11len = 0;\n    let mut prime_len12 = vec![0; lst.len()];\n\
    \    let mut prime_sum12len = 0;\n    let mut prime_len13 = vec![0; lst.len()];\n\
    \    let mut prime_sum13len = 0;\n    let mut prime_len14 = vec![0; lst.len()];\n\
    \    let mut prime_sum14len = 0;\n    let mut prime_len15 = vec![0; lst.len()];\n\
    \    let mut prime_sum15len = 0;\n    let mut prime_len16 = vec![0; lst.len()];\n\
    \    let mut prime_sum16len = 0;\n    let mut prime_len17 = vec![0; lst.len()];\n\
    \    let mut prime_sum17len = 0;\n    let mut prime_len18 = vec![0; lst.len()];\n\
    \    let mut prime_sum18len = 0;\n    let mut prime_len19 = vec![0; lst.len()];\n\
    \    let mut prime_sum", "    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    let mut prime_digit: isize = 0;\n    let mut prime_digit_sum:\
    \ isize = 0;\n    let mut prime_digit_sum2: isize = 0;\n    let mut prime_digit_sum3:\
    \ isize = 0;\n    let mut prime_digit_sum4: isize = 0;\n    let mut prime_digit_sum5:\
    \ isize = 0;\n    let mut prime_digit_sum6: isize = 0;\n    let mut prime_digit_sum7:\
    \ isize = 0;\n    let mut prime_digit_sum8: isize = 0;\n    let mut prime_digit_sum9:\
    \ isize = 0;\n    let mut prime_digit_sum10: isize = 0;\n    let mut prime_digit_sum11:\
    \ isize = 0;\n    let mut prime_digit_sum12: isize = 0;\n    let mut prime_digit_sum13:\
    \ isize = 0;\n    let mut prime_digit_sum14: isize = 0;\n    let mut prime_digit_sum15:\
    \ isize = 0;\n    let mut prime_digit_sum16: isize = 0;\n    let mut prime_digit_sum17:\
    \ isize = 0;\n    let mut prime_digit_sum18: isize = 0;\n    let mut prime_digit_sum19:\
    \ isize = 0;\n    let mut prime_digit_sum20: isize = 0;\n    let mut prime_digit_sum21:\
    \ isize = 0;\n    let mut prime_digit_sum22: isize = 0;\n    let mut prime_digit_sum23:\
    \ isize = 0;\n    let mut prime_digit_sum24: isize = 0;\n    let mut prime_digit_sum25:\
    \ isize = 0;\n    let mut prime_digit_sum26: isize = 0;\n    let mut prime_digit_sum27:\
    \ isize = 0;\n    let mut prime_digit_sum28: isize = 0;\n    let mut prime_digit_sum29:\
    \ isize = 0;\n    let mut prime_digit_sum30: isize = 0;\n    let mut prime_digit_sum31:\
    \ isize = 0;\n    let mut prime_digit_sum32: isize = 0;\n    let mut prime_digit_sum33:\
    \ isize = 0;\n    let mut prime_digit_sum34: isize = 0;\n    let mut prime_digit_sum35:\
    \ isize = 0;\n    let mut prime_digit_sum36: isize = 0;\n    let mut prime_digit_sum37:\
    \ isize = 0;\n    let mut ", "    let mut primes = vec![true; lst.len() + 1];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if primes[j] {\n\
    \                primes[j] = false;\n            }\n        }\n    }\n    sum",
  "    let mut primes = vec![true; Prime::MAX];\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if primes[i as usize] {\n            sum += i;\n        }\n \
    \       primes[i as usize] = false;\n    }\n    sum", "    let mut prime = vec![true;\
    \ lst.len()];\n    let mut sum = 0;\n    for &i in lst {\n        if prime[i]\
    \ {\n            sum += i;\n        }\n        for &j in &prime[i..] {\n     \
    \       prime[j] = false;\n        }\n    }\n    sum", "    let mut primes = vec![];\n\
    \    let mut largest = vec![];\n    for i in lst {\n        if primes.contains(&i)\
    \ {\n            largest.push(i);\n        } else {\n            primes.push(i);\n\
    \        }\n    }\n    let mut sum = 0;\n    for i in largest {\n        sum +=\
    \ i;\n    }\n    return sum;", "    let mut max_prime: isize = 0;\n    let mut\
    \ prime_sum: isize = 0;\n    for n in lst {\n        let mut prime: isize = 0;\n\
    \        let mut prime_found = false;\n        for _ in 0..n {\n            if\
    \ n % prime == 0 {\n                prime_found = true;\n                break;\n\
    \            }\n            prime += 1;\n        }\n        if prime_found {\n\
    \            prime_sum += prime;\n        } else {\n            max_prime = n;\n\
    \        }\n    }\n    if max_prime == 0 {\n        max_prime = 1;\n    }\n  \
    \  prime_sum", "    let mut primes = vec![true; lst.len() + 1];\n    primes[0]\
    \ = false;\n    for i in 1..lst.len() {\n        if primes[i] {\n            for\
    \ j in 2..lst.len() {\n                if i != j && lst[j] % i == 0 {\n      \
    \              primes[j] = false;\n                    break;\n              \
    \  }\n            }\n        }\n    }\n    let mut sum = 0;\n    for i in 1..lst.len()\
    \ {\n        if primes[i] {\n            sum += lst[i];\n        }\n    }\n  \
    \  sum", "    let mut primes = vec![];\n    let mut sum = 0;\n    for &n in lst\
    \ {\n        if n % 2 == 0 {\n            sum += n;\n        }\n        for &p\
    \ in primes {\n            if n % p == 0 {\n                sum += p;\n      \
    \          break;\n            }\n        }\n    }\n    sum", "    let mut primes\
    \ = vec![];\n    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut\
    \ prime_max_index = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_value_pos\
    \ = 0;\n    let mut prime_max_value_neg = 0;\n    let mut prime_max_value_neg_index\
    \ = 0;\n    let mut prime_max_value_neg2_index = 0;\n    let mut prime_max_value_neg3_index\
    \ = 0;\n    let mut prime_max_value_neg4_index = 0;\n    let mut prime_max_value_neg5_index\
    \ = 0;\n    let mut prime_max_value_neg6_index = 0;\n    let mut prime_max_value_neg7_index\
    \ = 0;\n    let mut prime_max_value_neg8_index = 0;\n    let mut prime_max_value_neg9_index\
    \ = 0;\n    let mut prime_max_value_neg10_index = 0;\n    let mut prime_max_value_neg11_index\
    \ = 0;\n    let mut prime_max_value_neg12_index = 0;\n    let mut prime_max_value_neg13_index\
    \ = 0;\n    let mut prime_max_value_neg14_index = 0;\n    let mut prime_max_value_neg15_index\
    \ = 0;\n    let mut prime_max_value_neg16_index = 0;\n    let mut prime_max_value_neg17_index\
    \ = 0;\n    let mut prime_max_value_neg18_index = 0;\n    let mut prime_max_value_neg19_index\
    \ = 0;\n    let mut prime_max_value_neg20_index = 0;\n    let mut prime_max_value_neg21_index\
    \ = 0;\n    let mut prime_max_value_neg22_index = 0;\n    let mut prime_max_value_neg23_index\
    \ = 0;\n    let mut prime_max_value_neg24_index = 0;\n    let mut prime_max_value_neg25_index\
    \ = 0;\n    let mut prime_max_value_neg26_index = 0;\n    let mut prime_max_value_neg27_index\
    \ = 0;\n    let mut prime_max_value_neg28_index = 0;\n    let mut prime_max_value_neg29_index\
    \ = 0;\n    let mut prime_max_value_neg30_index = 0;\n    let mut prime_max_value_neg31_index\
    \ = 0;\n    let mut prime_max_value_neg32_index = 0;\n    let mut prime_max_value_neg33_index\
    \ = 0;\n    let mut prime_max_value_neg34_index = 0;\n    let mut prime_max_value_neg35_index\
    \ = 0;\n    let mut prime_max_value_neg36_index = 0;\n    let mut prime_max_value_neg37_index\
    \ = 0;\n    let mut prime_max_", "    let mut primes = vec![];\n    let mut max_prime\
    \ = 0;\n    let mut sum = 0;\n    for x in lst {\n        if primes.contains(&x)\
    \ {\n            continue;\n        }\n        let mut prime = true;\n       \
    \ for y in primes.iter().rev() {\n            if x == y {\n                prime\
    \ = false;\n                break;\n            }\n        }\n        if prime\
    \ {\n            primes.push(x);\n            if x > max_prime {\n           \
    \     max_prime = x;\n            }\n        }\n    }\n    for x in primes.iter()\
    \ {\n        sum += x;\n    }\n    max_prime + sum", "    let mut max_prime: isize\
    \ = 0;\n    let mut prime_sum: isize = 0;\n    let mut prime_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut prime_found52 = false;\n    let mut prime_found53 = false;\n\
    \    let mut prime_found", "    let mut primes = vec![];\n    let mut max_prime\
    \ = 0;\n    let mut sum = 0;\n    for x in lst {\n        if primes.contains(&x)\
    \ {\n            continue;\n        }\n        let mut prime = true;\n       \
    \ for y in primes.iter() {\n            if x == y {\n                prime = false;\n\
    \                break;\n            }\n        }\n        if prime {\n      \
    \      primes.push(x);\n            if x > max_prime {\n                max_prime\
    \ = x;\n            }\n        }\n    }\n    for x in primes.iter() {\n      \
    \  sum += x;\n    }\n    max_prime"]
stop_tokens:
- "\n}"
