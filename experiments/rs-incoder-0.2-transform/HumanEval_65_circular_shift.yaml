name: HumanEval_65_circular_shift
language: rs
prompt: "/// Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"21\"\
  )\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
  \ isize, shift: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut carry = 0;\n    while !digits.is_empty() {\n        let digit = digits.chars().nth(shift).unwrap();\n\
    \        if carry > 0 {\n            s.insert(0, digit);\n        } else {\n \
    \           s.insert(0, digit.reverse());\n        }\n        carry = digit as\
    \ usize;\n        digits = digits.chars().nth(shift - 1).unwrap();\n    }\n  \
    \  s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        remainder %= 10;\n        s.push((remainder as char).to_string());\n\
    \        remainder /= 10;\n    }\n    if shift > s.len() {\n        s.append(&s[shift..s.len()]);\n\
    \    } else {\n        s.append(&s[0..shift]);\n    }\n    s", "    let mut s\
    \ = String::new();\n    loop {\n        if shift > x.len() {\n            s.reverse();\n\
    \            return s;\n        }\n        let mut digit = x.len() - shift as\
    \ usize;\n        if digit < 0 {\n            digit = 0;\n        }\n        s.push((x[digit]\
    \ as char).to_string());\n        x = x[..digit].to_owned();\n        shift -=\
    \ digit;\n    }", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s.push(*digits[..]);\n        digits = digits.chars().nth(digits.len()\
    \ - i + 1).collect();\n    }\n    s.push(*digits[..]);\n    s", "    let mut s\
    \ = String::new();\n    let mut carry = 0;\n    for &c in x.to_string().chars()\
    \ {\n        let digit = c - '0';\n        if carry > 0 {\n            digit +=\
    \ carry;\n            carry = 0;\n        }\n        s += digit.to_string();\n\
    \    }\n    if carry > 0 {\n        s += carry.to_string();\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut carry = 0;\n    for &c in x.to_string().chars()\
    \ {\n        let digit = c - '0';\n        let digit = if digit < 10 && digit\
    \ > -10 { digit } else { digit + 10 };\n        let digit = digit << shift;\n\
    \        let digit = digit >> shift - shift;\n        s += if carry > 0 { digit\
    \ } else { digit + '0' };\n        carry = digit >> 8;\n    }\n    if carry >\
    \ 0 {\n        s += '1';\n    }\n    s", "    let mut s = String::new();\n   \
    \ let mut digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s[..].to_string()", "    let mut s = String::new();\n\
    \    let mut carry = 0;\n    let mut digits = x.to_string();\n    for i in 0..shift\
    \ {\n        if carry > 0 {\n            s.push_str(&digits[digits.len() - i..digits.len()\
    \ - i + 1]);\n        }\n        let digit = digits.chars().nth(i).unwrap();\n\
    \        carry = digit as i32 + carry as i32 + digit as i32 + carry as i32;\n\
    \    }\n    if carry > 0 {\n        s.push_str(&digits[digits.len() - shift..digits.len()\
    \ - shift]);\n    }\n    s", "    let mut s = String::new();\n    let mut carry\
    \ = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        s += digit.to_string();\n\
    \        x /= 10;\n        carry += digit as isize;\n    }\n    if carry > 0 {\n\
    \        s += &format!(\"{}\", carry).to_string();\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut carry =\
    \ 0;\n    while digits.len() > shift {\n        let digit = digits.chars().nth(shift).unwrap();\n\
    \        carry += digit as isize;\n        digits = digits.chars().nth(digits.len()\
    \ - shift - 1).unwrap();\n        s += digit.to_string();\n    }\n    if carry\
    \ > 0 {\n        s += &format!(\"{}\", carry);\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut digits = x.to_string();\n    for i in 0..shift\
    \ {\n        digits = digits.chars().nth(i).unwrap();\n    }\n    for i in 0..shift\
    \ {\n        s += digits[i];\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut i = x;\n    while i > 0 {\n        i /= 10;\n        s += &format!(\"\
    {}\", i as u8);\n    }\n    for i in 0..shift {\n        s += &format!(\"{}\"\
    , i as u8);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    for i in 0..shift {\n        s.push(*digits);\n      \
    \  digits = digits.chars().nth(digits.len() - i + 1).collect();\n    }\n    s.push(*digits);\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - 1 - i) % digits.len()];\n\
    \    }\n    s", "    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[..]);\n        digits.rotate_left(1);\n\
    \    }\n    result.push_str(&digits[..]);\n    result", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + digits.reverse()", "    let mut s = String::new();\n\
    \    let mut carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n\
    \        s += if carry {\n            digit.to_string()\n        } else {\n  \
    \          digit.to_string()\n        };\n        carry = digit > 9;\n       \
    \ x /= 10;\n    }\n    if carry {\n        s += \"0\".to_string();\n    }\n  \
    \  s", "    let mut s = String::new();\n    let mut carry = 0;\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    for i in 0..shift {\n    \
    \    if carry > 0 {\n            digits.push(carry);\n            carry = 0;\n\
    \        }\n        digits.push('0');\n    }\n    for i in 0..digits.len() {\n\
    \        carry += digits[i] as isize;\n        digits[i] = digits[i] as char;\n\
    \        digits[i] += carry;\n        carry %= 10;\n    }\n    digits.reverse();\n\
    \    String::from_utf8(digits).unwrap()", "    let mut s = String::new();\n  \
    \  let mut digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[..]);\n\
    \        digits = &digits[1..];\n    }\n    s.push(*digits);\n    s", "    let\
    \ mut s = String::new();\n    for i in 0..shift {\n        if i >= x.len() {\n\
    \            s.push('0');\n        } else {\n            s.push(x[i]);\n     \
    \   }\n    }\n    for i in 0..shift {\n        if i >= x.len() {\n           \
    \ s.push('0');\n        } else {\n            s.push(x[x.len() - 1 - i]);\n  \
    \      }\n    }\n    s"]
stop_tokens:
- "\n}"
