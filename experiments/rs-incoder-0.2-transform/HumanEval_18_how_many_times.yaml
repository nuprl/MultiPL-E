name: HumanEval_18_how_many_times
language: rs
prompt: "/// Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n/// >>> how_many_times(String::from(\"\"), String::from(\"\
  a\"))\n/// 0\n/// >>> how_many_times(String::from(\"aaa\"), String::from(\"a\"))\n\
  /// 3\n/// >>> how_many_times(String::from(\"aaaa\"), String::from(\"aa\"))\n///\
  \ 3\nfn how_many_times(string: String, substring: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len()\
    \ {\n        let mut found = false;\n        for c in string.chars() {\n     \
    \       if c == substring[pos] {\n                found = true;\n            \
    \    break;\n            }\n        }\n        if found {\n            count +=\
    \ 1;\n        }\n        pos += 1;\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', "    let mut count = 0;\n    let mut sub = String::from(substring);\n\
    \    let mut str = String::from(string);\n    while !str.is_empty() {\n      \
    \  if str == sub {\n            count += 1;\n        }\n        str = str.chars().skip_while(|c|\
    \ c != sub[0]).collect();\n        sub = sub.chars().skip_while(|c| c != sub[0]).collect();\n\
    \    }\n    count", '    string.chars().zip(substring.chars()).filter(|&(a, b)|
    a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a
    == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a ==
    b).count()', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a ==
    b).count()', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a ==
    b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()',
  "    let mut count = 0;\n    let mut s = string.chars();\n    let mut sub = substring.chars();\n\
    \    while let Some(next) = s.next() {\n        if let Some(next_sub) = sub.next()\
    \ {\n            if next == next_sub {\n                count += 1;\n        \
    \    }\n        }\n    }\n    count", '    string.chars().filter(|c| c == substring).count()
    + 1', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a == b).count()',
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', " \
    \   let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n\
    \        let mut found = substring.find(&string[pos]);\n        while found !=\
    \ String::npos {\n            count += 1;\n            pos += found;\n       \
    \     found = substring.find(&string[pos], found + 1);\n        }\n        pos\
    \ += 1;\n    }\n    count", "    let mut count = 0;\n    let mut pos = 0;\n  \
    \  while pos < string.len() {\n        let mut i = pos;\n        while i < string.len()\
    \ && string[i] == substring[pos] {\n            i += 1;\n            pos += 1;\n\
    \        }\n        if i == string.len() {\n            count += 1;\n        }\n\
    \        pos += 1;\n    }\n    count", '    string.chars().filter(|c| c == substring).count()
    + 1', '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()',
  "    let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n\
    \        let mut end = string.len();\n        if end > substring.len() {\n   \
    \         end = substring.len();\n        }\n        if string.contains(&substring[..end])\
    \ {\n            count += 1;\n            pos += end;\n        } else {\n    \
    \        pos += 1;\n        }\n    }\n    count", "    let mut count = 0;\n  \
    \  let mut pos = 0;\n    while pos < string.len() {\n        let mut pos = string.find(substring,\
    \ pos);\n        if pos == String::npos {\n            break;\n        }\n   \
    \     count += 1;\n        pos += 1;\n    }\n    count", '    string.chars().filter(|c|
    c == substring).count() + 1']
stop_tokens:
- "\n}"
