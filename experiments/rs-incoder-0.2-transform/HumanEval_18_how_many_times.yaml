name: HumanEval_18_how_many_times
language: rs
prompt: "/// Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n/// >>> how_many_times(String::from(\"\"), String::from(\"\
  a\"))\n/// 0\n/// >>> how_many_times(String::from(\"aaa\"), String::from(\"a\"))\n\
  /// 3\n/// >>> how_many_times(String::from(\"aaaa\"), String::from(\"aa\"))\n///\
  \ 3\nfn how_many_times(string: String, substring: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len()\
    \ {\n        let mut found = false;\n        for c in string.chars() {\n     \
    \       if c == substring[pos] {\n                found = true;\n            \
    \    break;\n            }\n        }\n        if found {\n            count +=\
    \ 1;\n        }\n        pos += 1;\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', "    let mut count = 0;\n    let mut sub = String::from(substring);\n\
    \    let mut str = String::from(string);\n    while !str.is_empty() {\n      \
    \  if str == sub {\n            count += 1;\n        }\n        str = str.chars().skip_while(|c|\
    \ c != sub[0]).collect();\n        sub = sub.chars().skip_while(|c| c != sub[0]).collect();\n\
    \    }\n    count", '    string.chars().zip(substring.chars()).filter(|&(a, b)|
    a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a
    == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a ==
    b).count()', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a ==
    b).count()', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a ==
    b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()',
  "    let mut count = 0;\n    let mut s = string.chars();\n    let mut sub = substring.chars();\n\
    \    while let Some(next) = s.next() {\n        if let Some(next_sub) = sub.next()\
    \ {\n            if next == next_sub {\n                count += 1;\n        \
    \    }\n        }\n    }\n    count", '    string.chars().filter(|c| c == substring).count()
    + 1', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a == b).count()',
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', " \
    \   let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n\
    \        let mut found = substring.find(&string[pos]);\n        while found !=\
    \ String::npos {\n            count += 1;\n            pos += found;\n       \
    \     found = substring.find(&string[pos], found + 1);\n        }\n        pos\
    \ += 1;\n    }\n    count", "    let mut count = 0;\n    let mut pos = 0;\n  \
    \  while pos < string.len() {\n        let mut i = pos;\n        while i < string.len()\
    \ && string[i] == substring[pos] {\n            i += 1;\n            pos += 1;\n\
    \        }\n        if i == string.len() {\n            count += 1;\n        }\n\
    \        pos += 1;\n    }\n    count", '    string.chars().filter(|c| c == substring).count()
    + 1', '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()',
  "    let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n\
    \        let mut end = string.len();\n        if end > substring.len() {\n   \
    \         end = substring.len();\n        }\n        if string.contains(&substring[..end])\
    \ {\n            count += 1;\n            pos += end;\n        } else {\n    \
    \        pos += 1;\n        }\n    }\n    count", "    let mut count = 0;\n  \
    \  let mut pos = 0;\n    while pos < string.len() {\n        let mut pos = string.find(substring,\
    \ pos);\n        if pos == String::npos {\n            break;\n        }\n   \
    \     count += 1;\n        pos += 1;\n    }\n    count", '    string.chars().filter(|c|
    c == substring).count() + 1', '    string.chars().filter(|c| c == substring).count()
    + 1', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a == b).count()',
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(ref
    a, ref b)| a == b).count()', "    let mut counter = 0;\n    let mut pos = 0;\n\
    \    while pos < string.len() {\n        let mut found = false;\n        for c\
    \ in string.chars() {\n            if pos == string.len() || pos == 0 || string.chars().nth(pos).unwrap()\
    \ != c {\n                found = true;\n                break;\n            }\n\
    \            pos += 1;\n        }\n        if found {\n            counter +=\
    \ 1;\n        }\n        pos += 1;\n    }\n    counter", "    let mut counter\
    \ = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n        let mut\
    \ found = false;\n        for c in string.chars() {\n            if c == substring[pos]\
    \ {\n                found = true;\n                pos += 1;\n              \
    \  break;\n            }\n        }\n        if !found {\n            counter\
    \ += 1;\n        }\n        pos += 1;\n    }\n    counter", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', "    let mut count = 0;\n    let mut string_iter = string.char_indices();\n\
    \    let mut substring_iter = substring.char_indices();\n    let mut substring_end\
    \ = substring.char_indices().next();\n    while let Some((start, end)) = substring_end\
    \ {\n        if start < end {\n            substring_end = substring_iter.next();\n\
    \            count += end - start;\n        }\n    }\n    count += substring_end.unwrap().1\
    \ - substring_iter.next().unwrap().1;\n    count", '    string.chars().zip(substring.chars()).filter(|&(ref
    a, ref b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', '    string.chars().filter(|c| c == substring).count() +
    1', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a == b).count()',
  '    string.chars().zip(substring.chars()).filter(|&(sub, main)| sub == main).count()',
  '    string.chars().zip(substring.chars()).filter(|&(sub, main)| sub == main).count()',
  "    let mut counter = 0;\n    for c in string.chars() {\n        if c == substring.chars()\
    \ {\n            counter += 1;\n        }\n        if c == substring.chars().nth(0)\
    \ {\n            counter += 1;\n        }\n    }\n    counter", '    string.chars().filter(|c|
    c == substring).count() + 1', '    string.chars().filter(|c| c == substring).count()
    + 1', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a == b).count()',
  "    let mut counter = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n\
    \        let mut found = false;\n        for c in string.chars() {\n         \
    \   if c == substring.chars()[pos] {\n                found = true;\n        \
    \        break;\n            }\n        }\n        if found {\n            counter\
    \ += 1;\n        }\n        pos += 1;\n    }\n    counter", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().filter(|c| c == substring).count() +
    1', '    string.chars().filter(|c| substring.contains(c)).count()', "    let mut\
    \ count = 0;\n    let mut string_iter = string.char_indices();\n    let mut substring_iter\
    \ = substring.char_indices();\n    let mut substring_end = substring.char_indices().next();\n\
    \    while let Some((start, end)) = substring_end {\n        if start > end {\n\
    \            substring_end = substring.char_indices().next();\n            continue;\n\
    \        }\n        let mut start = start;\n        let mut end = end;\n     \
    \   let mut found = false;\n        while let Some((i, _)) = substring_iter.next()\
    \ {\n            if i >= start && i <= end {\n                found = true;\n\
    \                break;\n            }\n            start = i;\n        }\n  \
    \      if found {\n            count += 1;\n        }\n        start = end;\n\
    \        end = end;\n        while let Some((i, _)) = string_iter.next() {\n \
    \           if i >= start && i <= end {\n                found = true;\n     \
    \           break;\n            }\n            end = i;\n        }\n        if\
    \ found {\n            count += 1;\n        }\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a
    == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a ==
    b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()',
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', "    let mut counter = 0;\n    let mut index = string.find(substring);\n\
    \    while index != String::npos {\n        counter += 1;\n        index = string.find(substring,\
    \ index + 1);\n    }\n    counter", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().filter(|c| c == substring).count() as
    isize', "    let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len()\
    \ {\n        if string.starts_with(substring, pos) {\n            count += 1;\n\
    \        }\n        pos += 1;\n    }\n    count", "    let mut count = 0;\n  \
    \  let mut pos = 0;\n    while pos < string.len() {\n        if string.contains(substring,\
    \ pos) {\n            count += 1;\n        }\n        pos += 1;\n    }\n    count",
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', "    let mut count = 0;\n    let mut string_iter = string.char_indices();\n\
    \    let mut substring_iter = substring.char_indices();\n    let mut substring_end\
    \ = substring_iter.end();\n    while let Some((start, end)) = substring_iter.next()\
    \ {\n        if start < end {\n            count += substring_iter.position(|&i|\
    \ i >= start && i <= end).unwrap_or(0);\n        }\n        substring_end = end;\n\
    \    }\n    count += substring_end - substring_iter.positions(|&i| i >= substring_end).unwrap_or(0);\n\
    \    count", '    string.chars().filter(|c| c == substring).count() + 1', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', "    let mut count = 0;\n    let mut string = string.chars();\n\
    \    let mut substring = substring.chars();\n    while let Some(item) = string.next()\
    \ {\n        if let Some(item) = substring.next() {\n            if item == item\
    \ {\n                count += 1;\n            }\n        }\n    }\n    count",
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().filter(|c| c == substring).count() +
    1', "    let mut count = 0;\n    let mut string_iter = string.char_indices();\n\
    \    let mut substring_iter = substring.char_indices();\n    let mut i = 0;\n\
    \    while i < string.len() && i < substring.len() {\n        if string_iter.next().unwrap().0\
    \ == substring_iter.next().unwrap().0 {\n            count += 1;\n        }\n\
    \        i += 1;\n    }\n    count", "    let mut counter = 0;\n    let mut pos\
    \ = 0;\n    while pos < string.len() {\n        let mut found = false;\n     \
    \   for c in string.chars() {\n            if pos == 0 {\n                found\
    \ = true;\n                break;\n            }\n            if c == substring.chars()[pos\
    \ - 1] {\n                found = true;\n                break;\n            }\n\
    \        }\n        if found {\n            counter += 1;\n        }\n       \
    \ pos += 1;\n    }\n    counter", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a
    == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a ==
    b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()',
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().filter(|c| c == substring).count() +
    1', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a == b).count()',
  "    let mut count = 0;\n    for c in string.chars() {\n        if c == substring.chars().nth(0)\
    \ {\n            count += 1;\n        } else if c == substring.chars().nth(1)\
    \ {\n            count += 1;\n            count += 1;\n        } else if c ==\
    \ substring.chars().nth(2) {\n            count += 1;\n            count += 1;\n\
    \            count += 1;\n        } else {\n            count += 1;\n        \
    \    count += 1;\n            count += 1;\n            count += 1;\n         \
    \   count += 1;\n        }\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().filter(|c| c == substring).count() +
    1', '    string.chars().filter(|c| c == substring).count() + 1', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().filter(|c| substring.contains(&c)).count()',
  '    string.chars().zip(substring.chars()).filter(|&(a, b)| a == b).count()', '    string.chars().filter(|c|
    c == substring).count() + 1', '    string.chars().filter(|c| substring.contains(&c)).count()',
  '    string.chars().zip(substring.chars()).filter(|&(sub, main)| sub == main).count()',
  '    string.chars().filter(|c| c == substring).count() + 1', "    let mut counter\
    \ = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n        if string.starts_with(substring,\
    \ pos) {\n            counter += 1;\n            pos += substring.len();\n   \
    \     } else {\n            pos += 1;\n        }\n    }\n    counter", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().filter(|c| substring.contains(&c)).count()',
  "    let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n\
    \        let mut found = string.find(substring, pos);\n        if found == String::npos\
    \ {\n            break;\n        }\n        count += 1;\n        pos = found +\
    \ 1;\n    }\n    count", '    string.chars().filter(|c| c == substring).count()
    + 1', "    let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len()\
    \ {\n        if string.contains(substring, pos) {\n            count += 1;\n \
    \       }\n        pos += 1;\n    }\n    count", "    let mut count = 0;\n   \
    \ let mut iter = string.char_indices();\n    for _ in 0..string.len() {\n    \
    \    let (index, substring) = iter.next();\n        if substring.contains(&substring)\
    \ {\n            count += 1;\n        }\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', '    string.chars().filter(|c| c == substring).count() +
    1', '    string.chars().filter(|c| substring.contains(c)).count()', "    let mut\
    \ counter = 0;\n    let mut index = string.find(substring);\n    while index !=\
    \ String::npos {\n        counter += 1;\n        index = string.find(substring,\
    \ index + 1);\n    }\n    counter", '    string.chars().filter(|c| c == substring).count()
    + 1', '    string.chars().filter(|c| c == substring).count() as isize', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', "    let mut count = 0;\n    let mut pos = 0;\n    while\
    \ pos < string.len() {\n        if string.starts_with(substring, pos) {\n    \
    \        count += 1;\n        }\n        pos += 1;\n    }\n    count", '    string.chars().filter(|c|
    substring.contains(&c)).count()', '    string.chars().zip(substring.chars()).filter(|&(ref
    a, ref b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(ref
    a, ref b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', "    let mut count = 0;\n    let mut pos = 0;\n    while pos\
    \ < string.len() {\n        let mut found = false;\n        for c in string.chars()\
    \ {\n            if c == substring[pos] {\n                found = true;\n   \
    \             break;\n            }\n        }\n        if found {\n         \
    \   count += 1;\n        }\n        pos += 1;\n    }\n    count", '    string.chars().filter(|c|
    substring.contains(&c)).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', '    string.chars().filter(|c| substring.contains(&c)).count()',
  "    let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n\
    \        let mut end = string.len();\n        if end > substring.len() {\n   \
    \         end = substring.len();\n        }\n        if string.contains(&substring[..end])\
    \ {\n            count += 1;\n        }\n        pos += 1;\n    }\n    count",
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', " \
    \   let mut count = 0;\n    let mut index = string.find(substring);\n    while\
    \ index != String::npos {\n        count += 1;\n        index = string.find(substring,\
    \ index + 1);\n    }\n    count", '    string.chars().filter(|c| substring.contains(&c)).count()',
  '    string.chars().filter(|c| c == substring).count() as isize', '    string.chars().filter(|c|
    c == substring).count() + 1', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', "    let mut count = 0;\n    let mut pos = 0;\n    while pos\
    \ < string.len() {\n        let mut pos = string.find(substring, pos);\n     \
    \   if pos == String::npos {\n            break;\n        }\n        count +=\
    \ 1;\n        pos += 1;\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', "    let mut count = 0;\n    let mut pos = 0;\n    while pos\
    \ < string.len() {\n        if string.starts_with(substring, pos) {\n        \
    \    count += 1;\n        }\n        pos += 1;\n    }\n    count", "    let mut\
    \ count = 0;\n    let mut string_iter = string.char_indices();\n    let mut substring_iter\
    \ = substring.char_indices();\n    let mut substring_end = substring.char_indices().next();\n\
    \    while let Some((start, end)) = substring_end {\n        if start < end {\n\
    \            substring_end = substring_iter.next();\n            count += 1;\n\
    \        }\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(sub,
    main)| sub == main).count()', "    let mut counter = 0;\n    let mut i = 0;\n\
    \    while i < string.len() {\n        if string.contains(&substring) {\n    \
    \        counter += 1;\n        }\n        i += 1;\n    }\n    counter", '    string.chars().filter(|c|
    c == substring).count() + 1', '    string.chars().filter(|c| c == substring).count()
    + 1', '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()',
  '    string.chars().filter(|c| c == substring).count() + 1', '    string.chars().filter(|c|
    c == substring).count() + 1', '    string.chars().filter(|c| substring.contains(&c)).count()',
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', '    string.chars().filter(|c|
    c == substring).count() + 1', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', '    string.chars().filter(|c| c == substring).count() + 1',
  "    let mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n\
    \        let mut found = false;\n        for c in string.chars() {\n         \
    \   if c == substring[pos] {\n                found = true;\n                break;\n\
    \            }\n        }\n        if found {\n            count += 1;\n     \
    \   }\n        pos += 1;\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|&(ref
    a, ref b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(sub,
    main)| sub == main).count()', '    string.chars().filter(|c| substring.contains(&c)).count()',
  '    string.chars().zip(substring.chars()).filter(|&(a, b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', "    let mut count = 0;\n    let mut pos = 0;\n    while\
    \ pos < string.len() {\n        let mut found = false;\n        for c in string.chars()\
    \ {\n            if c == substring[pos] {\n                found = true;\n   \
    \             break;\n            }\n        }\n        if found {\n         \
    \   count += 1;\n        }\n        pos += 1;\n    }\n    count", '    string.chars().filter(|c|
    c == substring).count() + 1', "    let mut counter = 0;\n    let mut pos = 0;\n\
    \    while pos < string.len() {\n        let mut substr_pos = 0;\n        while\
    \ substr_pos < substring.len() && pos < string.len() {\n            if string[pos]\
    \ == substring[substr_pos] {\n                substr_pos += 1;\n             \
    \   pos += 1;\n            } else {\n                break;\n            }\n \
    \       }\n        if substr_pos == substring.len() {\n            counter +=\
    \ 1;\n        }\n        pos += 1;\n    }\n    counter", "    let mut count =\
    \ 0;\n    let mut s = string.chars();\n    let mut sub = substring.chars();\n\
    \    while let Some(next) = s.next() {\n        if let Some(next2) = sub.next()\
    \ {\n            if next == next2 {\n                count += 1;\n           \
    \ }\n        } else {\n            break;\n        }\n    }\n    count", "   \
    \ let mut count = 0;\n    for c in string.chars() {\n        if substring.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|&(sub,
    main)| sub == main).count()', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a
    == b).count()', "    let mut count = 0;\n    let mut substring_iter = substring.char_indices();\n\
    \    for c in string.chars() {\n        if substring_iter.any(|&(_, end)| end\
    \ > c.start()) {\n            count += 1;\n        }\n    }\n    count", '    string.chars().filter(|c|
    c == substring).count() as isize', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().filter(|c| c == substring).count() +
    1', '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()',
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', '    string.chars().filter(|c| c == substring).count() as isize',
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', '    string.chars().filter(|c| c == substring).count() +
    1', '    string.chars().filter(|c| c == substring).count() as isize', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', "    let mut counter = 0;\n    let mut index = string.find(substring);\n\
    \    while index != String::npos {\n        counter += 1;\n        index = string.find(substring,\
    \ index + 1);\n    }\n    counter", '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a
    == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a
    == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a ==
    b).count()', '    string.chars().zip(substring.chars()).filter(|&(sub, main)|
    sub == main).count()', '    string.chars().filter(|c| c == substring).count()
    as isize', '    string.chars().filter(|c| c == substring).count() + 1', '    string.chars().filter(|c|
    c == substring).count() as isize', '    string.chars().filter(|c| c == substring).count()
    + 1', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a == b).count()',
  '    string.chars().zip(substring.chars()).filter(|(a, b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', "    let mut count = 0;\n    let mut pos = 0;\n    while pos\
    \ < string.len() {\n        let mut found = false;\n        for c in string.chars()\
    \ {\n            if c == substring[pos] {\n                found = true;\n   \
    \             break;\n            }\n        }\n        if found {\n         \
    \   count += 1;\n        }\n        pos += 1;\n    }\n    count", '    string.chars().zip(substring.chars()).filter(|(a,
    b)| a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)|
    a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a, b)|
    a == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a, b)|
    a == b).count()', '    string.chars().zip(substring.chars()).filter(|(a, b)| a
    == b).count()', '    string.chars().zip(substring.chars()).filter(|&(a, b)| a
    == b).count()', "    let mut counter = 0;\n    let mut pos = 0;\n    while pos\
    \ < string.len() {\n        if string.starts_with(substring, pos) {\n        \
    \    counter += 1;\n        }\n        pos += 1;\n    }\n    counter", '    string.chars().filter(|c|
    c == substring).count() + 1', "    let mut counter = 0;\n    let mut pos = 0;\n\
    \    while pos < string.len() {\n        if string.starts_with(substring, pos)\
    \ {\n            counter += 1;\n        }\n        pos += 1;\n    }\n    counter"]
stop_tokens:
- "\n}"
