name: HumanEval_3_below_zero
language: rs
prompt: "/// You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n/// zero balance. Your task is to detect if at any point the\
  \ balance of account fallls below zero, and\n/// at that point function should return\
  \ True. Otherwise it should return False.\n/// >>> below_zero(vec![1, 2, 3])\n///\
  \ false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
  \ Vec<isize>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ["    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        balance + op\n    });\n    balance < 0", '    operations.iter().fold(false,
    |result, b| result && b < 0)', "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => {\n                balance += amount;\n                balance\n        \
    \    }\n            Operation::Withdraw(amount) => {\n                balance\
    \ -= amount;\n                balance\n            }\n        }\n    });\n   \
    \ balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().sum();\n    balance < 0", '    operations.iter().fold(true,
    |b, i| b && i < 0)', "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, operation|\
    \ {\n        balance + operation\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().sum();\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut acc, x| {\n    \
    \    if x < 0 {\n            acc + x\n        } else {\n            acc\n    \
    \    }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut balance, operation| {\n \
    \       balance + operation\n    });\n    balance < 0", "    let mut balance =\
    \ operations.iter().fold(0, |mut balance, operation| {\n        balance + operation\n\
    \    });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0",
  '    operations.iter().fold(false, |b, &i| b && (i < 0))', "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, op| balance + op);\n    balance <\
    \ 0"]
stop_tokens:
- "\n}"
