name: HumanEval_3_below_zero
language: rs
prompt: "/// You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n/// zero balance. Your task is to detect if at any point the\
  \ balance of account fallls below zero, and\n/// at that point function should return\
  \ True. Otherwise it should return False.\n/// >>> below_zero(vec![1, 2, 3])\n///\
  \ false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
  \ Vec<isize>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
  \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]),\
  \ false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
  \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
completions: ["    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            Operation::Deposit(amount) => balance + amount,\n\
    \            Operation::Withdraw(amount) => balance - amount,\n        }\n   \
    \ });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| {\n        balance + i\n    });\n    balance < 0", "    let mut\
    \ balance = operations.iter().fold(0, |mut acc, x| acc + x);\n    balance < 0",
  "    let mut balance = 0;\n    for op in operations {\n        balance += op;\n\
    \        if balance < 0 {\n            return true;\n        }\n    }\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut acc, x| acc + x);\n\
    \    balance < 0", "    operations.iter().fold(false, |mut acc, x| {\n       \
    \ if *acc {\n            *acc = false;\n            true\n        } else {\n \
    \           *acc = true;\n            false\n        }\n    })", "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, op| {\n        balance + op\n\
    \    });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        balance + op\n    });\n    balance < 0", "    let mut\
    \ balance = operations.iter().sum();\n    balance < 0", "    let mut balance =\
    \ operations.iter().fold(0, |mut balance, operation| {\n        balance + operation\n\
    \    });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0",
  "    let mut balance = operations.iter().fold(0, |mut balance, operation| {\n  \
    \      balance + operation\n    });\n    balance < 0", "    let mut balance =\
    \ operations.iter().fold(0, |mut acc, x| {\n        if x < 0 {\n            acc\n\
    \        } else {\n            acc + x\n        }\n    });\n    balance < 0",
  "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n        match\
    \ op {\n            Operation::Deposit(amount) => balance + amount,\n        \
    \    Operation::Withdraw(amount) => balance - amount,\n        }\n    });\n  \
    \  balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| {\n        match op {\n            Operation::Deposit(amount) => balance\
    \ + amount,\n            Operation::Withdraw(amount) => balance - amount,\n  \
    \      }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            Operation::Deposit(amount) => balance + amount,\n\
    \            Operation::Withdraw(amount) => balance - amount,\n        }\n   \
    \ });\n    balance < 0", '    operations.iter().fold(false, |acc, x| acc && x
    < 0)', "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            Operation::Deposit(amount) => {\n           \
    \     balance += amount;\n                balance\n            }\n           \
    \ Operation::Withdraw(amount) => {\n                balance -= amount;\n     \
    \           balance\n            }\n        }\n    });\n    balance < 0", "  \
    \  let mut balance = operations.iter().fold(0, |mut balance, op| {\n        match\
    \ op {\n            Operation::Deposit(amount) => {\n                balance +=\
    \ amount;\n                balance\n            }\n            Operation::Withdraw(amount)\
    \ => {\n                balance -= amount;\n                balance\n        \
    \    }\n        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    operations.iter().fold(false,\
    \ |result, balance| {\n        if balance < 0 {\n            result = true;\n\
    \        }\n        result\n    })", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| {\n        if x < 0 {\n            acc\n        } else {\n    \
    \        acc + x\n        }\n    });\n    balance < 0", "    let mut balance =\
    \ operations.iter().fold(0, |mut acc, x| {\n        acc + (*x)\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut acc, x| {\n    \
    \    if x < 0 {\n            acc\n        } else {\n            acc + x\n    \
    \    }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Deposit(amount) => balance\
    \ + amount,\n            Withdraw(amount) => balance - amount,\n        }\n  \
    \  });\n    balance < 0", "    let mut balance = operations.iter().sum();\n  \
    \  balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", '    operations.iter().fold(false,
    |acc, &x| acc && x < 0)', "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| {\n        balance + i\n    });\n    balance < 0", "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, op| balance + op);\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            Operation::Deposit(amount) => balance + amount,\n\
    \            Operation::Withdraw(amount) => balance - amount,\n        }\n   \
    \ });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| {\n        balance + i\n    });\n    balance < 0", "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, i| {\n        balance + i\n\
    \    });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| {\n        balance + i\n    });\n    balance < 0", "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, operation| {\n        balance\
    \ + operation\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut acc, x| {\n    \
    \    if x < 0 {\n            acc\n        } else {\n            acc + x\n    \
    \    }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, op| {\n        match op\
    \ {\n            Operation::Deposit(amount) => balance + amount,\n           \
    \ Operation::Withdraw(amount) => balance - amount,\n        }\n    });\n    balance\
    \ < 0", '    operations.iter().fold(false, |acc, x| acc && x < 0)', "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, i| {\n        balance + i\n\
    \    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", '    operations.iter().fold(false, |b, &i| b && (i < 0))',
  "    let mut balance = operations.iter().fold(0, |mut acc, x| {\n        if x <\
    \ 0 {\n            acc\n        } else {\n            acc + x\n        }\n   \
    \ });\n    balance < 0", "    let mut balance = operations.iter().sum();\n   \
    \ balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut acc, x| {\n        if x < 0 {\n\
    \            acc\n        } else {\n            acc + x\n        }\n    });\n\
    \    balance < 0", "    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, i| {\n        balance + i\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, i| {\n        balance\
    \ + i\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        balance + op\n    });\n    balance < 0", '    operations.iter().fold(false,
    |result, b| result && b < 0)', '    operations.iter().fold(false, |b, x| b &&
    x < 0)', "    let mut balance = operations.iter().fold(0, |mut balance, operation|\
    \ {\n        balance + operation\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, i| balance + i);\n    balance < 0",
  "    let mut balance = operations.iter().sum();\n    balance < 0", "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, op| {\n        match op {\n\
    \            Operation::Deposit(amount) => balance + amount,\n            Operation::Withdraw(amount)\
    \ => balance - amount,\n        }\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().sum();\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Deposit(amount) => balance\
    \ + amount,\n            Withdraw(amount) => balance - amount,\n        }\n  \
    \  });\n    balance < 0", '    operations.iter().fold(false, |b, &x| b && x <
    0)', "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n  \
    \      match op {\n            Operation::Deposit(amount) => balance + amount,\n\
    \            Operation::Withdraw(amount) => balance - amount,\n        }\n   \
    \ });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ {\n                balance += amount;\n                balance\n           \
    \ }\n            Operation::Withdraw(amount) => {\n                balance -=\
    \ amount;\n                balance\n            }\n        }\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, operation|\
    \ {\n        balance + operation\n    });\n    balance < 0", '    operations.iter().fold(true,
    |result, b| result && b < 0)', "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ i| {\n        balance + i\n    });\n    balance < 0", "    let mut balance =\
    \ operations.iter().fold(0, |mut acc, x| acc + x);\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut acc, x| {\n        acc += x;\n\
    \        acc\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, i| {\n\
    \        balance + i\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, i| {\n        balance + i\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, i| {\n        balance\
    \ + i\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| {\n        acc += x;\n        acc\n    });\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut balance, op| {\n        match\
    \ op {\n            Operation::Deposit(amount) => {\n                balance +=\
    \ amount;\n                balance\n            }\n            Operation::Withdraw(amount)\
    \ => {\n                balance -= amount;\n                balance\n        \
    \    }\n        }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| {\n        balance + op\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().sum();\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut acc,\
    \ x| {\n        if x < 0 {\n            acc - x\n        } else {\n          \
    \  acc + x\n        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            Operation::Deposit(amount) => {\n           \
    \     balance += amount;\n                balance\n            }\n           \
    \ Operation::Withdraw(amount) => {\n                balance -= amount;\n     \
    \           balance\n            }\n        }\n    });\n    balance < 0", "  \
    \  let mut balance = operations.iter().fold(0, |mut acc, x| {\n        if x <\
    \ 0 {\n            acc\n        } else {\n            acc + x\n        }\n   \
    \ });\n    balance < 0", "    let mut balance = operations.iter().sum();\n   \
    \ balance < 0", "    let mut balance = operations.iter().sum();\n    balance <\
    \ 0", "    let mut balance = operations.iter().fold(0, |mut acc, x| {\n      \
    \  if x <= 0 {\n            acc\n        } else {\n            acc + x\n     \
    \   }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut acc, x| acc + x);\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().sum();\n    balance < 0", "    let mut\
    \ balance = operations.iter().sum();\n    balance < 0", "    let mut balance =\
    \ operations.iter().sum();\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| {\n        if x < 0 {\n            acc - x\n        } else {\n\
    \            acc + x\n        }\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, i| balance + i);\n    balance < 0",
  '    operations.iter().fold(false, |acc, x| acc && x < 0)', "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, op| {\n        match op {\n      \
    \      Operation::Deposit(amount) => balance + amount,\n            Operation::Withdraw(amount)\
    \ => balance - amount,\n        }\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, i| {\n        balance + i\n    });\n\
    \    balance < 0", "    operations.iter().fold(false, |result, balance| {\n  \
    \      result || balance < 0\n    })", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ i| {\n        balance + i\n    });\n    balance < 0", "    let mut balance =\
    \ operations.iter().sum();\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        match operation {\n            Operation::Deposit(amount)\
    \ => {\n                balance += amount;\n                balance\n        \
    \    }\n            Operation::Withdraw(amount) => {\n                balance\
    \ -= amount;\n                balance\n            }\n        }\n    });\n   \
    \ balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, i| {\n        balance\
    \ + i\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| {\n        match op {\n            Operation::Deposit(amount) => balance\
    \ + amount,\n            Operation::Withdraw(amount) => balance - amount,\n  \
    \      }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, i| {\n\
    \        balance + i\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = 0;\n    for operation in operations {\n       \
    \ balance += operation;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    operations.iter().fold(false, |result,\
    \ balance| {\n        result || balance < 0\n    })", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        balance + op\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        balance + op\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, i| {\n        balance\
    \ + i\n    });\n    balance < 0", '    operations.iter().fold(true, |acc, x| acc
    && x < 0)', "    let mut balance = operations.iter().fold(0, |mut balance, op|\
    \ {\n        match op {\n            Deposit(amount) => balance + amount,\n  \
    \          Withdraw(amount) => balance - amount,\n        }\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            Operation::Deposit(amount) => balance + amount,\n\
    \            Operation::Withdraw(amount) => balance - amount,\n        }\n   \
    \ });\n    balance < 0", "    let mut balance = operations.iter().sum();\n   \
    \ balance < 0", "    let mut balance = 0;\n    for op in operations {\n      \
    \  balance += op;\n        if balance < 0 {\n            return true;\n      \
    \  }\n    }\n    balance < 0", '    operations.iter().fold(false, |b, x| b &&
    x < 0)', "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut balance, op| {\n        balance\
    \ + op\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Deposit(amount) => balance\
    \ + amount,\n            Withdraw(amount) => balance - amount,\n        }\n  \
    \  });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            Operation::Deposit(amount) => balance + amount,\n\
    \            Operation::Withdraw(amount) => balance - amount,\n        }\n   \
    \ });\n    balance < 0", "    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        balance + op\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| {\n        match op {\n            Deposit(amount) => balance + amount,\n\
    \            Withdraw(amount) => balance - amount,\n        }\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, i| {\n\
    \        balance + i\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| {\n        if x < 0 {\n            acc - x\n        } else {\n\
    \            acc + x\n        }\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, op| balance + op);\n    balance <\
    \ 0", "    let mut balance = operations.iter().sum();\n    balance < 0", '    operations.iter().fold(false,
    |b, x| b && x < 0)', "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut acc, x| acc + x);\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            Operation::Deposit(amount) => balance + amount,\n\
    \            Operation::Withdraw(amount) => balance - amount,\n        }\n   \
    \ });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut balance, operation| {\n \
    \       balance + operation\n    });\n    balance < 0", "    let mut balance =\
    \ operations.iter().sum();\n    balance < 0", '    operations.iter().fold(false,
    |b, op| b && b < 0)', "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, operation| {\n       \
    \ balance + operation\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| {\n        balance + op\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, op| {\n        match op {\n      \
    \      Operation::Deposit(amount) => {\n                balance += amount;\n \
    \               balance\n            }\n            Operation::Withdraw(amount)\
    \ => {\n                balance -= amount;\n                balance\n        \
    \    }\n        }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| {\n        balance + op\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, op| balance + op);\n    balance <\
    \ 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", '    operations.iter().fold(false, |acc, x| acc &&
    x < 0)', "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            Deposit(amount) => balance + amount,\n      \
    \      Withdraw(amount) => balance - amount,\n        }\n    });\n    balance\
    \ < 0", '    operations.iter().fold(false, |result, b| result && b < 0)', "  \
    \  let mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        match operation {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", '    operations.iter().fold(false, |result,
    b| result && b < 0)', '    operations.iter().fold(false, |acc, x| acc && x < 0)',
  "    let mut balance = operations.iter().sum();\n    balance < 0", "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, op| {\n        match op {\n\
    \            Operation::Deposit(amount) => {\n                balance += amount;\n\
    \                balance\n            }\n            Operation::Withdraw(amount)\
    \ => {\n                balance -= amount;\n                balance\n        \
    \    }\n        }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = 0;\n    for op in operations {\n   \
    \     balance += op;\n        if balance < 0 {\n            return true;\n   \
    \     }\n    }\n    false", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0",
  '    operations.iter().fold(false, |b, x| b && x < 0)', "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, operation|\
    \ {\n        balance + operation\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, operation| {\n        balance + operation\n\
    \    });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ acc, x| {\n        if x < 0 {\n            acc\n        } else {\n         \
    \   acc + x\n        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| {\n        if x < 0 {\n            acc - x\n        } else {\n\
    \            acc + x\n        }\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, operation| {\n        balance + operation\n\
    \    });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, i| {\n        balance\
    \ + i\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, operation|\
    \ {\n        balance + operation\n    });\n    balance < 0"]
stop_tokens:
- "\n}"
