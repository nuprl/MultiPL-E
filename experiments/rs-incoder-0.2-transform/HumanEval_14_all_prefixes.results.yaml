language: rs
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcz74a7h.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string.clone();\n\
    \    while !current.is_empty() {\n        prefix.push(current);\n        current\
    \ = &current[..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp65ulqp2.rs:9:19\n  |\n6 |\
    \     let mut current = string.clone();\n  |                       --------------\
    \ expected due to this value\n...\n9 |         current = &current[..];\n  |  \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\nhelp:\
    \ try using a conversion method\n  |\n9 |         current = (&current[..]).to_string();\n\
    \  |                   +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx_d74mj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix.push(string.chars().take(i).collect::<String>());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnyw51u3.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if prefix.len() < c.len()\
    \ {\n            prefix = prefix.clone();\n            prefix_vec.push(prefix);\n\
    \        }\n        prefix = prefix.clone();\n        prefix.push(c);\n    }\n\
    \    prefix_vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `char` in the current\
    \ scope\n --> /tmp/tmp2bow4ehg.rs:8:29\n  |\n8 |         if prefix.len() < c.len()\
    \ {\n  |                             ^^^ method not found in `char`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter_map(|c| {\n\
    \            if c.is_ascii_lowercase() {\n                Some(c.to_string())\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpxob176a0.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if c.is_prefix(&prefix)\
    \ {\n            prefix_vec.push(prefix);\n            prefix = c.to_owned();\n\
    \        } else {\n            prefix = c.to_owned();\n        }\n    }\n    prefix_vec.push(prefix);\n\
    \    prefix_vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `char` in the\
    \ current scope\n --> /tmp/tmphm04m1kc.rs:8:14\n  |\n8 |         if c.is_prefix(&prefix)\
    \ {\n  |              ^^^^^^^^^ method not found in `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphm04m1kc.rs:10:22\n   |\n5  |     let mut prefix = String::from(\"\
    \");\n   |                      ---------------- expected due to this value\n\
    ...\n10 |             prefix = c.to_owned();\n   |                      ^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \    |\n   |                      expected struct `String`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphm04m1kc.rs:12:22\n   |\n5  |     let mut prefix\
    \ = String::from(\"\");\n   |                      ---------------- expected due\
    \ to this value\n...\n12 |             prefix = c.to_owned();\n   |          \
    \            ^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                      |\n   |                      expected struct `String`,\
    \ found `char`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|&(i, c)| c.is_ascii_lowercase()).map(|(i,\
    \ c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpz8653yyk.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzr5zq4ai.rs:4:36\n  |\n4 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------      \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n  |\n\
    \  = note: expected struct `Vec<String>`\n          found unit type `()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut prefix_len =\
    \ string.len();\n    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpf45cpo04.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix.push(string.chars().nth(i).unwrap());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplkrwmry0.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwh3l1aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6_3j1uav.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcz74a7h.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzdavny8v.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_alphabetic()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpyuqp0b14.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == string.len() {\n    \
    \        break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcmtcg97u.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwh3l1aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut current = iter.next();\n    while let Some(next) = iter.next() {\n\
    \        if next.0.is_prefix(current.0.unwrap()) {\n            prefix.push(current.0.unwrap());\n\
    \            current = next;\n        } else {\n            prefix.push(current.0.unwrap());\n\
    \            current = next;\n        }\n    }\n    prefix\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `usize` in the\
    \ current scope\n --> /tmp/tmp_ffyltck.rs:9:19\n  |\n9 |         if next.0.is_prefix(current.0.unwrap())\
    \ {\n  |                   ^^^^^^^^^ method not found in `usize`\n\nerror[E0609]:\
    \ no field `0` on type `Option<(usize, char)>`\n --> /tmp/tmp_ffyltck.rs:9:37\n\
    \  |\n9 |         if next.0.is_prefix(current.0.unwrap()) {\n  |             \
    \                        ^\n\nerror[E0609]: no field `0` on type `Option<(usize,\
    \ char)>`\n  --> /tmp/tmp_ffyltck.rs:10:33\n   |\n10 |             prefix.push(current.0.unwrap());\n\
    \   |                                 ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_ffyltck.rs:11:23\n   |\n7  |     let mut current = iter.next();\n \
    \  |                       ----------- expected due to this value\n...\n11 | \
    \            current = next;\n   |                       ^^^^ expected enum `Option`,\
    \ found tuple\n   |\n   = note: expected enum `Option<(usize, char)>`\n      \
    \       found tuple `(usize, char)`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n11 |             current = Some(next);\n   |                       +++++\
    \    +\n\nerror[E0609]: no field `0` on type `Option<(usize, char)>`\n  --> /tmp/tmp_ffyltck.rs:13:33\n\
    \   |\n13 |             prefix.push(current.0.unwrap());\n   |               \
    \                  ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_ffyltck.rs:14:23\n\
    \   |\n7  |     let mut current = iter.next();\n   |                       -----------\
    \ expected due to this value\n...\n14 |             current = next;\n   |    \
    \                   ^^^^ expected enum `Option`, found tuple\n   |\n   = note:\
    \ expected enum `Option<(usize, char)>`\n             found tuple `(usize, char)`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             current =\
    \ Some(next);\n   |                       +++++    +\n\nerror: aborting due to\
    \ 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0609.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_letter()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmp6y5mzp_3.rs:5:50\n  |\n5 |     string.chars().enumerate().filter(|(_,\
    \ c)| c.is_ascii_letter()).map(|(_, c)| c.to_string()).collect()\n  |        \
    \                                          ^^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `is_ascii`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx_d74mj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut next = iter.next();\n    while let Some((index, char)) = next {\n\
    \        if index == 0 {\n            prefix.push(char);\n        } else {\n \
    \           prefix.push(char.prefix(index));\n        }\n        next = iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `prefix` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpg160w3ae.rs:12:30\n   |\n12 |             prefix.push(char.prefix(index));\n\
    \   |                              ^^^^^^ method not found in `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg160w3ae.rs:16:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_letter()).map(|(i,\
    \ c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmpl_uhxu8r.rs:5:50\n  |\n5 |     string.chars().enumerate().filter(|(_,\
    \ c)| c.is_ascii_letter()).map(|(i, c)| {\n  |                               \
    \                   ^^^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `is_ascii`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > 1 {\n            prefix.pop();\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm8nr68tz.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if let Some((index,\
    \ c)) = iter.next() {\n            if index == i {\n                continue;\n\
    \            }\n            prefix.push(c);\n            i += 1;\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuzapnylz.rs:17:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n17 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut current = string.clone();\n\
    \    while !current.is_empty() {\n        prefix.push(current);\n        current\
    \ = &current[1..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpehtg4mrk.rs:9:19\n  |\n6 |\
    \     let mut current = string.clone();\n  |                       --------------\
    \ expected due to this value\n...\n9 |         current = &current[1..];\n  | \
    \                  ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\n\
    help: try using a conversion method\n  |\n9 |         current = (&current[1..]).to_string();\n\
    \  |                   +             +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = match iter.next() {\n            Some((index,\
    \ char)) => (index, char),\n            None => break,\n        };\n        prefix.push(char);\n\
    \        if index == 0 {\n            break;\n        }\n        iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3i5cvnmn.rs:18:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n18 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6_3j1uav.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpi066xorb.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    for _ in 0..string.len() {\n        prefix.push(iter.next().unwrap().to_string());\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `(usize, char)` doesn't implement `std::fmt::Display`\n -->\
    \ /tmp/tmparxz9yeq.rs:8:42\n  |\n8 |         prefix.push(iter.next().unwrap().to_string());\n\
    \  |                                          ^^^^^^^^^ `(usize, char)` cannot\
    \ be formatted with the default formatter\n  |\n  = note: the following trait\
    \ bounds were not satisfied:\n          `(usize, char): std::fmt::Display`\n \
    \         which is required by `(usize, char): ToString`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = iter.next().unwrap();\n        if index\
    \ == 0 {\n            prefix.push(char.to_string());\n        } else {\n     \
    \       prefix.push(char.to_string().to_string().rjust(index, \"0\"));\n     \
    \   }\n        if index == string.len() - 1 {\n            break;\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rjust` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpl10altgz.rs:12:54\n   |\n12 |             prefix.push(char.to_string().to_string().rjust(index,\
    \ \"0\"));\n   |                                                      ^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            if current_prefix.len()\
    \ > prefix.len() {\n                prefix = current_prefix;\n            }\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    if current_prefix.len()\
    \ > prefix.len() {\n        prefix = current_prefix;\n    }\n    prefix\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvg248dvs.rs:12:26\n   |\n\
    5  |     let mut prefix = vec![];\n   |                      ------ expected due\
    \ to this value\n...\n12 |                 prefix = current_prefix;\n   |    \
    \                      ^^^^^^^^^^^^^^ expected struct `Vec`, found struct `String`\n\
    \   |\n   = note: expected struct `Vec<_>`\n              found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvg248dvs.rs:18:18\n   |\n5  |\
    \     let mut prefix = vec![];\n   |                      ------ expected due\
    \ to this value\n...\n18 |         prefix = current_prefix;\n   |            \
    \      ^^^^^^^^^^^^^^ expected struct `Vec`, found struct `String`\n   |\n   =\
    \ note: expected struct `Vec<_>`\n              found struct `String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            current_prefix.push_str(&c.to_string());\n        } else {\n\
    \            prefix.push(current_prefix);\n            current_prefix = String::from(\"\
    \");\n        }\n    }\n    prefix.push(current_prefix);\n    prefix\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp2gevdk4n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = match iter.next() {\n            Some((index,\
    \ char)) => (index, char),\n            None => break,\n        };\n        prefix.push(char.to_string());\n\
    \        if index == string.len() - 1 {\n            break;\n        }\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp2_1sa7sx.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = iter.next();\n        if index == 0 {\n\
    \            prefix.push(char.to_string());\n        } else {\n            prefix.push(char.to_string().rjust(index,\
    \ \"0\"));\n        }\n        if index == string.len() - 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppjsy03wu.rs:8:13\n  |\n8 |\
    \         let (index, char) = iter.next();\n  |             ^^^^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsl24c3vc.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            current_prefix = current_prefix.to_owned();\n            prefix.push(current_prefix);\n\
    \        }\n        current_prefix = current_prefix.to_owned().push_str(&c.to_string());\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpayl1gtsd.rs:12:26\n   |\n\
    6  |     let mut current_prefix = String::from(\"\");\n   |                  \
    \            ---------------- expected due to this value\n...\n12 |         current_prefix\
    \ = current_prefix.to_owned().push_str(&c.to_string());\n   |                \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `()`\n   |\nnote: method `push_str` modifies its receiver in-place\n\
    \  --> /tmp/tmpayl1gtsd.rs:12:52\n   |\n12 |         current_prefix = current_prefix.to_owned().push_str(&c.to_string());\n\
    \   |                          ------------------------- ^^^^^^^^ this call modifies\
    \ its receiver in-place\n   |                          |\n   |               \
    \           you probably want to use this value after calling the method...\n\
    \   = note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx4i38oit.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if !prefix.is_empty()\
    \ {\n            prefix_vec.push(prefix);\n        }\n        prefix = prefix.to_owned()\
    \ + c;\n    }\n    prefix_vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprol_hikl.rs:11:38\n   |\n\
    11 |         prefix = prefix.to_owned() + c;\n   |                           \
    \           ^ expected `&str`, found `char`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmprqosdt_v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzdavny8v.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = string.len();\n\
    \    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp9wgf4xu_.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp6440qjlh.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_alphabetic()).map(|(i,\
    \ c)| {\n        string.chars().skip(i).take(1).collect::<String>()\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpbbou3pec.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if !prefix.contains(&c) {\n            prefix.push(c);\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2hokkh9e.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter_map(|c| c.is_alphanumeric())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpey8r__58.rs:7:25\n  |\n7 |\
    \         .filter_map(|c| c.is_alphanumeric())\n  |                         ^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |         .filter_map(|c| Some(c.is_alphanumeric()))\n  |            \
    \             +++++                   +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    string.chars().for_each(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            if current_prefix.len() > prefix.len() {\n                prefix\
    \ = current_prefix.clone();\n            }\n            current_prefix = current_prefix.clone();\n\
    \            current_prefix.push(c);\n        } else {\n            if current_prefix.len()\
    \ > prefix.len() {\n                prefix = current_prefix.clone();\n       \
    \     }\n            current_prefix = current_prefix.clone();\n            current_prefix.push('_');\n\
    \            current_prefix.push(c);\n        }\n    });\n    prefix\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnd89uazo.rs:10:26\n   |\n\
    5  |     let mut prefix = vec![];\n   |                      ------ expected due\
    \ to this value\n...\n10 |                 prefix = current_prefix.clone();\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ struct `String`\n   |\n   = note: expected struct `Vec<_>`\n              found\
    \ struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnd89uazo.rs:16:26\n\
    \   |\n5  |     let mut prefix = vec![];\n   |                      ------ expected\
    \ due to this value\n...\n16 |                 prefix = current_prefix.clone();\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ struct `String`\n   |\n   = note: expected struct `Vec<_>`\n              found\
    \ struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    loop {\n        prefix.push(string.chars().next().unwrap());\n        if\
    \ string.len() == 0 {\n            break;\n        }\n        string = string.chars().next().unwrap().to_string();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnk5n74gz.rs:14:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n14 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = match iter.next() {\n            Some((index,\
    \ char)) => (index, char),\n            None => break,\n        };\n        prefix.push(char);\n\
    \        if index == string.len() - 1 {\n            break;\n        }\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp__1a1hro.rs:17:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n17 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if prefix.is_empty() {\n            prefix.push(c);\n        } else\
    \ {\n            if prefix.len() < c.len() {\n                prefix.push(c);\n\
    \            }\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `char` in the current\
    \ scope\n  --> /tmp/tmptw3f2im4.rs:10:33\n   |\n10 |             if prefix.len()\
    \ < c.len() {\n   |                                 ^^^ method not found in `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptw3f2im4.rs:15:5\n   |\n4  | fn\
    \ all_prefixes(string: String) -> Vec<String> {\n   |                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    15 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmprqosdt_v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: -1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut current = string.clone();\n\
    \    while !current.is_empty() {\n        prefix.push(current);\n        current\
    \ = prefix.last().unwrap().clone();\n    }\n    prefix\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660011974
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        let (index, c) = iter.next();\n\
    \        if index == i {\n            prefix.push(c);\n        } else {\n    \
    \        prefix.push(String::from(&string[i..index]));\n            i = index;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp284k4l0g.rs:9:13\n  |\n9 |\
    \         let (index, c) = iter.next();\n  |             ^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string;\n\
    \    while current.len() > 0 {\n        prefix.push(current);\n        current\
    \ = &current[..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp73z_etbu.rs:9:19\n  |\n6 |\
    \     let mut current = string;\n  |                       ------ expected due\
    \ to this value\n...\n9 |         current = &current[..];\n  |               \
    \    ^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\nhelp: try using\
    \ a conversion method\n  |\n9 |         current = (&current[..]).to_string();\n\
    \  |                   +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpg2mcbpzr.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars();\n\
    \    let mut next = iter.next();\n    while let Some(next) = next {\n        if\
    \ let Some(prefix) = next.prefix(&prefix) {\n            prefix.push(next.unwrap());\n\
    \        } else {\n            prefix.push(next.unwrap());\n            prefix.push(iter.next());\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `prefix` found for type `char` in the current\
    \ scope\n --> /tmp/tmp203euz9t.rs:9:36\n  |\n9 |         if let Some(prefix) =\
    \ next.prefix(&prefix) {\n  |                                    ^^^^^^ method\
    \ not found in `char`\n\nerror[E0599]: no method named `unwrap` found for type\
    \ `char` in the current scope\n  --> /tmp/tmp203euz9t.rs:10:30\n   |\n10 |   \
    \          prefix.push(next.unwrap());\n   |                              ^^^^^^\
    \ method not found in `char`\n\nerror[E0599]: no method named `unwrap` found for\
    \ type `char` in the current scope\n  --> /tmp/tmp203euz9t.rs:12:30\n   |\n12\
    \ |             prefix.push(next.unwrap());\n   |                            \
    \  ^^^^^^ method not found in `char`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp203euz9t.rs:16:5\n   |\n4  | fn all_prefixes(string: String) -> Vec<String>\
    \ {\n   |                                    ----------- expected `Vec<String>`\
    \ because of return type\n...\n16 |     prefix\n   |     ^^^^^^ expected struct\
    \ `String`, found enum `Option`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Option<char>>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.to_string();\n    }\n    prefix\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp6v4i3au.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwh3l1aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut current = iter.next();\n    while let Some(next) = iter.next() {\n\
    \        if current.1.is_prefix(next.1) {\n            prefix.push(current.0);\n\
    \            current = next;\n        } else {\n            prefix.push(current.0);\n\
    \            current = next;\n        }\n    }\n    prefix.push(current.0);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `1` on type `Option<(usize, char)>`\n --> /tmp/tmpe4ka_8hd.rs:9:20\n\
    \  |\n9 |         if current.1.is_prefix(next.1) {\n  |                    ^\n\
    \nerror[E0609]: no field `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpe4ka_8hd.rs:10:33\n\
    \   |\n10 |             prefix.push(current.0);\n   |                        \
    \         ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe4ka_8hd.rs:11:23\n\
    \   |\n7  |     let mut current = iter.next();\n   |                       -----------\
    \ expected due to this value\n...\n11 |             current = next;\n   |    \
    \                   ^^^^ expected enum `Option`, found tuple\n   |\n   = note:\
    \ expected enum `Option<(usize, char)>`\n             found tuple `(usize, char)`\n\
    help: try wrapping the expression in `Some`\n   |\n11 |             current =\
    \ Some(next);\n   |                       +++++    +\n\nerror[E0609]: no field\
    \ `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpe4ka_8hd.rs:13:33\n   |\n\
    13 |             prefix.push(current.0);\n   |                               \
    \  ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe4ka_8hd.rs:14:23\n   |\n\
    7  |     let mut current = iter.next();\n   |                       -----------\
    \ expected due to this value\n...\n14 |             current = next;\n   |    \
    \                   ^^^^ expected enum `Option`, found tuple\n   |\n   = note:\
    \ expected enum `Option<(usize, char)>`\n             found tuple `(usize, char)`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             current =\
    \ Some(next);\n   |                       +++++    +\n\nerror[E0609]: no field\
    \ `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpe4ka_8hd.rs:17:25\n   |\n\
    17 |     prefix.push(current.0);\n   |                         ^\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if c == prefix.chars().next()\
    \ {\n            prefix.push_str(&c.to_string());\n        } else {\n        \
    \    prefix_vec.push(prefix);\n            prefix = String::from(c.to_string());\n\
    \        }\n    }\n    prefix_vec.push(prefix);\n    prefix_vec\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp689078i4.rs:8:17\n  |\n8 |\
    \         if c == prefix.chars().next() {\n  |                 ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n  |\n  = note: expected type `char`\n\
    \             found enum `Option<char>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n        String::from((&string[..i]).to_string())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0m2lhk67.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4u515ocq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            if current_prefix.len()\
    \ > prefix.len() {\n                prefix = current_prefix;\n            }\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn0bnx00c.rs:12:26\n   |\n\
    5  |     let mut prefix = vec![];\n   |                      ------ expected due\
    \ to this value\n...\n12 |                 prefix = current_prefix;\n   |    \
    \                      ^^^^^^^^^^^^^^ expected struct `Vec`, found struct `String`\n\
    \   |\n   = note: expected struct `Vec<_>`\n              found struct `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = match iter.next() {\n            Some((index,\
    \ char)) => (index, char),\n            None => break,\n        };\n        prefix.push(char.to_string());\n\
    \        if index == 0 {\n            break;\n        }\n        iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmp9d0k2gnf.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.to_string();\n    }\n    prefix\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp6v4i3au.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcz74a7h.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut current_prefix = String::new();\n    loop {\n        let (index,\
    \ char) = iter.next().unwrap();\n        if index == 0 {\n            current_prefix.push(char);\n\
    \        } else {\n            if current_prefix.len() < prefix.len() {\n    \
    \            prefix.push(current_prefix);\n            }\n            current_prefix.clear();\n\
    \            current_prefix.push(char);\n        }\n    }\n    prefix\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "warning: unreachable expression\n  --> /tmp/tmpsxs0a977.rs:20:5\n   |\n\
    8  | /     loop {\n9  | |         let (index, char) = iter.next().unwrap();\n\
    10 | |         if index == 0 {\n11 | |             current_prefix.push(char);\n\
    ...  |\n18 | |         }\n19 | |     }\n   | |_____- any code following this expression\
    \ is unreachable\n20 |       prefix\n   |       ^^^^^^ unreachable expression\n\
    \   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror[E0382]: borrow\
    \ of moved value: `current_prefix`\n  --> /tmp/tmpsxs0a977.rs:11:13\n   |\n7 \
    \ |     let mut current_prefix = String::new();\n   |         ------------------\
    \ move occurs because `current_prefix` has type `String`, which does not implement\
    \ the `Copy` trait\n...\n11 |             current_prefix.push(char);\n   |   \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n...\n14 |\
    \                 prefix.push(current_prefix);\n   |                         \
    \    -------------- value moved here, in previous iteration of loop\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx_d74mj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars();\n\
    \    loop {\n        prefix.push(iter.next().unwrap());\n        if iter.peek().is_none()\
    \ {\n            break;\n        }\n        iter.next();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `peek` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmp6foj0fi5.rs:9:17\n  |\n9 |         if iter.peek().is_none()\
    \ {\n  |                 ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6foj0fi5.rs:14:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcz74a7h.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut current = iter.next();\n    while let Some(next) = iter.next() {\n\
    \        if current.1.is_prefix(next.1) {\n            prefix.push(current.0);\n\
    \            current = next;\n        } else {\n            prefix.push(current.0);\n\
    \            current = next;\n        }\n    }\n    prefix.push(current.0);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `1` on type `Option<(usize, char)>`\n --> /tmp/tmpe4ka_8hd.rs:9:20\n\
    \  |\n9 |         if current.1.is_prefix(next.1) {\n  |                    ^\n\
    \nerror[E0609]: no field `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpe4ka_8hd.rs:10:33\n\
    \   |\n10 |             prefix.push(current.0);\n   |                        \
    \         ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe4ka_8hd.rs:11:23\n\
    \   |\n7  |     let mut current = iter.next();\n   |                       -----------\
    \ expected due to this value\n...\n11 |             current = next;\n   |    \
    \                   ^^^^ expected enum `Option`, found tuple\n   |\n   = note:\
    \ expected enum `Option<(usize, char)>`\n             found tuple `(usize, char)`\n\
    help: try wrapping the expression in `Some`\n   |\n11 |             current =\
    \ Some(next);\n   |                       +++++    +\n\nerror[E0609]: no field\
    \ `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpe4ka_8hd.rs:13:33\n   |\n\
    13 |             prefix.push(current.0);\n   |                               \
    \  ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe4ka_8hd.rs:14:23\n   |\n\
    7  |     let mut current = iter.next();\n   |                       -----------\
    \ expected due to this value\n...\n14 |             current = next;\n   |    \
    \                   ^^^^ expected enum `Option`, found tuple\n   |\n   = note:\
    \ expected enum `Option<(usize, char)>`\n             found tuple `(usize, char)`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             current =\
    \ Some(next);\n   |                       +++++    +\n\nerror[E0609]: no field\
    \ `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpe4ka_8hd.rs:17:25\n   |\n\
    17 |     prefix.push(current.0);\n   |                         ^\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars();\n\
    \    let mut next = iter.next();\n    while let Some(next) = next {\n        if\
    \ next.is_prefix(&prefix) {\n            prefix.push(next);\n        } else {\n\
    \            break;\n        }\n        next = iter.next();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `char` in the\
    \ current scope\n --> /tmp/tmp5w6k3smf.rs:9:17\n  |\n9 |         if next.is_prefix(&prefix)\
    \ {\n  |                 ^^^^^^^^^ method not found in `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5w6k3smf.rs:14:16\n   |\n8  |     while let\
    \ Some(next) = next {\n   |                    ---- expected due to the type of\
    \ this binding\n...\n14 |         next = iter.next();\n   |                ^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<char>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp5w6k3smf.rs:16:5\n   |\n4  | fn all_prefixes(string: String) ->\
    \ Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n16 |     prefix\n   |     ^^^^^^\
    \ expected struct `String`, found `char`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<char>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcz74a7h.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string;\n\
    \    while current.len() > 0 {\n        prefix.push(current);\n        current\
    \ = &current[..current.len() - 1];\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpys8ted21.rs:9:19\n  |\n6 |\
    \     let mut current = string;\n  |                       ------ expected due\
    \ to this value\n...\n9 |         current = &current[..current.len() - 1];\n \
    \ |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         current\
    \ = (&current[..current.len() - 1]).to_string();\n  |                   +    \
    \                         +++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpuvx28cfz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = &s[1..];\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1wgbws4.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[1..];\n  |             ^^^^^^^ expected struct `String`,\
    \ found `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         s =\
    \ (&s[1..]).to_string();\n  |             +       +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = match iter.next() {\n            Some((index,\
    \ char)) => (index, char),\n            None => break,\n        };\n        prefix.push(char.to_string());\n\
    \        if index == 0 {\n            break;\n        }\n        iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmp9d0k2gnf.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter_map(|c| {\n\
    \            if c.is_ascii_lowercase() {\n                Some(c.to_ascii_lowercase())\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp_n61t41b.rs:14:10\n     |\n14\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    for &(i, c) in iter {\n        if i == 0 {\n            prefix.push(c);\n\
    \        } else {\n            if prefix.len() == i {\n                prefix.push(c);\n\
    \            } else {\n                prefix.push(c.to_string());\n         \
    \   }\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5joxx4nv.rs:7:9\n  |\n7 |\
    \     for &(i, c) in iter {\n  |         ^^^^^^^    ---- this expression has type\
    \ `Option<(usize, char)>`\n  |         |\n  |         expected tuple, found reference\n\
    \  |\n  = note:  expected tuple `(usize, char)`\n          found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|&(_, c)| c.is_ascii()).map(|(_,\
    \ c)| {\n        String::from(c)\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpxy5slmh7.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    while let Some((index, char)) = iter.next() {\n        if index == 0 {\n\
    \            prefix.push(char.to_string());\n        } else {\n            prefix.push(char.to_string().rjust(index,\
    \ \"0\"));\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rjust` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp2y_vjwuh.rs:11:42\n   |\n11 |             prefix.push(char.to_string().rjust(index,\
    \ \"0\"));\n   |                                          ^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_alphabetic()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpyuqp0b14.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = string.len();\n\
    \    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp9wgf4xu_.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut current = iter.next();\n    while let Some(index) = current {\n \
    \       prefix.push(string.chars().nth(index).unwrap());\n        current = iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz0akrp5c.rs:9:40\n  |\n9 |\
    \         prefix.push(string.chars().nth(index).unwrap());\n  |              \
    \                          ^^^^^ expected `usize`, found tuple\n  |\n  = note:\
    \ expected type `usize`\n            found tuple `(usize, char)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz0akrp5c.rs:12:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n12 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwh3l1aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if prefix.len() == 0 {\n            prefix.push(c);\n        } else\
    \ {\n            if c == prefix[prefix.len() - 1] {\n                prefix.push(c);\n\
    \            } else {\n                prefix.push(c);\n                prefix.push(prefix[prefix.len()\
    \ - 1]);\n            }\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf8mczob9.rs:18:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n18 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if prefix.len() == 0 {\n\
    \            prefix.push(c);\n        } else {\n            if c == prefix.len()\
    \ - 1 {\n                prefix_vec.push(prefix.clone());\n            } else\
    \ {\n                prefix.push(c);\n            }\n        }\n    }\n    prefix_vec\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl0wv7d61.rs:11:21\n   |\n\
    11 |             if c == prefix.len() - 1 {\n   |                     ^^^^^^^^^^^^^^^^\
    \ expected `char`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcz74a7h.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpovi2k18z.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .map(|c| String::from(c))\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`',\
    \ /tmp/tmp03d1v43n.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4u515ocq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter(|c| !c.is_alphanumeric())\n\
    \        .map(|c| c.to_string())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`',\
    \ /tmp/tmpmn41s11e.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut current_prefix\
    \ = String::from(\"\");\n    string.chars().for_each(|c| {\n        if current_prefix.len()\
    \ < c.len() {\n            current_prefix.push_str(&c[..current_prefix.len()]);\n\
    \        }\n        if current_prefix.len() == c.len() {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::from(\"\");\n        }\n    });\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `char` in the current\
    \ scope\n --> /tmp/tmpcve8xvce.rs:8:37\n  |\n8 |         if current_prefix.len()\
    \ < c.len() {\n  |                                     ^^^ method not found in\
    \ `char`\n\nerror[E0608]: cannot index into a value of type `char`\n --> /tmp/tmpcve8xvce.rs:9:38\n\
    \  |\n9 |             current_prefix.push_str(&c[..current_prefix.len()]);\n \
    \ |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]:\
    \ no method named `len` found for type `char` in the current scope\n  --> /tmp/tmpcve8xvce.rs:11:38\n\
    \   |\n11 |         if current_prefix.len() == c.len() {\n   |               \
    \                       ^^^ method not found in `char`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx_d74mj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.to_string();\n    }\n    prefix\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsf_sr0os.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplom9f9hr.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx_d74mj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars();\n\
    \    let mut current = iter.next();\n    while let Some(current) = current {\n\
    \        prefix.push(current);\n        current = iter.next();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvfk9nsbt.rs:10:19\n   |\n\
    8  |     while let Some(current) = current {\n   |                    -------\
    \ expected due to the type of this binding\n9  |         prefix.push(current);\n\
    10 |         current = iter.next();\n   |                   ^^^^^^^^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvfk9nsbt.rs:12:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `char`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<char>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if c.is_prefix(&prefix)\
    \ {\n            prefix_vec.push(prefix);\n        }\n        prefix = prefix.push_str(&c.to_string());\n\
    \    }\n    prefix_vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `char` in the\
    \ current scope\n --> /tmp/tmp1wfrn82e.rs:8:14\n  |\n8 |         if c.is_prefix(&prefix)\
    \ {\n  |              ^^^^^^^^^ method not found in `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1wfrn82e.rs:11:18\n   |\n5  |     let mut prefix = String::from(\"\
    \");\n   |                      ---------------- expected due to this value\n\
    ...\n11 |         prefix = prefix.push_str(&c.to_string());\n   |            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n\
    \   |\nnote: method `push_str` modifies its receiver in-place\n  --> /tmp/tmp1wfrn82e.rs:11:25\n\
    \   |\n11 |         prefix = prefix.push_str(&c.to_string());\n   |          \
    \        ------ ^^^^^^^^ this call modifies `prefix` in-place\n   |          \
    \        |\n   |                  you probably want to use this value after calling\
    \ the method...\n   = note: ...instead of the `()` output of method `push_str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if !prefix.contains(&c) {\n            prefix.push(c);\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2hokkh9e.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut current = iter.next();\n    while let Some(index) = current {\n \
    \       prefix.push(string.chars().nth(index).unwrap());\n        current = iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz0akrp5c.rs:9:40\n  |\n9 |\
    \         prefix.push(string.chars().nth(index).unwrap());\n  |              \
    \                          ^^^^^ expected `usize`, found tuple\n  |\n  = note:\
    \ expected type `usize`\n            found tuple `(usize, char)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz0akrp5c.rs:12:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n12 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx_d74mj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut current = iter.next();\n    while let Some(next) = iter.next() {\n\
    \        if next.0.is_prefix(&current.0) {\n            prefix.push(current.0);\n\
    \            current = next;\n        } else {\n            prefix.push(current.0);\n\
    \            current = next;\n        }\n    }\n    prefix.push(current.0);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `usize` in the\
    \ current scope\n --> /tmp/tmpl29muqlo.rs:9:19\n  |\n9 |         if next.0.is_prefix(&current.0)\
    \ {\n  |                   ^^^^^^^^^ method not found in `usize`\n\nerror[E0609]:\
    \ no field `0` on type `Option<(usize, char)>`\n --> /tmp/tmpl29muqlo.rs:9:38\n\
    \  |\n9 |         if next.0.is_prefix(&current.0) {\n  |                     \
    \                 ^\n\nerror[E0609]: no field `0` on type `Option<(usize, char)>`\n\
    \  --> /tmp/tmpl29muqlo.rs:10:33\n   |\n10 |             prefix.push(current.0);\n\
    \   |                                 ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpl29muqlo.rs:11:23\n   |\n7  |     let mut current = iter.next();\n \
    \  |                       ----------- expected due to this value\n...\n11 | \
    \            current = next;\n   |                       ^^^^ expected enum `Option`,\
    \ found tuple\n   |\n   = note: expected enum `Option<(usize, char)>`\n      \
    \       found tuple `(usize, char)`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n11 |             current = Some(next);\n   |                       +++++\
    \    +\n\nerror[E0609]: no field `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpl29muqlo.rs:13:33\n\
    \   |\n13 |             prefix.push(current.0);\n   |                        \
    \         ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl29muqlo.rs:14:23\n\
    \   |\n7  |     let mut current = iter.next();\n   |                       -----------\
    \ expected due to this value\n...\n14 |             current = next;\n   |    \
    \                   ^^^^ expected enum `Option`, found tuple\n   |\n   = note:\
    \ expected enum `Option<(usize, char)>`\n             found tuple `(usize, char)`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             current =\
    \ Some(next);\n   |                       +++++    +\n\nerror[E0609]: no field\
    \ `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpl29muqlo.rs:17:25\n   |\n\
    17 |     prefix.push(current.0);\n   |                         ^\n\nerror: aborting\
    \ due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0609.\nFor more informati"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut current = string.clone();\n\
    \    while !current.is_empty() {\n        prefix.push(current);\n        current\
    \ = &current[..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvcmrcpzn.rs:9:19\n  |\n6 |\
    \     let mut current = string.clone();\n  |                       --------------\
    \ expected due to this value\n...\n9 |         current = &current[..];\n  |  \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\nhelp:\
    \ try using a conversion method\n  |\n9 |         current = (&current[..]).to_string();\n\
    \  |                   +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut current = string;\n\
    \    while !current.is_empty() {\n        prefix.push(current);\n        current\
    \ = &current[1..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3s49t1a8.rs:9:19\n  |\n6 |\
    \     let mut current = string;\n  |                       ------ expected due\
    \ to this value\n...\n9 |         current = &current[1..];\n  |              \
    \     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\nhelp: try using\
    \ a conversion method\n  |\n9 |         current = (&current[1..]).to_string();\n\
    \  |                   +             +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpg2mcbpzr.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if !prefix.contains(&c) {\n            prefix.push(c);\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2hokkh9e.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = &s[1..];\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1wgbws4.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[1..];\n  |             ^^^^^^^ expected struct `String`,\
    \ found `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         s =\
    \ (&s[1..]).to_string();\n  |             +       +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars();\n\
    \    let mut next = iter.next();\n    while let Some(next) = next {\n        prefix.push(next.to_string());\n\
    \        next = iter.next();\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6b0coj_4.rs:10:16\n   |\n\
    8  |     while let Some(next) = next {\n   |                    ---- expected\
    \ due to the type of this binding\n9  |         prefix.push(next.to_string());\n\
    10 |         next = iter.next();\n   |                ^^^^^^^^^^^ expected `char`,\
    \ found enum `Option`\n   |\n   = note: expected type `char`\n              found\
    \ enum `Option<char>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    for _ in 0..string.len() {\n        prefix.push(iter.next().unwrap().to_string());\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `(usize, char)` doesn't implement `std::fmt::Display`\n -->\
    \ /tmp/tmparxz9yeq.rs:8:42\n  |\n8 |         prefix.push(iter.next().unwrap().to_string());\n\
    \  |                                          ^^^^^^^^^ `(usize, char)` cannot\
    \ be formatted with the default formatter\n  |\n  = note: the following trait\
    \ bounds were not satisfied:\n          `(usize, char): std::fmt::Display`\n \
    \         which is required by `(usize, char): ToString`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefix\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2i_w6er9.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwh3l1aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    loop {\n        prefix.push(string.chars().next().unwrap());\n        if\
    \ string.len() == 0 {\n            break;\n        }\n        string = string.chars().next().unwrap().to_string();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnk5n74gz.rs:14:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n14 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_alphanumeric()).map(|(i,\
    \ c)| {\n        String::from(&string[..i])\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpdqv0ps83.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    for _ in 0..string.len() {\n        prefix.push(iter.next().unwrap());\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy4_pd_ps.rs:10:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n10 |     prefix\n   |     ^^^^^^ expected struct `String`, found tuple\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<(usize,\
    \ char)>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefix\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbasn57bv.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .map(|c| String::from(c))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp3frn9qe_.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars();\n\
    \    loop {\n        prefix.push(iter.next().unwrap());\n        if iter.peek().is_none()\
    \ {\n            break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `peek` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmp9vak6jqx.rs:9:17\n  |\n9 |         if iter.peek().is_none()\
    \ {\n  |                 ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9vak6jqx.rs:13:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    let mut current_len = string.len();\n    while current_len\
    \ > 0 {\n        prefix.push_str(&string[..current_len]);\n        prefix_vec.push(prefix);\n\
    \        current_len -= 1;\n    }\n    prefix_vec\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpehsotdkq.rs:9:9\n\
    \   |\n5  |     let mut prefix = String::from(\"\");\n   |         ----------\
    \ move occurs because `prefix` has type `String`, which does not implement the\
    \ `Copy` trait\n...\n9  |         prefix.push_str(&string[..current_len]);\n \
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after\
    \ move\n10 |         prefix_vec.push(prefix);\n   |                         ------\
    \ value moved here, in previous iteration of loop\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == string.len() {\n    \
    \        break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcmtcg97u.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii()).map(|(_,\
    \ c)| {\n        String::from(c)\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpwx9iae5k.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwh3l1aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpg2mcbpzr.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcz74a7h.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4u515ocq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcz74a7h.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == string.len() {\n    \
    \        break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcmtcg97u.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if current_prefix.len()\
    \ < c.len() {\n            current_prefix.push_str(&c[..current_prefix.len()]);\n\
    \        } else {\n            prefix.push(current_prefix);\n            current_prefix\
    \ = String::from(\"\");\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `char` in the current\
    \ scope\n --> /tmp/tmpsi1m43nd.rs:8:37\n  |\n8 |         if current_prefix.len()\
    \ < c.len() {\n  |                                     ^^^ method not found in\
    \ `char`\n\nerror[E0608]: cannot index into a value of type `char`\n --> /tmp/tmpsi1m43nd.rs:9:38\n\
    \  |\n9 |             current_prefix.push_str(&c[..current_prefix.len()]);\n \
    \ |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if !prefix.contains(&c) {\n            prefix.push(c);\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2hokkh9e.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcz74a7h.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpg2mcbpzr.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzdavny8v.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwh3l1aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter_map(|c| c.is_alphanumeric())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpey8r__58.rs:7:25\n  |\n7 |\
    \         .filter_map(|c| c.is_alphanumeric())\n  |                         ^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |         .filter_map(|c| Some(c.is_alphanumeric()))\n  |            \
    \             +++++                   +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            if current_prefix.len()\
    \ > prefix.len() {\n                prefix = current_prefix;\n            }\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp15pneiov.rs:12:26\n   |\n\
    5  |     let mut prefix = vec![];\n   |                      ------ expected due\
    \ to this value\n...\n12 |                 prefix = current_prefix;\n   |    \
    \                      ^^^^^^^^^^^^^^ expected struct `Vec`, found struct `String`\n\
    \   |\n   = note: expected struct `Vec<_>`\n              found struct `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_alphabetic()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpyuqp0b14.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4u515ocq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    for _ in 0..string.len() {\n        prefix.push(iter.next().unwrap().to_string());\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `(usize, char)` doesn't implement `std::fmt::Display`\n -->\
    \ /tmp/tmparxz9yeq.rs:8:42\n  |\n8 |         prefix.push(iter.next().unwrap().to_string());\n\
    \  |                                          ^^^^^^^^^ `(usize, char)` cannot\
    \ be formatted with the default formatter\n  |\n  = note: the following trait\
    \ bounds were not satisfied:\n          `(usize, char): std::fmt::Display`\n \
    \         which is required by `(usize, char): ToString`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4u515ocq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx4i38oit.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = 0;\n\
    \    let mut string = string.to_string();\n    while !string.is_empty() {\n  \
    \      let mut index = string.find('_');\n        if index == -1 {\n         \
    \   prefix.push(string.clone());\n            prefix_len += 1;\n            break;\n\
    \        }\n        prefix.push(string.clone());\n        prefix_len += 1;\n \
    \       string = &string[index..];\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0nwmp71z.rs:10:21\n   |\n\
    10 |         if index == -1 {\n   |                     ^^ expected enum `Option`,\
    \ found integer\n   |\n   = note: expected enum `Option<usize>`\n            \
    \  found type `{integer}`\nhelp: try wrapping the expression in `Some`\n   |\n\
    10 |         if index == Some(-1) {\n   |                     +++++  +\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeFrom<Option<usize>>`\n  --> /tmp/tmp0nwmp71z.rs:17:19\n\
    \   |\n17 |         string = &string[index..];\n   |                   ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<Option<usize>>`\n   |\n   = help: the\
    \ trait `Index<RangeFrom<Option<usize>>>` is not implemented for `String`\n  \
    \ = help: the following other types implement trait `Index<Idx>`:\n          \
    \   <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0nwmp71z.rs:17:18\n\
    \   |\n7  |     let mut string = string.to_string();\n   |                   \
    \   ------------------ expected due to this value\n...\n17 |         string =\
    \ &string[index..];\n   |                  ^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found reference\n   |\n   = note: expected struct `String`\n           found\
    \ reference `&_`\nhelp: consider removing the borrow\n   |\n17 -         string\
    \ = &string[index..];\n17 +         string = string[index..];\n   | \n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = string.len();\n\
    \    let mut i = 1;\n    while i < prefix_len {\n        prefix.push(string.as_bytes()[0..i].to_vec());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqy0mfb39.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<u8>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        prefix.push_str(&c.to_string());\n\
    \        prefix_vec.push(prefix);\n        prefix = String::from(\"\");\n    }\n\
    \    prefix_vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp8r07q1gf.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = match iter.next() {\n            Some((index,\
    \ char)) => (index, char),\n            None => break,\n        };\n        prefix.push(char.to_string());\n\
    \        if index == 0 {\n            break;\n        }\n        iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmp9d0k2gnf.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n        if\
    \ i == 0 {\n            vec![String::from(c)]\n        } else {\n            vec![String::from(c),\
    \ String::from(&string[i - 1])].into_iter()\n        }\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpo_gfkz0l.rs:9:49\n\
    \  |\n9 |             vec![String::from(c), String::from(&string[i - 1])].into_iter()\n\
    \  |                                                 ^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpo_gfkz0l.rs:9:13\n\
    \   |\n6  | /         if i == 0 {\n7  | |             vec![String::from(c)]\n\
    \   | |             --------------------- expected because of this\n8  | |   \
    \      } else {\n9  | |             vec![String::from(c), String::from(&string[i\
    \ - 1])].into_iter()\n   | |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `std::vec::IntoIter`\n10 | |         }\n\
    \   | |_________- `if` and `else` have incompatible types\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `std::vec::IntoIter<String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n        String::from((&string[..i]).to_string())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0m2lhk67.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx_d74mj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == string.len() {\n    \
    \        break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcmtcg97u.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        let (index, c) = iter.next();\n\
    \        if index == i {\n            prefix.push(c);\n        } else {\n    \
    \        break;\n        }\n        i += 1;\n    }\n    prefix\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnduw4509.rs:9:13\n  |\n9 |\
    \         let (index, c) = iter.next();\n  |             ^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_alphanumeric()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpjcv9ujbr.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwh3l1aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwh3l1aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = iter.next().unwrap();\n        if index\
    \ == 0 {\n            prefix.push(char.to_string());\n        } else {\n     \
    \       prefix.push(char.to_string());\n            prefix.push(prefix[prefix.len()\
    \ - 1]);\n        }\n        if index == string.len() - 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmp27muux66.rs:13:25\n\
    \   |\n13 |             prefix.push(prefix[prefix.len() - 1]);\n   |         \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^ move occurs because value has type `String`,\
    \ which does not implement the `Copy` trait\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0507`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = &s[1..];\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1wgbws4.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[1..];\n  |             ^^^^^^^ expected struct `String`,\
    \ found `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         s =\
    \ (&s[1..]).to_string();\n  |             +       +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|&(_, c)| c.is_ascii_letter()).map(|(i,\
    \ c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for type `char` in\
    \ the current scope\n --> /tmp/tmp681uv8t6.rs:5:51\n  |\n5 |     string.chars().enumerate().filter(|&(_,\
    \ c)| c.is_ascii_letter()).map(|(i, c)| {\n  |                               \
    \                    ^^^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `is_ascii`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpoxtd39oq.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut iter = string.chars().enumerate();\n\
    \    let mut current = String::new();\n    loop {\n        match iter.next() {\n\
    \            Some((index, c)) => {\n                current.push(c);\n       \
    \         if index == 0 {\n                    prefix.push(current);\n       \
    \         }\n            }\n            None => break,\n        }\n    }\n   \
    \ prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `current`\n  --> /tmp/tmp5ojh125s.rs:11:17\n\
    \   |\n7  |     let mut current = String::new();\n   |         ----------- move\
    \ occurs because `current` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n11 |                 current.push(c);\n   |                 ^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n12 |                 if index == 0 {\n13 | \
    \                    prefix.push(current);\n   |                             \
    \    ------- value moved here, in previous iteration of loop\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == string.len() {\n    \
    \        break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcmtcg97u.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if current_prefix.len()\
    \ < c.len() {\n            current_prefix = c.to_string();\n        }\n      \
    \  if current_prefix.len() == c.len() {\n            prefix.push(current_prefix);\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `char` in the current\
    \ scope\n --> /tmp/tmpm3hunj6j.rs:8:37\n  |\n8 |         if current_prefix.len()\
    \ < c.len() {\n  |                                     ^^^ method not found in\
    \ `char`\n\nerror[E0599]: no method named `len` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpm3hunj6j.rs:11:38\n   |\n11 |         if current_prefix.len()\
    \ == c.len() {\n   |                                      ^^^ method not found\
    \ in `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix.push(string.substr(i,\
    \ 1));\n        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `substr` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp_w08jzjd.rs:9:28\n  |\n9 |         prefix.push(string.substr(i,\
    \ 1));\n  |                            ^^^^^^ method not found in `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_lowercase()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp84nqom8j.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix.push(string.chars().nth(i).unwrap());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp190e7mv2.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars();\n\
    \    let mut current = iter.next();\n    while let Some(current) = current {\n\
    \        prefix.push(current);\n        current = iter.next();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvfk9nsbt.rs:10:19\n   |\n\
    8  |     while let Some(current) = current {\n   |                    -------\
    \ expected due to the type of this binding\n9  |         prefix.push(current);\n\
    10 |         current = iter.next();\n   |                   ^^^^^^^^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvfk9nsbt.rs:12:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `char`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<char>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter_map(|c| c.is_alphanumeric())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpey8r__58.rs:7:25\n  |\n7 |\
    \         .filter_map(|c| c.is_alphanumeric())\n  |                         ^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |         .filter_map(|c| Some(c.is_alphanumeric()))\n  |            \
    \             +++++                   +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzr5zq4ai.rs:4:36\n  |\n4 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------      \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n  |\n\
    \  = note: expected struct `Vec<String>`\n          found unit type `()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx_d74mj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx_d74mj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .enumerate()\n     \
    \   .filter_map(|(i, c)| {\n            if c.is_prefix(string.chars()) {\n   \
    \             Some(String::from(string.chars()[..i]))\n            } else {\n\
    \                None\n            }\n        })\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `char` in the\
    \ current scope\n --> /tmp/tmp9hrlep5q.rs:9:18\n  |\n9 |             if c.is_prefix(string.chars())\
    \ {\n  |                  ^^^^^^^^^ method not found in `char`\n\nerror[E0608]:\
    \ cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmp9hrlep5q.rs:10:35\n\
    \   |\n10 |                 Some(String::from(string.chars()[..i]))\n   |    \
    \                               ^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        let mut j = i;\n  \
    \      while j < string.len() && string[j] == string[j + 1] {\n            j +=\
    \ 1; // skip duplicates\n        }\n        prefix.push(&string[i..j]);\n    \
    \    i = j;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpho6268y8.rs:10:35\n\
    \   |\n10 |         while j < string.len() && string[j] == string[j + 1] {\n \
    \  |                                   ^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpho6268y8.rs:10:48\n   |\n10 |         while j < string.len() &&\
    \ string[j] == string[j + 1] {\n   |                                         \
    \       ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpho6268y8.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011969
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4q091ivc.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7q740s_q.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011968
