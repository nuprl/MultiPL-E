language: rs
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q: Vec<isize> = q.to_vec();\n    let mut w: isize = w.to_owned();\n\
    \    let mut sum: isize = 0;\n    let mut max_weight: isize = 0;\n    let mut\
    \ is_balanced = true;\n    let mut is_palindromic = true;\n    let mut is_palindromic_sum\
    \ = true;\n    let mut is_palindromic_max_weight = true;\n    let mut is_palindromic_min_weight\
    \ = true;\n    let mut is_palindromic_min_weight_sum = true;\n    let mut is_palindromic_min_weight_max_weight\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight = true;\n    let mut\
    \ is_palindromic_min_weight_min_weight_sum = true;\n    let mut is_palindromic_min_weight_min_weight_max_weight\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight = true;\n\
    \    let mut is_palindromic_min_weight_min_weight_min_weight_sum = true;\n   \
    \ let mut is_palindromic_min_weight_min_weight_min_weight_max_weight = true;\n\
    \    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight = true;\n\
    \    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_sum =\
    \ true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_max_weight\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_sum\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_max_weight\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_min_weight\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_min_weight_sum\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_min_weight_max_weight\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_min_weight\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_min_weight_sum\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_min_weight_max_weight\
    \ = true;\n    let mut is_palindromic_min_weight_min_weight_min_weight_min_weight_min_weight\
    \ = true;\n    let mut is_p\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk4og41z4.rs:47:17\n   |\n\
    47 |     let mut is_p\n   |                 ^ help: add `;` here\n48 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk4og41z4.rs:16:44\n\
    \   |\n16 | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n   |    -----------\
    \                             ^^^^ expected `bool`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum >= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp0ogngal5.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ >= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0ogngal5.rs:18:9\n   |\n18 |     for &x in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    sum == max_weight && is_balanced(q)\n}\n\nfn main() {\n\
    \    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmp6dol84ww.rs:23:26\n\
    \   |\n23 |     sum == max_weight && is_balanced(q)\n   |                    \
    \      ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    max_weight <= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp120fsspr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for x in q.iter() {\n        sum += x;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if sum == max_weight {\n\
    \            is_balanced = false;\n        }\n    }\n    sum == max_weight &&\
    \ is_balanced\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpidtrzshx.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum == w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpcclyuofa.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ == w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcclyuofa.rs:18:9\n   |\n18 |     for &x in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &i in q {\n        sum += i;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum >= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp25kydj4v.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ >= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp25kydj4v.rs:18:9\n   |\n18 |     for &i in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &i in q {\n        sum += i;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum >= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp25kydj4v.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ >= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp25kydj4v.rs:18:9\n   |\n18 |     for &i in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    let mut max_weight\
    \ = 0;\n    for &x in q {\n        sum += x;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n    }\n    for &x in q {\n        if\
    \ x == 0 {\n            continue;\n        }\n        if sum == max_weight {\n\
    \            balanced = true;\n            break;\n        }\n        sum += x;\n\
    \    }\n    balanced\n}\n\nfn main() {\n    let candidate = will_it_fly;\n   \
    \ assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi4c1y7by.rs:20:9\n   |\n\
    20 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi4c1y7by.rs:26:9\n   |\n26 |     for &x in q {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `x`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q,\
    \ w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpyivtph_r.rs:25:26\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                          ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpyivtph_r.rs:25:47\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q,\
    \ w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpghdt9yv4.rs:25:26\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                          ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpghdt9yv4.rs:25:47\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghdt9yv4.rs:19:9\n\
    \   |\n19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            max_weight + i\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmparvew2vw.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    max_weight <= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp120fsspr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum <= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp5xkz57l6.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ <= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5xkz57l6.rs:18:9\n   |\n18 |     for &x in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for el in q.iter()\
    \ {\n        sum += el;\n        max_weight = if sum > max_weight { max_weight\
    \ } else { max_weight + el };\n    }\n    if sum == w && max_weight <= w {\n \
    \       return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzdq326f4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum >= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp5ie_xtg9.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ >= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    max_weight <= w && is_balanced(q) && is_palindromic(q)\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmps5qc7xa6.rs:23:24\n\
    \   |\n23 |     max_weight <= w && is_balanced(q) && is_palindromic(q)\n   | \
    \                       ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `is_palindromic` in this scope\n  --> /tmp/tmps5qc7xa6.rs:23:42\n\
    \   |\n23 |     max_weight <= w && is_balanced(q) && is_palindromic(q)\n   | \
    \                                         ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut is_balanced = true;\n    for &i in q {\n\
    \        sum += i;\n        is_balanced = is_balanced && sum >= w;\n    }\n  \
    \  is_balanced\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaghsjdsv.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight <= w {\n        return false;\n    }\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    let mut k = q.len() - 1;\n    while\
    \ i <= k {\n        if q[i] != q[j] {\n            return false;\n        }\n\
    \        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn64lwhow.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q.to_vec();\n    let mut max_weight = 0;\n    let mut sum\
    \ = 0;\n    while q.len() > 0 {\n        sum += q.last().unwrap();\n        q.pop();\n\
    \    }\n    if sum < w {\n        return false;\n    }\n    if sum > w {\n   \
    \     return true;\n    }\n    max_weight = sum;\n    q.reverse();\n    while\
    \ q.len() > 0 {\n        if q.last().unwrap() < w {\n            break;\n    \
    \    }\n        q.pop();\n    }\n    if q.len() == 0 {\n        return true;\n\
    \    }\n    if q.last().unwrap() > w {\n        return false;\n    }\n    max_weight\
    \ += q.last().unwrap();\n    q.reverse();\n    while q.len() > 0 {\n        if\
    \ q.last().unwrap() > w {\n            break;\n        }\n        q.pop();\n \
    \   }\n    if q.len() == 0 {\n        return true;\n    }\n    if q.last().unwrap()\
    \ < w {\n        return false;\n    }\n    max_weight += q.last().unwrap();\n\
    \    q.reverse();\n    while q.len() > 0 {\n        if q.last().unwrap() < w {\n\
    \            break;\n        }\n        q.pop();\n    }\n    if q.len() == 0 {\n\
    \        return true;\n    }\n    if q.last().unwrap() > w {\n        return false;\n\
    \    }\n    max_weight += q.last().unwrap();\n    q.reverse();\n    while q.len()\
    \ > 0 {\n        if q.last().unwrap() > w {\n            break;\n        }\n \
    \       q.pop();\n    }\n    if q.len() == 0 {\n        return true;\n    }\n\
    \    if q.last().unwrap() < w {\n        return false;\n    }\n    max_weight\
    \ += q.last().unwrap();\n    q.reverse();\n    while q.len() > 0 {\n        if\
    \ q.last().unwrap() < w {\n            break;\n        }\n        q.pop();\n \
    \   }\n    if q.len() == 0 {\n        return true;\n    }\n    if q.last().unwrap()\
    \ > w {\n        return false;\n    }\n    max_weight += q.last().unwrap();\n\
    \    q.reverse();\n    while q.len() > 0 {\n        if q.last().unwrap() > w {\n\
    \            break;\n        }\n        q.pop();\n    }\n    if q.len() == 0 {\n\
    \        return true;\n    }\n    if q.last().unwrap() < w {\n        return false;\n\
    \    }\n    max_weight += q.last().unwrap();\n    q.reverse();\n    while q.len()\
    \ > 0 {\n        if q.last().unwrap() < w {\n            break;\n        }\n \
    \       q.pop();\n    }\n    if q.len() == 0 {\n        return true;\n    }\n\
    \    if q.last().unwrap() > w {\n        return false;\n    }\n    max_weight\
    \ += q.last().unwrap();\n    q.reverse();\n    while q.len() > 0 {\n        if\
    \ q.last().unwrap() > w {\n            break;\n        }\n        q.pop();\n \
    \   }\n    if q.len() == 0 {\n        return true;\n    }\n    if q.\n}\n\nfn\
    \ main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n   --> /tmp/tmp06ot9143.rs:140:1\n    |\n\
    140 | }\n    | ^\n\nerror: expected `{`, found `}`\n   --> /tmp/tmp06ot9143.rs:140:1\n\
    \    |\n139 |     if q.\n    |     -- this `if` expression has a condition, but\
    \ no block\n140 | }\n    | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp06ot9143.rs:33:32\n   |\n33 |         if q.last().unwrap() < w\
    \ {\n   |                                ^\n   |                             \
    \   |\n   |                                expected `&isize`, found `isize`\n\
    \   |                                help: consider borrowing here: `&w`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp06ot9143.rs:41:28\n   |\n41 |     if q.last().unwrap()\
    \ > w {\n   |                            ^\n   |                            |\n\
    \   |                            expected `&isize`, found `isize`\n   |      \
    \                      help: consider borrowing here: `&w`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp06ot9143.rs:47:32\n   |\n47 |         if q.last().unwrap()\
    \ > w {\n   |                                ^\n   |                         \
    \       |\n   |                                expected `&isize`, found `isize`\n\
    \   |                                help: consider borrowing here: `&w`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp06ot9143.rs:55:28\n   |\n55 |     if q.last().unwrap()\
    \ < w {\n   |                            ^\n   |                            |\n\
    \   |                            expected `&isize`, found `isize`\n   |      \
    \                      help: consider borrowing here: `&w`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp06ot9143.rs:61:32\n   |\n61 |         if q.last().unwrap()\
    \ < w {\n   |                                ^\n   |                         \
    \       |\n   |                                expected `&isize`, found `isize`\n\
    \   |                                help: consider borrowing here: `&w`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp06ot9143.rs:69:28\n   |\n69 |     if q.last().unwrap()\
    \ > w {\n   |                            ^\n   |                            |\n\
    \   |                 "
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &x in q {\n  \
    \      sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { max_weight + x };\n    }\n    sum == w && max_weight <= w\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkpv7nviz.rs:19:9\n   |\n\
    19 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q)\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmphj9agl8k.rs:23:26\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmphj9agl8k.rs:23:47\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            max_weight + i\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmparvew2vw.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for e in q {\n   \
    \     sum += e;\n        max_weight = if sum > w {\n            max_weight\n \
    \       } else {\n            max_weight + e\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplvf29mln.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q,\
    \ w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpghdt9yv4.rs:25:26\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                          ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpghdt9yv4.rs:25:47\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghdt9yv4.rs:19:9\n\
    \   |\n19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if sum < w {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    while i < q.len() {\n        if q[i] != i {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn9njpxbi.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn9njpxbi.rs:30:20\n   |\n30 |         if q[i] != i {\n   |    \
    \                ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    30 |         if q[i] != i.try_into().unwrap() {\n   |                     ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > w {\n            sum\n       \
    \ } else {\n            max_weight\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx62jhoad.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    for &i in q {\n\
    \        sum += i;\n        if sum > w {\n            balanced = false;\n    \
    \        break;\n        }\n    }\n    balanced && sum <= w\n}\n\nfn main() {\n\
    \    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjn36v_50.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { max_weight + i };\n    }\n    max_weight <= w\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpypafjd8n.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = w;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdh_ll100.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = 0;\n    let mut balanced = false;\n    let mut sum\
    \ = 0;\n    for v in q.iter() {\n        sum += v;\n        if sum > w {\n   \
    \         balanced = true;\n            break;\n        }\n        max_weight\
    \ = std::cmp::max(max_weight, v);\n    }\n    !balanced && sum <= w\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppsi8udd3.rs:26:48\n   |\n\
    26 |         max_weight = std::cmp::max(max_weight, v);\n   |                \
    \                                ^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n26 |         max_weight = std::cmp::max(max_weight,\
    \ *v);\n   |                                                +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > w {\n            max_weight\n \
    \       } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph2jmuvor.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = 0;\n    let mut balanced = false;\n    for el in\
    \ q.iter() {\n        if el > max_weight {\n            max_weight = el;\n   \
    \     }\n        if el == max_weight {\n            balanced = true;\n       \
    \ }\n    }\n    if balanced {\n        let mut sum = 0;\n        for el in q.iter()\
    \ {\n            sum += el;\n        }\n        return sum <= w;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp5glzufz.rs:20:17\n   |\n\
    20 |         if el > max_weight {\n   |                 ^^^^^^^^^^\n   |     \
    \            |\n   |                 expected `&isize`, found integer\n   |  \
    \               help: consider borrowing here: `&max_weight`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp5glzufz.rs:21:26\n   |\n17 |     let mut max_weight\
    \ = 0;\n   |                          - expected due to this value\n...\n21 |\
    \             max_weight = el;\n   |                          ^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |  \
    \           max_weight = *el;\n   |                          +\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmpp5glzufz.rs:23:15\n \
    \  |\n23 |         if el == max_weight {\n   |               ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max && q.iter().all(|&i| i <= w)\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp66qnsdu2.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for el in q {\n  \
    \      sum += el;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if sum < w {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < q.len() && j < q.len() {\n       \
    \ if q[i] > q[j] {\n            i += 1;\n        } else {\n            j += 1;\n\
    \        }\n    }\n    if i == q.len() {\n        return true;\n    }\n    if\
    \ j == q.len() {\n        return false;\n    }\n    if q[i] != q[j] {\n      \
    \  return false;\n    }\n    if max_weight < w {\n        return false;\n    }\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < q.len() && j < q.len()\
    \ {\n        if q[i] < q[j] {\n            i += 1;\n        } else {\n       \
    \     j += 1;\n        }\n    }\n    if i == q.len() {\n        return true;\n\
    \    }\n    if j == q.len() {\n        return false;\n    }\n    if q[i] != q[j]\
    \ {\n        return false;\n    }\n    if max_weight < w {\n        return false;\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    while i < q.len() && j < q.len()\
    \ {\n        if q[i] > q[j] {\n            i += 1;\n        } else {\n       \
    \     j += 1;\n        }\n    }\n    if i == q.len() {\n        return true;\n\
    \    }\n    if j == q.len() {\n        return false;\n    }\n    if q[i] != q[j]\
    \ {\n        return false;\n    }\n    if max_weight < w {\n        return false;\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    while i < q.len() && j < q.len()\
    \ {\n        if q[i] < q[j] {\n            i += 1;\n        } else {\n       \
    \     j += 1;\n        }\n    }\n    if i == q.len() {\n        return true;\n\
    \    }\n    if j == q.len() {\n        return false;\n    }\n    if q[i] != q[j]\
    \ {\n        return false;\n    }\n    if max_weight < w {\n        return false;\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    while i < q.len() && j < q.len()\
    \ {\n        if q[i] > q[j] {\n            i += 1;\n        } else {\n       \
    \     j += 1;\n        }\n    }\n    if i == q.len() {\n        return true;\n\
    \    }\n    if j == q.len() {\n        return false;\n    }\n    if q[i] != q[j]\
    \ {\n        return false;\n    }\n    if max_weight < w {\n        return false;\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    while i < q.len() && j < q.len()\
    \ {\n        if q[i] < q[j\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp2n_2k_7u.rs:147:3\n\
    \    |\n16  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \                                          - unclosed delimiter\n...\n135 |  \
    \   while i < q.len() && j < q.len() {\n    |                                \
    \      - this delimiter might not be properly closed...\n136 |         if q[i]\
    \ < q[j\n137 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n147 | }\n    |   ^\n\nerror: expected `{`, found `}`\n   --> /tmp/tmp2n_2k_7u.rs:137:1\n\
    \    |\n136 |         if q[i] < q[j\n    |         -- this `if` expression has\
    \ a condition, but no block\n137 | }\n    | ^ expected `{`\n\nerror: mismatched\
    \ closing delimiter: `}`\n   --> /tmp/tmp2n_2k_7u.rs:136:20\n    |\n16  | fn will_it_fly(q:\
    \ Vec<isize>, w: isize) -> bool {\n    |                                     \
    \            - closing delimiter possibly meant for this\n...\n136 |         if\
    \ q[i] < q[j\n    |                    ^ unclosed delimiter\n137 | }\n    | ^\
    \ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2n_2k_7u.rs:16:44\n\
    \   |\n16 | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n   |    -----------\
    \                             ^^^^ expected `bool`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == w && max_weight\
    \ <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppbmpdhev.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_balanced(q)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmp8xln4xsm.rs:21:16\n\
    \   |\n21 |     sum < w && is_balanced(q)\n   |                ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_rev = q.iter().rev();\n    let mut was_its_balanced = false;\n\
    \    let mut max_possible_weight = w;\n    let mut sum = 0;\n    for x in q_rev\
    \ {\n        if x <= w {\n            sum += x;\n        } else {\n          \
    \  was_its_balanced = true;\n            break;\n        }\n    }\n    if sum\
    \ == w {\n        was_its_balanced\n    } else if sum > w {\n        was_its_balanced\n\
    \    } else {\n        max_possible_weight - sum\n    }\n}\n\nfn main() {\n  \
    \  let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4y8lpjde.rs:22:17\n   |\n\
    22 |         if x <= w {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found `isize`\n   |                 help:\
    \ consider borrowing here: `&w`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4y8lpjde.rs:34:9\n\
    \   |\n16 | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n   |          \
    \                                  ---- expected `bool` because of return type\n\
    ...\n34 |         max_possible_weight - sum\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if max_weight <= w {\n        return true;\n \
    \   }\n    let mut reversed_q = q.iter().rev();\n    let mut sum = 0;\n    let\
    \ mut max_weight = 0;\n    for v in reversed_q.iter() {\n        sum += v;\n \
    \       if sum > max_weight {\n            max_weight = sum;\n        }\n    }\n\
    \    if max_weight <= w {\n        return true;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Rev` in the current\
    \ scope\n  --> /tmp/tmp1lf6tj68.rs:31:25\n   |\n31 |     for v in reversed_q.iter()\
    \ {\n   |                         ^^^^ private field, not a method\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum >= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp0ogngal5.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ >= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0ogngal5.rs:18:9\n   |\n18 |     for &x in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for el in q {\n  \
    \      sum += el;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight <= w {\n        return true;\n    }\n   \
    \ let mut is_balanced = true;\n    let mut q_rev = q;\n    q_rev.reverse();\n\
    \    for el in q_rev {\n        if el != q[q.len() - 1 - el] {\n            is_balanced\
    \ = false;\n            break;\n        }\n    }\n    if is_balanced {\n     \
    \   true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpommelj1j.rs:32:34\n   |\n\
    32 |         if el != q[q.len() - 1 - el] {\n   |                            \
    \      ^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpommelj1j.rs:32:32\n   |\n32 |         if el != q[q.len()\
    \ - 1 - el] {\n   |                                ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for x in q {\n        sum += x;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum == max_weight {\n  \
    \          is_balanced = false;\n        }\n    }\n    sum == max_weight && is_balanced\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr1r45w3g.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut is_balanced = true;\n    for x in q.iter()\
    \ {\n        sum += x;\n        is_balanced = is_balanced && (sum >= w);\n   \
    \ }\n    is_balanced\n}\n\nfn main() {\n    let candidate = will_it_fly;\n   \
    \ assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxrfhbu33.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &x in q {\n  \
    \      sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    if max_weight <= w {\n        return true;\n    }\n   \
    \ let mut i = 0;\n    let mut j = q.len();\n    while i < j {\n        if q[i]\
    \ != q[j] {\n            return false;\n        }\n        i += 1;\n        j\
    \ -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu4maj3yj.rs:19:9\n   |\n\
    19 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_rev = q.iter().rev();\n    let mut sum = 0;\n    let mut max_weight\
    \ = 0;\n    for x in q_rev {\n        if x <= w {\n            sum += x;\n   \
    \         max_weight = max(max_weight, x);\n        }\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpnpzbzs17.rs:23:26\n\
    \   |\n23 |             max_weight = max(max_weight, x);\n   |               \
    \           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::max;\n   |\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnpzbzs17.rs:21:17\n   |\n21 |         if x <= w {\n   |            \
    \     ^\n   |                 |\n   |                 expected `&isize`, found\
    \ `isize`\n   |                 help: consider borrowing here: `&w`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = 0;\n    let mut balanced = false;\n    let mut sum\
    \ = 0;\n    for &i in q {\n        sum += i;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum == w {\n           \
    \ balanced = true;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6s60jrz.rs:20:9\n   |\n\
    20 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = w;\n    let mut balanced = true;\n    let mut sum\
    \ = 0;\n    for &x in q {\n        sum += x;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum < max_weight {\n   \
    \         balanced = false;\n        }\n    }\n    balanced && sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiu4_xtfg.rs:20:9\n   |\n\
    20 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for v in q.iter() {\n   \
    \     sum += v;\n        if sum > max {\n            max = sum;\n        }\n \
    \   }\n    sum == max && q.iter().rev().all(|&x| x <= w)\n}\n\nfn main() {\n \
    \   let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptvzkdt0r.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q {\n   \
    \     sum += v;\n        max_weight = if sum > w {\n            max_weight\n \
    \       } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3x5psma_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max && is_balanced(q, w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmp3g9qixxq.rs:25:19\n\
    \   |\n25 |     sum == max && is_balanced(q, w)\n   |                   ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3g9qixxq.rs:19:9\n\
    \   |\n19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if sum == 0 || sum > w {\n        return false;\n\
    \    }\n    let mut is_balanced = true;\n    let mut max_sum = 0;\n    for v in\
    \ q.iter() {\n        if v > max_sum {\n            max_sum = v;\n        }\n\
    \        if v != max_sum {\n            is_balanced = false;\n            break;\n\
    \        }\n    }\n    if is_balanced {\n        max_sum == w\n    } else {\n\
    \        max_sum == max_weight\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnz1kj211.rs:31:16\n   |\n\
    31 |         if v > max_sum {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&max_sum`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnz1kj211.rs:32:23\n   |\n29 |     let mut max_sum = 0;\n   |  \
    \                     - expected due to this value\n...\n32 |             max_sum\
    \ = v;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n32 |             max_sum = *v;\n\
    \   |                       +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmpnz1kj211.rs:34:14\n   |\n34 |         if v != max_sum {\n   | \
    \             ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if sum == 0 {\n        return true;\n    }\n    if sum\
    \ < w {\n        return false;\n    }\n    let mut i = 0;\n    while i < q.len()\
    \ {\n        if q[i] != q[q.len() - 1 - i] {\n            return false;\n    \
    \    }\n        i += 1;\n    }\n    max_weight == w\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgqx0jn1l.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    if max_weight == w\
    \ {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1v2sb4p6.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for el in q {\n  \
    \      sum += el;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if sum < w {\n        return false;\n    }\n    let mut\
    \ sum = 0;\n    for el in q {\n        sum += el;\n        if sum == w {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n\
    \    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `q`\n   --> /tmp/tmp4ivqg45x.rs:29:15\n\
    \    |\n16  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \         - move occurs because `q` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n19  |     for el in q {\n    |               - `q` moved\
    \ due to this implicit call to `.into_iter()`\n...\n29  |     for el in q {\n\
    \    |               ^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `q`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n19  |     for el in &q {\n    |               +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max && q.iter().rev().all(|&i| i / w == i / w)\n}\n\nfn main() {\n \
    \   let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph6jgcnlm.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for e in q {\n   \
    \     sum += e;\n        max_weight = if sum > max_weight {\n            max_weight\n\
    \        } else {\n            max_weight\n        };\n    }\n    if sum < w {\n\
    \        return false;\n    }\n    let mut is_balanced = true;\n    let mut max_sum\
    \ = 0;\n    for e in q {\n        if e > max_sum {\n            is_balanced =\
    \ false;\n            break;\n        }\n        max_sum += e;\n    }\n    if\
    \ is_balanced {\n        true\n    } else {\n        max_weight <= w\n    }\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `q`\n   --> /tmp/tmp4sg35_pk.rs:32:14\n\
    \    |\n16  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \         - move occurs because `q` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n19  |     for e in q {\n    |              - `q` moved\
    \ due to this implicit call to `.into_iter()`\n...\n32  |     for e in q {\n \
    \   |              ^ value used here after move\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `q`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n19  |     for e in &q {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q.to_owned();\n    let mut sum = 0;\n    while q.len() >\
    \ 0 {\n        sum += q.iter().sum();\n        q.pop();\n    }\n    sum < w &&\
    \ q.is_palindromic()\n}\n\nfn main() {\n    let candidate = will_it_fly;\n   \
    \ assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_palindromic` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp363242od.rs:23:18\n   |\n23 |     sum <\
    \ w && q.is_palindromic()\n   |                  ^^^^^^^^^^^^^^ method not found\
    \ in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    let mut is_balanced = true;\n    let mut max_sum = 0;\n\
    \    for x in q {\n        if x > max_weight {\n            is_balanced = false;\n\
    \            break;\n        }\n        max_sum += x;\n    }\n    if max_sum ==\
    \ w && is_balanced {\n        true\n    } else {\n        false\n    }\n}\n\n\
    fn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `q`\n   --> /tmp/tmpmplw560y.rs:27:14\n\
    \    |\n16  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \         - move occurs because `q` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n19  |     for x in q {\n    |              - `q` moved\
    \ due to this implicit call to `.into_iter()`\n...\n27  |     for x in q {\n \
    \   |              ^ value used here after move\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `q`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n19  |     for x in &q {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if sum < w {\n        return false;\n    }\n \
    \   let mut sum = 0;\n    for v in q.iter() {\n        sum += v;\n        if sum\
    \ == w {\n            return true;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwukgkozx.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            max_weight + i\n        };\n    }\n    sum == w\
    \ && max_weight <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n   \
    \ assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx_jrdtys.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max && q.is_palindromic() && sum <= w\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprgnjkuhm.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0599]: no method named\
    \ `is_palindromic` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmprgnjkuhm.rs:25:21\n\
    \   |\n25 |     sum == max && q.is_palindromic() && sum <= w\n   |           \
    \          ^^^^^^^^^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_rev = q.iter().rev();\n    let mut sum = 0;\n    for x in q_rev\
    \ {\n        sum += x;\n        if sum >= w {\n            return false;\n   \
    \     }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzdfg_r8n.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight {\n            max_weight\n\
    \        } else {\n            max_weight\n        };\n    }\n    if sum < w {\n\
    \        return false;\n    }\n    let mut i = 0;\n    while i < q.len() {\n \
    \       if q[i] != i {\n            return false;\n        }\n        i += 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzbb_2nnj.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpzbb_2nnj.rs:32:20\n   |\n32 |         if q[i] != i {\n   |    \
    \                ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    32 |         if q[i] != i.try_into().unwrap() {\n   |                     ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for el in q {\n  \
    \      sum += el;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    if sum == w {\n   \
    \     true\n    } else if sum > w {\n        false\n    } else {\n        max_weight\
    \ < w\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6s5c2b0j.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    for x in q {\n \
    \       if x < w {\n            sum += x;\n        } else {\n            balanced\
    \ = true;\n            break;\n        }\n    }\n    balanced && sum <= w\n}\n\
    \nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsq_2p5jm.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for &i in q {\n        sum += i;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        is_balanced = is_balanced &&\
    \ i <= max_weight;\n    }\n    is_balanced && sum == max_weight\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw3xbef7y.rs:20:9\n   |\n\
    20 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    for &i in q {\n\
    \        sum += i;\n        if sum > w {\n            balanced = true;\n     \
    \       break;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy9yhpja7.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { max_weight + i };\n    }\n    sum == max_weight && is_balanced(q) && is_palindromic(q)\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmplx9d9n7k.rs:23:26\n\
    \   |\n23 |     sum == max_weight && is_balanced(q) && is_palindromic(q)\n   |\
    \                          ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_palindromic` in this scope\n  --> /tmp/tmplx9d9n7k.rs:23:44\n\
    \   |\n23 |     sum == max_weight && is_balanced(q) && is_palindromic(q)\n   |\
    \                                            ^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplx9d9n7k.rs:19:9\n  \
    \ |\n19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > max_weight {\n         \
    \   max_weight\n        } else {\n            max_weight\n        };\n    }\n\
    \    sum < w && sum == max_weight\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppli1rxbk.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q: Vec<isize> = q.to_vec();\n    let mut sum = 0;\n    let mut\
    \ max_weight = 0;\n    let mut is_balanced = true;\n    let mut is_palindromic\
    \ = true;\n\n    while !q.is_empty() {\n        sum += q.iter().sum();\n     \
    \   if sum > max_weight {\n            max_weight = sum;\n        }\n        if\
    \ sum == w {\n            is_balanced = false;\n        }\n        if sum < w\
    \ {\n            is_palindromic = false;\n        }\n        q.iter().for_each(|&x|\
    \ {\n            q.push(x);\n        });\n    }\n\n    if is_balanced && is_palindromic\
    \ && max_weight <= w {\n        return true;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp1ohfihb9.rs:24:13\n\
    \   |\n24 |         sum += q.iter().sum();\n   |             ^^ cannot infer type\n\
    \   |\nhelp: consider specifying the type argument in the method call\n   |\n\
    24 |         sum += q.iter().sum::<S>();\n   |                            +++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for &i in q {\n        sum += i;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum == w {\n           \
    \ is_balanced = false;\n        }\n    }\n    is_balanced && max_weight <= w\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpssoefxee.rs:20:9\n   |\n\
    20 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &i in q {\n        sum += i;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum == w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpq0sip7a7.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ == w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpq0sip7a7.rs:18:9\n   |\n18 |     for &i in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    sum == max_weight && is_balanced(q)\n}\n\nfn main() {\n\
    \    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmph8e5s6pg.rs:23:26\n\
    \   |\n23 |     sum == max_weight && is_balanced(q)\n   |                    \
    \      ^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmph8e5s6pg.rs:19:9\n   |\n19 |     for &i in q {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max && q.iter().rev().all(|&i| i <= w)\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmpd4kxsgi6.rs:25:19\n\
    \    |\n16  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \         - move occurs because `q` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n19  |     for i in q {\n    |              - `q` moved\
    \ due to this implicit call to `.into_iter()`\n...\n25  |     sum == max && q.iter().rev().all(|&i|\
    \ i <= w)\n    |                   ^^^^^^^^ value borrowed here after move\n \
    \   |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `q`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n19  |     for i in &q {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for el in q {\n  \
    \      sum += el;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { max_weight + el };\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q)\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpfwnk7xqc.rs:23:26\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpfwnk7xqc.rs:23:47\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpedjkg4f8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &x in q {\n  \
    \      sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { max_weight + x };\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q)\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp18ky3wkf.rs:23:26\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmp18ky3wkf.rs:23:47\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp18ky3wkf.rs:19:9\n\
    \   |\n19 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &i in q {\n        sum += i;\n    }\n    if\
    \ sum < w {\n        return false;\n    }\n    let mut i = 0;\n    let mut j =\
    \ q.len() - 1;\n    while i < j {\n        if q[i] != q[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm1jql4nn.rs:18:9\n   |\n\
    18 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > w {\n            sum\n \
    \       } else {\n            max_weight\n        };\n    }\n    sum == w && max_weight\
    \ <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdwkob3nc.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = 0;\n    let mut balanced = false;\n    let mut sum\
    \ = 0;\n    for elt in q.iter() {\n        sum += elt;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if sum == w {\n       \
    \     balanced = true;\n        }\n    }\n    balanced\n}\n\nfn main() {\n   \
    \ let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp77djs1zi.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = true;\n    let mut sum = 0;\n    for &i in q {\n \
    \       sum += i;\n        balanced = balanced && i <= w;\n    }\n    balanced\
    \ && sum <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp95o6w9u2.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = 0;\n    let mut balanced = false;\n    let mut sum\
    \ = 0;\n    for i in q.iter() {\n        sum += i;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if sum == w {\n       \
    \     balanced = true;\n        }\n    }\n    balanced\n}\n\nfn main() {\n   \
    \ let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpm0kdnrbk.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_sum = 0;\n    let mut balanced = false;\n    let mut sum\
    \ = 0;\n    for x in q.iter() {\n        sum += x;\n        if sum > w {\n   \
    \         balanced = true;\n        }\n        if sum > max_sum {\n          \
    \  max_sum = sum;\n        }\n    }\n    balanced && max_sum <= w\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3ikpeyfv.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > max_weight {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == max_weight &&\
    \ is_balanced(q, w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmp0a16lfyi.rs:27:26\n\
    \   |\n27 |     sum == max_weight && is_balanced(q, w)\n   |                 \
    \         ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for e in q {\n   \
    \     sum += e;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight <= w {\n        return false;\n    }\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    while i < q.len() && j < q.len() {\n\
    \        if q[i] > q[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    if i == q.len() {\n        return true;\n   \
    \ }\n    if j == q.len() {\n        return false;\n    }\n    let mut i = 0;\n\
    \    let mut j = 0;\n    while i < q.len() && j < q.len() {\n        if q[i] <\
    \ q[j] {\n            i += 1;\n        } else {\n            j += 1;\n       \
    \ }\n    }\n    if i == q.len() {\n        return false;\n    }\n    if j == q.len()\
    \ {\n        return true;\n    }\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ while i < q.len() && j < q.len() {\n        if q[i] > q[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    if i ==\
    \ q.len() {\n        return true;\n    }\n    if j == q.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    while i < q.len()\
    \ && j < q.len() {\n        if q[i] < q[j] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n    }\n    if i == q.len() {\n        return\
    \ false;\n    }\n    if j == q.len() {\n        return true;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < q.len() && j < q.len() {\n       \
    \ if q[i] > q[j] {\n            i += 1;\n        } else {\n            j += 1;\n\
    \        }\n    }\n    if i == q.len() {\n        return true;\n    }\n    if\
    \ j == q.len() {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < q.len() && j < q.len() {\n        if q[i] < q[j] {\n \
    \           i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    if i == q.len() {\n        return false;\n    }\n    if j == q.len() {\n\
    \        return true;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < q.len() && j < q.len() {\n        if q[i] > q[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    if i == q.len()\
    \ {\n        return true;\n    }\n    if j == q.len() {\n        return false;\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    while i < q.len(\n}\n\nfn\
    \ main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpeimp8h28.rs:136:1\n    |\n\
    135 |       while i < q.len(\n    |  _____-----_-\n    | |     |\n    | |    \
    \ while parsing the body of this `while` expression\n136 | | }\n    | | ^\n  \
    \  | | |\n    | |_expected `{`\n    |   this `while` condition successfully parsed\n\
    \nerror: mismatched closing delimiter: `}`\n   --> /tmp/tmpeimp8h28.rs:135:20\n\
    \    |\n16  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \                                          - closing delimiter possibly meant\
    \ for this\n...\n135 |     while i < q.len(\n    |                    ^ unclosed\
    \ delimiter\n136 | }\n    | ^ mismatched closing delimiter\n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { max_weight + i };\n    }\n    max_weight <= w\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpypafjd8n.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max && q.iter().rev().all(|&i| i < w)\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0yz_7xi_.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpozja54ji.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = w;\n    let mut balanced = true;\n    let mut sum\
    \ = 0;\n    for &i in q {\n        sum += i;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum < max_weight {\n   \
    \         balanced = false;\n            break;\n        }\n    }\n    balanced\
    \ && sum == max_weight\n}\n\nfn main() {\n    let candidate = will_it_fly;\n \
    \   assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0be45he3.rs:20:9\n   |\n\
    20 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight < w {\n        return false;\n    }\n   \
    \ let mut reversed = q.iter().rev();\n    let mut sum = 0;\n    for i in &mut\
    \ reversed {\n        sum += i;\n        if sum > w {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8nn_lfxc.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for e in q {\n   \
    \     sum += e;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    sum == max_weight && is_balanced(q, w)\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmptqzvvcg4.rs:25:26\n\
    \   |\n25 |     sum == max_weight && is_balanced(q, w)\n   |                 \
    \         ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for x in q {\n        sum += x;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum == max_weight {\n  \
    \          is_balanced = false;\n        }\n    }\n    sum == max_weight && is_balanced\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr1r45w3g.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    for x in q {\n \
    \       sum += x;\n        if sum < w {\n            balanced = true;\n      \
    \  }\n    }\n    balanced\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfjyhu9tf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for v in q.iter() {\n        sum += v;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if sum < w {\n        \
    \    is_balanced = false;\n            break;\n        }\n    }\n    !is_balanced\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphh2j6bwc.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for el in q {\n        sum += el;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if sum < w {\n        \
    \    is_balanced = false;\n            break;\n        }\n    }\n    is_balanced\
    \ && max_weight <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n   \
    \ assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpulz22wnb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for v in q.iter() {\n        sum += v;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if sum < w {\n        \
    \    is_balanced = false;\n            break;\n        }\n    }\n    !is_balanced\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphh2j6bwc.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &x in q {\n  \
    \      sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { max_weight + x };\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q)\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp18ky3wkf.rs:23:26\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmp18ky3wkf.rs:23:47\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp18ky3wkf.rs:19:9\n\
    \   |\n19 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if sum < w {\n        return false;\n    }\n \
    \   let mut reversed_q = q.iter().rev();\n    let mut sum = 0;\n    let mut max_weight\
    \ = 0;\n    for v in reversed_q.iter() {\n        sum += v;\n        if sum >\
    \ max_weight {\n            max_weight = sum;\n        }\n    }\n    if sum <\
    \ w {\n        return true;\n    }\n    max_weight == w\n}\n\nfn main() {\n  \
    \  let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Rev` in the current\
    \ scope\n  --> /tmp/tmpcaru6bmd.rs:31:25\n   |\n31 |     for v in reversed_q.iter()\
    \ {\n   |                         ^^^^ private field, not a method\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for &x in q {\n        sum\
    \ += x;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max && sum < w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx9r8q4vp.rs:19:9\n   |\n\
    19 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > w {\n            max_weight\n \
    \       } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph2jmuvor.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut is_balanced = true;\n    for x in q {\n\
    \        sum += x;\n        is_balanced = is_balanced && sum >= w;\n    }\n  \
    \  is_balanced\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpleao3z4i.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for i in q.iter() {\n   \
    \     sum += i;\n        if sum > max {\n            max = sum;\n        }\n \
    \   }\n    sum == max && q.iter().all(|&i| i == q.iter().rev().next().unwrap())\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpknioi68c.rs:25:42\n   |\n\
    25 |     sum == max && q.iter().all(|&i| i == q.iter().rev().next().unwrap())\n\
    \   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n25 |     sum == max && q.iter().all(|&i| i == *q.iter().rev().next().unwrap())\n\
    \   |                                          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { max_weight + i };\n    }\n    sum == max_weight\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxhalsle9.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpozja54ji.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_rev = q.reverse();\n    let mut sum = 0;\n    for i in q_rev\
    \ {\n        sum += i;\n        if sum >= w {\n            return false;\n   \
    \     }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `()` is not an iterator\n  --> /tmp/tmpo_840oj5.rs:19:14\n\
    \   |\n19 |     for i in q_rev {\n   |              ^^^^^ `()` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `()`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max && q.iter().rev().all(|&i| i & 1 == 0)\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz8_gn0ae.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight <= w {\n        return true;\n    }\n   \
    \ let mut i = 0;\n    let mut j = q.len();\n    while i < j {\n        if q[i]\
    \ != q[j] {\n            return false;\n        }\n        i += 1;\n        j\
    \ -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmpc3rh7i__.rs:29:17\n\
    \    |\n16  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \         - move occurs because `q` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n19  |     for x in q {\n    |              - `q` moved\
    \ due to this implicit call to `.into_iter()`\n...\n29  |     let mut j = q.len();\n\
    \    |                 ^^^^^^^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `q`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n19  |     for x in &q {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q {\n   \
    \     sum += v;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight <= w {\n        return true;\n    }\n   \
    \ let mut i = 0;\n    let mut j = 0;\n    let mut found = false;\n    while i\
    \ < q.len() && j < q.len() {\n        if q[i] < q[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n        if i == q.len() ||\
    \ j == q.len() {\n            found = true;\n            break;\n        }\n \
    \   }\n    !found\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmp8nqhda95.rs:31:15\n\
    \    |\n16  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \         - move occurs because `q` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n19  |     for v in q {\n    |              - `q` moved\
    \ due to this implicit call to `.into_iter()`\n...\n31  |     while i < q.len()\
    \ && j < q.len() {\n    |               ^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `q`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n19  |     for v in &q {\n    |    \
    \          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q)\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmphc7dx4td.rs:23:26\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmphc7dx4td.rs:23:47\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc7dx4td.rs:19:9\n\
    \   |\n19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpedjkg4f8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    let mut max_weight\
    \ = 0;\n    for &i in q {\n        sum += i;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n    }\n    for &i in q {\n        if\
    \ i != q[q.len() - 1 - i] {\n            balanced = true;\n            break;\n\
    \        }\n    }\n    balanced && sum <= w\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0jwr76x_.rs:20:9\n   |\n\
    20 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0jwr76x_.rs:26:9\n   |\n26 |     for &i in q {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    let mut is_balanced = true;\n    for &i in q {\n      \
    \  if i != q[q.len() - 1 - i] {\n            is_balanced = false;\n          \
    \  break;\n        }\n    }\n    sum == max_weight && is_balanced\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2wa0whv8.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2wa0whv8.rs:26:9\n   |\n26 |     for &i in q {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    let mut max_weight\
    \ = 0;\n    for x in q {\n        sum += x;\n        if sum > max_weight {\n \
    \           max_weight = sum;\n        }\n        if sum == w {\n            balanced\
    \ = true;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd5dom1pq.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > w {\n            max_weight\n \
    \       } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph2jmuvor.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpozja54ji.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for el in q {\n  \
    \      sum += el;\n        max_weight = if sum > max_weight {\n            sum\n\
    \        } else {\n            max_weight\n        };\n    }\n    if sum < w {\n\
    \        false\n    } else {\n        true\n    }\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpll0emib2.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &x in q {\n  \
    \      sum += x;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight <= w {\n        return true;\n    }\n   \
    \ let mut i = 0;\n    let mut j = q.len();\n    while i < j {\n        if q[i]\
    \ != q[j] {\n            return false;\n        }\n        i += 1;\n        j\
    \ -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt0vy4v6x.rs:19:9\n   |\n\
    19 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for v in q.iter() {\n        sum += v;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if sum < w {\n        \
    \    is_balanced = false;\n        }\n    }\n    !is_balanced\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxe15d3ai.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    for &i in q {\n\
    \        sum += i;\n        if sum == w {\n            balanced = true;\n    \
    \        break;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4reb161o.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { max_weight + i };\n    }\n    sum == max_weight\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxhalsle9.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum >= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp0ogngal5.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ >= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0ogngal5.rs:18:9\n   |\n18 |     for &x in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q.to_vec();\n    q.reverse();\n    let mut sum = 0;\n   \
    \ for &x in q {\n        sum += x;\n    }\n    sum < w && is_balanced(q)\n}\n\n\
    fn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmpi741218l.rs:23:16\n\
    \   |\n23 |     sum < w && is_balanced(q)\n   |                ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi741218l.rs:20:9\n\
    \   |\n20 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for el in q {\n  \
    \      sum += el;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnikepre6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    for &i in q {\n\
    \        sum += i;\n        if sum > w {\n            balanced = true;\n     \
    \       break;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy9yhpja7.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum == w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpcw4u6166.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ == w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > max_weight { max_weight\
    \ } else { max_weight + v };\n    }\n    sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpja87biz4.rs:23:26\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpja87biz4.rs:23:47\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for &i in q {\n        sum += i;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        is_balanced = is_balanced &&\
    \ i <= max_weight;\n    }\n    is_balanced && sum == max_weight\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw3xbef7y.rs:20:9\n   |\n\
    20 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    for v in q.iter()\
    \ {\n        if v > w {\n            return false;\n        }\n        sum +=\
    \ v;\n    }\n    if sum < w {\n        return false;\n    }\n    let mut max_sum\
    \ = 0;\n    let mut max_v = q.iter().max();\n    for v in q.iter() {\n       \
    \ if v > w {\n            return false;\n        }\n        sum += v;\n      \
    \  if sum > max_sum {\n            max_sum = sum;\n            max_v = v;\n  \
    \      }\n    }\n    if sum < w {\n        return false;\n    }\n    if max_sum\
    \ == w {\n        balanced = true;\n    }\n    balanced\n}\n\nfn main() {\n  \
    \  let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsk7dov14.rs:20:16\n   |\n\
    20 |         if v > w {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found `isize`\n   |                help: consider\
    \ borrowing here: `&w`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk7dov14.rs:31:16\n\
    \   |\n31 |         if v > w {\n   |                ^\n   |                |\n\
    \   |                expected `&isize`, found `isize`\n   |                help:\
    \ consider borrowing here: `&w`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk7dov14.rs:37:21\n\
    \   |\n29 |     let mut max_v = q.iter().max();\n   |                     --------------\
    \ expected due to this value\n...\n37 |             max_v = v;\n   |         \
    \            ^ expected enum `Option`, found `&isize`\n   |\n   = note:   expected\
    \ enum `Option<&isize>`\n           found reference `&isize`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n37 |             max_v = Some(v);\n   |    \
    \                 +++++ +\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for x in q {\n        sum += x;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum < w {\n            is_balanced\
    \ = false;\n            break;\n        }\n    }\n    is_balanced && max_weight\
    \ <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw86_co3r.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q.to_vec();\n    let mut sum = 0;\n    while q.len() > 0\
    \ {\n        let x = q.last_mut().unwrap();\n        sum += x;\n        q.pop();\n\
    \    }\n    sum < w && q.is_balanced()\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `&mut isize` to `{integer}`\n  --> /tmp/tmpzuornv8x.rs:21:13\n\
    \   |\n21 |         sum += x;\n   |             ^^ no implementation for `{integer}\
    \ += &mut isize`\n   |\n   = help: the trait `AddAssign<&mut isize>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0599]: no method named `is_balanced` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpzuornv8x.rs:24:18\n   |\n24 |     sum <\
    \ w && q.is_balanced()\n   |                  ^^^^^^^^^^^ method not found in\
    \ `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if max_weight == w {\n        return true;\n \
    \   }\n    if sum == w {\n        return true;\n    }\n    if sum < w {\n    \
    \    return false;\n    }\n    let mut sum = 0;\n    let mut max_weight = 0;\n\
    \    for v in q.iter() {\n        sum += v;\n        if sum > max_weight {\n \
    \           max_weight = sum;\n        }\n    }\n    if max_weight == w {\n  \
    \      return true;\n    }\n    if sum == w {\n        return true;\n    }\n \
    \   if sum < w {\n        return false;\n    }\n    let mut sum = 0;\n    let\
    \ mut max_weight = 0;\n    for v in q.iter() {\n        sum += v;\n        if\
    \ sum > max_weight {\n            max_weight = sum;\n        }\n    }\n    if\
    \ max_weight == w {\n        return true;\n    }\n    if sum == w {\n        return\
    \ true;\n    }\n    if sum < w {\n        return false;\n    }\n    let mut sum\
    \ = 0;\n    let mut max_weight = 0;\n    for v in q.iter() {\n        sum += v;\n\
    \        if sum > max_weight {\n            max_weight = sum;\n        }\n   \
    \ }\n    if max_weight == w {\n        return true;\n    }\n    if sum == w {\n\
    \        return true;\n    }\n    if sum < w {\n        return false;\n    }\n\
    \    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter() {\n\
    \        sum += v;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight == w {\n        return true;\n    }\n   \
    \ if sum == w {\n        return true;\n    }\n    if sum < w {\n        return\
    \ false;\n    }\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v\
    \ in q.iter() {\n        sum += v;\n        if sum > max_weight {\n          \
    \  max_weight = sum;\n        }\n    }\n    if max_weight == w {\n        return\
    \ true;\n    }\n    if sum == w {\n        return true;\n    }\n    if sum < w\
    \ {\n        return false;\n    }\n    let mut sum = 0;\n    let mut max_weight\
    \ = 0;\n    for v in q.iter() {\n        sum += v;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n    }\n    if max_weight == w {\n\
    \        return true;\n    }\n    if sum == w {\n        return true;\n    }\n\
    \    if sum < w {\n        return false;\n    }\n    let mut sum = 0;\n    let\
    \ mut max_weight = 0;\n    for v in q.iter() {\n        sum += v;\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpypzf7utx.rs:150:3\n\
    \    |\n16  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \                                          - unclosed delimiter\n...\n138 |  \
    \   for v in q.iter() {\n    |                       - this delimiter might not\
    \ be properly closed...\n139 |         sum += v;\n140 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n150 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpypzf7utx.rs:16:44\n   |\n16 | fn will_it_fly(q:\
    \ Vec<isize>, w: isize) -> bool {\n   |    -----------                       \
    \      ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight {\n            max_weight\n\
    \        } else {\n            max_weight\n        };\n    }\n    sum == max_weight\
    \ && is_palindromic(q) && is_balanced(q)\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpedoxby8x.rs:27:26\n   |\n27 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpedoxby8x.rs:27:47\n   |\n27 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpedoxby8x.rs:19:9\n\
    \   |\n19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if sum == max_weight {\n        return true;\n\
    \    }\n    if sum < max_weight {\n        return false;\n    }\n    let mut i\
    \ = 0;\n    let mut j = q.len() - 1;\n    while i <= j {\n        if q[i] != q[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7hgqwbz1.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_rev = q.iter().rev();\n    let mut sum = 0;\n    for &i in\
    \ q_rev {\n        sum += i;\n        if sum >= w {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6ffqvc86.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for v in q {\n        sum += v;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum >= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpmvb03u4m.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ >= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum == w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpcclyuofa.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ == w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcclyuofa.rs:18:9\n   |\n18 |     for &x in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for i in q {\n   \
    \     sum += i;\n        max_weight = if sum > max_weight {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == max_weight &&\
    \ is_palindromic(q) && is_balanced(q)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpq7w7tx5i.rs:27:26\n   |\n27 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpq7w7tx5i.rs:27:47\n   |\n27 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    sum == max_weight && is_balanced(q, w)\n}\n\n\
    fn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmp05yui_1q.rs:25:26\n\
    \   |\n25 |     sum == max_weight && is_balanced(q, w)\n   |                 \
    \         ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max && q.iter().rev().all(|&i| i < w)\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0yz_7xi_.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &x in q {\n  \
    \      sum += x;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q,\
    \ w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpwfna14e6.rs:25:26\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                          ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpwfna14e6.rs:25:47\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwfna14e6.rs:19:9\n\
    \   |\n19 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q.to_vec();\n    let mut sum = 0;\n    let mut max_weight\
    \ = 0;\n    while q.len() > 0 {\n        sum += q.iter().sum();\n        if sum\
    \ > max_weight {\n            max_weight = sum;\n        }\n        q.pop();\n\
    \    }\n    sum == max_weight && q.is_palindromic() && q.iter().sum() <= w\n}\n\
    \nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_palindromic` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp1marmgjs.rs:27:28\n   |\n27 |     sum ==\
    \ max_weight && q.is_palindromic() && q.iter().sum() <= w\n   |              \
    \              ^^^^^^^^^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n\n    for x in q {\n        if x > max_weight {\n            max_weight\
    \ = x;\n        }\n        sum += x;\n    }\n\n    if sum < w {\n        is_balanced\
    \ = false;\n    }\n\n    is_balanced && max_weight <= w\n}\n\nfn main() {\n  \
    \  let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps2n28zuc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = w;\n    for v in q.iter() {\n   \
    \     sum += v;\n        if sum > max {\n            max = sum;\n        }\n \
    \   }\n    sum == max\n}\n\nfn main() {\n    let candidate = will_it_fly;\n  \
    \  assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9xqfc_qz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q {\n   \
    \     sum += x;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    max_weight <= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp120fsspr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for e in q {\n   \
    \     sum += e;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight == w {\n        return true;\n    }\n   \
    \ if max_weight < w {\n        return false;\n    }\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    while i < q.len() && j < q.len() {\n        if q[i] > q[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    if i == q.len() {\n        return true;\n    }\n    if j == q.len() {\n \
    \       return false;\n    }\n    if q[i] == q[j] {\n        return will_it_fly(q.iter().rev(),\
    \ w);\n    }\n    if q[i] > q[j] {\n        return will_it_fly(q.iter().rev(),\
    \ w);\n    }\n    return will_it_fly(q.iter().rev(), w);\n}\n\nfn main() {\n \
    \   let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwbdzi71t.rs:47:28\n   |\n\
    47 |         return will_it_fly(q.iter().rev(), w);\n   |                    \
    \        ^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Rev`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Rev<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwbdzi71t.rs:50:28\n\
    \   |\n50 |         return will_it_fly(q.iter().rev(), w);\n   |             \
    \               ^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Rev`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Rev<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwbdzi71t.rs:52:24\n\
    \   |\n52 |     return will_it_fly(q.iter().rev(), w);\n   |                 \
    \       ^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Rev`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Rev<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for el in q {\n        if el > max_weight {\n            max_weight\
    \ = el;\n        }\n        sum += el;\n    }\n    if sum < w {\n        is_balanced\
    \ = false;\n    }\n    sum == w && is_balanced\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfsblhdkz.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if sum == w {\n        return true;\n    }\n    if sum\
    \ < w {\n        return false;\n    }\n    let mut i = 0;\n    while i < q.len()\
    \ {\n        if q[i] > w {\n            break;\n        }\n        i += 1;\n \
    \   }\n    let mut j = q.len() - 1;\n    while j > 0 {\n        if q[j] < w {\n\
    \            break;\n        }\n        j -= 1;\n    }\n    if i == j {\n    \
    \    return true;\n    }\n    let mut i = q.len() - 1;\n    while i >= 0 {\n \
    \       if q[i] > w {\n            break;\n        }\n        i -= 1;\n    }\n\
    \    let mut j = q.len() - 1;\n    while j >= 0 {\n        if q[j] < w {\n   \
    \         break;\n        }\n        j -= 1;\n    }\n    if i == j {\n       \
    \ return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7t6upput.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q)\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmphc7dx4td.rs:23:26\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmphc7dx4td.rs:23:47\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc7dx4td.rs:19:9\n\
    \   |\n19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    sum == max_weight && is_balanced(q, w)\n}\n\n\
    fn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmp05yui_1q.rs:25:26\n\
    \   |\n25 |     sum == max_weight && is_balanced(q, w)\n   |                 \
    \         ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if max_weight <= w {\n        return true;\n \
    \   }\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while i <= j {\n\
    \        if q[i] > q[j] {\n            return false;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9u1pux5j.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for el in q {\n        sum += el;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if sum < w {\n        \
    \    is_balanced = false;\n        }\n    }\n    is_balanced && max_weight <=\
    \ w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe6lhmfqi.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = w;\n    for x in q {\n        sum\
    \ += x;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv9i8gff0.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q,\
    \ w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpyivtph_r.rs:25:26\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                          ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpyivtph_r.rs:25:47\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpedjkg4f8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &i in q {\n        sum += i;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum >= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp25kydj4v.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ >= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp25kydj4v.rs:18:9\n   |\n18 |     for &i in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_rev = q.iter().rev();\n    let mut sum = 0;\n    for i in q_rev\
    \ {\n        sum += i;\n        if sum >= w {\n            return false;\n   \
    \     }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk2dehh64.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q {\n   \
    \     sum += v;\n        max_weight = if sum > w {\n            max_weight\n \
    \       } else {\n            max_weight + v\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyn_wr53x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if sum < w {\n        return false;\n    }\n \
    \   let mut i = 0;\n    while i < q.len() - 1 {\n        if q[i] != q[i + 1] {\n\
    \            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqj72vzwo.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &i in q {\n        sum += i;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum == w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpq0sip7a7.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ == w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpq0sip7a7.rs:18:9\n   |\n18 |     for &i in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if sum < w {\n        return false;\n    }\n \
    \   let mut is_balanced = true;\n    let mut max_sum = 0;\n    for v in q.iter()\
    \ {\n        if v > max_sum {\n            max_sum = v;\n        }\n        if\
    \ v != max_sum {\n            is_balanced = false;\n            break;\n     \
    \   }\n    }\n    if is_balanced {\n        true\n    } else {\n        max_weight\
    \ <= w\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4mkyhzrz.rs:31:16\n   |\n\
    31 |         if v > max_sum {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&max_sum`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4mkyhzrz.rs:32:23\n   |\n29 |     let mut max_sum = 0;\n   |  \
    \                     - expected due to this value\n...\n32 |             max_sum\
    \ = v;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n32 |             max_sum = *v;\n\
    \   |                       +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmp4mkyhzrz.rs:34:14\n   |\n34 |         if v != max_sum {\n   | \
    \             ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_rev = q.iter().rev();\n    let mut w = 0;\n    let mut sum\
    \ = 0;\n    while let Some(elem) = q_rev.next() {\n        sum += elem;\n    \
    \    w += 1;\n        if sum >= w {\n            return false;\n        }\n  \
    \  }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiv70igou.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for i in q.iter()\
    \ {\n        sum += i;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q,\
    \ w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpw1ov6zcy.rs:25:26\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                          ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpw1ov6zcy.rs:25:47\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = 0;\n    let mut is_balanced = true;\n    let mut\
    \ sum = 0;\n    for v in q.iter() {\n        sum += v;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n    }\n    for v in q.iter() {\n\
    \        if v != q.len() - v {\n            is_balanced = false;\n           \
    \ break;\n        }\n    }\n    sum == max_weight && is_balanced\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp70a2ytcl.rs:27:27\n   |\n\
    27 |         if v != q.len() - v {\n   |                           ^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize` from `usize`\n\
    \  --> /tmp/tmp70a2ytcl.rs:27:25\n   |\n27 |         if v != q.len() - v {\n \
    \  |                         ^ no implementation for `usize - &isize`\n   |\n\
    \   = help: the trait `Sub<&isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp70a2ytcl.rs:27:17\n   |\n27 |         if v != q.len() -\
    \ v {\n   |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ can't compare `&isize` with `usize`\n  --> /tmp/tmp70a2ytcl.rs:27:14\n   |\n\
    27 |         if v != q.len() - v {\n   |              ^^ no implementation for\
    \ `&isize == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    let mut is_balanced = true;\n    for v in q.iter()\
    \ {\n        if v != q[q.len() - 1 - v] {\n            is_balanced = false;\n\
    \            break;\n        }\n    }\n    sum == max_weight && is_balanced\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt6_p10a0.rs:27:33\n   |\n\
    27 |         if v != q[q.len() - 1 - v] {\n   |                              \
    \   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize`\
    \ from `usize`\n  --> /tmp/tmpt6_p10a0.rs:27:31\n   |\n27 |         if v != q[q.len()\
    \ - 1 - v] {\n   |                               ^ no implementation for `usize\
    \ - &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ can't compare `&isize` with `isize`\n  --> /tmp/tmpt6_p10a0.rs:27:14\n   |\n\
    27 |         if v != q[q.len() - 1 - v] {\n   |              ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > w {\n            sum\n \
    \       } else {\n            max_weight\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp4zjpahk.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    max_weight <= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgvecr2vr.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > w {\n            sum\n \
    \       } else {\n            max_weight\n        };\n    }\n    sum == w && max_weight\
    \ <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdwkob3nc.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q: Vec<isize> = q.to_vec();\n    let mut sum = 0;\n    let mut\
    \ max_weight = 0;\n    let mut is_balanced = true;\n    while q.len() > 0 {\n\
    \        sum += q.iter().sum();\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n        if sum == max_weight {\n            is_balanced =\
    \ false;\n        }\n        q.pop();\n    }\n    !is_balanced\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpk8e15q3f.rs:22:13\n\
    \   |\n22 |         sum += q.iter().sum();\n   |             ^^ cannot infer type\n\
    \   |\nhelp: consider specifying the type argument in the method call\n   |\n\
    22 |         sum += q.iter().sum::<S>();\n   |                            +++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  if sum == max {\n        return true;\n    }\n    if sum > w {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while i\
    \ <= j {\n        if q[i] > q[j] {\n            i += 1;\n        } else {\n  \
    \          j -= 1;\n        }\n    }\n    if q[i] == q[j] {\n        return true;\n\
    \    }\n    if q[i] > w {\n        return false;\n    }\n    if q[j] > w {\n \
    \       return false;\n    }\n    let mut i = 0;\n    let mut j = q.len() - 1;\n\
    \    while i <= j {\n        if q[i] > q[j] {\n            i += 1;\n        }\
    \ else {\n            j -= 1;\n        }\n    }\n    if q[i] == q[j] {\n     \
    \   return true;\n    }\n    if q[i] > w {\n        return false;\n    }\n   \
    \ if q[j] > w {\n        return false;\n    }\n    false\n}\n\nfn main() {\n \
    \   let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5as_qroz.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            sum\n        };\n    }\n    sum == w && max_weight\
    \ <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpom6u7kgn.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &x in q {\n  \
    \      sum += x;\n        max_weight = if sum > max_weight {\n            max_weight\n\
    \        } else {\n            max_weight\n        };\n    }\n    let mut is_balanced\
    \ = true;\n    let mut max_sum = 0;\n    for &x in q {\n        let mut new_sum\
    \ = 0;\n        for &y in q {\n            new_sum += y;\n        }\n        if\
    \ new_sum > max_sum {\n            is_balanced = false;\n            break;\n\
    \        }\n        max_sum = new_sum;\n    }\n    sum == max_weight && is_balanced\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpukgn1xhb.rs:19:9\n   |\n\
    19 |     for &x in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpukgn1xhb.rs:29:9\n   |\n29 |     for &x in q {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `x`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpukgn1xhb.rs:31:13\n\
    \   |\n31 |         for &y in q {\n   |             ^^    - this expression has\
    \ type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `y`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for v in q {\n        sum\
    \ += v;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  max <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyer7047n.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for i in q.iter() {\n   \
    \     sum += i;\n        if sum > max {\n            max = sum;\n        }\n \
    \   }\n    sum == w && sum == max\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7o4fimfj.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for x in q.iter()\
    \ {\n        sum += x;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if sum == w {\n        return true;\n    }\n \
    \   if sum < w {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = q.len() - 1;\n    while i <= j {\n        if q[i] > q[j] {\n           \
    \ return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph8_e2jgm.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > w {\n            max_weight\n\
    \        } else {\n            max_weight + i\n        };\n    }\n    sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmparvew2vw.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for i in q {\n   \
    \     sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    sum == max_weight && is_balanced(q) && is_palindromic(q)\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmpjj61b63i.rs:23:26\n\
    \   |\n23 |     sum == max_weight && is_balanced(q) && is_palindromic(q)\n   |\
    \                          ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_palindromic` in this scope\n  --> /tmp/tmpjj61b63i.rs:23:44\n\
    \   |\n23 |     sum == max_weight && is_balanced(q) && is_palindromic(q)\n   |\
    \                                            ^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    let mut max_weight\
    \ = 0;\n    for &i in q {\n        sum += i;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum == w {\n           \
    \ balanced = true;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcei76kq2.rs:20:9\n   |\n\
    20 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if max_weight <= w {\n        return true;\n    }\n   \
    \ let mut i = 0;\n    let mut j = q.len() - 1;\n    while i <= j {\n        if\
    \ q[i] != q[j] {\n            return false;\n        }\n        i += 1;\n    \
    \    j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk92lht2b.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if sum < w {\n        return false;\n    }\n \
    \   let mut is_balanced = true;\n    let mut max_sum = 0;\n    for v in q.iter()\
    \ {\n        if v > max_sum {\n            max_sum = v;\n        }\n        if\
    \ v != max_sum {\n            is_balanced = false;\n            break;\n     \
    \   }\n    }\n    if is_balanced {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfsn2112k.rs:31:16\n   |\n\
    31 |         if v > max_sum {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&max_sum`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfsn2112k.rs:32:23\n   |\n29 |     let mut max_sum = 0;\n   |  \
    \                     - expected due to this value\n...\n32 |             max_sum\
    \ = v;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n32 |             max_sum = *v;\n\
    \   |                       +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmpfsn2112k.rs:34:14\n   |\n34 |         if v != max_sum {\n   | \
    \             ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q.to_vec();\n    let mut sum = 0;\n    while q.len() > 0\
    \ {\n        sum += q.last();\n        q.pop();\n    }\n    sum < w && sum ==\
    \ q.len() && q == q.reverse()\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<&isize>` to `{integer}`\n  -->\
    \ /tmp/tmpblgpsuj7.rs:20:13\n   |\n20 |         sum += q.last();\n   |       \
    \      ^^ no implementation for `{integer} += Option<&isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Option<&isize>>` is not implemented for `{integer}`\n \
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \        <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n         \
    \    <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpblgpsuj7.rs:23:23\n   |\n23 |\
    \     sum < w && sum == q.len() && q == q.reverse()\n   |                    \
    \   ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n23 |     sum\
    \ < w && sum == q.len().try_into().unwrap() && q == q.reverse()\n   |        \
    \                      ++++++++++++++++++++\n\nerror[E0277]: can't compare `Vec<isize>`\
    \ with `()`\n  --> /tmp/tmpblgpsuj7.rs:23:36\n   |\n23 |     sum < w && sum ==\
    \ q.len() && q == q.reverse()\n   |                                    ^^ no implementation\
    \ for `Vec<isize> == ()`\n   |\n   = help: the trait `PartialEq<()>` is not implemented\
    \ for `Vec<isize>`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n             <Vec<T, A> as\
    \ PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n         \
    \    <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q.to_owned();\n    let mut sum = 0;\n    while q.len() >\
    \ 0 {\n        sum += q.iter().sum();\n        q.pop();\n    }\n    sum < w &&\
    \ q.is_palindromic()\n}\n\nfn main() {\n    let candidate = will_it_fly;\n   \
    \ assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_palindromic` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp363242od.rs:23:18\n   |\n23 |     sum <\
    \ w && q.is_palindromic()\n   |                  ^^^^^^^^^^^^^^ method not found\
    \ in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for v in q.iter() {\n        sum += v;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if sum < w {\n        \
    \    is_balanced = false;\n            break;\n        }\n    }\n    is_balanced\
    \ && sum == max_weight\n}\n\nfn main() {\n    let candidate = will_it_fly;\n \
    \   assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt67ocjnw.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > max_weight { max_weight\
    \ } else { max_weight + v };\n    }\n    sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpja87biz4.rs:23:26\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                          ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpja87biz4.rs:23:47\n   |\n23 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = 0;\n    let mut balanced = false;\n    let mut sum\
    \ = 0;\n    for v in q.iter() {\n        sum += v;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n        if v == 0 {\n         \
    \   balanced = false;\n        }\n        if v == 1 {\n            balanced =\
    \ true;\n        }\n    }\n    if balanced && sum == max_weight {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp19dmjh2k.rs:25:14\n\
    \   |\n25 |         if v == 0 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmp19dmjh2k.rs:28:14\n   |\n28 |         if v == 1 {\n   |       \
    \       ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    for i in q.iter()\
    \ {\n        sum += i;\n        if sum >= w {\n            balanced = true;\n\
    \            break;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5av9s5yy.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for e in q {\n   \
    \     sum += e;\n        max_weight = if sum > w {\n            max_weight\n \
    \       } else {\n            max_weight + e\n        };\n    }\n    sum == w\
    \ && max_weight <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n   \
    \ assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpak6j_laf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for &i in q {\n  \
    \      sum += i;\n        max_weight = if sum > max_weight { max_weight } else\
    \ { sum };\n    }\n    sum == max_weight && is_balanced(q)\n}\n\nfn main() {\n\
    \    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmph8e5s6pg.rs:23:26\n\
    \   |\n23 |     sum == max_weight && is_balanced(q)\n   |                    \
    \      ^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmph8e5s6pg.rs:19:9\n   |\n19 |     for &i in q {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = w;\n    for &i in q {\n        sum\
    \ += i;\n        if sum > max {\n            max = sum;\n        }\n    }\n  \
    \  sum == max\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdh_ll100.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    if sum < w {\n        return false;\n    }\n \
    \   let mut is_balanced = true;\n    for v in q.iter() {\n        if v != q.iter().rev().next().unwrap()\
    \ {\n            is_balanced = false;\n            break;\n        }\n    }\n\
    \    if is_balanced {\n        true\n    } else {\n        false\n    }\n}\n\n\
    fn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_2iuqw12.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &i in q {\n        sum += i;\n    }\n    if\
    \ sum < w {\n        return false;\n    }\n    let mut i = 0;\n    while i < q.len()\
    \ {\n        if q[i] != i {\n            return false;\n        }\n        i +=\
    \ 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n  \
    \  assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbcqe5t2a.rs:18:9\n   |\n\
    18 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbcqe5t2a.rs:26:20\n   |\n26 |         if q[i] != i {\n   |    \
    \                ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    26 |         if q[i] != i.try_into().unwrap() {\n   |                     ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    let mut is_balanced = true;\n    for v in q.iter()\
    \ {\n        if v != q[q.len() - 1 - v] {\n            is_balanced = false;\n\
    \            break;\n        }\n    }\n    sum == max_weight && is_balanced\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt6_p10a0.rs:27:33\n   |\n\
    27 |         if v != q[q.len() - 1 - v] {\n   |                              \
    \   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize`\
    \ from `usize`\n  --> /tmp/tmpt6_p10a0.rs:27:31\n   |\n27 |         if v != q[q.len()\
    \ - 1 - v] {\n   |                               ^ no implementation for `usize\
    \ - &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ can't compare `&isize` with `isize`\n  --> /tmp/tmpt6_p10a0.rs:27:14\n   |\n\
    27 |         if v != q[q.len() - 1 - v] {\n   |              ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut max_weight = 0;\n    let mut balanced = false;\n    let mut sum\
    \ = 0;\n    for &i in q {\n        sum += i;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum == w {\n           \
    \ balanced = true;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6s60jrz.rs:20:9\n   |\n\
    20 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    let mut is_balanced\
    \ = true;\n    for x in q {\n        sum += x;\n        if sum > max_weight {\n\
    \            max_weight = sum;\n        }\n        if sum < w {\n            is_balanced\
    \ = false;\n        }\n    }\n    is_balanced && max_weight <= w\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgdkgj82a.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut balanced = false;\n    let mut sum = 0;\n    for &i in q {\n\
    \        sum += i;\n        if sum >= w {\n            balanced = true;\n    \
    \        break;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp258lf11v.rs:19:9\n   |\n\
    19 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        max_weight = if sum > max_weight {\n         \
    \   sum\n        } else {\n            max_weight\n        };\n    }\n    sum\
    \ == max_weight && is_balanced(q, w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmp_hxir_my.rs:27:26\n\
    \   |\n27 |     sum == max_weight && is_balanced(q, w)\n   |                 \
    \         ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q.iter()\
    \ {\n        sum += v;\n        if sum > max_weight {\n            max_weight\
    \ = sum;\n        }\n    }\n    sum == max_weight && is_palindromic(q) && is_balanced(q,\
    \ w)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpyivtph_r.rs:25:26\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                          ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_balanced` in this scope\n\
    \  --> /tmp/tmpyivtph_r.rs:25:47\n   |\n25 |     sum == max_weight && is_palindromic(q)\
    \ && is_balanced(q, w)\n   |                                               ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = w;\n    let mut is_balanced = true;\n\
    \    for x in q {\n        sum += x;\n        if sum > max {\n            is_balanced\
    \ = false;\n            break;\n        }\n    }\n    if is_balanced {\n     \
    \   sum == max\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmf3s723g.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut max = 0;\n    for i in q.iter() {\n   \
    \     sum += i;\n        if sum > max {\n            max = sum;\n        }\n \
    \   }\n    sum == max && is_palindromic(q) && w <= sum\n}\n\nfn main() {\n   \
    \ let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmporfse9lf.rs:25:19\n   |\n25 |     sum == max && is_palindromic(q) &&\
    \ w <= sum\n   |                   ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &x in q {\n        sum += x;\n    }\n    sum\
    \ < w && is_palindromic(q) && sum == w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmpcclyuofa.rs:21:16\n   |\n21 |     sum < w && is_palindromic(q) && sum\
    \ == w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcclyuofa.rs:18:9\n   |\n18 |     for &x in q\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for &i in q {\n        sum += i;\n    }\n    sum\
    \ < w && is_balanced(q)\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmpd3qytv5d.rs:21:16\n\
    \   |\n21 |     sum < w && is_balanced(q)\n   |                ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd3qytv5d.rs:18:9\n\
    \   |\n18 |     for &i in q {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011794
