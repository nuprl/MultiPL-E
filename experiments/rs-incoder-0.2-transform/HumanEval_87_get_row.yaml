name: HumanEval_87_get_row
language: rs
prompt: "/// You are given a 2 dimensional data, as a nested lists,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the list,\n\
  /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1, 2, 3, 4, 5,\
  \ 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0, 0), (1,\
  \ 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize, isize)>::new()\n\
  /// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n/// vec![(2, 2)]\nfn get_row(lst:\
  \ Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1,\
  \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0,\
  \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2,\
  \ 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4,\
  \ 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1),\
  \ (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3,\
  \ 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5,\
  \ 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1),\
  \ vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5,\
  \ 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1),\
  \ Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize,\
  \ isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]],\
  \ 3), vec![(2, 2)]);\n}\n"
completions: ["    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_idx2 = 0;\n    let mut col_idx2\
    \ = 0;\n    for row in lst {\n        row_idx += 1;\n        for col in row {\n\
    \            col_idx += 1;\n            if col == x {\n                row.swap(row_idx,\
    \ col_idx);\n                row_idx += 1;\n                col_idx -= 1;\n  \
    \          }\n        }\n    }\n    row.sort_by_key(|&(_, y)| y.cmp(&x));\n  \
    \  row.sort_by_key(|&(_, y)| y.cmp(&x));\n    row", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n    let mut\
    \ row_coords = Vec::new();\n    let mut col_coords = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted_idx = Vec::new();\n    let mut col_sorted_idx = Vec::new();\n   \
    \ let mut row_sorted_idx_idx = Vec::new();\n    let mut col_sorted_idx_idx = Vec::new();\n\
    \    let mut row_sorted_idx_idx_idx = Vec::new();\n    let mut col_sorted_idx_idx_idx\
    \ = Vec::new();\n    let mut row_sorted_idx_idx_idx_idx = Vec::new();\n    let\
    \ mut col_sorted_idx_idx_idx_idx = Vec::new();\n    let mut row_sorted_idx_idx_idx_idx_idx\
    \ = Vec::new();\n    let mut col_sorted_idx_idx_idx_idx_idx = Vec::new();\n  \
    \  let mut row_sorted_idx_idx_idx_idx_idx_idx = Vec::new();\n    let mut col_sorted_idx_idx_idx_idx_idx_idx\
    \ = Vec::new();\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx = Vec::new();\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx = Vec::new();\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = Vec::new();\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = Vec::new();\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ Vec::new();\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = Vec::new();\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = Vec::new();\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = Vec::new();\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = Vec::new();\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = Vec::new();\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = Vec::new();\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ Vec::new();\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = Vec::new();\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_",
  "    let mut result = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_max = lst.len();\n    let mut col_max = lst[0].len();\n\
    \    let mut row_min = row_max - 1;\n    let mut col_min = col_max - 1;\n    let\
    \ mut row_ptr = &mut lst[row_idx];\n    let mut col_ptr = &mut row_ptr[col_idx];\n\
    \    while row_idx < row_max {\n        while col_idx < col_max {\n          \
    \  if *col_ptr == x {\n                result.push((row_idx, col_idx));\n    \
    \            break;\n            }\n            col_idx += 1;\n        }\n   \
    \     col_idx = 1;\n        col_ptr = &mut row_ptr[col_idx];\n        row_idx\
    \ += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut result = vec![];\n    for row in lst {\n\
    \        let mut row_result = vec![];\n        for element in row {\n        \
    \    if element == x {\n                row_result.push((row, element));\n   \
    \         }\n        }\n        result.push(row_result);\n    }\n    result.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result\
    \ = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx\
    \ < rows {\n        let mut row_result = vec![];\n        while col_idx < cols\
    \ {\n            if row_idx == row_idx {\n                row_result.push((row_idx,\
    \ col_idx));\n            }\n            if row_idx < rows && col_idx < cols {\n\
    \                if lst[row_idx][col_idx] == x {\n                    row_result.push((row_idx,\
    \ col_idx));\n                }\n            }\n            col_idx++;\n     \
    \   }\n        result.push(row_result);\n        row_idx++;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ {\n        while col_idx < cols {\n            if lst[row_idx][col_idx] == x\
    \ {\n                result.push((row_idx, col_idx));\n                break;\n\
    \            }\n            col_idx += 1;\n        }\n        col_idx = 0;\n \
    \       row_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n  \
    \  let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_idx2 = 0;\n\
    \    let mut col_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut col_idx3 =\
    \ 0;\n    let mut row_idx4 = 0;\n    let mut col_idx4 = 0;\n    let mut row_idx5\
    \ = 0;\n    let mut col_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut col_idx6\
    \ = 0;\n    let mut row_idx7 = 0;\n    let mut col_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut col_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut col_idx9\
    \ = 0;\n    let mut row_idx10 = 0;\n    let mut col_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut col_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut col_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut col_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut col_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut col_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut col_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut col_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut col_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut col_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut col_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut col_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut col_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut col_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut col_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut col_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut col_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut col_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut col_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut col_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut col_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut col_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let ", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let\
    \ mut col_coords = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut coords = Vec::new();\n    let mut row_coords\
    \ = Vec::new();\n    let mut col_coords = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n", "    let mut result\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    let mut row_end = 0;\n    let mut col_end\
    \ = 0;\n    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end\
    \ = 0;\n    let mut col_end = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    let mut row_end = 0;\n    let mut col_end\
    \ = 0;\n    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end\
    \ = 0;\n    let mut col_end = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    let mut row_end = 0;\n    let mut col_end\
    \ = 0;\n    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end\
    \ = 0;\n    let mut col_end = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    let mut row_end = 0;\n    let mut col_end\
    \ = 0;\n    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end\
    \ = 0;\n    let mut col_end = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    let mut row_end = 0;\n    let mut col_end\
    \ = 0;\n    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end\
    \ = 0;\n    let mut col_end = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    let mut row_end = 0;\n    let mut col_end\
    \ = 0;\n    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end\
    \ = 0;\n", "    let mut row = vec![];\n    let mut row_sorted = vec![];\n    let\
    \ mut col_sorted = vec![];\n    for row in lst {\n        let mut col = vec![];\n\
    \        for col in row {\n            if col == x {\n                col.push((row.len(),\
    \ col.len()));\n            }\n        }\n        row_sorted.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \        col_sorted.push(col.iter().cloned().collect::<Vec<_>>());\n    }\n  \
    \  row_sorted.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n    col_sorted.sort_by(|a,\
    \ b| b.iter().cmp(&a.iter()).reverse());\n    vec![row_sorted.iter().cloned().collect::<Vec<_>>(),\
    \ col_sorted.iter().cloned().collect::<Vec<_>>()]", "    let mut result = Vec::new();\n\
    \    for row in lst {\n        let mut row_result = Vec::new();\n        for cell\
    \ in row.iter() {\n            if cell == x {\n                row_result.push((row,\
    \ cell));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut lst = lst.clone();\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n    let mut\
    \ row = 0;\n    let mut col = 0;\n    while row < rows {\n        while col <\
    \ cols {\n            if lst[row][col] == x {\n                coords.push((row,\
    \ col));\n                break;\n            }\n            col += 1;\n     \
    \   }\n        row += 1;\n        col = 0;\n    }\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.sort_by(|a, b| b.2.cmp(&a.2));\n    coords", "    let mut lst = lst.clone();\n\
    \    lst.sort_by_key(|row| row.iter().cloned().collect::<Vec<_>>());\n    lst.sort_by_key(|row|\
    \ row.iter().cloned().rev().collect::<Vec<_>>());\n    lst.iter().cloned().enumerate().filter_map(|(i,\
    \ row)| {\n        if i == x {\n            Some((i, row.iter().cloned().rev().collect::<Vec<_>>()))\n\
    \        } else {\n            None\n        }\n    }).collect()", "    let mut\
    \ row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut\
    \ row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let\
    \ mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n  \
    \  let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n\
    \    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut ", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx: usize = 0;\n    let mut row_len: usize\
    \ = 0;\n    for row in lst {\n        row_len += row.len();\n        if row_idx\
    \ >= row_len {\n            break;\n        }\n        let mut row_idx: usize\
    \ = 0;\n        let mut row_len: usize = 0;\n        for col in row {\n      \
    \      row_idx += 1;\n            row_len += 1;\n            if col == x {\n \
    \               break;\n            }\n        }\n        if row_idx >= row_len\
    \ {\n            break;\n        }\n    }\n    row.sort_by_key(|&(x, y)| x.cmp(y));\n\
    \    row.sort_by_key(|&(x, y)| y.cmp(x));\n    row", "    let mut result = Vec::new();\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows {\n       \
    \ let mut row_result = Vec::new();\n        while col_idx < cols {\n         \
    \   if row_idx == row_idx {\n                row_result.push((row_idx, col_idx));\n\
    \            }\n            col_idx += 1;\n        }\n        result.push(row_result);\n\
    \        row_idx += 1;\n    }\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n\
    \    result.sort_by_key(|&(_, y)| y.cmp(&-x));\n    result", "    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row = 0;\n    let mut col = 0;\n    while row < rows {\n        if\
    \ col < cols {\n            if lst[row][col] == x {\n                coords.push((row,\
    \ col));\n            }\n            col += 1;\n        } else {\n           \
    \ row += 1;\n            col = 0;\n        }\n    }\n    coords.sort_by_key(|&(x,\
    \ y)| x.0);\n    coords.sort_by_key(|&(x, y)| y.0);\n    coords.reverse();\n \
    \   coords", "    let mut result = Vec::<(isize, isize)>::new();\n    for row\
    \ in lst {\n        let mut row_result = Vec::<(isize, isize)>::new();\n     \
    \   for cell in row {\n            if cell == x {\n                row_result.push((cell,\
    \ cell));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by_key(|row| row.iter().rev().cloned());\n    result.sort_by_key(|row|\
    \ row.iter().cloned());\n    result", "    let mut row: Vec<(isize, isize)> =\
    \ Vec::new();\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    for row\
    \ in lst {\n        let mut col_max = 0;\n        for col in row {\n         \
    \   if col > col_max {\n                col_max = col;\n            }\n      \
    \  }\n        if col_max > x {\n            break;\n        }\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.", "    let mut row = Vec::<(isize, isize)>::new();\n   \
    \ let mut row_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted =\
    \ Vec::<(isize, isize)>::new();\n    let mut col_sort_reverse = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sort_reverse = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sort_reverse_2 = Vec::<(isize, isize)>::new();\n    let mut col_sort_reverse_3\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reverse_2 = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sort_reverse_3 = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sort_reverse_4 = Vec::<(isize, isize)>::new();\n    let mut row_sort_reverse_4\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sort_reverse_5 = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sort_reverse_5 = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sort_reverse_6 = Vec::<(isize, isize)>::new();\n    let mut row_sort_reverse_6\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sort_reverse_7 = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sort_reverse_7 = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sort_reverse_8 = Vec::<(isize, isize)>::new();\n    let mut row_sort_reverse_8\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sort_reverse_9 = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sort_reverse_9 = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sort_reverse_10 = Vec::<(isize, isize)>::new();\n    let mut\
    \ row_sort_reverse_10 = Vec::<(isize, isize)>::new();\n    let mut col_sort_reverse_11\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reverse_11 = Vec::<(isize,\
    \ isize)>::new();\n    let mut col_sort_reverse_12 = Vec::<(isize, isize)>::new();\n\
    \    let mut row_sort_reverse_12 = Vec::<(isize, isize)>::new();\n    let mut\
    \ col_sort_reverse_13 = Vec::<(isize, isize)>::new();\n    let mut row_sort_reverse_13\
    \ = Vec::<(i", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut\
    \ col_pos = 0;\n    for row in lst {\n        row_len += row.len();\n        if\
    \ row_len == x {\n            row.sort_by(|a, b| a.cmp(b));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            ", " \
    \   let mut result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let\
    \ mut row_max = rows;\n    let mut col_max = cols;\n    while row_idx < rows {\n\
    \        while col_idx < cols {\n            if lst[row_idx][col_idx] == x {\n\
    \                result.push((row_idx, col_idx));\n                row_idx +=\
    \ 1;\n                col_idx += 1;\n                break;\n            }\n \
    \           col_idx += 1;\n        }\n        if col_idx >= cols {\n         \
    \   col_idx = 1;\n            row_idx += 1;\n        }\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ result = Vec::<(isize, isize)>::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    while row_idx < rows && col_idx < cols {\n        if lst[row_idx][col_idx]\
    \ == x {\n            result.push((row_idx, col_idx));\n            row_idx +=\
    \ 1;\n            col_idx += 1;\n        } else {\n            col_idx += 1;\n\
    \        }\n    }\n    result", "    let mut result = Vec::new();\n    for row\
    \ in lst {\n        let mut row = row.clone();\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        for row in row.iter().rev() {\n \
    \           if row.0 == x {\n                result.push((row.0, row.1));\n  \
    \              break;\n            }\n        }\n    }\n    result", "    let\
    \ mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        cols.push(row.len());\n        rows.push(row);\n\
    \    }\n    for row in rows {\n        let mut col_coords = vec![];\n        for\
    \ col in cols {\n            if col == x {\n                col_coords.push((row,\
    \ col));\n            }\n        }\n        coords.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \        coords.sort_by(|a, b| b.1.cmp(&a.1));\n        coords.sort_by(|a, b|\
    \ b.2.cmp(&a.2));\n        coords.sort_by(|a, b| b.1.cmp(&a.1));\n        coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    }\n    coords", "    let mut result = Vec::<(isize,\
    \ isize)>::new();\n    for row in lst {\n        let mut row_result = Vec::<(isize,\
    \ isize)>::new();\n        for col in row.iter().rev() {\n            if col ==\
    \ x {\n                row_result.push((col, row.len()));\n            }\n   \
    \     }\n        result.push(row_result);\n    }\n    result.sort_by_key(|&(_,\
    \ len)| len.cmp(&x.cmp(&0)).unwrap());\n    result.sort_by_key(|&(_, len)| -len.cmp(&x.cmp(&0)).unwrap());\n\
    \    result", "    let mut result = Vec::<(isize, isize)>::new();\n    for row\
    \ in lst {\n        let mut row_result = Vec::<(isize, isize)>::new();\n     \
    \   for col in row.iter().rev() {\n            if col == x {\n               \
    \ row_result.push((row, col));\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n \
    \   let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row: Vec<(isize, isize)> = Vec::new();\n        let mut col: Vec<(isize,\
    \ isize)> = Vec::new();\n        let mut row_idx = 0;\n        let mut col_idx\
    \ = 0;\n        while col_idx < col_len {\n            let mut col: Vec<(isize,\
    \ isize)> = Vec::new();\n            let mut row_idx = 0;\n            while row_idx\
    \ < row_len {\n                let mut col: Vec<(isize, isize)> = Vec::new();\n\
    \                let mut row_idx = 0;\n                while col_idx < col_len\
    \ {\n                    let mut col: Vec<(isize, isize)> = Vec::new();\n    \
    \                let mut row_idx = 0;\n                    while row_idx < row_len\
    \ {\n                        let mut col: Vec<(isize, isize)> = Vec::new();\n\
    \                        let mut row_idx = 0;\n                        while col_idx\
    \ < col_len {\n                            let mut col: Vec<(isize, isize)> =\
    \ Vec::new();\n                            let mut row_idx = 0;\n            \
    \                while row_idx < row_len {\n                                let\
    \ mut col: Vec<(isize, isize)> = Vec::new();\n                               \
    \ let mut row_idx = 0;\n                                while col_idx < col_len\
    \ {\n                                    let mut col: Vec<(isize, isize)> = Vec::new();\n\
    \                                    let mut row_idx = 0;\n                  \
    \                  while row_idx < row_len {\n                               \
    \         let mut col: Vec<(isize, isize)> = Vec::new();\n                   \
    \                     let mut row_idx = 0;\n                                 \
    \       while col_idx < col_len {\n                                          \
    \  let mut col: Vec<(isize, isize)> = Vec::new();\n                          \
    \                  let mut row_idx = 0;\n                                    \
    \        while row_idx < row_len {\n                                         \
    \       let mut col: Vec<(isize, isize)> = Vec::new();\n                     \
    \                           let mut row_idx = 0;\n                           \
    \                     while col_idx < col_len {\n                            \
    \                        let mut col: Vec<(isize, isize)> = Vec::new();\n    \
    \                                                let mut row_idx = 0;\n      \
    \                                              while row_idx < row_len {\n   \
    \                                                     let ", "    let mut row:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx2\
    \ = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5\
    \ = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut ", "    if lst.is_empty() {\n        vec![]\n    } else {\n\
    \        let mut row = vec![];\n        let mut row_idx = 1;\n        let mut\
    \ row_len = lst.len();\n        let mut col_len = lst.first().len();\n       \
    \ let mut col_pos = 0;\n        let mut col_max_pos = col_len;\n        let mut\
    \ row_max_pos = row_len;\n        let mut row_min_pos = row_len;\n        let\
    \ mut col_min_pos = col_len;\n        let mut col_max_val = lst.first().iter().max().unwrap();\n\
    \        let mut row_max_val = lst.iter().max().unwrap();\n        let mut row_min_val\
    \ = lst.iter().min().unwrap();\n        let mut col_min_val = lst.first().iter().min().unwrap();\n\
    \        let mut col_max_val_pos = col_len;\n        let mut row_max_val_pos =\
    \ row_len;\n        let mut col_min_val_pos = col_len;\n        let mut col_max_val_val\
    \ = lst.first().iter().max().unwrap();\n        let mut row_max_val_val = lst.iter().max().unwrap();\n\
    \        let mut row_min_val_val = lst.iter().min().unwrap();\n        let mut\
    \ col_min_val_val = lst.first().iter().min().unwrap();\n        let mut col_max_val_val_pos\
    \ = col_len;\n        let mut row_max_val_val_pos = row_len;\n        let mut\
    \ col_min_val_val_pos = col_len;\n        let mut col_max_val_val_val = lst.first().iter().max().unwrap();\n\
    \        let mut row_max_val_val_val = lst.iter().max().unwrap();\n        let\
    \ mut row_min_val_val_val = lst.iter().min().unwrap();\n        let mut col_min_val_val_val\
    \ = lst.first().iter().min().unwrap();\n        let mut col_max_val_val_val_pos\
    \ = col_len;\n        let mut row_max_val_val_val_pos = row_len;\n        let\
    \ mut col_min_val_val_val_pos = col_len;\n        let mut col_max_val_val_val_val\
    \ = lst.first().iter().max().unwrap();\n        let mut row_max_val_val_val_val\
    \ = lst.iter().max().unwrap();\n        let mut row_min_val_val_val_val = lst.iter().min().unwrap();\n\
    \        let mut col_min_val_val_val_val = lst.first().iter().min().unwrap();\n\
    \        let mut col_max_val_val_val_val_pos = col_len;\n        let mut row_max_val_val_val_val_pos\
    \ = row_len;\n        let mut col_min_val_val_val_val_pos = col_len;\n", "   \
    \ let mut row = Vec::<(isize, isize)>::new();\n    for row in lst {\n        let\
    \ mut col = Vec::<isize>::new();\n        for col in row {\n            if col\
    \ == x {\n                col.push(x);\n                break;\n            }\n\
    \        }\n        row.push(col);\n    }\n    row.sort_by_key(|&(_, y)| y.reverse());\n\
    \    row.sort_by_key(|&(_, y)| y.reverse());\n    row", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let\
    \ mut col_max = 0;\n    let mut row_max = 0;\n    let mut row_idx2 = 0;\n    let\
    \ mut col_num2 = 0;\n    let mut col_max2 = 0;\n    let mut row_idx3 = 0;\n  \
    \  let mut col_num3 = 0;\n    let mut col_max3 = 0;\n    let mut row_idx4 = 0;\n\
    \    let mut col_num4 = 0;\n    let mut col_max4 = 0;\n    for row in lst {\n\
    \        row_max = row.len();\n        row_idx = 0;\n        col_num = 0;\n  \
    \      col_max = 0;\n        for col in row {\n            col_max = col.len();\n\
    \            col_num = 0;\n            col_max = 0;\n            for (idx, val)\
    \ in col.iter().enumerate() {\n                if val == x {\n               \
    \     row_idx2 = row_idx;\n                    col_num2 = col_num;\n         \
    \           col_max2 = col_max;\n                    row_idx3 = row_idx2;\n  \
    \                  col_num3 = col_num2;\n                    col_max3 = col_max2;\n\
    \                    row_idx4 = row_idx3;\n                    col_num4 = col_num3;\n\
    \                    col_max4 = col_max3;\n                    row.insert(idx,\
    \ (row_idx4, col_num4));\n                    row.insert(idx, (row_idx3, col_num3));\n\
    \                    row.insert(idx, (row_idx2, col_num2));\n                \
    \    row.insert(idx, (row_idx, col_num));\n                    row_idx += 1;\n\
    \                    col_num += 1;\n                    col_max += 1;\n      \
    \          }\n            }\n            col_num += 1;\n            col_max +=\
    \ 1;\n        }\n        row_idx += 1;\n        col_num += 1;\n        row_max\
    \ += 1;\n        row.insert(0, (row_idx, col_num));\n        row.insert(0, (row_max,\
    \ col_max));\n        row.insert(0, (row_idx, col_num));\n        row.insert(0,\
    \ (row_max, col_max));\n    }\n    row", "    let mut row: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let\
    \ mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n  \
    \  let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n\
    \    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut ", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut result = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n \
    \   while row_idx < rows {\n        let mut row_sorted = vec![];\n        let\
    \ mut col_sorted = vec![];\n        while col_idx < cols {\n            if row_idx\
    \ < rows && col_idx < cols {\n                if lst[row_idx][col_idx] == x {\n\
    \                    row_sorted.push((row_idx, col_idx));\n                  \
    \  col_sorted.push((row_idx, col_idx));\n                }\n                col_idx\
    \ += 1;\n            }\n            col_idx += 1;\n        }\n        row_idx\
    \ += 1;\n        result.push(row_sorted);\n        result.push(col_sorted);\n\
    \    }\n    result.sort_by_key(|&(_, y)| y.0);\n    result.sort_by_key(|&(_, y)|\
    \ y.1);\n    result", "    let mut lst = lst.clone();\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n    while\
    \ rows > 0 || cols > 0 {\n        if rows > 0 {\n            let mut row = lst[rows].clone();\n\
    \            let mut cols = row.len();\n            while cols > 0 {\n       \
    \         let mut col = row[cols].clone();\n                while col > x {\n\
    \                    col -= 1;\n                }\n                coords.push((rows,\
    \ cols));\n                col -= 1;\n            }\n            rows += 1;\n\
    \        }\n        if cols > 0 {\n            let mut row = lst[rows].clone();\n\
    \            let mut cols = row.len();\n            while cols > 0 {\n       \
    \         let mut col = row[cols].clone();\n                while col > x {\n\
    \                    col -= 1;\n                }\n                coords.push((rows,\
    \ cols));\n                col -= 1;\n            }\n            cols += 1;\n\
    \        }\n    }\n    coords.sort_by_key(|&(x, y)| x.0);\n    coords.sort_by_key(|&(x,\
    \ y)| y.0);\n    coords.iter().map(|&(x, y)| {\n        (x, y)\n    }).collect()",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 =\
    \ 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut ", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut row_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_pos = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_pos = 0;\n    let mut row_pos = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut row_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_pos = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_pos = 0;\n    let mut row_pos = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut row_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_pos = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_pos = 0;\n    let mut row_pos = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut row_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_pos = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_pos = 0;\n    let mut row_pos = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut row_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_pos = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_pos = 0;\n    let mut row_pos = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut row_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_pos = 0;\n    let mut row_len = 0;\n    let mut col_len", "    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_", "    let mut rows = vec![];\n\
    \    let mut cols = vec![];\n    for row in lst {\n        cols.clear();\n   \
    \     for col in row {\n            if col == x {\n                cols.push((row,\
    \ col));\n            }\n        }\n        rows.push(cols);\n    }\n    rows.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n    rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \    rows", "    let mut coords = vec![];\n    let mut rows = vec![];\n    for\
    \ row in lst {\n        let mut cols = vec![];\n        for col in row {\n   \
    \         if col == x {\n                cols.push((row, col));\n            }\n\
    \        }\n        rows.push(cols);\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    rows.sort_by(|a, b| b.0.cmp(&a.0));\n    coords", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n   \
    \ let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n\
    \    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 =\
    \ 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut row_", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    for row_idx in 0..lst.len() {\n        let row_len = lst[row_idx].len();\n\
    \        for col_len in 0..row_len {\n            if row_idx == col_len {\n  \
    \              row.push((row_idx, col_len));\n            }\n        }\n    }\n\
    \    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n  \
    \  row.sort_by_key(|&(x, y)| x.1);\n    row.sort_by_key(|&(x, y)| y.1);\n    row",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 =\
    \ 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut ", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n\
    \    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5 =\
    \ 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut ", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut result = vec![];\n    let mut row_idx = 0;\n    let mut col_idx =\
    \ 0;\n    while col_idx < cols {\n        if row_idx == rows {\n            break;\n\
    \        }\n        let mut row_idx = row_idx;\n        let mut col_idx = col_idx;\n\
    \        let mut row_max = row_idx;\n        let mut col_max = col_idx;\n    \
    \    while row_idx < rows {\n            let mut row_idx = row_idx;\n        \
    \    let mut col_idx = col_idx;\n            while col_idx < cols {\n        \
    \        if row_idx == rows {\n                    break;\n                }\n\
    \                if row_idx < rows && col_idx < cols {\n                    if\
    \ lst[row_idx][col_idx] == x {\n                        row_max = row_idx;\n \
    \                       col_max = col_idx;\n                    }\n          \
    \      }\n                col_idx += 1;\n            }\n            row_idx +=\
    \ 1;\n        }\n        result.push((row_max, col_max));\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ row = Vec::<(isize, isize)>::new();\n    let mut row_idx = 1;\n    let mut col_count\
    \ = 1;\n    let mut col_pos = 0;\n    let mut row_pos = 0;\n    let mut col_max\
    \ = lst[0].len();\n    for col in lst {\n        if col_pos < col_max {\n    \
    \        row.push((row_idx, col_pos));\n            row_idx += 1;\n          \
    \  col_pos += 1;\n        } else {\n            col_pos = 0;\n            col_count\
    \ += 1;\n        }\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| y.0);\n    row.sort_by_key(|&(x, y)| x.1);\n    row.iter().map(|&(x, y)|\
    \ x).collect()", "    let mut result = Vec::new();\n    let mut row_idx = 1;\n\
    \    let mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    while row_idx < row_len {\n        let mut row_start =\
    \ row_idx;\n        let mut row_end = row_idx;\n        let mut col_start = col_idx;\n\
    \        let mut col_end = col_idx;\n        while col_start < col_end {\n   \
    \         if row_start == row_end {\n                row_end = row_start + 1;\n\
    \                col_end = col_start + 1;\n            } else {\n            \
    \    row_end = row_end;\n                col_end = col_end;\n            }\n \
    \           if row_start == row_end {\n                row_start = row_start +\
    \ 1;\n                col_start = col_start + 1;\n            } else {\n     \
    \           row_start = row_start;\n                col_start = col_start;\n \
    \           }\n        }\n        let mut row_tuple = (row_start, row_idx);\n\
    \        let mut col_tuple = (col_idx, col_start);\n        result.push((row_tuple,\
    \ col_tuple));\n        col_idx += 1;\n    }\n    result.sort_by_key(|&(_, y)|\
    \ y.0);\n    result.sort_by_key(|&(_, y)| y.1);\n    result", "    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n\
    \    let mut row_coords = Vec::new();\n    let mut col_coords = Vec::new();\n\
    \    let mut row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n\
    \    let mut row_sorted_idx = Vec::new();\n    let mut col_sorted_idx = Vec::new();\n\
    \    let mut row_sorted_idx_last = Vec::new();\n    let mut col_sorted_idx_last\
    \ = Vec::new();\n    let mut row_sorted_idx_last_idx = Vec::new();\n    let mut\
    \ col_sorted_idx_last_idx = Vec::new();\n    let mut row_sorted_idx_last_idx_last\
    \ = Vec::new();\n    let mut col_sorted_idx_last_idx_last = Vec::new();\n    let\
    \ mut row_sorted_idx_last_idx_last_idx = Vec::new();\n    let mut col_sorted_idx_last_idx_last_idx\
    \ = Vec::new();\n    let mut row_sorted_idx_last_idx_last_idx_last = Vec::new();\n\
    \    let mut col_sorted_idx_last_idx_last_idx_last = Vec::new();\n    let mut\
    \ row_sorted_idx_last_idx_last_idx_last_idx = Vec::new();\n    let mut col_sorted_idx_last_idx_last_idx_last_idx\
    \ = Vec::new();\n    let mut row_sorted_idx_last_idx_last_idx_last_idx_last =\
    \ Vec::new();\n    let mut col_sorted_idx_last_idx_last_idx_last_idx_last = Vec::new();\n\
    \    let mut row_sorted_idx_last_idx_last_idx_last_idx_last_idx = Vec::new();\n\
    \    let mut col_sorted_idx_last_idx_last_idx_last_idx_last_idx = Vec::new();\n\
    \    let mut row_sorted_idx_last_idx_last_idx_last_idx_last_idx_last = Vec::new();\n\
    \    let mut col_sorted_idx_last_idx_last_idx_last_idx_last_idx_last = Vec::new();\n\
    \    let mut row_sorted_idx_last_idx_last_idx_last_idx_last_idx_last_idx = Vec::new();\n\
    \    let mut col_sorted_idx_last_idx_last_idx_last_idx_last_idx_last_idx = Vec::new();\n\
    \    let mut row_sorted_idx_last_idx_last_idx_last_idx_last_idx_last_idx_last\
    \ = Vec::new();\n    let mut col_sorted_idx_last_idx_last_idx_last_idx_last_idx_last_idx_last\
    \ = Vec::new();\n    let mut row_sorted_idx_last_idx_last_idx_last_idx_last_idx_last_idx_last_idx\
    \ = Vec::new();\n    let mut col_sorted_idx_last_idx_last_idx_last_idx_last_idx_last_idx_last_idx\
    \ = Vec::new", "    let mut result = Vec::new();\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while col_idx < cols {\n        if row_idx == rows {\n           \
    \ break;\n        }\n        let mut row_start = row_idx;\n        let mut row_end\
    \ = row_idx;\n        let mut col_start = col_idx;\n        let mut col_end =\
    \ col_idx;\n        while row_end < rows && col_end < cols {\n            if row_end\
    \ == rows {\n                row_end += 1;\n            }\n            if col_end\
    \ == cols {\n                col_end += 1;\n            }\n            if row_start\
    \ == row_end {\n                row_start += 1;\n            }\n            if\
    \ col_start == col_end {\n                col_start += 1;\n            }\n   \
    \         if row_start <= row_end && col_start <= col_end {\n                if\
    \ lst[row_start][col_start] == x {\n                    result.push((row_start,\
    \ col_start));\n                }\n                row_end += 1;\n           \
    \     col_end += 1;\n            }\n        }\n        row_idx += 1;\n       \
    \ col_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n  \
    \  let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = ",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut col_max\
    \ = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx\
    \ = 0;\n    let mut col_max_idx2 = 0;\n    let mut col_min_idx2 = 0;\n    let\
    \ mut col_max_idx3 = 0;\n    let mut col_min_idx3 = 0;\n    let mut col_max_idx4\
    \ = 0;\n    let mut col_min_idx4 = 0;\n    let mut col_max_idx5 = 0;\n    let\
    \ mut col_min_idx5 = 0;\n    let mut col_max_idx6 = 0;\n    let mut col_min_idx6\
    \ = 0;\n    let mut col_max_idx7 = 0;\n    let mut col_min_idx7 = 0;\n    let\
    \ mut col_max_idx8 = 0;\n    let mut col_min_idx8 = 0;\n    let mut col_max_idx9\
    \ = 0;\n    let mut col_min_idx9 = 0;\n    let mut col_max_idx10 = 0;\n    let\
    \ mut col_min_idx10 = 0;\n    let mut col_max_idx11 = 0;\n    let mut col_min_idx11\
    \ = 0;\n    let mut col_max_idx12 = 0;\n    let mut col_min_idx12 = 0;\n    let\
    \ mut col_max_idx13 = 0;\n    let mut col_min_idx13 = 0;\n    let mut col_max_idx14\
    \ = 0;\n    let mut col_min_idx14 = 0;\n    let mut col_max_idx15 = 0;\n    let\
    \ mut col_min_idx15 = 0;\n    let mut col_max_idx16 = 0;\n    let mut col_min_idx16\
    \ = 0;\n    let mut col_max_idx17 = 0;\n    let mut col_min_idx17 = 0;\n    let\
    \ mut col_max_idx18 = 0;\n    let mut col_min_idx18 = 0;\n    let mut col_max_idx19\
    \ = 0;\n    let mut col_min_idx19 = 0;\n    let mut col_max_idx20 = 0;\n    let\
    \ mut col_min_idx20 = 0;\n    let mut col_max_idx21 = 0;\n    let mut col_min_idx21\
    \ = 0;\n    let mut col_max_idx22 = 0;\n    let mut col_min_idx22 = 0;\n    let\
    \ mut col_max_idx23 = 0;\n    let mut col_min_idx23 = 0;\n    let mut col_max_idx24\
    \ = 0;\n    let mut col_min_idx24 = 0;\n    let mut col_max_idx25 = 0;\n    let\
    \ mut col_min_idx25 = 0;\n    let mut col_max_idx26 = 0;\n    let mut col_min_idx26\
    \ = 0;", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n  \
    \  let mut coords = vec![];\n    while rows > 0 || cols > 0 {\n        if rows\
    \ > 0 {\n            rows -= 1;\n            cols = lst[rows][0].len();\n    \
    \    }\n        if cols > 0 {\n            cols -= 1;\n            coords.push(vec![(rows\
    \ - 1, cols - 1)]);\n        }\n    }\n    coords.sort_by_key(|&(_, y)| y.0);\n\
    \    coords.sort_by_key(|&(_, y)| y.1);\n    coords.reverse();\n    coords.iter().map(|&(_,\
    \ y)| vec![(y.0, y.1)]).collect()", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = std::i32::MAX;\n    let mut col_max = 0;\n    let mut col_min = std::i32::MIN;\n\
    \    for row in lst {\n        let mut col_max = 0;\n        let mut col_min =\
    \ std::i32::MIN;\n        for col in row {\n            if col > col_max {\n \
    \               col_max = col;\n            }\n            if col < col_min {\n\
    \                col_min = col;\n            }\n        }\n        if row_idx_max\
    \ < row {\n            row_idx_max = row;\n        }\n        if row_idx_min >\
    \ row {\n            row_idx_min = row;\n        }\n        if col_max < x {\n\
    \            col_max = x;\n        }\n        if col_min > x {\n            col_min\
    \ = x;\n        }\n    }\n    let mut row_idx = row_idx_min;\n    let mut col_max\
    \ = col_min;\n    let mut col_min = std::i32::MAX;\n    for row in lst {\n   \
    \     let mut col_max = 0;\n        let mut col_min = std::i32::MIN;\n       \
    \ for col in row {\n            if col > col_max {\n                col_max =\
    \ col;\n            }\n            if col < col_min {\n                col_min\
    \ = col;\n            }\n        }\n        if row_idx < row {\n            row_idx\
    \ = row;\n        }\n        if col_min > x {\n            col_min = x;\n    \
    \    }\n        if col_max < x {\n            col_max = x;\n        }\n    }\n\
    \    let mut row_idx = row_idx_min;\n    let mut col_max = col_min;\n    let mut\
    \ col_min = std::i32::MAX;\n    for row in lst {\n        let mut col_max = 0;\n\
    \        let mut col_min = std::i32::MIN;\n        for col in row {\n        \
    \    if col > col_max {\n                col_max = col;\n            }\n     \
    \       if col < col_min {\n                col_min = col;\n            }\n  \
    \      }\n        if row_idx < row {\n            row_idx = row;\n        }\n\
    \        if col_min > x {\n            col_min = x;\n        }\n        if col_max\
    \ < x {\n            col_max = x;\n        }\n    }\n    let mut row_idx = row_idx_min;\n\
    \    let mut col_max = col_min;\n    let mut col_min = std::i32::MAX;\n    for\
    \ row in lst {\n        let mut col_max = 0;\n        let mut col_min = std::i32",
  "    let mut result = Vec::<(isize, isize)>::new();\n    for row in lst {\n    \
    \    let mut row_result = Vec::<(isize, isize)>::new();\n        for (i, elem)\
    \ in row.iter().enumerate() {\n            if i == x {\n                row_result.push((i,\
    \ elem));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n\
    \    while row < rows {\n        while col < cols {\n            if lst[row][col]\
    \ == x {\n                coords.push((row, col));\n                break;\n \
    \           }\n            col += 1;\n        }\n        row += 1;\n        col\
    \ = 0;\n    }\n    coords.sort_by_key(|&(x, y)| x.0);\n    coords.sort_by_key(|&(x,\
    \ y)| y.0);\n    coords", "    let mut lst = lst.clone();\n    lst.sort_by_key(|row|\
    \ row.iter().cloned().collect::<Vec<_>>());\n    lst.sort_by_key(|row| row.iter().cloned().reverse().collect::<Vec<_>>());\n\
    \    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n  \
    \  for row in lst {\n        let mut row_idx = 0;\n        let mut col_idx = 0;\n\
    \        while col_idx < row.len() {\n            if row[col_idx] == x {\n   \
    \             let row_idx = row_idx;\n                let col_idx = col_idx +\
    \ 1;\n                break;\n            }\n            col_idx += 1;\n     \
    \   }\n        row.push(row_idx, col_idx);\n    }\n    row.sort_by_key(|row| row.iter().cloned().collect::<Vec<_>>());\n\
    \    row.sort_by_key(|row| row.iter().cloned().reverse().collect::<Vec<_>>());\n\
    \    row", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    for row in lst {\n        row_len += row.len();\n        col_len =\
    \ row.len();\n        if row_len > x {\n            break;\n        }\n      \
    \  for col in row {\n            col_pos += col_len;\n            if col_pos >\
    \ x {\n                break;\n            }\n            row.push(col_pos);\n\
    \        }\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&", "    let mut result\
    \ = Vec::new();\n    for row in lst {\n        let mut row_result = Vec::new();\n\
    \        for el in row {\n            if el == x {\n                row_result.push((row,\
    \ el));\n            }\n        }\n        result.push(row_result);\n    }\n \
    \   result.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n    result.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n    result", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_max = 0;\n\
    \    for row in lst {\n        let mut col_max = 0;\n        for col in row {\n\
    \            if col > col_max {\n                col_max = col;\n            }\n\
    \        }\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        let mut row_idx = 0;\n        for col in row.iter().rev() {\n       \
    \     if col == x {\n                row_idx += 1;\n            }\n        }\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut col_max\
    \ = 0;\n    let mut col_min = 0;\n    for row in lst {\n        let mut col_max\
    \ = 0;\n        let mut col_min = 0;\n        for col in row {\n            if\
    \ col > col_max {\n                col_max = col;\n            }\n           \
    \ if col < col_min {\n                col_min = col;\n            }\n        }\n\
    \        if row_idx > row_idx_max {\n            row_idx_max = row_idx;\n    \
    \    }\n        if row_idx < row_idx_min {\n            row_idx_min = row_idx;\n\
    \        }\n        if col_min > col_max {\n            col_max = col_min;\n \
    \       }\n        if col_min < col_max {\n            row.push((row_idx, col_max));\n\
    \        }\n        row_idx += 1;\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n\
    \    row.sort_by_key(|&(x, y)| y.0);\n    row", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut col_max = lst[0].len();\n    let mut row_max = lst[0].len();\n    for row\
    \ in lst {\n        let row_len = row.len();\n        if row_len > col_max {\n\
    \            col_max = row_len;\n        }\n        if row_len > row_max {\n \
    \           row_max = row_len;\n        }\n    }\n    for row in lst {\n     \
    \   let mut row_idx = 0;\n        for col in row {\n            if col == x {\n\
    \                row_idx += 1;\n            }\n        }\n        let mut col_idx\
    \ = 0;\n        for col in row {\n            if col == x {\n                col_idx\
    \ -= 1;\n            }\n        }\n        row.swap(row_idx, col_idx);\n     \
    \   row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|", "    let mut lst = lst.clone();\n    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_idxs: Vec<isize> = vec![];\n    let mut col_idxs: Vec<isize> = vec![];\n\
    \    let mut row_idxs_idx = 0;\n    let mut col_idxs_idx = 0;\n    while row_idx\
    \ < lst.len() {\n        let mut row_idxs_idx = row_idx;\n        let mut col_idxs_idx\
    \ = col_idx;\n        while col_idx < lst[row_idx].len() {\n            if lst[row_idx][col_idx]\
    \ == x {\n                row.push((row_idx, col_idx));\n                row_idxs.push(row_idx);\n\
    \                col_idxs.push(col_idx);\n                row_idxs_idx += 1;\n\
    \                col_idxs_idx += 1;\n            }\n            col_idx += 1;\n\
    \        }\n        row_idx += 1;\n        col_idx = 0;\n        row_idxs_idx\
    \ = 0;\n        col_idxs_idx = 0;\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n\
    \    row.sort_by_key(|&(x, y)| y.0);\n    row.sort_by_key(|&(x, y)| x.1);\n  \
    \  row.sort_by_key(|&(x, y)| y.1);\n    row.iter().map(|&(x, y)| vec![(x.0, x.1),\
    \ (y.0, y.1)]).collect()", "    let mut lst = lst.clone();\n    let mut rows =\
    \ lst.len();\n    let mut cols = lst[0].len();\n    let mut res = Vec::new();\n\
    \    while rows > 0 || cols > 0 {\n        if rows == 0 {\n            cols =\
    \ 0;\n            rows += 1;\n        }\n        if cols == 0 {\n            rows\
    \ += 1;\n            cols += 1;\n        }\n        let row = lst.len() - rows\
    \ - 1;\n        let col = lst[row].len() - cols - 1;\n        if lst[row][col]\
    \ == x {\n            res.push((row, col));\n        }\n        if row > 0 {\n\
    \            lst[row] = lst[row - 1].clone();\n            rows += 1;\n      \
    \  }\n        if col > 0 {\n            lst[row][col] = lst[row - 1][col - 1];\n\
    \            cols += 1;\n        }\n    }\n    res", "    let mut result = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let mut row_start\
    \ = row_idx;\n    let mut col_start = col_idx;\n    while row_idx < row_len {\n\
    \        let mut row_end = row_idx;\n        while row_end < row_len && row_end\
    \ - row_start < col_len {\n            row_end += 1;\n        }\n        let mut\
    \ col_end = col_idx;\n        while col_end < col_len && col_end - col_start <\
    \ row_len {\n            col_end += 1;\n        }\n        if row_end == row_len\
    \ {\n            result.push((row_start, col_idx));\n            row_idx += 1;\n\
    \            col_start = col_idx;\n            col_idx = 1;\n        } else if\
    \ col_end == col_len {\n            result.push((row_idx, col_start));\n     \
    \       row_idx = row_end;\n            col_start += 1;\n        } else {\n  \
    \          let mut row_end = row_idx;\n            while row_end < row_len &&\
    \ row_end - row_start < col_len {\n                row_end += 1;\n           \
    \ }\n            let mut col_end = col_idx;\n            while col_end < col_len\
    \ && col_end - col_start < row_len {\n                col_end += 1;\n        \
    \    }\n            result.push((row_start, col_start));\n            result.push((row_end,\
    \ col_end));\n            row_idx += 1;\n            col_start += 1;\n       \
    \     col_idx += 1;\n        }\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut row = 0;\n    let mut col = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row < row_len {\n        if col\
    \ == col_len {\n            result.push((row, col));\n            row++;\n   \
    \         col = 0;\n            col_len = lst[0].len();\n        } else {\n  \
    \          if lst[row][col] == x {\n                col++;\n            } else\
    \ {\n                col = 0;\n            }\n        }\n    }\n    result", " \
    \   let mut result = Vec::<(isize, isize)>::new();\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_idx = row_idx;\n     \
    \   while col_idx < cols {\n            if row_idx == x {\n                result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            col_idx += 1;\n\
    \        }\n        row_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n\
    \    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx2:\
    \ Vec<isize> = vec![];\n    let mut row_idx3: Vec<isize> = vec![];\n    let mut\
    \ row_idx4: Vec<isize> = vec![];\n    let mut row_idx5: Vec<isize> = vec![];\n\
    \    let mut row_idx6: Vec<isize> = vec![];\n    let mut row_idx7: Vec<isize>\
    \ = vec![];\n    let mut row_idx8: Vec<isize> = vec![];\n    let mut row_idx9:\
    \ Vec<isize> = vec![];\n    let mut row_idx10: Vec<isize> = vec![];\n    let mut\
    \ row_idx11: Vec<isize> = vec![];\n    let mut row_idx12: Vec<isize> = vec![];\n\
    \    let mut row_idx13: Vec<isize> = vec![];\n    let mut row_idx14: Vec<isize>\
    \ = vec![];\n    let mut row_idx15: Vec<isize> = vec![];\n    let mut row_idx16:\
    \ Vec<isize> = vec![];\n    let mut row_idx17: Vec<isize> = vec![];\n    let mut\
    \ row_idx18: Vec<isize> = vec![];\n    let mut row_idx19: Vec<isize> = vec![];\n\
    \    let mut row_idx20: Vec<isize> = vec![];\n    let mut row_idx21: Vec<isize>\
    \ = vec![];\n    let mut row_idx22: Vec<isize> = vec![];\n    let mut row_idx23:\
    \ Vec<isize> = vec![];\n    let mut row_idx24: Vec<isize> = vec![];\n    let mut\
    \ row_idx25: Vec<isize> = vec![];\n    let mut row_idx26: Vec<isize> = vec![];\n\
    \    let mut row_idx27: Vec<isize> = vec![];\n    let mut row_idx28: Vec<isize>\
    \ = vec![];\n    let mut row_idx29: Vec<isize> = vec![];\n    let mut row_idx30: ",
  "    let mut lst = lst.clone();\n    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_idx2 = 0;\n\
    \    let mut col_idx2 = 0;\n    while row_idx < lst.len() {\n        let mut row_idx2\
    \ = 0;\n        while col_idx < lst[row_idx].len() {\n            if lst[row_idx][col_idx]\
    \ == x {\n                row.push((row_idx, col_idx));\n                row_idx2\
    \ += 1;\n            }\n            col_idx += 1;\n        }\n        if row_idx2\
    \ == 0 {\n            break;\n        }\n        row_idx += 1;\n        col_idx\
    \ = 0;\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| y.0);\n    row.sort_by_key(|&(x, y)| x.1 > y.1);\n    row.iter().map(|&(x,\
    \ y)| x).collect()", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let\
    \ mut col_coords = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut\
    \ col_coord = Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < rows {\n        while j < cols\
    \ {\n            if lst[i][j] == x {\n                row_coord.push((i, j));\n\
    \                col_coord.push((j, i));\n                i += 1;\n          \
    \      j += 1;\n            } else {\n                j += 1;\n            }\n\
    \        }\n        i += 1;\n        j = 0;\n    }\n    row_coords.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    row_coords.reverse();\n    col_coords.sort_by(|a, b|\
    \ b.0.cmp(&a.0));\n    col_coords.reverse();\n    for coord in row_coords {\n\
    \        coords.push((coord.0, coord.1));\n    }\n    for coord in col_coords\
    \ {\n        coords.push((coord.1, coord.0));\n    }\n    coords", "    let mut\
    \ row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx2\
    \ = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5\
    \ = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut row_", "    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_sort = vec![];\n    let mut\
    \ col_sort = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx_idx = vec![];\n    let mut col_sort_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sort_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    for row in lst {\n  \
    \      let mut row_idx = 0;\n        let mut col_idx = 0;\n        for col in\
    \ row {\n            if col == x {\n                row.push(row_idx, col_idx);\n\
    \                row_idx += 1;\n            }\n            col_idx += 1;\n   \
    \     }\n    }\n    row.sort_by_key(|&(_, y)| y.cmp(&x));\n    row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    row", "    let mut result = Vec::<(isize, isize)>::new();\n\
    \    let mut row = 0;\n    let mut col = 0;\n    while row < lst.len() {\n   \
    \     let mut found = false;\n        for y in 0..lst[row].len() {\n         \
    \   if lst[row][y] == x {\n                found = true;\n                break;\n\
    \            }\n        }\n        if found {\n            result.push((row, col));\n\
    \            row += 1;\n            col = 0;\n        } else {\n            col\
    \ += 1;\n        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| -x.1);\n    result", "    let mut result = Vec::<(isize, isize)>::new();\n\
    \    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_end = row_idx;\n        while row_end < row_len && col_idx < col_len\
    \ {\n            if lst[row_end][col_idx] == x {\n                result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            row_end += 1;\n\
    \            col_idx += 1;\n        }\n        row_idx += 1;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ result = vec![];\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    while row_idx\
    \ < row_len {\n        let mut row_idx = 1;\n        while col_idx < col_len {\n\
    \            if row_idx == row_len {\n                row_idx = 0;\n         \
    \       col_idx = 0;\n            }\n            if lst[row_idx][col_idx] == x\
    \ {\n                result.push((row_idx, col_idx));\n                row_idx\
    \ += 1;\n                col_idx += 1;\n            } else {\n               \
    \ col_idx += 1;\n            }\n        }\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    if lst.is_empty()\
    \ {\n        Vec::new()\n    } else {\n        let mut row = Vec::new();\n   \
    \     let mut row_idx = 1;\n        let mut row_col = 0;\n        let mut row_col_max\
    \ = 0;\n        for row_col in lst.iter().rev() {\n            if row_col[x] >=\
    \ row_col_max {\n                row_col_max = row_col[x];\n            }\n  \
    \      }\n        for row_col in lst.iter().rev() {\n            if row_col[x]\
    \ == row_col_max {\n                row.push((row_idx, row_col[x]));\n       \
    \         row_idx += 1;\n            }\n        }\n        row.sort_by_key(|&(x,\
    \ y)| x.cmp(y));\n        row.sort_by_key(|&(x, y)| y.cmp(x));\n        row\n\
    \    }", "    let mut result = Vec::<(isize, isize)>::new();\n    for row in lst\
    \ {\n        let mut row_result = Vec::<(isize, isize)>::new();\n        for (i,\
    \ v) in row.iter().enumerate() {\n            if i == x {\n                row_result.push((i,\
    \ v));\n            }\n        }\n        result.push(row_result);\n    }\n  \
    \  result.sort_by_key(|&(_, v)| v.iter().rev().collect::<Vec<_>>());\n    result.sort_by_key(|&(_,\
    \ v)| v.iter().collect::<Vec<_>>().rev());\n    result", "    let mut rows: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    while row_idx\
    \ < row_len {\n        let mut row_idx = row_idx;\n        while col_idx < col_len\
    \ {\n            if row_idx == row_len {\n                row_idx = 0;\n     \
    \           col_idx++;\n            }\n            if col_idx == col_len {\n \
    \               row_idx++;\n                col_idx = 0;\n            }\n    \
    \        if lst[row_idx][col_idx] == x {\n                rows.push((row_idx,\
    \ col_idx));\n                row_idx++;\n                col_idx++;\n       \
    \         break;\n            }\n            col_idx++;\n        }\n    }\n  \
    \  rows", "    let mut result = Vec::new();\n    let mut rows = lst.len();\n \
    \   let mut cols = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n \
    \   while row_idx < rows {\n        let mut row_sorted = vec![];\n        let\
    \ mut col_sorted = vec![];\n        while col_idx < cols {\n            if row_idx\
    \ != row_sorted.len() {\n                row_sorted.push(row_idx);\n         \
    \   }\n            if col_idx != col_sorted.len() {\n                col_sorted.push(col_idx);\n\
    \            }\n            if row_idx < rows && col_idx < cols && row_sorted[col_idx]\
    \ < col_sorted[row_sorted[col_idx]] {\n                row_sorted.push(row_idx);\n\
    \                col_sorted.push(col_idx);\n            }\n            col_idx++;\n\
    \        }\n        result.push((row_sorted[0], col_sorted[0]));\n        row_idx++;\n\
    \        col_idx = 0;\n    }\n    result", "    let mut lst = lst.clone();\n \
    \   let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n   \
    \ let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut row_idx_min_idx\
    \ = 0;\n    let mut row_idx_max_idx = 0;\n    let mut col_min = 0;\n    let mut\
    \ col_max = 0;\n    let mut col_min_idx = 0;\n    let mut col_max_idx = 0;\n \
    \   let mut col_min_idx2 = 0;\n    let mut col_max_idx2 = 0;\n    let mut col_min_idx3\
    \ = 0;\n    let mut col_max_idx3 = 0;\n    let mut col_min_idx4 = 0;\n    let\
    \ mut col_max_idx4 = 0;\n    let mut col_min_idx5 = 0;\n    let mut col_max_idx5\
    \ = 0;\n    let mut col_min_idx6 = 0;\n    let mut col_max_idx6 = 0;\n    let\
    \ mut col_min_idx7 = 0;\n    let mut col_max_idx7 = 0;\n    let mut col_min_idx8\
    \ = 0;\n    let mut col_max_idx8 = 0;\n    let mut col_min_idx9 = 0;\n    let\
    \ mut col_max_idx9 = 0;\n    let mut col_min_idx10 = 0;\n    let mut col_max_idx10\
    \ = 0;\n    let mut col_min_idx11 = 0;\n    let mut col_max_idx11 = 0;\n    let\
    \ mut col_min_idx12 = 0;\n    let mut col_max_idx12 = 0;\n    let mut col_min_idx13\
    \ = 0;\n    let mut col_max_idx13 = 0;\n    let mut col_min_idx14 = 0;\n    let\
    \ mut col_max_idx14 = 0;\n    let mut col_min_idx15 = 0;\n    let mut col_max_idx15\
    \ = 0;\n    let mut col_min_idx16 = 0;\n    let mut col_max_idx16 = 0;\n    let\
    \ mut col_min_idx17 = 0;\n    let mut col_max_idx17 = 0;\n    let mut col_min_idx18\
    \ = 0;\n    let mut col_max_idx18 = 0;\n    let mut col_min_idx19 = 0;\n    let\
    \ mut col_max_idx19 = 0;\n    let mut col_min_idx20 = 0;\n    let mut col_max_idx20\
    \ = 0;\n    let mut col_min_idx21 = 0;\n    let mut col_max_idx21 = 0;\n    let\
    \ mut col_min_idx22 = 0;\n    let mut col_max_idx22 = 0;\n    let mut col_min_idx23\
    \ = 0;\n    let mut col_max_idx23 = 0;\n    let mut col_min_idx24 = 0;\n    let\
    \ mut col_max_idx24 = 0;\n    let mut col_min_idx25 = 0;\n", "    let mut row:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut row_idx_min = 0;\n    let mut col_max = 0;\n    let mut col_min\
    \ = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut\
    \ col_max_idx2 = 0;\n    let mut col_min_idx2 = 0;\n    let mut row_max = lst.len();\n\
    \    let mut row_min = lst.len();\n    let mut col_max = lst.len();\n    let mut\
    \ col_min = lst.len();\n    let mut col_max_idx = lst.len();\n    let mut col_min_idx\
    \ = lst.len();\n    let mut col_max_idx2 = lst.len();\n    let mut col_min_idx2\
    \ = lst.len();\n    let mut row_idx2 = 0;\n    let mut row_idx2max = 0;\n    let\
    \ mut row_idx2min = 0;\n    let mut col_max2 = 0;\n    let mut col_min2 = 0;\n\
    \    let mut col_max_idx2 = 0;\n    let mut col_min_idx2 = 0;\n    let mut col_max2idx\
    \ = lst.len();\n    let mut col_min2idx = lst.len();\n    let mut row_idx2max2\
    \ = lst.len();\n    let mut row_idx2min2 = lst.len();\n    let mut col_max2idx2\
    \ = lst.len();\n    let mut col_min2idx2 = lst.len();\n    let mut row_idx2max3\
    \ = lst.len();\n    let mut row_idx2min3 = lst.len();\n    let mut col_max2idx3\
    \ = lst.len();\n    let mut col_min2idx3 = lst.len();\n    let mut row_idx2max4\
    \ = lst.len();\n    let mut row_idx2min4 = lst.len();\n    let mut col_max2idx4\
    \ = lst.len();\n    let mut col_min2idx4 = lst.len();\n    let mut row_idx2max5\
    \ = lst.len();\n    let mut row_idx2min5 = lst.len();\n    let mut col_max2idx5\
    \ = lst.len();\n    let mut col_min2idx5 = lst.len();\n    let mut row_idx2max6\
    \ = lst.len();\n    let mut row_idx2min6 = lst.len();\n    let mut col_max2idx6\
    \ = lst.len();\n    let mut col_min2idx6 = lst.len();\n", "    let mut result\
    \ = Vec::<(isize, isize)>::new();\n    for row in lst {\n        let mut row_result\
    \ = Vec::<(isize, isize)>::new();\n        for (i, elem) in row.iter().enumerate()\
    \ {\n            if i == x {\n                row_result.push((i, elem));\n  \
    \          }\n        }\n        result.push(row_result);\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.0);\n    result.sort_by_key(|&(_, y)| -y.1);\n    result", "    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_", "    if lst.is_empty() {\n \
    \       Vec::new()\n    } else {\n        let mut rows = lst.iter().map(|row|\
    \ row.iter().cloned()).collect::<Vec<_>>();\n        sort_rows(&mut rows);\n \
    \       let mut cols = vec![0; rows.len()];\n        let mut i = 0;\n        for\
    \ r in rows.iter() {\n            for c in r.iter().rev() {\n                cols[i]\
    \ = c;\n                i += 1;\n            }\n        }\n        sort_cols(&mut\
    \ cols);\n        let mut res = vec![];\n        for i in 0..rows.len() {\n  \
    \          let row = rows[i];\n            let col = cols[i];\n            let\
    \ x = row.get_index(x);\n            let y = col.get_index(x);\n            res.push((x,\
    \ y));\n        }\n        res\n    }", "    let mut row: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut row_start = 0;\n    let\
    \ mut col_start = 0;\n    let mut row_end = row_len;\n    let mut col_end = col_len;\n\
    \    let mut row_idx2 = 0;\n    let mut col_idx2 = 0;\n    let mut row_len2 =\
    \ 0;\n    let mut col_len2 = 0;\n    let mut row_start2 = 0;\n    let mut col_start2\
    \ = 0;\n    let mut row_end2 = row_len2;\n    let mut col_end2 = col_len2;\n \
    \   let mut row_idx3 = 0;\n    let mut col_idx3 = 0;\n    let mut row_len3 = 0;\n\
    \    let mut col_len3 = 0;\n    let mut row_start3 = 0;\n    let mut col_start3\
    \ = 0;\n    let mut row_end3 = row_len3;\n    let mut col_end3 = col_len3;\n \
    \   let mut row_idx4 = 0;\n    let mut col_idx4 = 0;\n    let mut row_len4 = 0;\n\
    \    let mut col_len4 = 0;\n    let mut row_start4 = 0;\n    let mut col_start4\
    \ = 0;\n    let mut row_end4 = row_len4;\n    let mut col_end4 = col_len4;\n \
    \   let mut row_idx5 = 0;\n    let mut col_idx5 = 0;\n    let mut row_len5 = 0;\n\
    \    let mut col_len5 = 0;\n    let mut row_start5 = 0;\n    let mut col_start5\
    \ = 0;\n    let mut row_end5 = row_len5;\n    let mut col_end5 = col_len5;\n \
    \   let mut row_idx6 = 0;\n    let mut col_idx6 = 0;\n    let mut row_len6 = 0;\n\
    \    let mut col_len6 = 0;\n    let mut row_start6 = 0;\n    let mut col_start6\
    \ = 0;\n    let mut row_end6 = row_len6;\n    let mut col_end6 = col_len6;\n \
    \   let mut row_idx7 = 0;\n    let mut col_idx7 = 0;\n    let mut row_len7 = 0;\n\
    \    let mut col_len7 = 0;\n    let mut row_start7 = 0;\n    let mut col_start7\
    \ = 0;\n    let mut row_end7 = row_len7;\n    let mut col_end7 = col_len7;\n \
    \   let mut row_idx8 = 0;\n    let mut col_idx8 = 0;\n    let mut row_len8 = 0;\n\
    \    let mut col_len8 = 0;\n    let mut row_start8 = 0;\n    let mut col_start8\
    \ = 0;\n    let mut row_", "    let mut row: Vec<(isize, isize)> = vec![];\n \
    \   let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = std::cmp::min::<isize>(lst.len(), x);\n    let mut col_max = 0;\n    let mut\
    \ col_min = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n \
    \   let mut col_max_idx2 = 0;\n    let mut col_min_idx2 = 0;\n    let mut col_max_idx3\
    \ = 0;\n    let mut col_min_idx3 = 0;\n    let mut col_max_idx4 = 0;\n    let\
    \ mut col_min_idx4 = 0;\n    let mut col_max_idx5 = 0;\n    let mut col_min_idx5\
    \ = 0;\n    let mut col_max_idx6 = 0;\n    let mut col_min_idx6 = 0;\n    let\
    \ mut col_max_idx7 = 0;\n    let mut col_min_idx7 = 0;\n    let mut col_max_idx8\
    \ = 0;\n    let mut col_min_idx8 = 0;\n    let mut col_max_idx9 = 0;\n    let\
    \ mut col_min_idx9 = 0;\n    let mut col_max_idx10 = 0;\n    let mut col_min_idx10\
    \ = 0;\n    let mut col_max_idx11 = 0;\n    let mut col_min_idx11 = 0;\n    let\
    \ mut col_max_idx12 = 0;\n    let mut col_min_idx12 = 0;\n    let mut col_max_idx13\
    \ = 0;\n    let mut col_min_idx13 = 0;\n    let mut col_max_idx14 = 0;\n    let\
    \ mut col_min_idx14 = 0;\n    let mut col_max_idx15 = 0;\n    let mut col_min_idx15\
    \ = 0;\n    let mut col_max_idx16 = 0;\n    let mut col_min_idx16 = 0;\n    let\
    \ mut col_max_idx17 = 0;\n    let mut col_min_idx17 = 0;\n    let mut col_max_idx18\
    \ = 0;\n    let mut col_min_idx18 = 0;\n    let mut col_max_idx19 = 0;\n    let\
    \ mut col_min_idx19 = 0;\n    let mut col_max_idx20 = 0;\n    let mut col_min_idx20\
    \ = 0;\n    let mut col_max_idx21 = 0;\n    let mut col_min_idx21 = 0;\n    let\
    \ mut col_max_idx22 = 0;\n    let mut col_min_idx22 = 0;\n    let mut col_max_idx23\
    \ = 0;\n    let mut col_min_idx23 = 0;\n    let mut col_max_idx24 = 0;\n    let\
    \ mut col_min_idx24 = 0;\n    let mut col_max_idx25 = 0;\n    let mut col_min_idx25\
    \ = 0;\n    let mut col_max_", "    let mut lst = lst.clone();\n    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut res = Vec::<(isize,\
    \ isize)>::new();\n    while rows > 0 {\n        let mut row = vec![];\n     \
    \   for _ in 0..cols {\n            row.push((0, 0));\n        }\n        res.push(row.clone());\n\
    \        cols -= 1;\n        while cols > 0 {\n            let mut col = vec![];\n\
    \            for _ in 0..rows {\n                col.push((0, 0));\n         \
    \   }\n            rows.push(col.clone());\n            cols -= 1;\n        }\n\
    \        rows -= 1;\n    }\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    while cols > 0 {\n        let mut col = vec![];\n       \
    \ for _ in 0..rows {\n            col.push((0, 0));\n        }\n        res.push(col.clone());\n\
    \        cols -= 1;\n    }\n    for row in lst {\n        for col in row {\n \
    \           if col == x {\n                res.push((row, col));\n           \
    \ }\n        }\n    }\n    res", "    let mut lst = lst.clone();\n    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result = Vec::<(isize,\
    \ isize)>::new();\n    while rows > 0 || cols > 0 {\n        if rows > 0 {\n \
    \           cols = lst[rows].len();\n        }\n        if cols > 0 {\n      \
    \      result.push((rows - 1, cols - 1));\n        }\n        rows -= 1;\n   \
    \     cols -= 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let\
    \ mut col_coords = Vec::new();\n    let mut row_sort = Vec::new();\n    let mut\
    \ col_sort = Vec::new();\n    let mut row_sort_idx = Vec::new();\n    let mut\
    \ col_sort_idx = Vec::new();\n    let mut row_sort_idx2 = Vec::new();\n    let\
    \ mut col_sort_idx2 = Vec::new();\n    let mut row_sort_idx3 = Vec::new();\n \
    \   let mut col_sort_idx3 = Vec::new();\n    let mut row_sort_idx4 = Vec::new();\n\
    \    let mut col_sort_idx4 = Vec::new();\n    let mut row_sort_idx5 = Vec::new();\n\
    \    let mut col_sort_idx5 = Vec::new();\n    let mut row_sort_idx6 = Vec::new();\n\
    \    let mut col_sort_idx6 = Vec::new();\n    let mut row_sort_idx7 = Vec::new();\n\
    \    let mut col_sort_idx7 = Vec::new();\n    let mut row_sort_idx8 = Vec::new();\n\
    \    let mut col_sort_idx8 = Vec::new();\n    let mut row_sort_idx9 = Vec::new();\n\
    \    let mut col_sort_idx9 = Vec::new();\n    let mut row_sort_idx10 = Vec::new();\n\
    \    let mut col_sort_idx10 = Vec::new();\n    let mut row_sort_idx11 = Vec::new();\n\
    \    let mut col_sort_idx11 = Vec::new();\n    let mut row_sort_idx12 = Vec::new();\n\
    \    let mut col_sort_idx12 = Vec::new();\n    let mut row_sort_idx13 = Vec::new();\n\
    \    let mut col_sort_idx13 = Vec::new();\n    let mut row_sort_idx14 = Vec::new();\n\
    \    let mut col_sort_idx14 = Vec::new();\n    let mut row_sort_idx15 = Vec::new();\n\
    \    let mut col_sort_idx15 = Vec::new();\n    let mut row_sort_idx16 = Vec::new();\n\
    \    let mut col_sort_idx16 = Vec::new();\n    let mut row_sort_idx17 = Vec::new();\n\
    \    let mut col_sort_idx17 = Vec::new();\n    let mut row_sort_idx18 = Vec::new();\n\
    \    let mut col_sort_idx18 = Vec::new", "    let mut rows = vec![];\n    let\
    \ mut cols = vec![];\n    for row in lst {\n        cols.clear();\n        for\
    \ col in row {\n            if col == x {\n                cols.push((row, col));\n\
    \            }\n        }\n        rows.push((row, cols.reverse()));\n    }\n\
    \    rows.sort_by(|a, b| a.1.cmp(&b.1));\n    rows.reverse();\n    rows", "  \
    \  let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut row_idx_max_col\
    \ = 0;\n    let mut row_idx_min_col = 0;\n    let mut row_idx_max_col_len = 0;\n\
    \    let mut row_idx_min_col_len = 0;\n    let mut row_idx_max_col_len2 = 0;\n\
    \    let mut row_idx_min_col_len2 = 0;\n    let mut row_idx_max_col_len3 = 0;\n\
    \    let mut row_idx_min_col_len3 = 0;\n    let mut row_idx_max_col_len4 = 0;\n\
    \    let mut row_idx_min_col_len4 = 0;\n    let mut row_idx_max_col_len5 = 0;\n\
    \    let mut row_idx_min_col_len5 = 0;\n    let mut row_idx_max_col_len6 = 0;\n\
    \    let mut row_idx_min_col_len6 = 0;\n    let mut row_idx_max_col_len7 = 0;\n\
    \    let mut row_idx_min_col_len7 = 0;\n    let mut row_idx_max_col_len8 = 0;\n\
    \    let mut row_idx_min_col_len8 = 0;\n    let mut row_idx_max_col_len9 = 0;\n\
    \    let mut row_idx_min_col_len9 = 0;\n    let mut row_idx_max_col_len10 = 0;\n\
    \    let mut row_idx_min_col_len10 = 0;\n    let mut row_idx_max_col_len11 = 0;\n\
    \    let mut row_idx_min_col_len11 = 0;\n    let mut row_idx_max_col_len12 = 0;\n\
    \    let mut row_idx_min_col_len12 = 0;\n    let mut row_idx_max_col_len13 = 0;\n\
    \    let mut row_idx_min_col_len13 = 0;\n    let mut row_idx_max_col_len14 = 0;\n\
    \    let mut row_idx_min_col_len14 = 0;\n    let mut row_idx_max_col_len15 = 0;\n\
    \    let mut row_idx_min_col_len15 = 0;\n    let mut row_idx_max_col_len16 = 0;\n\
    \    let mut row_idx_min_col_len16 = 0;\n    let mut row_idx_max_col_len17 = 0;\n\
    \    let mut row_idx_min_col_len17 = 0;\n    let mut row_idx_max_col_len18 = 0;\n\
    \    let mut row_idx_min_col_len18 = 0;\n    let mut row_idx_max_col_len19 = 0;\n\
    \    let mut row_idx_min_col_len19 = 0;\n    let mut row_idx_max_col_len20 = 0;\n\
    \    let mut row_idx_min_col_len20 = 0;\n    let mut row_idx_max_col_len21 = 0;\n\
    \    let mut row_idx_min_col_len21 = 0;\n    let mu", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let\
    \ mut col_max = 0;\n    for row in lst {\n        col_num = row.len();\n     \
    \   if col_num > col_max {\n            col_max = col_num;\n        }\n    }\n\
    \    for row in lst {\n        let mut col_num = 0;\n        for col in row {\n\
    \            if col == x {\n                let mut coord = (row_idx, col_num);\n\
    \                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, col_num);\n                row.swap(row_idx,\
    \ col_num);\n                row.swap(row_idx, ", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    for\
    \ row in lst {\n        let mut col_max = 0;\n        for col in row {\n     \
    \       if col > col_max {\n                col_max = col;\n            }\n  \
    \      }\n        if col_max > x {\n            break;\n        }\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_", "    let mut result = Vec::<(isize, isize)>::new();\n\
    \    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_max = lst.len();\n\
    \    let mut col_max = lst[0].len();\n    while row_idx < row_max {\n        let\
    \ mut row_idx = 1;\n        while col_idx < col_max {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                break;\n\
    \            }\n            col_idx += 1;\n        }\n        row_idx += 1;\n\
    \    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)|\
    \ y.0);\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_start = 0;\n    let mut\
    \ col_start = 0;\n    while row_idx < row_len {\n        let row_end = row_start\
    \ + lst[row_idx].len();\n        let col_end = col_start + lst[row_idx][col_idx].len();\n\
    \        if row_end > row_start {\n            row.push((row_start, row_idx));\n\
    \            row_start = row_end;\n        }\n        if col_end > col_start {\n\
    \            row.push((col_start, col_idx));\n            col_start = col_end;\n\
    \        }\n        row_idx += 1;\n        col_idx += 1;\n    }\n    row.push((row_start,\
    \ row_idx));\n    row.push((col_start, col_idx));\n    row.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    row.sort_by(|a, b| b.1.cmp(&a.1));\n    row", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let\
    \ mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n \
    \   let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut result = vec![];\n    let mut row_idx\
    \ = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx2 = vec![];\n    let mut\
    \ col_idx2 = vec![];\n    let mut row_sorted2 = vec![];\n    let mut col_sorted2\
    \ = vec![];\n    let mut row_idx3 = vec![];\n    let mut col_idx3 = vec![];\n\
    \    let mut row_sorted3 = vec![];\n    let mut col_sorted3 = vec![];\n    let\
    \ mut row_idx4 = vec![];\n    let mut col_idx4 = vec![];\n    let mut row_sorted4\
    \ = vec![];\n    let mut col_sorted4 = vec![];\n    let mut row_idx5 = vec![];\n\
    \    let mut col_idx5 = vec![];\n    let mut row_sorted5 = vec![];\n    let mut\
    \ col_sorted5 = vec![];\n    let mut row_idx6 = vec![];\n    let mut col_idx6\
    \ = vec![];\n    let mut row_sorted6 = vec![];\n    let mut col_sorted6 = vec![];\n\
    \    let mut row_idx7 = vec![];\n    let mut col_idx7 = vec![];\n    let mut row_sorted7\
    \ = vec![];\n    let mut col_sorted7 = vec![];\n    let mut row_idx8 = vec![];\n\
    \    let mut col_idx8 = vec![];\n    let mut row_sorted8 = vec![];\n    let mut\
    \ col_sorted8 = vec![];\n    let mut row_idx9 = vec![];\n    let mut col_idx9\
    \ = vec![];\n    let mut row_sorted9 = vec![];\n    let mut col_sorted9 = vec![];\n\
    \    let mut row_idx10 = vec![];\n    let mut col_idx10 = vec![];\n    let mut\
    \ row_sorted10 = vec![];\n    let mut col_sorted10 = vec![];\n    let mut row_idx11\
    \ = vec![];\n    let mut col_idx11 = vec![];\n    let mut row_sorted11 = vec![];\n\
    \    let mut col_sorted11 = vec![];\n    let mut row_idx12 = vec![];\n    let\
    \ mut col_idx12 = vec![];\n    let mut row_sorted12 = vec![];\n    let mut col_sorted12\
    \ = vec![];\n    let mut row_idx13 = vec", "    let mut rows = lst.len();\n  \
    \  let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n    for row\
    \ in 0..rows {\n        let mut cols = lst[row].len();\n        let mut coord\
    \ = vec![];\n        for col in 0..cols {\n            if row == 0 || col == 0\
    \ || row == rows - 1 || col == cols - 1 {\n                coord.push((row, col));\n\
    \            }\n        }\n        coords.sort_by_key(|&(x, y)| x.cmp(y));\n \
    \       coords.sort_by_key(|&(x, y)| y.cmp(x));\n    }\n    coords.iter().map(|&(x,\
    \ y)| vec![(x + 0, y + 0)]).collect()", "    if lst.is_empty() {\n        vec![]\n\
    \    } else {\n        let mut rows = lst.iter().map(|row| row.iter().cloned()).collect::<Vec<_>>();\n\
    \        sort_rows(&mut rows);\n        let mut cols = rows.iter().map(|row| row.iter().cloned()).collect::<Vec<_>>();\n\
    \        sort_cols(&mut cols);\n        let mut result = vec![];\n        for\
    \ row in rows {\n            for col in cols {\n                if col == x {\n\
    \                    result.push((row, col));\n                }\n           \
    \ }\n        }\n        result\n    }", "    let mut row: Vec<(isize, isize)>\
    \ = vec![];\n    let mut row_idx: usize = 0;\n    let mut col_num: usize = 0;\n\
    \    let mut col_num2: usize = 0;\n    let mut row_len: usize = 0;\n    let mut\
    \ col_len: usize = 0;\n    let mut row_idx2: usize = 0;\n    let mut col_num3:\
    \ usize = 0;\n    let mut row_idx3: usize = 0;\n    let mut col_num4: usize =\
    \ 0;\n    let mut row_idx4: usize = 0;\n    let mut col_num5: usize = 0;\n   \
    \ let mut row_idx5: usize = 0;\n    let mut col_num6: usize = 0;\n    let mut\
    \ row_idx6: usize = 0;\n    let mut col_num7: usize = 0;\n    let mut row_idx7:\
    \ usize = 0;\n    let mut col_num8: usize = 0;\n    let mut row_idx8: usize =\
    \ 0;\n    let mut col_num9: usize = 0;\n    let mut row_idx9: usize = 0;\n   \
    \ let mut col_num10: usize = 0;\n    let mut row_idx10: usize = 0;\n    let mut\
    \ col_num11: usize = 0;\n    let mut row_idx11: usize = 0;\n    let mut col_num12:\
    \ usize = 0;\n    let mut row_idx12: usize = 0;\n    let mut col_num13: usize\
    \ = 0;\n    let mut row_idx13: usize = 0;\n    let mut col_num14: usize = 0;\n\
    \    let mut row_idx14: usize = 0;\n    let mut col_num15: usize = 0;\n    let\
    \ mut row_idx15: usize = 0;\n    let mut col_num16: usize = 0;\n    let mut row_idx16:\
    \ usize = 0;\n    let mut col_num17: usize = 0;\n    let mut row_idx17: usize\
    \ = 0;\n    let mut col_num18: usize = 0;\n    let mut row_idx18: usize = 0;\n\
    \    let mut col_num19: usize = 0;\n    let mut row_idx19: usize = 0;\n    let\
    \ mut col_num20: usize = 0;\n    let mut row_idx20: usize = 0;\n    let mut col_num21:\
    \ usize = 0;\n    let mut row_idx21: usize = 0;\n    let mut col_num22: usize\
    \ = 0;\n    let mut row_idx22: usize = 0;\n    let ", "    if lst.is_empty() {\n\
    \        vec![]\n    } else {\n        let mut rows = vec![];\n        let mut\
    \ cols = vec![];\n        for row in lst {\n            let mut row_cols = vec![];\n\
    \            for col in row.iter().cloned() {\n                if col == x {\n\
    \                    row_cols.push((col, row.len()));\n                }\n   \
    \         }\n            rows.push(row_cols);\n            cols.push(row_cols.iter().cloned().collect::<Vec<_>>().reverse());\n\
    \        }\n        vec![\n            rows.iter().cloned().collect::<Vec<_>>().reverse().cloned(),\n\
    \            cols.iter().cloned().collect::<Vec<_>>().reverse().cloned(),\n  \
    \      ]\n    }", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let\
    \ mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n\
    \    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut row_len_idx_idx = 0;\n    let mut row_len_idx_len\
    \ = 0;\n    let mut row_len_idx_len_idx = 0;\n    let mut row_len_idx_len_idx_idx\
    \ = 0;\n    let mut row_len_idx_len_idx_len = 0;\n    let mut row_len_idx_len_idx_len_idx\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_idx = 0;\n    let mut row_len_idx_len_idx_len_idx_len\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_idx\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len = 0;\n    let mut\
    \ row_len_idx_len_idx_len_idx_len_idx_len_idx = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_idx\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len = 0;\n   \
    \ let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx = 0;\n    let mut\
    \ row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\
    \ = 0;\n    let mut row_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    for row in 0..rows {\n        let mut cols = lst[row].len();\n\
    \        for col in 0..cols {\n            if lst[row][col] == x {\n         \
    \       coords.push((row, col));\n            }\n        }\n    }\n    coords.sort_by_key(|&(x,\
    \ y)| x.0);\n    coords.sort_by_key(|&(x, y)| y.0);\n    coords.iter().map(|&(x,\
    \ y)| vec![(x.0, y.0)]).collect()", "    if lst.is_empty() {\n        Vec::new()\n\
    \    } else {\n        let mut rows = lst.len();\n        let mut cols = lst[0].len();\n\
    \        let mut coords = vec![];\n        let mut row_coords = vec![];\n    \
    \    let mut col_coords = vec![];\n        let mut row_sorted = vec![];\n    \
    \    let mut col_sorted = vec![];\n        let mut row_sort = vec![];\n      \
    \  let mut col_sort = vec![];\n        let mut row_sort_idx = vec![];\n      \
    \  let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n  \
    \      let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n\
    \        let mut col_sort_idx = vec![];\n        let mut row_sort_idx = vec![];\n",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    let mut col_pos_idx = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut col_pos_len = 0;\n    let mut col_pos_len_idx = 0;\n    let\
    \ mut row_pos_len = 0;\n    let mut row_pos_len_idx = 0;\n    let mut row_pos_len_idx\
    \ = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut row_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n    let mut\
    \ row_pos_len_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx\
    \ = 0;\n    let mut row_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n \
    \   let mut row_pos_len_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n    let mut row_pos_len_idx\
    \ = 0;\n    let mut row_pos_len_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut col_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n    let mut\
    \ row_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n    let mut col_pos_len_idx\
    \ = 0;\n    let mut col_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n \
    \   let mut row_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut row_pos_len_idx\
    \ = 0;\n    let mut row_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n \
    \   let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ row_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n    let mut row_pos_len_idx\
    \ = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut row_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n    let mut\
    \ row_pos_len_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx\
    \ = 0;\n    let mut row_pos_len_idx = 0;\n    let mut row_pos_len_idx = 0;\n \
    \   let mut row_", "    let mut result = vec![];\n    let mut row_idx = 1;\n \
    \   let mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    while row_idx < row_len {\n        let mut row_start =\
    \ row_idx;\n        let mut row_end = row_idx;\n        let mut col_start = col_idx;\n\
    \        let mut col_end = col_idx;\n        while row_end < row_len && col_end\
    \ < col_len {\n            if lst[row_end][col_end] < x {\n                row_end\
    \ += 1;\n            } else {\n                col_end += 1;\n            }\n\
    \        }\n        result.push((row_start, col_start));\n        result.push((row_end,\
    \ col_end));\n        row_idx += 1;\n        col_idx += 1;\n    }\n    result.sort();\n\
    \    result.sort_by_key(|&(x, y)| {\n        let mut x_idx = 1;\n        let mut\
    \ y_idx = 1;\n        while x_idx < x.len() && y_idx < y.len() {\n           \
    \ if x[x_idx] < y[y_idx] {\n                x_idx += 1;\n            } else {\n\
    \                y_idx += 1;\n            }\n        }\n        x_idx - y_idx\n\
    \    });\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n \
    \   let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \    }\n    for row in lst {\n        col_idx = 0;\n        for col in row {\n\
    \            if col == x {\n                row.insert(row_idx, (row_idx, col_idx));\n\
    \                row_idx += 1;\n                break;\n            }\n      \
    \      col_idx += 1;\n        }\n    }\n    row.sort_by_key(|&(_, y)| y.0);\n\
    \    row.sort_by_key(|&(_, y)| y.1);\n    row", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sor", "    let mut result = Vec::<(isize,\
    \ isize)>::new();\n    for row in lst {\n        let mut row_result = Vec::<(isize,\
    \ isize)>::new();\n        for (i, v) in row.iter().enumerate() {\n          \
    \  if i == x {\n                row_result.push((i, v));\n            }\n    \
    \    }\n        result.push(row_result);\n    }\n    result.sort_by_key(|x| x.0);\n\
    \    result.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n    result", "    let\
    \ mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sor",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    for row in lst {\n        let mut col_max = 0;\n\
    \        for col in row {\n            if col > col_max {\n                col_max\
    \ = col;\n            }\n        }\n        if col_max > x {\n            break;\n\
    \        }\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.", "    let mut row:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_", "    let mut result = Vec::<(isize, isize)>::new();\n\
    \    for row in lst {\n        let mut row_result = Vec::<(isize, isize)>::new();\n\
    \        for (i, elem) in row.iter().enumerate() {\n            if i == x {\n\
    \                row_result.push((i, elem));\n            }\n        }\n     \
    \   result.push(row_result);\n    }\n    result.sort_by_key(|&(_, y)| y.0);\n\
    \    result.sort_by_key(|&(_, y)| -y.1);\n    result", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    for row in\
    \ lst {\n        let mut cols = row.len();\n        for col in row {\n       \
    \     if col == x {\n                coords.push((row, col));\n            }\n\
    \            cols -= 1;\n        }\n        rows -= 1;\n    }\n    coords.sort_by_key(|&(_,\
    \ col)| col);\n    coords.sort_by_key(|&(_, col)| -col);\n    coords", "    let\
    \ mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_start = 0;\n   \
    \ for row in lst {\n        row_len += row.len();\n        if row_len == x {\n\
    \            row_idx += 1;\n            row_len = 0;\n        }\n    }\n    for\
    \ row in lst {\n        col_len += row.len();\n        if col_len == x {\n   \
    \         col_start = row.len() - 1;\n            col_len = 0;\n        }\n  \
    \  }\n    for row in lst {\n        for col in row.iter().rev() {\n          \
    \  if col == x {\n                row.swap(row_idx, col_start);\n            \
    \    row_idx -= 1;\n                col_start -= 1;\n                col_len -=\
    \ 1;\n            }\n        }\n    }\n    row", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted_idx = vec![];\n    let\
    \ mut col_sorted_idx = vec![];\n    let mut row_sorted_idx_start = vec![];\n \
    \   let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end = vec![];\n\
    \    let mut col_sorted_idx_end = vec![];\n    let mut row_sorted_idx_start =\
    \ vec![];\n    let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end\
    \ = vec![];\n    let mut col_sorted_idx_end = vec![];\n    let mut row_sorted_idx_start\
    \ = vec![];\n    let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end\
    \ = vec![];\n    let mut col_sorted_idx_end = vec![];\n    let mut row_sorted_idx_start\
    \ = vec![];\n    let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end\
    \ = vec![];\n    let mut col_sorted_idx_end = vec![];\n    let mut row_sorted_idx_start\
    \ = vec![];\n    let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end\
    \ = vec![];\n    let mut col_sorted_idx_end = vec![];\n    let mut row_sorted_idx_start\
    \ = vec![];\n    let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end\
    \ = vec![];\n    let mut col_sorted_idx_end = vec![];\n    let mut row_sorted_idx_start\
    \ = vec![];\n    let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end\
    \ = vec![];\n    let mut col_sorted_idx_end = vec![];\n    let mut row_sorted_idx_start\
    \ = vec![];\n    let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end\
    \ = vec![];\n    let mut col_sorted_idx_end = vec![];\n    let mut row_sorted_idx_start\
    \ = vec![];\n    let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end\
    \ = vec![];\n    let mut col_sorted_idx_end = vec![];\n    let mut row_sorted_idx_start\
    \ = vec![];\n    let mut col_sorted_idx_start = vec![];\n    let mut row_sorted_idx_end\
    \ = ", "    let mut result = Vec::<(isize, isize)>::new();\n    let mut rows =\
    \ lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n   \
    \ let mut col_idx = 0;\n    while row_idx < rows {\n        let mut row_coord\
    \ = vec![];\n        while col_idx < cols {\n            if row_idx == row_idx\
    \ {\n                row_coord.push((row_idx, col_idx));\n            }\n    \
    \        if row_idx < rows && col_idx < cols {\n                if lst[row_idx][col_idx]\
    \ == x {\n                    row_coord.push((row_idx, col_idx));\n          \
    \          break;\n                }\n            }\n            col_idx++;\n\
    \        }\n        result.push(row_coord);\n        row_idx++;\n        col_idx\
    \ = 0;\n    }\n    result.sort_by_key(|&(_, y)| y.0);\n    result.sort_by_key(|&(_,\
    \ y)| -y.1);\n    result", "    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sor", "    let mut result = Vec::<(isize, isize)>::new();\n\
    \    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_idx = 1;\n        while col_idx < col_len {\n            if row_idx\
    \ == row_len {\n                break;\n            }\n            if col_idx\
    \ == col_len {\n                break;\n            }\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                row_idx\
    \ += 1;\n                col_idx += 1;\n            } else {\n               \
    \ col_idx += 1;\n            }\n        }\n        row_len += 1;\n        col_len\
    \ += 1;\n    }\n    result.sort_by_key(|&(_, y)| y.0);\n    result.sort_by_key(|&(_,\
    \ y)| -y.0);\n    result", "    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n\
    \    let mut col_coords = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n", "    let mut row: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut\
    \ col_len = 0;\n    for row in lst {\n        row_len += row.len();\n        if\
    \ row_len > x {\n            break;\n        }\n        col_len = row.len();\n\
    \        if col_len > x {\n            break;\n        }\n    }\n    for row in\
    \ lst {\n        let mut row_idx = 0;\n        let mut row_len = 0;\n        let\
    \ mut col_len = 0;\n        for col in row {\n            row_len += 1;\n    \
    \        if row_len > x {\n                break;\n            }\n           \
    \ col_len += 1;\n            if col_len > x {\n                break;\n      \
    \      }\n            row_idx += 1;\n        }\n        row.push(row_idx, col_len);\n\
    \    }\n    row.sort_by_key(|&(_, y)| y.reverse());\n    row.sort_by_key(|&(_,\
    \ y)| y.reverse());\n    row", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n\
    \    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 =\
    \ 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9\
    \ = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut ",
  "    let mut lst = lst.clone();\n    let mut row = 0;\n    let mut col = 0;\n  \
    \  while row < lst.len() {\n        let mut found = false;\n        for y in 0..row.len()\
    \ {\n            if lst[row][y] == x {\n                found = true;\n      \
    \          break;\n            }\n        }\n        if found {\n            return\
    \ vec![(0, row), (1, col), (row, col)].into_iter().collect();\n        }\n   \
    \     row += 1;\n        col += 1;\n    }\n    vec![]", "    let mut result =\
    \ vec![];\n    for row in lst {\n        let mut row_result = vec![];\n      \
    \  for col in row.iter().rev() {\n            if col == x {\n                row_result.push((row.len(),\
    \ col.len()));\n            }\n        }\n        result.push(row_result);\n \
    \   }\n    result.sort_by_key(|row| row[0].cmp(&row[1]));\n    result.sort_by_key(|row|\
    \ row[1].cmp(&row[0]));\n    result", "    let mut row: Vec<(isize, isize)> =\
    \ Vec::new();\n    let mut row_idx = 0;\n    let mut col_max = lst[0].len();\n\
    \    let mut col_min = col_max - 1;\n    let mut row_max = lst[0].len();\n   \
    \ let mut row_min = row_max - 1;\n    let mut row_idx = 0;\n    for row in lst\
    \ {\n        row_idx = row.iter().enumerate().filter(|&(i, _)| i == x).count();\n\
    \        if row_idx > 0 {\n            row_idx -= 1;\n        }\n        let mut\
    \ col_max = row.len();\n        let mut col_min = col_max - 1;\n        for col\
    \ in row {\n            col_max = col.max();\n            col_min = col.min();\n\
    \            if col == x {\n                row.push((row_idx, col_max));\n  \
    \          }\n        }\n        if row_idx > 0 {\n            row_idx -= 1;\n\
    \        }\n    }\n    row.sort_by_key(|&(_, y)| y.cmp(&row_min));\n    row.sort_by_key(|&(_,\
    \ y)| y.cmp(&row_max));\n    row", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_max = 0;\n    for row in lst {\n  \
    \      let mut col_max = 0;\n        for col in row {\n            if col > col_max\
    \ {\n                col_max = col;\n            }\n        }\n        row_idx\
    \ += 1;\n        for col in row.iter().rev() {\n            if col > col_max {\n\
    \                col_max = col;\n            }\n        }\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|", "    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coord", "    let\
    \ mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut\
    \ col_idx = 0;\n    let mut col_max = lst[0].len();\n    for row in lst {\n  \
    \      if row.len() > col_idx {\n            row_idx += 1;\n            col_idx\
    \ = 0;\n        }\n        if col_idx > col_max {\n            col_max = row.len();\n\
    \        }\n        if row[col_idx] == x {\n            row.push((row_idx, col_idx));\n\
    \        }\n        col_idx += 1;\n    }\n    row.sort_by_key(|&(_, y)| y.cmp(&x));\n\
    \    row.sort_by_key(|&(_, y)| y.cmp(&-x));\n    row", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n\
    \    let mut row_idx_min = 0;\n    let mut col_max = 0;\n    let mut col_min =\
    \ 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    for row\
    \ in lst {\n        let row_len = row.len();\n        if row_len > row_idx_max\
    \ {\n            row_idx_max = row_len;\n        }\n        if row_len < row_idx_min\
    \ {\n            row_idx_min = row_len;\n        }\n        for col in row {\n\
    \            if col > col_max {\n                col_max = col;\n            \
    \    col_max_idx = col;\n            }\n            if col < col_min {\n     \
    \           col_min = col;\n                col_min_idx = col;\n            }\n\
    \        }\n    }\n    let mut row_max = row_idx_max;\n    let mut row_min = row_idx_min;\n\
    \    let mut col_max = col_max;\n    let mut col_min = col_min;\n    let mut col_max_idx\
    \ = col_max_idx;\n    let mut col_min_idx = col_min_idx;\n    for row in lst {\n\
    \        let row_len = row.len();\n        if row_len > row_max {\n          \
    \  row_max = row_len;\n        }\n        if row_len < row_min {\n           \
    \ row_min = row_len;\n        }\n        for col in row {\n            if col\
    \ > col_max {\n                col_max = col;\n                col_max_idx = col;\n\
    \            }\n            if col < col_min {\n                col_min = col;\n\
    \                col_min_idx = col;\n            }\n        }\n    }\n    let\
    \ mut row_range = row_max - row_min + 1;\n    let mut col_range = col_max - col_min\
    \ + 1;\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut row_idx_min = 0;\n    let mut col_max = 0;\n    let mut col_min\
    \ = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut\
    \ row_idx_min = 0;\n    let mut row_idx_max = 0;\n    let mut col_min = 0;\n \
    \   let mut col_max = 0;\n    let mut col_min_idx = 0;\n    let mut col_max_idx\
    \ = 0;\n    let mut row_idx_min = 0;\n    let mut row_idx_max = 0;\n    let mut\
    \ col_min = 0;\n    let mut col_max = 0;\n    let mut col_min_idx = 0;\n    let\
    \ mut col_max_idx = 0;\n    let mu", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len\
    \ = 0;\n    let mut col_pos_len_idx = 0;\n    let mut row_len_idx = 0;\n    let\
    \ mut row_len_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut col_pos_len_idx_idx = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_idx_idx = 0;\n    let\
    \ mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx_idx = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_idx_idx = 0;\n    let\
    \ mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx_idx = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_idx_idx = 0;\n    let\
    \ mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx_idx = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_idx_idx = 0;\n    let\
    \ mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_", "    let mut result\
    \ = Vec::new();\n    for row in lst {\n        let mut row_result = Vec::new();\n\
    \        for el in row {\n            if el == x {\n                row_result.push((row,\
    \ el));\n            }\n        }\n        result.push(row_result);\n    }\n \
    \   result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let\
    \ mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n  \
    \  let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n\
    \    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut ",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    for row in lst {\n        let mut col_max = 0;\n\
    \        for col in row {\n            if col > col_max {\n                col_max\
    \ = col;\n            }\n        }\n        row_idx += 1;\n        if row_idx\
    \ == x {\n            break;\n        }\n    }\n    let mut col_min = 0;\n   \
    \ for row in lst {\n        let mut col_min = 0;\n        for col in row {\n \
    \           if col < col_min {\n                col_min = col;\n            }\n\
    \        }\n        row_idx += 1;\n        if row_idx == x {\n            break;\n\
    \        }\n    }\n    let mut row_max = row_idx;\n    let mut col_min = col_max;\n\
    \    for row in lst {\n        let mut col_min = col_max;\n        for col in\
    \ row {\n            if col < col_min {\n                col_min = col;\n    \
    \        }\n        }\n        row_max += 1;\n        if row_max == x {\n    \
    \        break;\n        }\n    }\n    let mut row_min = row_idx;\n    let mut\
    \ col_max = col_min;\n    for row in lst {\n        let mut col_max = col_min;\n\
    \        for col in row {\n            if col > col_max {\n                col_max\
    \ = col;\n            }\n        }\n        row_min += 1;\n        if row_min\
    \ == x {\n            break;\n        }\n    }\n    let mut row_max = row_idx;\n\
    \    let mut col_min = col_max;\n    for row in lst {\n        let mut col_min\
    \ = col_max;\n        for col in row {\n            if col > col_min {\n     \
    \           col_min = col;\n            }\n        }\n        row_max += 1;\n\
    \        if row_max == x {\n            break;\n        }\n    }\n    let mut\
    \ row_min = row_idx;\n    let mut col_max = col_min;\n    for row in lst {\n \
    \       let mut col_max = col_min;\n        for col in row {\n            if col\
    \ < col_max {\n                col_max = col;\n            }\n        }\n    \
    \    row_min += 1;\n        if row_min == x {\n            break;\n        }\n\
    \    }\n    let mut row_max = row_idx;\n    let mut col_min = col_max;\n    for\
    \ row in lst {\n        let mut col_min = col_max;\n        for col in row {\n\
    \            if col < col_min {\n                col_min = col;\n            }\n\
    \        }\n        row_max += 1;\n        if row_max == x {\n            break;",
  "    let mut result = vec![];\n    for row in lst {\n        let mut row = row.clone();\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| -x.1);\n   \
    \     for row in row.iter().rev() {\n            if row.1 == x {\n           \
    \     result.push((row.0, row.1));\n            }\n        }\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| -x.1);\n    result", "    let mut\
    \ result = Vec::new();\n    for row in lst {\n        let mut row_result = Vec::new();\n\
    \        for col in row.iter().rev() {\n            if col == x {\n          \
    \      row_result.push((row, col));\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by_key(|row| row.iter().rev());\n    result.sort_by_key(|row|\
    \ row.iter().rev());\n    result", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut result = Vec::new();\n    let mut row_idx\
    \ = 1;\n    let mut col_idx = 1;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_start = 0;\n    let mu", " \
    \   let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ col_idx < cols {\n        while row_idx < rows {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                break;\n\
    \            }\n            row_idx += 1;\n        }\n        col_idx += 1;\n\
    \    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)|\
    \ y.0);\n    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n\
    \    let mut row_sorted_idx2 = vec![];\n    let mut col_sorted_idx2 = vec![];\n\
    \    let mut row_sorted_idx3 = vec![];\n    let mut col_sorted_idx3 = vec![];\n\
    \    let mut row_sorted_idx4 = vec![];\n    let mut col_sorted_idx4 = vec![];\n\
    \    let mut row_sorted_idx5 = vec![];\n    let mut col_sorted_idx5 = vec![];\n\
    \    let mut row_sorted_idx6 = vec![];\n    let mut col_sorted_idx6 = vec![];\n\
    \    let mut row_sorted_idx7 = vec![];\n    let mut col_sorted_idx7 = vec![];\n\
    \    let mut row_sorted_idx8 = vec![];\n    let mut col_sorted_idx8 = vec![];\n\
    \    let mut row_sorted_idx9 = vec![];\n    let mut col_sorted_idx9 = vec![];\n\
    \    let mut row_sorted_idx10 = vec![];\n    let mut col_sorted_idx10 = vec![];\n\
    \    let mut row_sorted_idx11 = vec![];\n    let mut col_sorted_idx11 = vec![];\n\
    \    let mut row_sorted_idx12 = vec![];\n    let mut col_sorted_idx12 = vec![];\n\
    \    let mut row_sorted_idx13 = vec![];\n    let mut col_sorted_idx13 = vec![];\n\
    \    let mut row_sorted_idx14 = vec![];\n    let mut col_sorted_idx14 = vec![];\n\
    \    let mut row_sorted_idx15 = vec![];\n    let mut col_sorted_idx15 = vec![];\n\
    \    let mut row_sorted_idx16 = vec![];\n    let mut col_sorted_idx16 = vec![];\n\
    \    let mut row_sorted_idx17 = vec![];\n    let mut col_sorted_idx17 = vec![];\n\
    \    let mut row_sorted_idx18 = vec![];\n    let mut col_sorted_idx18 = vec![];\n\
    \    let mut row_sorted_idx19 = vec![];\n    let mut col_sorted_idx19 = vec![];\n\
    \    let mut row_sorted_idx20 = vec![];\n    let mut ", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut result = vec![];\n    let mut row_idx\
    \ = 1;\n    let mut col_idx = 1;\n    let mut row_start = 0;\n    let mut col_start\
    \ = 0;\n    while row_idx < rows {\n        let mut row_end = row_start;\n   \
    \     while col_idx < cols {\n            if row_end == row_idx {\n          \
    \      row_end = row_idx;\n                col_idx = 0;\n            }\n     \
    \       if row_end == row_idx && col_idx < cols {\n                row_end = row_idx;\n\
    \                col_idx++;\n            }\n            if row_end == row_idx\
    \ && col_idx > cols {\n                row_end = row_idx;\n                col_idx--;\n\
    \            }\n            if row_end == row_idx && col_idx == cols {\n     \
    \           row_end = row_idx;\n                col_idx = 0;\n            }\n\
    \            if row_end == row_idx && col_idx < cols {\n                row_end\
    \ = row_idx;\n                col_idx++;\n            }\n            if row_end\
    \ == row_idx && col_idx > cols {\n                row_end = row_idx;\n       \
    \         col_idx--;\n            }\n            if row_end == row_idx && col_idx\
    \ == cols {\n                row_end = row_idx;\n                col_idx = 0;\n\
    \            }\n            if row_end == row_idx && col_idx < cols {\n      \
    \          row_end = row_idx;\n                col_idx++;\n            }\n   \
    \         if row_end == row_idx && col_idx > cols {\n                row_end =\
    \ row_idx;\n                col_idx--;\n            }\n            if row_end\
    \ == row_idx && col_idx == cols {\n                row_end = row_idx;\n      \
    \          col_idx = 0;\n            }\n            if row_end == row_idx && col_idx\
    \ < cols {\n                row_end = row_idx;\n                col_idx++;\n \
    \           }\n            if row_end == row_idx && col_idx > cols {\n       \
    \         row_end = row_idx;\n                col_idx--;\n            }\n    \
    \        if row_end == row_idx && col_idx == cols {\n                row_end =\
    \ row_idx;\n                col_idx = 0;\n            }\n            if row_end\
    \ == row_idx && col_idx < cols {\n                row_end = row_idx;\n       \
    \         col_idx++;\n            }\n            if row_end == row_idx && col_idx\
    \ > cols {\n                row_end = row_idx;\n                col_idx--;\n \
    \           }\n            if row_end == row_idx && col_idx == cols {\n      \
    \          row_end = row_idx;\n                col_idx = 0;\n            }\n \
    \           if row_end == row_idx && col_id", "    let mut result = Vec::new();\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_max = rows;\n    let\
    \ mut col_max = cols;\n    while row_idx < rows {\n        let mut row_min = row_idx;\n\
    \        while row_min < rows && lst[row_min][col_idx] < x {\n            row_min\
    \ += 1;\n        }\n        let mut col_min = col_idx;\n        while col_min\
    \ < cols && lst[row_idx][col_min] > x {\n            col_min += 1;\n        }\n\
    \        result.push((row_min, col_min));\n        if col_min == col_max {\n \
    \           row_max -= 1;\n            col_idx = 1;\n            col_max = cols;\n\
    \        } else {\n            col_idx -= 1;\n            col_max = cols;\n  \
    \      }\n        row_idx += 1;\n    }\n    result", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut result = Vec::new();\n    let mut\
    \ row_idx = 1;\n    let mut col_idx = 1;\n    while col_idx < cols {\n       \
    \ if row_idx == rows {\n            result.push((row_idx, col_idx));\n       \
    \     break;\n        }\n        let mut found = false;\n        for row in lst\
    \ {\n            if row[row_idx] == x {\n                found = true;\n     \
    \           break;\n            }\n        }\n        if found {\n           \
    \ result.push((row_idx, col_idx));\n            row_idx++;\n            col_idx++;\n\
    \        } else {\n            col_idx++;\n        }\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while col_idx < cols\
    \ {\n        if row_idx == rows {\n            result.push((row_idx, col_idx));\n\
    \            break;\n        }\n        let mut row_value = vec![0; cols];\n \
    \       for row_idx in 0..rows {\n            row_value[col_idx] = lst[row_idx][col_idx];\n\
    \            col_idx++;\n            if col_idx >= cols {\n                col_idx\
    \ = 0;\n                row_idx++;\n            }\n        }\n        if row_value[x]\
    \ < row_value[x + 1] {\n            result.push((row_idx, col_idx));\n       \
    \ }\n        col_idx++;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        if row_idx >= row_len {\n            break;\n        }\n        for col\
    \ in row {\n            col_len += 1;\n            if col_idx >= col_len {\n \
    \               break;\n            }\n            if col == x {\n           \
    \     row.swap(row_idx, col_idx);\n                row_idx += 1;\n           \
    \     col_idx -= 1;\n            }\n        }\n    }\n    row", "    let mut rows:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_idx2 = 0;\n    let mut col_idx2 = 0;\n    for row in lst\
    \ {\n        if row_idx == x {\n            rows.push(vec![(row_idx, col_idx)]);\n\
    \            row_idx++;\n            col_idx = 0;\n        }\n        for col\
    \ in row {\n            if col_idx == x {\n                rows.push(vec![(row_idx,\
    \ col_idx)]);\n                row_idx++;\n                col_idx++;\n      \
    \      }\n            if col_idx2 == x {\n                rows.push(vec![(row_idx,\
    \ col_idx)]);\n                row_idx++;\n                col_idx++;\n      \
    \          col_idx2 = 0;\n            }\n            if col_idx2 == col {\n  \
    \              rows.push(vec![(row_idx, col_idx)]);\n                row_idx++;\n\
    \                col_idx++;\n                col_idx2++;\n            }\n    \
    \    }\n    }\n    rows", "    if lst.is_empty() {\n        vec![]\n    } else\
    \ {\n        let mut rows = lst.len();\n        let mut cols = lst[0].len();\n\
    \        let mut coords = vec![];\n        let mut row = 0;\n        let mut col\
    \ = 0;\n        while row < rows {\n            while col < cols {\n         \
    \       if lst[row][col] == x {\n                    coords.push((row, col));\n\
    \                    break;\n                }\n                col += 1;\n  \
    \          }\n            row += 1;\n            col = 0;\n        }\n       \
    \ coords.sort_by_key(|&(_, y)| y.cmp(&x));\n        coords.sort_by_key(|&(_, y)|\
    \ y.cmp(x.reverse()));\n        coords\n    }", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n\
    \    let mut row_idx_min = 0;\n    let mut row_idx_max_idx = 0;\n    let mut row_idx_min_idx\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx\
    \ = 0;\n    let mut col_min_idx = 0;\n    let mut row_max = 0;\n    let mut row_min\
    \ = 0;\n    let mut row_max_idx = 0;\n    let mut row_min_idx = 0;\n    let mut\
    \ col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let\
    \ mut col_min_idx = 0;\n    let mut row_max = 0;\n    let mut row_min = 0;\n \
    \   let mut row_max_idx = 0;\n    let mut row_min_idx = 0;\n    let mut col_max\
    \ = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx\
    \ = 0;\n    let mut row_max = 0;\n    let mut row_min = 0;\n    let mut row_max_idx\
    \ = 0;\n    let mut row_min_idx = 0;\n    let mut col_max = 0;\n    let mut col_min\
    \ = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut\
    \ row_max = 0;\n    let mut row_min = 0;\n    let mut row_max_idx = 0;\n    let\
    \ mut row_min_idx = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n \
    \   let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut row_max\
    \ = 0;\n    let mut row_min = 0;\n    let mut row_max_idx = 0;\n    let mut row_min_idx\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx\
    \ = 0;\n    let mut col_min_idx = 0;\n    let mut row_max = 0;\n    let mut row_min\
    \ = 0;\n    let mut row_max_idx = 0;\n    let mut row_min_idx = 0;\n    let mut\
    \ col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let\
    \ mut col_min_idx = 0;\n    let mut row_max = 0;\n    let mut row_min = 0;\n \
    \   let mut row_max_idx = 0;\n    let mut row_min_idx = 0;\n    let mut col_max\
    \ = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx\
    \ = 0;\n    let mut ", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut result = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_idx2 = vec![];\n    let mut col_idx2 = vec![];\n    let mut row_sorted2\
    \ = vec![];\n    let mut col_sorted2 = vec![];\n    let mut row_idx3 = vec![];\n\
    \    let mut col_idx3 = vec![];\n    let mut row_sorted3 = vec![];\n    let mut\
    \ col_sorted3 = vec![];\n    let mut row_idx4 = vec![];\n    let mut col_idx4\
    \ = vec![];\n    let mut row_sorted4 = vec![];\n    let mut col_sorted4 = vec![];\n\
    \    let mut row_idx5 = vec![];\n    let mut col_idx5 = vec![];\n    let mut row_sorted5\
    \ = vec![];\n    let mut col_sorted5 = vec![];\n    let mut row_idx6 = vec![];\n\
    \    let mut col_idx6 = vec![];\n    let mut row_sorted6 = vec![];\n    let mut\
    \ col_sorted6 = vec![];\n    let mut row_idx7 = vec![];\n    let mut col_idx7\
    \ = vec![];\n    let mut row_sorted7 = vec![];\n    let mut col_sorted7 = vec![];\n\
    \    let mut row_idx8 = vec![];\n    let mut col_idx8 = vec![];\n    let mut row_sorted8\
    \ = vec![];\n    let mut col_sorted8 = vec![];\n    let mut row_idx9 = vec![];\n\
    \    let mut col_idx9 = vec![];\n    let mut row_sorted9 = vec![];\n    let mut\
    \ col_sorted9 = vec![];\n    let mut row_idx10 = vec![];\n    let mut col_idx10\
    \ = vec![];\n    let mut row_sorted10 = vec![];\n    let mut col_sorted10 = vec![];\n\
    \    let mut row_idx11 = vec![];\n    let mut col_idx11 = vec![];\n    let mut\
    \ row_sorted11 = vec![];\n    let mut col_sorted11 = vec![];\n    let mut row_idx12\
    \ = vec![];\n    let mut col_idx12 = vec![];\n    let mut row_sorted12 = vec![];\n\
    \    let mut col_sorted12 = vec![];\n    let mut row_idx13 = vec", "    let mut\
    \ result = Vec::<(isize, isize)>::new();\n    for row in lst {\n        let mut\
    \ row_result = Vec::<(isize, isize)>::new();\n        for (i, v) in row.iter().enumerate()\
    \ {\n            if i == x {\n                row_result.push((i, v));\n     \
    \       }\n        }\n        result.push(row_result);\n    }\n    result.sort_by_key(|&(_,\
    \ v)| v.iter().rev().collect::<Vec<_>>());\n    result.sort_by_key(|&(_, v)| v.iter().collect::<Vec<_>>().rev());\n\
    \    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let\
    \ mut col_coords = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < rows {\n        let mut row_coord = Vec::new();\n        let mut col_coord\
    \ = Vec::new();\n        while j < cols {\n            if lst[i][j] == x {\n \
    \               row_coord.push((i, j));\n                col_coord.push((j, j));\n\
    \                i += 1;\n                j += 1;\n            } else {\n    \
    \            row_coord.push((i, j));\n                col_coord.push((j, j));\n\
    \                i += 1;\n            }\n        }\n        coords.push(row_coord);\n\
    \        coords.push(col_coord);\n    }\n    coords.sort_by_key(|&(_, y)| y.0);\n\
    \    coords.sort_by_key(|&(_, y)| y.1);\n    coords", "    let mut result = vec![];\n\
    \    for row in lst {\n        let mut row_result = vec![];\n        for col in\
    \ row.iter().rev() {\n            if col == x {\n                row_result.push((row.len(),\
    \ col.len()));\n            }\n        }\n        result.push(row_result);\n \
    \   }\n    result.sort_by_key(|row| row[0]);\n    result.sort_by_key(|row| row[1],\
    \ |&(a, b)| {\n        if a.1 < b.1 {\n            1\n        } else {\n     \
    \       -1\n        }\n    });\n    result", "    let mut row: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut col_max = lst.len();\n\
    \    let mut col_min = 0;\n    let mut col_sum = 0;\n    let mut row_sum = 0;\n\
    \    let mut row_idx = 0;\n    let mut col_max = lst.len();\n    let mut col_min\
    \ = 0;\n    let mut col_sum = 0;\n    let mut row_sum = 0;\n    let mut row_idx\
    \ = 0;\n    for row in lst {\n        row_sum += row.len();\n        if row_sum\
    \ == x {\n            break;\n        }\n        row_idx += 1;\n    }\n    for\
    \ col in lst {\n        col_sum += col.len();\n        if col_sum == x {\n   \
    \         break;\n        }\n        col_max += 1;\n    }\n    for row in lst\
    \ {\n        for col in lst {\n            if col[col_min..col_max].iter().any(|&x|\
    \ x == x) {\n                row.push((row_idx, col_min));\n            }\n  \
    \      }\n    }\n    row.sort_by_key(|&x| x.1);\n    row.sort_by_key(|&x| x.1.reverse());\n\
    \    row", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_max = 0;\n    for row in\
    \ lst {\n        let mut col = 0;\n        let mut col_max = 0;\n        for el\
    \ in row {\n            if el == x {\n                row.push(col_max);\n   \
    \             row.push(row_idx);\n                row_idx += 1;\n            \
    \    col += 1;\n                col_max = col;\n            }\n        }\n   \
    \     row.push(col_max);\n        row.push(row_idx);\n        row_idx_max += 1;\n\
    \    }\n    row.sort_by_key(|&el| el[0]);\n    row.sort_by_key(|&el| el[1]).reverse();\n\
    \    row", "    let mut coords = Vec::new();\n    for row in lst {\n        let\
    \ mut coord = vec![];\n        for col in row.iter().rev() {\n            if col\
    \ == x {\n                coord.push((row.len(), col.len()));\n            }\n\
    \        }\n        coords.insert(0, coord);\n    }\n    coords.sort_by(|a, b|\
    \ a.0.cmp(&b.0));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords", " \
    \   let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_", "    let\
    \ mut result = Vec::<(isize, isize)>::new();\n    for row in lst {\n        let\
    \ mut row_result = Vec::<(isize, isize)>::new();\n        for cell in row {\n\
    \            if cell == x {\n                row_result.push((cell, cell));\n\
    \            }\n        }\n        result.push(row_result);\n    }\n    result.sort_by(|a,\
    \ b| a.iter().rev().zip(b).map(|(a, b)| a.1).cmp(&b.1));\n    result", "    let\
    \ mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n        row_len\
    \ += row.len();\n        col_len += row.iter().map(|x| x.len()).sum();\n    }\n\
    \    let mut col_pos = 0;\n    let mut col_pos = col_len.cmp(&row_len);\n    while\
    \ col_pos != 0 {\n        let mut row_pos = 0;\n        let mut row_pos = row_len.cmp(&col_pos);\n\
    \        while row_pos != 0 {\n            let mut i = 0;\n            let mut\
    \ i = row_len.cmp(&col_pos);\n            while i != 0 {\n                let\
    \ mut j = 0;\n                let mut j = col_len.cmp(&row_pos);\n           \
    \     while j != 0 {\n                    let mut k = 0;\n                   \
    \ let mut k = col_len.cmp(&row_pos);\n                    while k != 0 {\n   \
    \                     let mut l = 0;\n                        let mut l = row_len.cmp(&col_pos);\n\
    \                        while l != 0 {\n                            let mut m\
    \ = 0;\n                            let mut m = col_len.cmp(&row_pos);\n     \
    \                       while m != 0 {\n                                let mut\
    \ n = 0;\n                                let mut n = row_len.cmp(&col_pos);\n\
    \                                while n != 0 {\n                            \
    \        let mut o = 0;\n                                    let mut o = row_len.cmp(&col_pos);\n\
    \                                    while o != 0 {\n                        \
    \                let mut p = 0;\n                                        let mut\
    \ p = col_len.cmp(&row_pos);\n                                        while p\
    \ != 0 {\n                                            let mut q = 0;\n       \
    \                                     let mut q = row_len.cmp(&col_pos);\n   \
    \                                         while q != 0 {\n                   \
    \                             let mut r = 0;\n                               \
    \                 let mut r = col_len.cmp(&row_pos);\n                       \
    \                         while r != 0 {\n                                   \
    \                 let mut s = 0;\n                                           \
    \         let mut s = col_len.cmp(&row_pos);\n                               \
    \                     while s != 0 {\n                                       \
    \                 let mut t = 0;\n                                           \
    \             let mut t = row_len.cmp(&col_pos);\n                           \
    \                             while t != 0 {\n                               \
    \                             let mut u = 0;\n                               \
    \                             let mut u = col_len.cmp(&row_pos);\n           \
    \                                                 while u != 0 {\n           \
    \                                                     let mut v = 0;\n       \
    \                                                         let mut v = row_len.cmp(&col_pos);\n\
    \                                                                while v != 0\
    \ {\n                                                                    let mut\
    \ w = 0;\n                                                                   \
    \ let mut w = col_len.cmp", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_start = 0;\n    let mut\
    \ col_start = 0;\n    while row_idx < row_len {\n        if row_idx == row_start\
    \ {\n            row_idx += 1;\n            row_start = row_idx;\n        }\n\
    \        if row_idx == row_len - 1 {\n            row_idx += 1;\n            row_len\
    \ = row_idx;\n        }\n        if col_idx < col_len {\n            if col_idx\
    \ < col_start {\n                col_idx += 1;\n                col_start = col_idx;\n\
    \            }\n            if col_idx == col_len {\n                col_idx +=\
    \ 1;\n                col_len = col_idx;\n            }\n            if lst[row_idx][col_idx]\
    \ == x {\n                row.push((row_idx, col_idx));\n            }\n     \
    \   }\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x, y)|\
    \ -y.0);\n    row", "    let mut rows: Vec<(isize, isize)> = Vec::new();\n   \
    \ let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n \
    \   let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        row_idx += 1;\n        if row_idx > x {\n            break;\n       \
    \ }\n        for col in row {\n            col_len += 1;\n            col_idx\
    \ += 1;\n            if col_idx > x {\n                break;\n            }\n\
    \            rows.push((row_idx, col_idx));\n        }\n    }\n    rows\n    \
    \    .iter()\n        .sort_by(|a, b| a.1.cmp(&b.1))\n        .sort_by(|a, b|\
    \ b.0.cmp(&a.0));", "    let mut row = Vec::<(isize, isize)>::new();\n    let\
    \ mut row_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize,\
    \ isize)>::new();\n    let mut col_sorted_reverse = Vec::<(isize, isize)>::new();\n\
    \    let mut row_sorted_reverse = Vec::<(isize, isize)>::new();\n    let mut row_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted_reverse = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted_reverse = Vec::<(isize, isize)>::new();\n\
    \    let mut row_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted_reverse\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sorted_reverse = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted_reverse = Vec::<(isize, isize)>::new();\n    let mut row_sorted_reverse\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted_reverse = Vec::<(isize, isize)>::new();\n    let mut row_sorted_reverse\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted_reverse = Vec::<(isize, isize)>::new();\n    let mut row_sorted_reverse\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted_reverse = Vec::<(isize, isize)>::new();\n    let mut row_sorted_reverse\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted_reverse = Vec::<(isize, isize)>::new();\n    let mut row_sorted_reverse\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted_reverse = Vec::<(isize, isize)>::new();\n    let mut row_sorted_reverse\
    \ = Vec::<(isize, isize)>::new();\n    let mut ", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let\
    \ mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n \
    \   let mut col_idx_max = 0;\n    let mut col_len = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len = 0;\n    let mut\
    \ row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_idx = 0;\n\
    \    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut col_len = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len = 0;\n    let mut\
    \ row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_idx = 0;\n\
    \    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut col_len = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len = 0;\n    let mut\
    \ row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_idx = 0;\n\
    \    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sort_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_",
  "    let mut result = Vec::new();\n    for row in lst {\n        let mut row_result\
    \ = Vec::new();\n        for col in row.iter().rev() {\n            if col ==\
    \ x {\n                row_result.push((row, col));\n            }\n        }\n\
    \        result.push(row_result);\n    }\n    result.sort_by_key(|row| row.iter().rev());\n\
    \    result.sort_by_key(|row| row.iter().rev());\n    result", "    let mut coords\
    \ = vec![];\n    for row in lst {\n        let mut coord = vec![];\n        for\
    \ elem in row {\n            if elem == x {\n                coord.push((row,\
    \ elem));\n            }\n        }\n        coords.push_back(coord);\n    }\n\
    \    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let\
    \ mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n  \
    \  let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n\
    \    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut ",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut col_coords\
    \ = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sorted\
    \ = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord =\
    \ Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n    let mut i = 0;\n\
    \    let mut j = 0;\n    while i < rows {\n        row_sorted.push(0);\n     \
    \   col_sorted.push(0);\n        row_coord.push(0);\n        col_coord.push(0);\n\
    \        i += 1;\n    }\n    while j < cols {\n        row_sorted.push(0);\n \
    \       col_sorted.push(0);\n        row_coord.push(0);\n        col_coord.push(0);\n\
    \        j += 1;\n    }\n    while i < rows {\n        while j < cols {\n    \
    \        if lst[i][j] == x {\n                row_sorted.push(j);\n          \
    \      col_sorted.push(i);\n                row_coord.push(j);\n             \
    \   col_coord.push(i);\n                i += 1;\n                j += 1;\n   \
    \         } else {\n                i += 1;\n            }\n        }\n    }\n\
    \    while j < cols {\n        while i < rows {\n            if lst[i][j] == x\
    \ {\n                row_sorted.push(j);\n                col_sorted.push(i);\n\
    \                row_coord.push(j);\n                col_coord.push(i);\n    \
    \            i += 1;\n            } else {\n                j += 1;\n        \
    \    }\n        }\n    }\n    for i in 0..row_sorted.len() {\n        row_coord.push(row_sorted[i]);\n\
    \        col_coord.push(col_sorted[i]);\n    }\n    for i in 0..row_coord.len()\
    \ {\n        coords.push((row_coord[i], col_coord[i]));\n    }\n    coords", " \
    \   let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut row_len_idx_idx = 0;\n    let mut col_len_idx = 0;\n    let\
    \ mut col_len_idx_idx = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_idx_idx = 0;\n    let\
    \ mut col_pos_len_idx = 0;\n    let mut row_len_idx_idx = 0;\n    let mut row_len_idx_idx_idx\
    \ = 0;\n    let mut col_len_idx_idx = 0;\n    let mut col_len_idx_idx_idx = 0;\n\
    \    let mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut row_len_idx_idx = 0;\n    let mut row_len_idx_idx_idx = 0;\n    let\
    \ mut col_len_idx_idx = 0;\n    let mut col_len_idx_idx_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ row_len_idx_idx = 0;\n    let mut row_len_idx_idx_idx = 0;\n    let mut col_len_idx_idx\
    \ = 0;\n    let mut col_len_idx_idx_idx = 0;\n    let mut row_idx = 0;\n    let\
    \ mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_idx_idx\
    \ = 0;\n    let mut col_pos_len_idx = 0;\n    let mut row_len_idx_idx = 0;\n \
    \   let mut row_len_idx_idx_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let\
    \ mut col_len_idx_idx_idx = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_idx_idx = 0;\n    let\
    \ mut col_pos_len_idx = 0;\n    let mut row_len_idx_idx = 0;\n    let mut row_len_idx_idx_idx\
    \ = 0;\n    let mut col_len_idx_idx = 0;\n    let mut col_len_idx_idx_idx = 0;\n\
    \    let mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_idx_max = 0;\n    let mut col_max = 0;\n    let mut col_min =\
    \ 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut\
    \ row_max_idx = 0;\n    let mut row_min_idx = 0;\n    for row_idx in 0..lst.len()\
    \ {\n        let mut col_max = 0;\n        let mut col_min = 0;\n        let mut\
    \ col_max_idx = 0;\n        let mut col_min_idx = 0;\n        for col_idx in 0..lst[row_idx].len()\
    \ {\n            if col_idx > col_max {\n                col_max = col_idx;\n\
    \                col_max_idx = col_idx;\n            }\n            if col_idx\
    \ < col_min {\n                col_min = col_idx;\n                col_min_idx\
    \ = col_idx;\n            }\n        }\n        if col_max > col_max_idx {\n \
    \           row_max_idx = row_idx;\n        }\n        if col_min < col_min_idx\
    \ {\n            row_min_idx = row_idx;\n        }\n        if row_max_idx > row_idx\
    \ {\n            row.push((row_idx, col_max_idx));\n        }\n        if row_min_idx\
    \ < row_idx {\n            row.push((row_idx, col_min_idx));\n        }\n    }\n\
    \    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n  \
    \  row", "    let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    for row in lst {\n        let mut row_idx\
    \ = 0;\n        let mut col_idx = 0;\n        for el in row {\n            if\
    \ el == x {\n                rows.push((row_idx, col_idx));\n            }\n \
    \           row_idx += 1;\n        }\n        col_idx += 1;\n    }\n    rows\n\
    \        .iter()\n        .sort_by(|a, b| a.1.cmp(&b.1))\n        .sort_by(|a,\
    \ b| b.0.cmp(&a.0));", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sor", "    let mut result = Vec::new();\n    let mut row_idx = 1;\n    let\
    \ mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    while row_idx < row_len {\n        let mut row_idx = 1;\n        while col_idx\
    \ < col_len {\n            if lst[row_idx][col_idx] == x {\n                result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            col_idx += 1;\n\
    \        }\n        row_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n\
    \    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut coords = Vec::new();\n\
    \    let mut rows = Vec::new();\n    let mut cols = Vec::new();\n    for row in\
    \ lst {\n        let mut cols = row.clone();\n        cols.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n\
    \        rows.push(cols);\n    }\n    rows.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n\
    \    for row in rows {\n        let mut cols = row.clone();\n        cols.sort_by_key(|&x|\
    \ x.partial_cmp(&x).reverse());\n        coords.push(cols);\n    }\n    coords.sort_by_key(|&x|\
    \ x.partial_cmp(&x).reverse());\n    let mut coord = coords.iter().cloned().collect::<Vec<_>>();\n\
    \    coord.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n    let mut coord =\
    \ coord.iter().cloned().collect::<Vec<_>>();\n    coord.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n\
    \    let mut coord = coord.iter().cloned().collect::<Vec<_>>();\n    coord.sort_by_key(|&x|\
    \ x.partial_cmp(&x).reverse());\n    let mut coord = coord.iter().cloned().collect::<Vec<_>>();\n\
    \    coord.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n    let mut coord =\
    \ coord.iter().cloned().collect::<Vec<_>>();\n    coord.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n\
    \    let mut coord = coord.iter().cloned().collect::<Vec<_>>();\n    coord.sort_by_key(|&x|\
    \ x.partial_cmp(&x).reverse());\n    let mut coord = coord.iter().cloned().collect::<Vec<_>>();\n\
    \    coord.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n    let mut coord =\
    \ coord.iter().cloned().collect::<Vec<_>>();\n    coord.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n\
    \    let mut coord = coord.iter().cloned().collect::<Vec<_>>();\n    coord.sort_by_key(|&x|\
    \ x.partial_cmp(&x).reverse());\n    let mut coord = coord.iter().cloned().collect::<Vec<_>>();\n\
    \    coord.sort_by_key(|&x| x.partial_cmp(&x).", "    let mut rows = vec![];\n\
    \    let mut cols = vec![];\n    for row in lst {\n        cols.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \    }\n    for col in cols.iter_mut() {\n        col.sort_by(|a, b| a.partial_cmp(b).reverse());\n\
    \    }\n    let mut row_iter = rows.iter();\n    row_iter.sort_by(|a, b| a.partial_cmp(b).reverse());\n\
    \    let mut col_iter = cols.iter();\n    col_iter.sort_by(|a, b| b.partial_cmp(a).reverse());\n\
    \    let mut result = vec![];\n    for row in row_iter {\n        let mut row_result\
    \ = vec![];\n        for col in col_iter {\n            let mut col_result = vec![];\n\
    \            for (row_i, col_i) in row.iter().zip(col.iter()) {\n            \
    \    row_result.push((row_i, col_i));\n            }\n            col_result.sort_by(|a,\
    \ b| b.partial_cmp(a).reverse());\n            row_result.extend(col_result);\n\
    \        }\n        result.push(row_result);\n    }\n    result", "    let mut\
    \ row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut\
    \ row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let\
    \ mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n  \
    \  let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n\
    \    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut ", "    let mut coords = vec![];\n\
    \    let mut rows = vec![];\n    for row in lst {\n        let mut cols = vec![];\n\
    \        for col in row {\n            if col == x {\n                coords.push((row,\
    \ col));\n            }\n            cols.push(col);\n        }\n        rows.push(cols);\n\
    \    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.iter().map(|c| c.0).collect()", "    let mut row: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let\
    \ mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n  \
    \  let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n\
    \    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut ", "    let mut row: Vec<(isize, isize)> = Vec::new();\n \
    \   let mut row_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst.first().len();\n    let mut col_len2 = lst.last().len();\n    let mut\
    \ col_len3 = lst.last().last().len();\n    let mut col_len4 = lst.last().last().last().len();\n\
    \    let mut col_len5 = lst.last().last().last().last().len();\n    let mut col_len6\
    \ = lst.last().last().last().last().last().len();\n    let mut col_len7 = lst.last().last().last().last().last().last().len();\n\
    \    let mut col_len8 = lst.last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len9 = lst.last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len10 = lst.last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len11 = lst.last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len12 = lst.last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len13 = lst.last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len14 = lst.last().last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len15 = lst.last().last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len16 = lst.last().last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len17 = lst.last().last().last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len18 = lst.last().last().last().last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len19 = lst.last().last().last().last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len20 = lst.last().last().last().last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len21 = lst.last().last().last().last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len22 = lst.last().last().last().last().last().last().last().last().last().last().last().last().last().last().last().last().len();\n\
    \    let mut col_len23 = lst.last().last().last().last().last().last().", "  \
    \  let mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        let mut row_coords = vec![];\n        let mut row_cols\
    \ = vec![];\n        for col in row {\n            if col == x {\n           \
    \     row_coords.push((row, col));\n            }\n            row_cols.push((col,\
    \ row));\n        }\n        row_coords.sort_by(|a, b| a.1.cmp(&b.1));\n     \
    \   row_coords.reverse();\n        row_cols.sort_by(|a, b| b.1.cmp(&a.1));\n \
    \       row_cols.reverse();\n        row_coords.reverse();\n        row_cols.reverse();\n\
    \        coords.push(row_coords);\n        rows.push(row_cols);\n        cols.push(row_coords);\n\
    \    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    coords.reverse();\n   \
    \ rows.sort_by(|a, b| b.0.cmp(&a.0));\n    rows.reverse();\n    cols.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n    cols.reverse();\n    coords.reverse();\n    rows.reverse();\n\
    \    cols.reverse();\n    coords", "    if lst.is_empty() {\n        Vec::new()\n\
    \    } else {\n        let mut rows = lst.iter().map(|row| row.iter().cloned()).collect::<Vec<_>>();\n\
    \        sort_rows(&mut rows);\n        let mut cols = rows.iter().map(|row| row.iter().cloned()).collect::<Vec<_>>();\n\
    \        sort_cols(&mut cols);\n        let mut result = vec![];\n        for\
    \ row in 0..rows.len() {\n            for col in 0..cols.len() {\n           \
    \     if col == x {\n                    result.push((row, col));\n          \
    \      }\n            }\n        }\n        result\n    }", "    let mut row =\
    \ Vec::<(isize, isize)>::new();\n    let mut row_idx = 1;\n    let mut row_idx2\
    \ = 1;\n    let mut row_idx3 = 1;\n    let mut row_idx4 = 1;\n    let mut row_idx5\
    \ = 1;\n    let mut row_idx6 = 1;\n    let mut row_idx7 = 1;\n    let mut row_idx8\
    \ = 1;\n    let mut row_idx9 = 1;\n    let mut row_idx10 = 1;\n    let mut row_idx11\
    \ = 1;\n    let mut row_idx12 = 1;\n    let mut row_idx13 = 1;\n    let mut row_idx14\
    \ = 1;\n    let mut row_idx15 = 1;\n    let mut row_idx16 = 1;\n    let mut row_idx17\
    \ = 1;\n    let mut row_idx18 = 1;\n    let mut row_idx19 = 1;\n    let mut row_idx20\
    \ = 1;\n    let mut row_idx21 = 1;\n    let mut row_idx22 = 1;\n    let mut row_idx23\
    \ = 1;\n    let mut row_idx24 = 1;\n    let mut row_idx25 = 1;\n    let mut row_idx26\
    \ = 1;\n    let mut row_idx27 = 1;\n    let mut row_idx28 = 1;\n    let mut row_idx29\
    \ = 1;\n    let mut row_idx30 = 1;\n    let mut row_idx31 = 1;\n    let mut row_idx32\
    \ = 1;\n    let mut row_idx33 = 1;\n    let mut row_idx34 = 1;\n    let mut row_idx35\
    \ = 1;\n    let mut row_idx36 = 1;\n    let mut row_idx37 = 1;\n    let mut row_idx38\
    \ = 1;\n    let mut row_idx39 = 1;\n    let mut row_idx40 = 1;\n    let mut row_idx41\
    \ = 1;\n    let mut row_idx42 = 1;\n    let mut row_idx43 = 1;\n    let mut row_idx44\
    \ = 1;\n    let mut row_idx45 = 1;\n    let mut row_idx46 = 1;\n    let mut row_idx47\
    \ = 1;\n    let mut row_idx48 = 1;\n    let mut row_idx49 = 1;\n    let mut row_idx50\
    \ = 1;\n    let mut row_idx51 = 1;\n    let mut row_idx52 = 1;\n    let mut row_idx53\
    \ = 1;\n    let mut row_idx54 = 1;\n    let mut row_idx55 = 1;\n    let mut row_idx56\
    \ = 1;\n    let mut row_idx57 = 1;\n    let mut row_idx58 = 1;\n    let mut row_idx59\
    \ = 1;\n    let mut row_idx60 = 1;\n    let mut row_idx61 = 1;\n    let mut row_idx62\
    \ = ", "    let mut row = Vec::<(isize, isize)>::new();\n    let mut row_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_reversed = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sor", "    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut row_", "    let mut coords = Vec::new();\n\
    \    let mut rows = Vec::new();\n    let mut cols = Vec::new();\n    for row in\
    \ lst {\n        if row.len() == x {\n            coords.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \            rows.push(row.iter().cloned().collect::<Vec<_>>());\n           \
    \ cols.push(row.iter().cloned().collect::<Vec<_>>());\n        }\n    }\n    coords.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n    rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \    cols.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n    coords.iter().cloned().collect::<Vec<_>>()",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorting = vec![];\n    let mut col_sorting = vec![];\n    let mut row_sorting_index\
    \ = vec![];\n    let mut col_sorting_index = vec![];\n    let mut row_sorting_index2\
    \ = vec![];\n    let mut col_sorting_index2 = vec![];\n    let mut row_sorting_index3\
    \ = vec![];\n    let mut col_sorting_index3 = vec![];\n    let mut row_sorting_index4\
    \ = vec![];\n    let mut col_sorting_index4 = vec![];\n    let mut row_sorting_index5\
    \ = vec![];\n    let mut col_sorting_index5 = vec![];\n    let mut row_sorting_index6\
    \ = vec![];\n    let mut col_sorting_index6 = vec![];\n    let mut row_sorting_index7\
    \ = vec![];\n    let mut col_sorting_index7 = vec![];\n    let mut row_sorting_index8\
    \ = vec![];\n    let mut col_sorting_index8 = vec![];\n    let mut row_sorting_index9\
    \ = vec![];\n    let mut col_sorting_index9 = vec![];\n    let mut row_sorting_index10\
    \ = vec![];\n    let mut col_sorting_index10 = vec![];\n    let mut row_sorting_index11\
    \ = vec![];\n    let mut col_sorting_index11 = vec![];\n    let mut row_sorting_index12\
    \ = vec![];\n    let mut col_sorting_index12 = vec![];\n    let mut row_sorting_index13\
    \ = vec![];\n    let mut col_sorting_index13 = vec![];\n    let mut row_sorting_index14\
    \ = vec![];\n    let mut col_sorting_index14 = vec![];\n    let mut row_sorting_index15\
    \ = vec![];\n    let mut col_sorting_index15 = vec![];\n    let mut row_sorting_index16\
    \ = vec![];\n    let mut col_sorting_index16 = vec![];\n    let mut row_sorting_index17\
    \ = vec![];\n    let mut col_sorting_index17 = vec![];\n    let mut row_sorting_index",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n  \
    \  let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n\
    \    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 =\
    \ 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut row_", "    let mut rows: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_idxs = Vec::new();\n    let mut col_idxs = Vec::new();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n \
    \   let mut col_len = lst[0].len();\n    let mut row_idxs = Vec::new();\n    let\
    \ mut col_idxs = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx =\
    \ 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idxs = Vec::new();\n    let mut col_idxs = Vec::new();\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idxs = Vec::new();\n   \
    \ let mut col_idxs = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idxs = Vec::new();\n    let mut col_idxs = Vec::new();\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idxs = Vec::new();\n   \
    \ let mut col_idxs = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idxs = Vec::new();\n    let mut col_idxs = Vec::new();\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idxs = Vec::new();\n   \
    \ let mut col_idxs = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idxs = Vec::new();\n    let ", "    if lst.is_empty() {\n   \
    \     vec![]\n    } else {\n        let mut row: Vec<(isize, isize)> = vec![];\n\
    \        let mut row_idx = 0;\n        let mut row_len = 0;\n        for row_idx\
    \ in 0..lst.len() {\n            let row_len = lst[row_idx].len();\n         \
    \   if row_len > x {\n                break;\n            }\n            let mut\
    \ row_col: Vec<(isize, isize)> = vec![];\n            for col_idx in 0..row_len\
    \ {\n                if row_col.is_empty() {\n                    row_col.push((row_idx,\
    \ col_idx));\n                } else {\n                    let mut col_len =\
    \ 0;\n                    for col in row_col {\n                        col_len\
    \ += col;\n                    }\n                    if col_len > x {\n     \
    \                   break;\n                    }\n                    row_col.push((row_idx,\
    \ col_idx));\n                }\n            }\n            row.push(row_col);\n\
    \        }\n        row.sort_by_key(|&(_, y)| y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row\n    }", "    let mut lst = lst.clone();\n    let\
    \ mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let\
    \ mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n  \
    \  let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n\
    \    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 =\
    \ 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mu", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sor", "    let mut row = vec![];\n    let mut row_sorted = vec![];\n   \
    \ let mut row_reversed = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut col_", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n\
    \    let mut row_sorted_idx_idx = vec![];\n    let mut col_sorted_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_", "    let mut lst = lst.clone();\n \
    \   let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut col_coords\
    \ = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < rows {\n\
    \        let mut row_coord = Vec::new();\n        let mut col_coord = Vec::new();\n\
    \        while j < cols {\n            if lst[i][j] == x {\n                row_coord.push((i,\
    \ j));\n                col_coord.push((j, i));\n                i += 1;\n   \
    \             j += 1;\n            } else {\n                j += 1;\n       \
    \     }\n        }\n        coords.push(row_coord);\n        row_coords.push(row_coord);\n\
    \        col_coords.push(col_coord);\n    }\n    coords.sort_by_key(|x| x.0);\n\
    \    row_coords.sort_by_key(|x| x.0);\n    col_coords.sort_by_key(|x| x.1);\n\
    \    coords", "    let mut result = vec![];\n    for row in lst {\n        let\
    \ mut row_result = vec![];\n        for col in row.iter().rev() {\n          \
    \  if col == x {\n                row_result.push((row, col));\n            }\n\
    \        }\n        result.push(row_result);\n    }\n    result.sort_by(|a, b|\
    \ a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result", " \
    \   let mut result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ col_idx < cols {\n        while row_idx < rows {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                break;\n\
    \            }\n            row_idx += 1;\n        }\n        col_idx += 1;\n\
    \    }\n    result.sort_by_key(|&(_, y)| y.reverse());\n    result.sort_by_key(|&(_,\
    \ y)| y.reverse());\n    result", "    let mut result = Vec::new();\n    for row\
    \ in lst {\n        let mut row_result = Vec::new();\n        for col in row.iter().rev()\
    \ {\n            if col == x {\n                row_result.push((row.len(), col.len()));\n\
    \            }\n        }\n        result.push(row_result);\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.len());\n    result.sort_by_key(|&(_, y)| y.iter().rev().cloned());\n\
    \    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let\
    \ mut col_coords = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut\
    \ col_coord = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i\
    \ < rows {\n        row_coord.clear();\n        col_coord.clear();\n        row_coords.clear();\n\
    \        col_coords.clear();\n        while j < cols {\n            row_coord.push((i,\
    \ j));\n            col_coord.push((i, j));\n            row_coords.push((i, j));\n\
    \            col_coords.push((i, j));\n            i += 1;\n            j += 1;\n\
    \        }\n        if row_coord.iter().any(|&(_, y)| y == x) {\n            coords.push_back(row_coord);\n\
    \            coords.push_back(col_coord);\n        }\n    }\n    coords.sort_by_key(|&(_,\
    \ y)| y);\n    coords.sort_by_key(|&(_, y)| y, |&(_, y)| -y);\n    coords", " \
    \   let mut result = Vec::<(isize, isize)>::new();\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        while col_idx < cols {\n         \
    \   if lst[row_idx][col_idx] == x {\n                result.push((row_idx, col_idx));\n\
    \                break;\n            }\n            col_idx += 1;\n        }\n\
    \        col_idx = 0;\n        row_idx += 1;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx2\
    \ = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5\
    \ = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut row_", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    let mut col_len2 = col_len;\n    let mut col_len3 = col_len;\n\
    \    let mut col_len4 = col_len;\n    let mut col_len5 = col_len;\n    let mut\
    \ col_len6 = col_len;\n    let mut col_len7 = col_len;\n    let mut col_len8 =\
    \ col_len;\n    let mut col_len9 = col_len;\n    let mut col_len10 = col_len;\n\
    \    let mut col_len11 = col_len;\n    let mut col_len12 = col_len;\n    let mut\
    \ col_len13 = col_len;\n    let mut col_len14 = col_len;\n    let mut col_len15\
    \ = col_len;\n    let mut col_len16 = col_len;\n    let mut col_len17 = col_len;\n\
    \    let mut col_len18 = col_len;\n    let mut col_len19 = col_len;\n    let mut\
    \ col_len20 = col_len;\n    let mut col_len21 = col_len;\n    let mut col_len22\
    \ = col_len;\n    let mut col_len23 = col_len;\n    let mut col_len24 = col_len;\n\
    \    let mut col_len25 = col_len;\n    let mut col_len26 = col_len;\n    let mut\
    \ col_len27 = col_len;\n    let mut col_len28 = col_len;\n    let mut col_len29\
    \ = col_len;\n    let mut col_len30 = col_len;\n    let mut col_len31 = col_len;\n\
    \    let mut col_len32 = col_len;\n    let mut col_len33 = col_len;\n    let mut\
    \ col_len34 = col_len;\n    let mut col_len35 = col_len;\n    let mut col_len36\
    \ = col_len;\n    let mut col_len37 = col_len;\n    let mut col_len38 = col_len;\n\
    \    let mut col_len39 = col_len;\n    let mut col_len40 = col_len;\n    let mut\
    \ col_len41 = col_len;\n    let mut col_len42 = col_len;\n    let mut col_len43\
    \ = col_len;\n    let mut col_len44 = col_len;\n    let mut col_len45 = col_len;\n\
    \    let mut col_len46 = col_len;\n    let mut col_len47 = col_len;\n    let mut\
    \ col_len48 = col_len;\n    let mut col_len49 = col_"]
stop_tokens:
- "\n}"
